import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr-FR");
        printStream1.write((int) '#');
        printStream1.println((long) ' ');
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print(true);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        java.util.Locale locale2 = new java.util.Locale("\u97d3\u56fd\u8a9e", "");
        org.junit.Assert.assertEquals(locale2.toString(), "\u97d3\u56fd\u8a9e");
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale14 = new java.util.Locale("", "German (FRA,fr)", "Japanese");
        java.lang.String str15 = locale14.getDisplayCountry();
        java.lang.String str16 = locale6.getDisplayCountry(locale14);
        java.lang.String str17 = locale14.getDisplayScript();
        java.lang.String str18 = locale0.getDisplayCountry(locale14);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        double double22 = complex19.getReal();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex26.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.asin();
        boolean boolean32 = complex30.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex38 = complex36.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex40 = complex30.subtract(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex19.add(complex30);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex41.multiply(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.sinh();
        boolean boolean48 = locale0.equals((java.lang.Object) complex47);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr" + "'", str1, "fr");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale14.toString(), "_GERMAN (FRA,FR)_Japanese");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GERMAN (FRA,FR)" + "'", str15, "GERMAN (FRA,FR)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        boolean boolean13 = complex11.equals((java.lang.Object) 0L);
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        boolean boolean17 = complex14.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((-1));
        printStream1.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer28.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer18.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer8.transform(doubleArray51);
        java.io.PrintStream printStream58 = printStream1.printf("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray57);
        boolean boolean59 = printStream1.checkError();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream62 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream66 = printStream62.append((java.lang.CharSequence) "de-de", (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(printStream62);
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale2 = new java.util.Locale("hi!");
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getISO3Country();
        java.lang.String str5 = locale2.getDisplayScript();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category6);
        java.util.Locale locale12 = java.util.Locale.getDefault(category6);
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = locale2.getDisplayCountry(locale12);
        boolean boolean15 = locale12.hasExtensions();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.lang.String str20 = locale16.getISO3Language();
        java.lang.String str21 = locale16.getISO3Language();
        java.lang.String str22 = locale16.getVariant();
        java.lang.String str23 = locale12.getDisplayVariant(locale16);
        java.util.Locale.Builder builder24 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale locale26 = builder25.build();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getVariant();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale locale31 = locale28.stripExtensions();
        java.io.PrintStream printStream33 = new java.io.PrintStream("japonais");
        printStream33.write((int) 'a');
        printStream33.print(0.0f);
        java.io.PrintStream printStream39 = printStream33.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getCountry();
        java.lang.String str43 = locale41.getDisplayCountry();
        java.util.Locale.setDefault(category40, locale41);
        java.util.Locale locale45 = java.util.Locale.getDefault(category40);
        java.util.Locale locale46 = java.util.Locale.getDefault(category40);
        printStream39.print((java.lang.Object) locale46);
        java.lang.String str48 = locale28.getDisplayName(locale46);
        java.lang.String str49 = locale28.getISO3Country();
        java.lang.String str50 = locale27.getDisplayCountry(locale28);
        java.lang.String str51 = locale28.getCountry();
        java.lang.String str52 = locale26.getDisplayName(locale28);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "japonais" + "'", str48, "japonais");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u30ab\u30ca\u30c0" + "'", str50, "\u30ab\u30ca\u30c0");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str52, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.transform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        java.io.PrintStream printStream42 = new java.io.PrintStream("japonais");
        printStream42.print(0.0f);
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform(doubleArray53);
        java.io.PrintStream printStream55 = printStream42.format(locale45, "japonais", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray59);
        printStream55.print((java.lang.Object) doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer36.transform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer26.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer16.transform(doubleArray59);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray59, (double) ' ');
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.transform(doubleArray59);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.transform(univariateRealFunction69, (double) 0L, 120.0d, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 32.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 32.0]");
        org.junit.Assert.assertNotNull(complexArray68);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        printStream1.print((float) (-1));
        printStream1.print(true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer21.transform(doubleArray26);
        double[] doubleArray29 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.inversetransform2(doubleArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer16.transform(complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer16.inversetransform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer39.transform(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer38.inversetransform(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray46, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer16.inversetransform2(complexArray46);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException(throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException55);
        java.lang.Throwable[] throwableArray57 = functionEvaluationException55.getSuppressed();
        java.lang.Throwable[] throwableArray58 = functionEvaluationException55.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException(0.7350525871447157d, "", (java.lang.Object[]) complexArray49, (java.lang.Throwable) functionEvaluationException55);
        java.lang.Object[] objArray60 = functionEvaluationException59.getArguments();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("fr-fr");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(1.0d, (java.lang.Throwable) mathException63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("chinois (taiwan)_GERMAN (FRA,FR)_org.apache.commons.math.MathException: Franz\366sisch", objArray60, (java.lang.Throwable) functionEvaluationException64);
        java.io.PrintStream printStream66 = printStream1.format("\u30d5\u30e9\u30f3\u30b9\u8a9e_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION_und", objArray60);
        printStream66.print(1.5707963267948966d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(printStream66);
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException(throwable6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException8);
        java.lang.Throwable[] throwableArray10 = functionEvaluationException8.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) 100, (java.lang.Throwable) mathException11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, (java.lang.Throwable) functionEvaluationException12);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter19 = printWriter17.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        double[] doubleArray34 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer21.transform(complexArray35);
        java.io.PrintWriter printWriter37 = printWriter17.format("ja", (java.lang.Object[]) complexArray35);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.println(' ');
        printWriter40.println((long) (-1));
        printWriter40.println((java.lang.Object) "");
        boolean boolean47 = printWriter40.checkError();
        java.util.Locale locale48 = null;
        java.lang.String[] strArray52 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray52);
        java.io.PrintWriter printWriter54 = printWriter40.format(locale48, "zho", (java.lang.Object[]) strArray52);
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("japonais", (java.lang.Object[]) strArray52, throwable55);
        java.lang.String str57 = mathException56.getPattern();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: japonais", (java.lang.Object[]) complexArray35, (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: japonais", (java.lang.Throwable) mathException56);
        functionEvaluationException12.addSuppressed((java.lang.Throwable) mathException56);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "japonais" + "'", str57, "japonais");
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("Chine", strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("fr", strMap29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray36 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList37);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = locale40.getDisplayScript();
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleKeys();
        java.lang.String str44 = locale40.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.toLanguageTag();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getISO3Language();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.toLanguageTag();
        boolean boolean57 = locale55.hasExtensions();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.getDisplayScript();
        java.util.Set<java.lang.String> strSet61 = locale58.getUnicodeLocaleKeys();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale63.getDisplayCountry();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = locale67.getISO3Country();
        java.lang.String str69 = locale67.getDisplayScript();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleKeys();
        java.lang.String str71 = locale67.getISO3Language();
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale40, locale45, locale46, locale50, locale51, locale54, locale55, locale58, locale62, locale63, locale65, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale locale75 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Locale locale76 = java.util.Locale.lookup(languageRangeList30, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.parse("FR", strMap78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList79, strMap80);
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        java.lang.String str83 = locale82.getISO3Country();
        java.util.Locale locale84 = java.util.Locale.JAPANESE;
        java.lang.String str85 = locale84.getLanguage();
        java.lang.String str86 = locale82.getDisplayName(locale84);
        java.lang.String str87 = locale84.getDisplayScript();
        java.util.Set<java.lang.String> strSet88 = locale84.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList81, (java.util.Collection<java.lang.String>) strSet88, filteringMode89);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList73, filteringMode89);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList91);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fr" + "'", str47, "fr");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fra" + "'", str49, "fra");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr" + "'", str56, "fr");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertNotNull(languageRangeList81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ja" + "'", str85, "ja");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str86, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayLanguage();
        java.lang.String str5 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chinois" + "'", str4, "chinois");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.print((long) (short) 10);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream9, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream9);
        printWriter12.print((double) 10L);
        java.io.PrintWriter printWriter16 = printWriter12.append('4');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        double[] doubleArray34 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer21.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer21.inversetransform(complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer43.inversetransform(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray53 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray51, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer21.inversetransform2(complexArray51);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException60);
        java.lang.Throwable[] throwableArray62 = functionEvaluationException60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = functionEvaluationException60.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(0.7350525871447157d, "", (java.lang.Object[]) complexArray54, (java.lang.Throwable) functionEvaluationException60);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("Chinesisch", (java.lang.Object[]) complexArray54);
        java.io.PrintWriter printWriter66 = printWriter12.format("chinois (taiwan)_GERMAN (FRA,FR)_org.apache.commons.math.MathException: Franz\366sisch", (java.lang.Object[]) complexArray54);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(printWriter66);
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.functionevaluationexception: fr");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.toLanguageTag();
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.write((int) 'a');
        printStream5.print(0.0f);
        java.io.PrintStream printStream11 = printStream5.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.toLanguageTag();
        java.lang.String str15 = locale12.getISO3Language();
        printStream5.println((java.lang.Object) locale12);
        java.lang.String str17 = locale12.getScript();
        java.lang.String str18 = locale1.getDisplayLanguage(locale12);
        java.lang.String str19 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale3.getDisplayName(locale5);
        java.lang.String str8 = locale3.getLanguage();
        java.lang.String str9 = locale0.getDisplayName(locale3);
        java.lang.String str10 = locale3.getDisplayName();
        java.lang.String str11 = locale3.getVariant();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getScript();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.lang.String str16 = locale3.getDisplayVariant(locale12);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.lang.String str20 = locale12.getDisplayScript(locale18);
        java.util.Set<java.lang.Character> charSet21 = locale12.getExtensionKeys();
        java.lang.String str22 = locale12.getDisplayLanguage();
        java.lang.String str23 = locale12.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ja" + "'", str6, "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str7, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois" + "'", str9, "chinois");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fran\347ais" + "'", str10, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(charSet21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "japonais" + "'", str22, "japonais");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        java.util.Locale locale2 = new java.util.Locale("jp", "org.apache.commons.math.FunctionEvaluationException: Korean");
        org.junit.Assert.assertEquals(locale2.toString(), "jp_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: KOREAN");
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray12 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList22, filteringMode25);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList34);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale37.getDisplayScript();
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.lang.String str41 = locale37.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.toLanguageTag();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getLanguage();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.toLanguageTag();
        boolean boolean54 = locale52.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleKeys();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getISO3Country();
        java.lang.String str66 = locale64.getDisplayScript();
        java.util.Set<java.lang.String> strSet67 = locale64.getUnicodeLocaleKeys();
        java.lang.String str68 = locale64.getISO3Language();
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale37, locale42, locale43, locale47, locale48, locale51, locale52, locale55, locale59, locale60, locale62, locale63, locale64 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale locale72 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList70);
        printWriter1.print((java.lang.Object) languageRangeList5);
        printWriter1.println(0);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("");
        java.lang.Object[] objArray80 = mathException79.getArguments();
        java.io.PrintWriter printWriter81 = printWriter1.format("chinois", objArray80);
        java.io.PrintWriter printWriter83 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: hi!");
        printWriter1.println(false);
        printWriter1.println("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fr" + "'", str53, "fr");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fra" + "'", str68, "fra");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printWriter83);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(10.0f);
        printWriter1.flush();
        printWriter1.print("");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        printStream1.print(false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(true);
        boolean boolean16 = printStream13.checkError();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream13, true);
        boolean boolean19 = printStream13.checkError();
        printStream13.print("fr-FR");
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.print(true);
        printStream23.println((float) (short) 10);
        printStream23.print((long) (short) 10);
        java.io.PrintStream printStream31 = printStream23.append((java.lang.CharSequence) "fr");
        printStream31.flush();
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.write((int) 'a');
        printStream34.print(0.0f);
        java.io.PrintStream printStream40 = printStream34.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream34.println((float) (short) 1);
        java.io.PrintStream printStream44 = new java.io.PrintStream("japonais");
        printStream44.print(0.0f);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        java.io.PrintStream printStream57 = printStream44.format(locale47, "japonais", (java.lang.Object[]) complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray61);
        printStream57.print((java.lang.Object) doubleArray61);
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream57.write(byteArray68);
        printStream34.write(byteArray68, 0, 0);
        printStream31.write(byteArray68);
        printStream13.write(byteArray68);
        printStream1.write(byteArray68);
        java.io.PrintStream printStream77 = new java.io.PrintStream("japonais");
        printStream77.print(true);
        boolean boolean80 = printStream77.checkError();
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.OutputStream) printStream77, true);
        boolean boolean83 = printStream77.checkError();
        java.io.PrintStream printStream84 = new java.io.PrintStream((java.io.OutputStream) printStream77);
        printStream77.print((float) (byte) -1);
        printStream77.println("\u65e5\u672c\u8a9e");
        printStream77.println();
        printStream1.println((java.lang.Object) printStream77);
        byte[] byteArray93 = new byte[] { (byte) 0, (byte) 0 };
        printStream1.write(byteArray93);
        printStream1.println((long) (byte) 100);
        printStream1.println(1.557407724654902d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[0, 0]");
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("German (FRA,fr)", "\u65e5\u6587");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.FunctionEvaluationException: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.negate();
        org.apache.commons.math.complex.Complex complex8 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex4.subtract(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex9.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.lang.String str5 = locale2.getVariant();
        java.lang.String str6 = locale2.toLanguageTag();
        java.lang.String str8 = locale2.getUnicodeLocaleType("de");
        java.util.Locale.Builder builder9 = builder1.setLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setRegion("English");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: English [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ja" + "'", str6, "ja");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream11.println(true);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.format("", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.write((int) 'a');
        printStream25.print(0.0f);
        java.io.PrintStream printStream31 = printStream25.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.getISO3Language();
        printStream25.println((java.lang.Object) locale32);
        java.util.Locale locale38 = new java.util.Locale("fra");
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.lang.String str42 = locale32.getDisplayScript(locale38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer44.inversetransform(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, (double) (-1));
        java.io.PrintStream printStream64 = printStream23.format(locale32, "allemand", (java.lang.Object[]) complexArray63);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter((java.io.OutputStream) printStream23);
        printStream23.println(false);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.OutputStream) printStream23);
        printWriter68.println("");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals(locale38.toString(), "fra");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        printStream5.println(' ');
        java.io.PrintStream printStream20 = printStream5.append((java.lang.CharSequence) "Etats-Unis");
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream20, false);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex15.multiply(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex15.exp();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex20.add(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex20.atan();
        org.apache.commons.math.complex.Complex complex26 = complex20.atan();
        org.apache.commons.math.complex.Complex complex27 = complex10.pow(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.atan();
        org.apache.commons.math.complex.Complex complex29 = complex26.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.sinh();
        double double13 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex14.divide(complex19);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        org.apache.commons.math.complex.Complex complex27 = complex26.negate();
        org.apache.commons.math.complex.Complex complex28 = complex24.multiply(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex30 = complex19.divide(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt1z();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex39 = complex37.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex38.asin();
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        double double43 = complex42.getReal();
        org.apache.commons.math.complex.Complex complex44 = complex33.add(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex32.multiply(complex33);
        org.apache.commons.math.complex.Complex complex46 = complex5.pow(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.println((int) (byte) 0);
        boolean boolean9 = printWriter4.checkError();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter11.println(' ');
        printWriter11.println((long) (-1));
        printWriter11.println((java.lang.Object) "");
        printWriter11.println();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getScript();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.lang.String str22 = locale19.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        java.io.PrintWriter printWriter29 = printWriter11.printf(locale19, "ja", (java.lang.Object[]) complexArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("japonais");
        printStream32.write((int) 'a');
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter37.println(' ');
        printWriter37.print((float) 10L);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter44.println(' ');
        printWriter44.println((long) (-1));
        printWriter44.println((java.lang.Object) "");
        printWriter44.println();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale52.getScript();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.lang.String str55 = locale52.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        java.io.PrintWriter printWriter62 = printWriter44.printf(locale52, "ja", (java.lang.Object[]) complexArray61);
        java.io.PrintWriter printWriter63 = printWriter37.format("", (java.lang.Object[]) complexArray61);
        java.io.PrintStream printStream64 = printStream32.format("de", (java.lang.Object[]) complexArray61);
        java.io.PrintStream printStream65 = new java.io.PrintStream((java.io.OutputStream) printStream64);
        java.util.Locale locale67 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray77 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, (double) (byte) 10);
        java.io.PrintStream printStream78 = printStream65.printf(locale67, "Franz\366sisch", (java.lang.Object[]) complexArray77);
        java.io.PrintWriter printWriter79 = printWriter29.printf("ja_JP", (java.lang.Object[]) complexArray77);
        printWriter29.println('4');
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        printWriter4.println((java.lang.Object) printWriter82);
        printWriter82.print((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((long) 'a');
        printStream33.print(false);
        printStream33.println((float) 100);
        printStream33.flush();
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        java.util.Locale locale2 = new java.util.Locale("zho", "org.apache.commons.math.functionevaluationexception: fr (ANGLAIS,Chine)");
        org.junit.Assert.assertEquals(locale2.toString(), "zho_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FR (ANGLAIS,CHINE)");
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = complex0.tan();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex5.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex3.divide(complex5);
        org.apache.commons.math.complex.Complex complex13 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex13.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("twn");
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = complex22.pow(complex23);
        boolean boolean28 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex29 = complex23.exp();
        org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) (byte) 10, 0.7350525871447157d);
        org.apache.commons.math.complex.Complex complex33 = complex23.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex23.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.getDefault(category4);
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder14 = builder0.clear();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder15.setLanguage("de");
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale20.getDisplayCountry();
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Locale.Builder builder25 = builder18.setLocale(locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.util.Locale.Builder builder27 = builder14.setLocale(locale24);
        java.util.Locale locale28 = builder14.build();
        java.util.Locale locale29 = java.util.Locale.US;
        java.lang.String str30 = locale29.getDisplayVariant();
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str33 = locale29.getExtension('u');
        java.util.Set<java.lang.Character> charSet34 = locale29.getExtensionKeys();
        java.lang.String str35 = locale28.getDisplayLanguage(locale29);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en-US" + "'", str31, "en-US");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "French" + "'", str35, "French");
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex8.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex16.subtract(complex25);
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex25.multiply(complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex38 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex32.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex29.subtract(complex39);
        double double41 = complex40.getReal();
        org.apache.commons.math.complex.Complex complex42 = complex0.pow(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex0.exp();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex47.tanh();
        org.apache.commons.math.complex.Complex complex49 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex43.pow(complex48);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex54 = complex51.cos();
        org.apache.commons.math.complex.Complex complex55 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex51.acos();
        org.apache.commons.math.complex.Complex complex57 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex43.subtract(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex58.log();
        org.apache.commons.math.complex.Complex complex60 = complex58.acos();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println();
        java.io.PrintStream printStream57 = new java.io.PrintStream("japonais");
        printStream57.print(0.0f);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        java.io.PrintStream printStream70 = printStream57.format(locale60, "japonais", (java.lang.Object[]) complexArray69);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray69, throwable71);
        java.io.PrintStream printStream73 = printStream1.format("ja", (java.lang.Object[]) complexArray69);
        printStream73.print(0.8414709848078965d);
        java.io.PrintStream printStream77 = printStream73.append('4');
        printStream77.flush();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(printStream77);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getLanguage();
        printWriter1.print((java.lang.Object) str10);
        printWriter1.write("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.write((int) 'a');
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter21.println(' ');
        printWriter21.print((float) 10L);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter28.println(' ');
        printWriter28.println((long) (-1));
        printWriter28.println((java.lang.Object) "");
        printWriter28.println();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getScript();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.lang.String str39 = locale36.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer41.inversetransform2(doubleArray44);
        java.io.PrintWriter printWriter46 = printWriter28.printf(locale36, "ja", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter47 = printWriter21.format("", (java.lang.Object[]) complexArray45);
        java.io.PrintStream printStream48 = printStream16.format("de", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter49 = printWriter1.format("French", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter51 = printWriter1.append((java.lang.CharSequence) "allemand");
        printWriter1.close();
        printWriter1.println("etats-unis");
        printWriter1.println();
        printWriter1.print((float) 0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println(' ');
        printWriter2.println(false);
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(true);
        boolean boolean11 = printStream8.checkError();
        printStream8.println();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale13.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer16.inversetransform(complexArray32);
        java.io.PrintStream printStream34 = printStream8.printf(locale13, "de", (java.lang.Object[]) complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer36.transform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer46.transform(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer36.inversetransform(complexArray52);
        java.io.PrintWriter printWriter54 = printWriter2.format(locale13, "GB", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform2(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        java.io.PrintStream printStream62 = new java.io.PrintStream("japonais");
        printStream62.print(0.0f);
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet66 = locale65.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer68.transform(doubleArray73);
        java.io.PrintStream printStream75 = printStream62.format(locale65, "japonais", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray79);
        printStream75.print((java.lang.Object) doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer56.transform2(doubleArray79);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer56.inversetransform(complexArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform(complexArray88);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ja" + "'", str14, "ja");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("Italian", "JPN");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: JPN");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 100.0f, 0.7456241416655579d);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer0.transform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray41, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.transform(doubleArray48);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.transform2(univariateRealFunction50, (double) ' ', (double) (-1L), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [32.0, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean3 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex4.exp();
        org.apache.commons.math.complex.Complex complex8 = complex2.subtract(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex8.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        double double20 = complex17.getReal();
        org.apache.commons.math.complex.Complex complex21 = complex17.asin();
        org.apache.commons.math.complex.Complex complex22 = complex16.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex22.acos();
        org.apache.commons.math.complex.Complex complex25 = complex22.acos();
        org.apache.commons.math.complex.Complex complex26 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex14.add(complex22);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex29.multiply(complex32);
        boolean boolean34 = complex32.isNaN();
        org.apache.commons.math.complex.Complex complex35 = complex32.atan();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        boolean boolean37 = complex27.equals((java.lang.Object) complex36);
        org.apache.commons.math.complex.Complex complex38 = complex11.add(complex36);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex0.asin();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex8.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.acos();
        org.apache.commons.math.complex.Complex complex12 = complex9.cos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cos();
        org.apache.commons.math.complex.Complex complex15 = complex13.cos();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex23 = complex22.acos();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex21.multiply(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex25.log();
        org.apache.commons.math.complex.Complex complex27 = complex17.subtract(complex26);
        double double28 = complex26.abs();
        org.apache.commons.math.complex.Complex complex29 = complex26.negate();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        boolean boolean34 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex35 = complex29.add(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.exp();
        org.apache.commons.math.complex.Complex complex37 = complex0.multiply(complex33);
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder38.clear();
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale42.getCountry();
        java.lang.String str44 = locale41.getDisplayCountry(locale42);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = locale45.getCountry();
        java.lang.String str47 = locale42.getDisplayName(locale45);
        java.util.Locale.Builder builder48 = builder40.setLocale(locale45);
        java.util.Locale.Builder builder50 = builder40.setLanguageTag("Japanese");
        java.util.Locale locale51 = builder50.build();
        java.util.Locale.Builder builder54 = builder50.setExtension('a', "ja");
        java.util.Locale.Builder builder55 = builder50.clear();
        boolean boolean56 = complex37.equals((java.lang.Object) builder55);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "FR" + "'", str46, "FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fran\347ais" + "'", str47, "fran\347ais");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print('a');
        java.lang.Object[] objArray21 = null;
        java.io.PrintWriter printWriter22 = printWriter1.format("und", objArray21);
        printWriter22.println("org.apache.commons.math.FunctionEvaluationException");
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(true);
        boolean boolean30 = printStream27.checkError();
        printStream27.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.transform2(doubleArray40);
        java.io.PrintStream printStream44 = printStream27.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray43);
        java.io.PrintWriter printWriter45 = printWriter22.format("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray43);
        printWriter22.println(false);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer49.inversetransform(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, 0.0d);
        java.io.PrintWriter printWriter60 = printWriter22.printf("Chinesisch (China)", (java.lang.Object[]) complexArray59);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printWriter60);
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        java.util.Locale locale2 = new java.util.Locale("ITA", "en-US");
        org.junit.Assert.assertEquals(locale2.toString(), "ita_EN-US");
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println(false);
        java.io.PrintStream printStream29 = new java.io.PrintStream("japonais");
        printStream29.print(true);
        boolean boolean32 = printStream29.checkError();
        printStream29.println();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer37.inversetransform(complexArray53);
        java.io.PrintStream printStream55 = printStream29.printf(locale34, "de", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer57.inversetransform(complexArray73);
        java.io.PrintWriter printWriter75 = printWriter23.format(locale34, "GB", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer21.inversetransform2(complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.inversetransform2(complexArray74);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform2(univariateRealFunction78, Double.NEGATIVE_INFINITY, (double) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ja" + "'", str35, "ja");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println("Chinesisch");
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException(throwable10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException12);
        java.lang.Throwable[] throwableArray14 = functionEvaluationException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = functionEvaluationException12.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.format("hi!", (java.lang.Object[]) throwableArray15);
        printStream16.print((double) (short) 1);
        printStream16.println(false);
        printStream16.print(0.0d);
        printStream16.println("");
        java.io.PrintStream printStream26 = printStream16.append((java.lang.CharSequence) "\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
        printStream26.println(100);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.0d), (double) '#');
        java.lang.Object obj3 = null;
        boolean boolean4 = complex2.equals(obj3);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex10.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.acos();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex11.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex23.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.acos();
        double double27 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex18.add(complex24);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex29.cos();
        org.apache.commons.math.complex.Complex complex32 = complex28.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex6.divide(complex28);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.tanh();
        double double37 = complex36.getReal();
        org.apache.commons.math.complex.Complex complex38 = complex6.multiply(complex36);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex45.negate();
        org.apache.commons.math.complex.Complex complex47 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex43.subtract(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex43.exp();
        org.apache.commons.math.complex.Complex complex51 = complex38.divide(complex50);
        double double52 = complex50.getReal();
        org.apache.commons.math.complex.Complex complex53 = complex2.pow(complex50);
        org.apache.commons.math.complex.Complex complex54 = complex2.atan();
        boolean boolean55 = complex2.isNaN();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4.1132503787829275d + "'", double52 == 4.1132503787829275d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Evaluation failed for argument = -1");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Evaluation failed for argument = -1");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_CN");
        java.io.PrintStream printStream3 = new java.io.PrintStream("allemand");
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(true);
        boolean boolean8 = printStream5.checkError();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer13.inversetransform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        double[] doubleArray26 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer13.transform(complexArray27);
        java.io.PrintStream printStream29 = printStream5.format(locale11, "fr", (java.lang.Object[]) complexArray28);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable31);
        printStream5.print((java.lang.Object) throwable31);
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(true);
        printStream35.println((float) (short) 10);
        printStream35.print((long) (short) 10);
        java.io.PrintStream printStream43 = printStream35.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream45 = new java.io.PrintStream("japonais");
        printStream45.print(0.0f);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        java.io.PrintStream printStream58 = printStream45.format(locale48, "japonais", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        printStream58.print((java.lang.Object) doubleArray62);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.print(0);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter71.println(' ');
        printWriter71.println((long) (-1));
        printWriter71.println((java.lang.Object) "");
        char[] charArray84 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter71.println(charArray84);
        printWriter67.println(charArray84);
        printStream58.print(charArray84);
        printStream35.print(charArray84);
        printStream5.print(charArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) -1 };
        printStream5.write(byteArray92);
        printStream3.write(byteArray92);
        printStream1.write(byteArray92);
        printStream1.println((long) '4');
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, -1]");
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.util.Locale locale3 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer6.inversetransform2(doubleArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray10);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        java.io.PrintWriter printWriter13 = printWriter1.printf(locale3, "zho", objArray12);
        printWriter1.print(1.0f);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println((int) (byte) 100);
        printWriter1.print(0.7456241416655579d);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.acos();
        org.apache.commons.math.complex.Complex complex6 = complex0.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream14.print((int) '4');
        java.io.PrintStream printStream18 = printStream14.append('u');
        printStream14.println((int) 'x');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(printStream18);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("UNITED STATES", 0.7075128122711367d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=united states");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale.Builder builder7 = builder3.setLanguage("");
        java.util.Locale.Builder builder9 = builder3.setLanguage("francese");
        java.util.Locale.Builder builder11 = builder9.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguageTag("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.MathException: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        boolean boolean9 = printStream7.checkError();
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        double[] doubleArray39 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer31.inversetransform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer26.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer26.inversetransform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer49.transform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer48.inversetransform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer26.inversetransform2(complexArray56);
        java.io.PrintStream printStream60 = printStream7.printf(locale14, "German (FRA,fr)", (java.lang.Object[]) complexArray56);
        printStream60.println();
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream60, true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter67 = printWriter63.append((java.lang.CharSequence) "JP", 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream60);
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.MathException: United States");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.mathexception: united states");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.mathexception: united states" + "'", str2, "org.apache.commons.math.mathexception: united states");
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex29.multiply(complex32);
        double double34 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex40 = complex38.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex39.acos();
        org.apache.commons.math.complex.Complex complex42 = complex39.cos();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cos();
        org.apache.commons.math.complex.Complex complex45 = complex43.cos();
        org.apache.commons.math.complex.Complex complex46 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex39.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = complex49.cos();
        org.apache.commons.math.complex.Complex complex53 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex54 = complex49.sin();
        org.apache.commons.math.complex.Complex complex55 = complex48.pow(complex49);
        org.apache.commons.math.complex.Complex complex56 = complex33.divide(complex48);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        double double59 = complex57.getImaginary();
        org.apache.commons.math.complex.Complex complex60 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex62 = complex60.divide(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex61.exp();
        org.apache.commons.math.complex.Complex complex64 = complex63.log();
        org.apache.commons.math.complex.Complex complex65 = complex63.sin();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt1z();
        org.apache.commons.math.complex.Complex complex68 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex70 = complex69.acos();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        boolean boolean72 = complex68.equals((java.lang.Object) complex70);
        org.apache.commons.math.complex.Complex complex73 = complex65.divide(complex70);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        double double76 = complex74.getImaginary();
        double double77 = complex74.abs();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        double double80 = complex78.getImaginary();
        org.apache.commons.math.complex.Complex complex81 = complex74.add(complex78);
        org.apache.commons.math.complex.Complex complex82 = complex73.subtract(complex78);
        org.apache.commons.math.complex.Complex complex83 = complex78.asin();
        org.apache.commons.math.complex.Complex complex84 = complex48.divide(complex83);
        org.apache.commons.math.complex.Complex complex85 = complex27.pow(complex48);
        org.apache.commons.math.complex.Complex complex86 = complex85.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print((int) (short) 1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(0.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream9, true);
        printStream13.print((float) (short) -1);
        printStream13.print('a');
        printStream13.print((float) (-1L));
        java.io.PrintStream printStream21 = new java.io.PrintStream("japonais");
        printStream21.print(true);
        boolean boolean24 = printStream21.checkError();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream21, true);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        double[] doubleArray42 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer29.transform(complexArray43);
        java.io.PrintStream printStream45 = printStream21.format(locale27, "fr", (java.lang.Object[]) complexArray44);
        printStream45.print((float) 'u');
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter51 = printWriter49.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter53 = printWriter51.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean58 = printWriter57.checkError();
        java.io.PrintWriter printWriter60 = printWriter57.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter57);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.println(' ');
        printWriter63.println((long) (-1));
        printWriter63.println((java.lang.Object) "");
        char[] charArray76 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter63.println(charArray76);
        printWriter57.write(charArray76);
        printWriter55.write(charArray76);
        printWriter53.write(charArray76);
        printStream45.println(charArray76);
        printStream13.println(charArray76);
        printWriter1.println(charArray76);
        java.io.PrintWriter printWriter85 = printWriter1.append('a');
        printWriter1.print((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter85);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: fr-fr", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.println('#');
        printStream1.print("japonais");
        printStream1.println("Franz\366sisch");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream13 = printStream1.append('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer15.transform(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.transform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer14.transform(doubleArray30);
        printStream13.print((java.lang.Object) fastFourierTransformer14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        double[] doubleArray45 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer47.inversetransform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer37.transform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer58.inversetransform(doubleArray64);
        double[] doubleArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray64, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer37.transform(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray64);
        double[] doubleArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray64, (double) 10L);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer14.inversetransform2(doubleArray64);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer14.inversetransform2(univariateRealFunction74, 0.0d, 0.0d, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-350.0, -1000.0, -0.0, -520.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-350.0, -1000.0, -0.0, -520.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-350.0, -1000.0, -0.0, -520.0]");
        org.junit.Assert.assertNotNull(complexArray73);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("");
        java.lang.Object[] objArray2 = mathException1.getArguments();
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(0.7456241416655579d, "italien", throwable5);
        mathException1.addSuppressed((java.lang.Throwable) functionEvaluationException6);
        java.lang.String str8 = mathException1.toString();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.MathException: " + "'", str8, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter16.println((double) 'a');
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex1.multiply(complex4);
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.tan();
        org.apache.commons.math.complex.Complex complex8 = complex4.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5669767943827975d + "'", double6 == 0.5669767943827975d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex5.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex14.cosh();
        double double19 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex5.add(complex18);
        double double21 = complex18.abs();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex27 = complex25.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex28.divide(complex33);
        double double35 = complex33.getReal();
        org.apache.commons.math.complex.Complex complex36 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex37 = complex18.add(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.asin();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        double double40 = complex39.abs();
        org.apache.commons.math.complex.Complex complex41 = complex39.tan();
        double double42 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = complex39.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5403023058681398d + "'", double21 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.7350525871447157d + "'", double35 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer5.transform2(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.transform(doubleArray39);
        double[] doubleArray44 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray39, 0.5669767943827975d);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray39, (double) (short) 10);
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray39, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-198.44187803397912, -566.9767943827975, -0.0, -294.8279330790547]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-198.44187803397912, -566.9767943827975, -0.0, -294.8279330790547]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-198.44187803397912, -566.9767943827975, -0.0, -294.8279330790547]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-198.44187803397912, -566.9767943827975, -0.0, -294.8279330790547]");
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        java.util.Locale locale3 = new java.util.Locale("Franz\366sisch", "fr_FR", "\u4e2d\u56fd\u8a9e");
        java.util.Locale.setDefault(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "franz\366\u4e2d\u56fd\u8a9e");
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex11);
        double double13 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex4.divide(complex11);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("FR");
        java.util.Locale.Builder builder20 = builder17.clear();
        java.util.Locale.Builder builder22 = builder17.setScript("");
        java.util.Locale.Builder builder24 = builder22.setLanguage("deu");
        boolean boolean25 = complex14.equals((java.lang.Object) builder22);
        java.util.Locale locale26 = builder22.build();
        java.util.Locale.setDefault(locale26);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = locale28.getDisplayScript(locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("zh");
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale29.getDisplayVariant(locale32);
        java.lang.String str35 = locale29.getDisplayLanguage();
        java.lang.String str36 = locale29.getCountry();
        java.lang.String str37 = locale26.getDisplayScript(locale29);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.7350525871447157d + "'", double13 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "deu");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "German" + "'", str35, "German");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DE" + "'", str36, "DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "org.apache.commons.math.MathException");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream33.print((int) (short) 10);
        printStream33.println();
        java.io.PrintStream printStream44 = printStream33.append((java.lang.CharSequence) "\u4e2d\u56fd\u8a9e");
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream44);
        java.io.PrintStream printStream47 = printStream45.append((java.lang.CharSequence) "\u975e\u78ba\u5b9a (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)");
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream45, true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream47);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.functionevaluationexception: chinesisch");
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getDisplayScript();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale1.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        java.lang.String str19 = locale15.getISO3Language();
        java.lang.String str20 = locale15.getISO3Language();
        java.lang.String str21 = locale15.getVariant();
        java.lang.String str22 = locale11.getDisplayVariant(locale15);
        java.lang.String str23 = locale15.toLanguageTag();
        java.lang.String str24 = locale15.toLanguageTag();
        java.lang.String str25 = locale15.getCountry();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getISO3Country();
        java.lang.String str30 = locale27.getDisplayScript();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale locale36 = java.util.Locale.getDefault(category31);
        java.util.Locale locale37 = java.util.Locale.getDefault(category31);
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale27.getDisplayCountry(locale37);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.toLanguageTag();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getLanguage();
        java.util.Locale locale45 = new java.util.Locale("hi!");
        java.lang.String str46 = locale45.getISO3Country();
        java.lang.String str47 = locale40.getDisplayName(locale45);
        java.lang.String str48 = locale27.getDisplayScript(locale45);
        java.lang.String str49 = locale15.getDisplayCountry(locale45);
        java.lang.String str50 = locale15.getLanguage();
        java.lang.String str51 = locale15.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr" + "'", str41, "fr");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr" + "'", str43, "fr");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "French" + "'", str47, "French");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer5.transform(doubleArray10);
        double[] doubleArray13 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        double[] doubleArray37 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer29.inversetransform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer24.transform(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer41.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer0.transform(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        java.io.PrintStream printStream58 = new java.io.PrintStream("japonais");
        printStream58.print(0.0f);
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        java.io.PrintStream printStream71 = printStream58.format(locale61, "japonais", (java.lang.Object[]) complexArray70);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer72.inversetransform2(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        printStream71.print((java.lang.Object) doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer52.transform2(doubleArray75);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, Double.NaN);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray83);
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale14 = new java.util.Locale("fra");
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale14.getDisplayScript(locale16);
        java.util.Locale locale18 = locale14.stripExtensions();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category0);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        java.util.Locale locale23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals(locale14.toString(), "fra");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fra");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fra");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fra");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fra");
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter5 = printWriter3.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean8 = printWriter7.checkError();
        java.io.PrintWriter printWriter10 = printWriter7.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter13.println(' ');
        printWriter13.println((long) (-1));
        printWriter13.println((java.lang.Object) "");
        char[] charArray26 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter13.println(charArray26);
        printWriter7.write(charArray26);
        printWriter5.write(charArray26);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(0.0f);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        java.io.PrintStream printStream44 = printStream31.format(locale34, "japonais", (java.lang.Object[]) complexArray43);
        printStream44.print((int) '4');
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter48.println(' ');
        printWriter48.println((long) (-1));
        printWriter48.println((java.lang.Object) "");
        char[] charArray61 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter48.println(charArray61);
        printWriter48.println(10);
        printWriter48.print('a');
        char[] charArray67 = new char[] {};
        printWriter48.println(charArray67);
        printStream44.println(charArray67);
        printWriter5.print(charArray67);
        printWriter5.print("GB");
        printWriter5.println(true);
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter5.write("org.apache.commons.math.MathException: Evaluation failed for argument = 52");
        printWriter5.print(0.21431630255703113d);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printWriter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException(throwable5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException7);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException(throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException14);
        java.lang.String str16 = functionEvaluationException14.getPattern();
        functionEvaluationException7.addSuppressed((java.lang.Throwable) functionEvaluationException14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "org.apache.commons.math.functionevaluationexception: hi!", (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException7);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex7.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex15.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex21.tan();
        org.apache.commons.math.complex.Complex complex23 = complex13.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex25.cos();
        org.apache.commons.math.complex.Complex complex29 = complex13.add(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex25.acos();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex31.sinh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex36 = complex34.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.acos();
        org.apache.commons.math.complex.Complex complex38 = complex35.negate();
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.apache.commons.math.complex.Complex complex40 = complex39.acos();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.getImaginary();
        double double44 = complex41.getReal();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex50 = complex48.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.acos();
        org.apache.commons.math.complex.Complex complex52 = complex51.asin();
        boolean boolean54 = complex52.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex60 = complex58.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.sinh();
        org.apache.commons.math.complex.Complex complex62 = complex52.subtract(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex41.add(complex52);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex65 = complex64.acos();
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex67 = complex65.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex63.multiply(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex39.divide(complex67);
        org.apache.commons.math.complex.Complex complex70 = complex39.asin();
        org.apache.commons.math.complex.Complex complex71 = complex30.divide(complex70);
        double double72 = complex71.abs();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        double double75 = complex73.getImaginary();
        org.apache.commons.math.complex.Complex complex76 = complex73.asin();
        org.apache.commons.math.complex.Complex complex77 = complex71.multiply(complex73);
        org.apache.commons.math.complex.Complex complex78 = complex71.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayScript();
        java.util.Locale locale6 = new java.util.Locale("ja", "");
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str8 = locale6.toLanguageTag();
        java.lang.String str9 = locale0.getDisplayScript(locale6);
        java.lang.String str10 = locale6.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Japanese" + "'", str7, "Japanese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja" + "'", str8, "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.print((long) (short) 10);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter11.println(' ');
        printWriter11.println((long) (-1));
        printWriter11.println((java.lang.Object) "");
        char[] charArray24 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter11.println(charArray24);
        printWriter11.println(10);
        printWriter11.print('a');
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.println((long) (-1));
        printWriter31.println((java.lang.Object) "");
        char[] charArray44 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter31.println(charArray44);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter31, true);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.print(0);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter53.println(' ');
        printWriter53.println((long) (-1));
        printWriter53.println((java.lang.Object) "");
        char[] charArray66 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter53.println(charArray66);
        printWriter49.println(charArray66);
        printWriter47.write(charArray66);
        printWriter11.write(charArray66, (int) (short) 0, 1);
        printStream1.println(charArray66);
        printStream1.print("French");
        java.io.PrintStream printStream77 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream81 = printStream1.append((java.lang.CharSequence) "deu");
        printStream1.println((long) (byte) 1);
        printStream1.print('4');
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("chine", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("FR", strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList18, strMap19);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getISO3Country();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getLanguage();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = locale23.getDisplayScript();
        java.util.Set<java.lang.String> strSet27 = locale23.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strSet27, filteringMode28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.parse("FR", strMap44);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.lang.String[] strArray51 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleKeys();
        java.lang.String str59 = locale55.getISO3Language();
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = locale61.toLanguageTag();
        boolean boolean63 = locale61.hasExtensions();
        java.lang.String str64 = locale61.getISO3Language();
        java.util.Locale locale65 = java.util.Locale.CHINESE;
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.lang.String str67 = locale66.getLanguage();
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.lang.String str71 = locale70.toLanguageTag();
        boolean boolean72 = locale70.hasExtensions();
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale73.getISO3Country();
        java.lang.String str75 = locale73.getDisplayScript();
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleKeys();
        java.util.Locale locale77 = java.util.Locale.ENGLISH;
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getDisplayCountry();
        java.util.Locale locale80 = java.util.Locale.KOREA;
        java.util.Locale locale81 = java.util.Locale.KOREA;
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        java.lang.String str83 = locale82.getISO3Country();
        java.lang.String str84 = locale82.getDisplayScript();
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleKeys();
        java.lang.String str86 = locale82.getISO3Language();
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale55, locale60, locale61, locale65, locale66, locale69, locale70, locale73, locale77, locale78, locale80, locale81, locale82 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.Locale locale90 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale locale92 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale.FilteringMode filteringMode94 = null;
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList88, filteringMode94);
        java.util.Locale locale96 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList88);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ja" + "'", str24, "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str25, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode28.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fra" + "'", str59, "fra");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fr" + "'", str62, "fr");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fra" + "'", str64, "fra");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ja" + "'", str67, "ja");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fr" + "'", str71, "fr");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "fra" + "'", str86, "fra");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(locale90);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNull(locale92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNull(locale96);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println(' ');
        printWriter2.println((long) (-1));
        printWriter2.println((java.lang.Object) "");
        printWriter2.println();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getScript();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        java.lang.String str13 = locale10.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        java.io.PrintWriter printWriter20 = printWriter2.printf(locale10, "ja", (java.lang.Object[]) complexArray19);
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.write((int) 'a');
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter28.println(' ');
        printWriter28.print((float) 10L);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.println(' ');
        printWriter35.println((long) (-1));
        printWriter35.println((java.lang.Object) "");
        printWriter35.println();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getScript();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.lang.String str46 = locale43.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        java.io.PrintWriter printWriter53 = printWriter35.printf(locale43, "ja", (java.lang.Object[]) complexArray52);
        java.io.PrintWriter printWriter54 = printWriter28.format("", (java.lang.Object[]) complexArray52);
        java.io.PrintStream printStream55 = printStream23.format("de", (java.lang.Object[]) complexArray52);
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream55);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, (double) (byte) 10);
        java.io.PrintStream printStream69 = printStream56.printf(locale58, "Franz\366sisch", (java.lang.Object[]) complexArray68);
        java.io.PrintWriter printWriter70 = printWriter20.printf("ja_JP", (java.lang.Object[]) complexArray68);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("TW", (java.lang.Object[]) complexArray68);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printWriter70);
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        printStream1.println((java.lang.Object) "\u30c9\u30a4\u30c4\u8a9e");
        printStream1.println((float) (-1L));
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer12.inversetransform2(doubleArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("japonais");
        printStream18.print(0.0f);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        java.io.PrintStream printStream31 = printStream18.format(locale21, "japonais", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray35);
        printStream31.print((java.lang.Object) doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer12.transform2(doubleArray35);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter41.println(' ');
        printWriter41.print((float) 10L);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter48.println(' ');
        printWriter48.println((long) (-1));
        printWriter48.println((java.lang.Object) "");
        printWriter48.println();
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getScript();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        java.lang.String str59 = locale56.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        java.io.PrintWriter printWriter66 = printWriter48.printf(locale56, "ja", (java.lang.Object[]) complexArray65);
        java.io.PrintWriter printWriter67 = printWriter41.format("", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer12.inversetransform(complexArray65);
        java.lang.Throwable throwable72 = null;
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException(throwable72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException74);
        java.lang.Object[] objArray76 = functionEvaluationException75.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray65, (java.lang.Throwable) functionEvaluationException75);
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException(throwable81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException83);
        java.lang.Throwable[] throwableArray85 = functionEvaluationException83.getSuppressed();
        java.lang.Throwable[] throwableArray86 = functionEvaluationException83.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException83.addSuppressed((java.lang.Throwable) functionEvaluationException89);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "zh", (java.lang.Object[]) complexArray65, (java.lang.Throwable) functionEvaluationException83);
        java.lang.Object[] objArray92 = functionEvaluationException83.getArguments();
        printStream1.print((java.lang.Object) objArray92);
        java.io.PrintStream printStream94 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("German (ALLEMAND,zh)", "de-FR-japonais");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: de-FR-japonais");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr-FR");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale15 = java.util.Locale.getDefault(category10);
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = locale15.getDisplayScript(locale17);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.println(false);
        printWriter24.print("FR");
        printWriter24.write("und");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean42 = printWriter41.checkError();
        java.util.Locale locale43 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray50);
        java.lang.Object[] objArray52 = mathException51.getArguments();
        java.io.PrintWriter printWriter53 = printWriter41.printf(locale43, "zho", objArray52);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException59);
        double double61 = functionEvaluationException59.getArgument();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray52, (java.lang.Throwable) functionEvaluationException59);
        java.io.PrintWriter printWriter63 = printWriter24.format(locale34, "fra", objArray52);
        java.io.PrintStream printStream64 = printStream9.format(locale15, "\u30d5\u30e9\u30f3\u30b9\u8a9e", objArray52);
        java.io.PrintStream printStream66 = printStream9.append((java.lang.CharSequence) "Etats-Unis");
        boolean boolean67 = printStream66.checkError();
        java.util.Locale locale71 = new java.util.Locale("de", "fr", "japonais");
        java.util.Locale locale73 = new java.util.Locale("fra");
        java.util.Locale locale75 = new java.util.Locale("hi!");
        java.lang.String str76 = locale73.getDisplayScript(locale75);
        java.util.Locale locale77 = locale73.stripExtensions();
        java.lang.String str78 = locale71.getDisplayName(locale77);
        java.util.Set<java.lang.Character> charSet79 = locale77.getExtensionKeys();
        java.lang.String str80 = locale77.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer83.inversetransform2(doubleArray86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray87);
        org.apache.commons.math.complex.Complex[] complexArray90 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray87, (double) (byte) 10);
        java.io.PrintStream printStream91 = printStream66.format(locale77, "US", (java.lang.Object[]) complexArray87);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream94 = new java.io.PrintStream((java.io.OutputStream) printStream66, true, "\u30ab\u30ca\u30c0");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals(locale71.toString(), "de_FR_japonais");
        org.junit.Assert.assertEquals(locale73.toString(), "fra");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fra");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "German (France,japonais)" + "'", str78, "German (France,japonais)");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fra" + "'", str80, "fra");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(printStream91);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("allemand (Allemagne)");
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex4.acos();
        org.apache.commons.math.complex.Complex complex10 = complex4.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cos();
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex11.cosh();
        double double16 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex4.pow(complex15);
        org.apache.commons.math.complex.Complex complex22 = complex15.sin();
        org.apache.commons.math.complex.Complex complex23 = complex15.log();
        org.apache.commons.math.complex.Complex complex24 = complex3.add(complex23);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean28 = complex27.isInfinite();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex29.exp();
        org.apache.commons.math.complex.Complex complex33 = complex27.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt1z();
        org.apache.commons.math.complex.Complex complex36 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex38 = complex37.acos();
        org.apache.commons.math.complex.Complex complex39 = complex38.negate();
        boolean boolean40 = complex36.equals((java.lang.Object) complex38);
        org.apache.commons.math.complex.Complex complex41 = complex32.subtract(complex38);
        org.apache.commons.math.complex.Complex complex42 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = complex3.divide(complex32);
        org.apache.commons.math.complex.Complex complex44 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        double double3 = complex2.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex2.tanh();
        double double5 = complex4.abs();
        org.apache.commons.math.complex.Complex complex6 = complex4.asin();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex7.multiply(complex9);
        org.apache.commons.math.complex.Complex complex12 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex14.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = complex7.divide(complex17);
        org.apache.commons.math.complex.Complex complex21 = complex7.cos();
        double double22 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = complex6.subtract(complex21);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 74.68593339875962d + "'", double5 == 74.68593339875962d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println((double) 10.0f);
        printWriter1.print(0.18781088919991634d);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = -1");
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("en");
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.print(0.0f);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream14, true);
        printStream18.print((float) (short) -1);
        printStream18.print('a');
        printStream18.println();
        printStream18.print("hi!");
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getVariant();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale locale29 = locale26.stripExtensions();
        boolean boolean30 = locale29.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer39.transform(doubleArray44);
        double[] doubleArray47 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer34.transform(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer34.inversetransform(complexArray54);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException(throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException61);
        java.lang.Throwable[] throwableArray63 = functionEvaluationException61.getSuppressed();
        java.lang.Throwable[] throwableArray64 = functionEvaluationException61.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException61.addSuppressed((java.lang.Throwable) functionEvaluationException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray55, (java.lang.Throwable) functionEvaluationException67);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray55);
        java.io.PrintStream printStream71 = printStream18.printf(locale29, "Franz\366sisch", (java.lang.Object[]) complexArray55);
        java.io.PrintStream printStream72 = printStream11.printf("kor", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.transform(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale6 = new java.util.Locale("");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.toLanguageTag();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale7.getLanguage();
        java.lang.String str11 = locale7.toLanguageTag();
        java.lang.String str12 = locale7.getScript();
        java.util.Locale locale15 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean16 = locale15.hasExtensions();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.toLanguageTag();
        boolean boolean19 = locale17.hasExtensions();
        boolean boolean20 = locale17.hasExtensions();
        java.lang.String str21 = locale15.getDisplayLanguage(locale17);
        java.lang.String str22 = locale7.getDisplayScript(locale17);
        java.lang.String str23 = locale17.getDisplayScript();
        java.lang.String str24 = locale6.getDisplayName(locale17);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getDisplayCountry();
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale25.getDisplayVariant();
        java.util.Locale locale29 = locale25.stripExtensions();
        java.lang.String str30 = locale25.getDisplayVariant();
        java.lang.String str31 = locale17.getDisplayScript(locale25);
        java.lang.String str32 = locale0.getDisplayName(locale17);
        java.lang.String str33 = locale17.getISO3Country();
        java.lang.String str34 = locale17.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fr" + "'", str18, "fr");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.apache.commons.math.functionevaluationexception: hi!" + "'", str21, "org.apache.commons.math.functionevaluationexception: hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fra" + "'", str27, "fra");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fran\347ais" + "'", str32, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str34, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        double[] doubleArray58 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform(doubleArray66);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer50.transform(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray77 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer71.inversetransform(doubleArray77);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer50.transform(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(doubleArray77);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.transform(univariateRealFunction84, 1.2473793972302494d, 1.0000000000000002d, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.2473793972302494, 1.0000000000000002]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter11 = printWriter9.append((java.lang.CharSequence) "");
        printWriter11.flush();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter14.println(' ');
        printWriter14.println((long) (-1));
        printWriter14.println((java.lang.Object) "");
        char[] charArray27 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter14.println(charArray27);
        printWriter14.println(10);
        printWriter14.print('a');
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.println((long) (-1));
        printWriter34.println((java.lang.Object) "");
        char[] charArray47 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter34.println(charArray47);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter34, true);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter52.print(0);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter56.println(' ');
        printWriter56.println((long) (-1));
        printWriter56.println((java.lang.Object) "");
        char[] charArray69 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter56.println(charArray69);
        printWriter52.println(charArray69);
        printWriter50.write(charArray69);
        printWriter14.write(charArray69, (int) (short) 0, 1);
        printWriter11.write(charArray69);
        printWriter7.write(charArray69);
        printWriter7.println((long) ' ');
        printWriter7.print("\u6cd5\u56fd");
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println();
        java.io.PrintStream printStream57 = new java.io.PrintStream("japonais");
        printStream57.print(0.0f);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        java.io.PrintStream printStream70 = printStream57.format(locale60, "japonais", (java.lang.Object[]) complexArray69);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray69, throwable71);
        java.io.PrintStream printStream73 = printStream1.format("ja", (java.lang.Object[]) complexArray69);
        printStream73.print(0.8414709848078965d);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.OutputStream) printStream73);
        printWriter76.print(false);
        boolean boolean79 = printWriter76.checkError();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex6.sin();
        org.apache.commons.math.complex.Complex complex9 = complex6.sin();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex11.negate();
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean18 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex19.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex19.exp();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        boolean boolean30 = complex26.equals((java.lang.Object) complex28);
        org.apache.commons.math.complex.Complex complex31 = complex22.subtract(complex28);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex40 = complex39.acos();
        org.apache.commons.math.complex.Complex complex41 = complex40.negate();
        org.apache.commons.math.complex.Complex complex42 = complex38.multiply(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex38.exp();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex47 = complex43.add(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex34.pow(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex28.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex49.negate();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cos();
        org.apache.commons.math.complex.Complex complex55 = complex53.cos();
        org.apache.commons.math.complex.Complex complex56 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex52.add(complex56);
        boolean boolean58 = complex57.isNaN();
        org.apache.commons.math.complex.Complex complex59 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex61.sinh();
        org.apache.commons.math.complex.Complex complex63 = complex62.tanh();
        org.apache.commons.math.complex.Complex complex64 = complex59.divide(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex51.multiply(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex14.add(complex65);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.toLanguageTag();
        boolean boolean4 = locale1.hasExtensions();
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale locale8 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale1.getDisplayCountry(locale8);
        boolean boolean11 = locale8.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("org.apache.commons.math.FunctionEvaluationException: en", "org.apache.commons.math.MathException: fr");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: fr");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        double[] doubleArray24 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray24);
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(0.0f);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        java.io.PrintStream printStream40 = printStream27.format(locale30, "japonais", (java.lang.Object[]) complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer41.inversetransform2(doubleArray44);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray44);
        printStream40.print((java.lang.Object) doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer16.inversetransform(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray48, (double) 10.0f);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform(complexArray48);
        java.io.PrintStream printStream55 = new java.io.PrintStream("japonais");
        printStream55.print(true);
        boolean boolean58 = printStream55.checkError();
        printStream55.println();
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream55, true);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException68);
        java.lang.Object[] objArray70 = functionEvaluationException69.getArguments();
        java.io.PrintStream printStream71 = printStream55.printf("org.apache.commons.math.FunctionEvaluationException: hi!", objArray70);
        java.util.Locale locale72 = java.util.Locale.CHINA;
        java.lang.String str73 = locale72.getVariant();
        java.lang.String str74 = locale72.getDisplayCountry();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray81, (double) (byte) 10);
        java.io.PrintStream printStream85 = printStream71.printf(locale72, "org.apache.commons.math.functionevaluationexception: hi!", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.inversetransform(complexArray81);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.transform(univariateRealFunction87, 0.5403023058681398d, 7.5171393828945275E-31d, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.5403023058681398, 7.5171393828945275E-31]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str74, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(complexArray86);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print("\u65e5\u6587");
        printWriter4.close();
        printWriter4.println((float) (short) -1);
        printWriter4.println("org.apache.commons.math.MathException: chinois (Chine)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.multiply(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex6.exp();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex11.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex2.pow(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex24 = complex22.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.acos();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = complex18.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex34 = complex32.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex33.cos();
        org.apache.commons.math.complex.Complex complex37 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        boolean boolean39 = complex37.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = complex37.exp();
        org.apache.commons.math.complex.Complex complex41 = complex37.acos();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.getImaginary();
        org.apache.commons.math.complex.Complex complex45 = complex42.sinh();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex47 = complex45.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex46.cosh();
        double double49 = complex48.abs();
        boolean boolean50 = complex41.equals((java.lang.Object) double49);
        org.apache.commons.math.complex.Complex complex51 = complex27.pow(complex41);
        org.apache.commons.math.complex.Complex complex52 = complex27.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("en-US", (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = locale13.getDisplayVariant();
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String str18 = locale13.getDisplayVariant(locale16);
        java.lang.String str19 = locale13.getScript();
        java.util.Locale locale20 = locale13.stripExtensions();
        java.util.Locale.setDefault(category0, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United States" + "'", str15, "United States");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(true);
        boolean boolean6 = printStream3.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        double[] doubleArray24 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer11.transform(complexArray25);
        java.io.PrintStream printStream27 = printStream3.format(locale9, "fr", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "chinois-x-lvariant-ja", (java.lang.Object[]) complexArray26);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("japonais");
        printStream26.print(0.0f);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        java.io.PrintStream printStream39 = printStream26.format(locale29, "japonais", (java.lang.Object[]) complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        printStream39.print((java.lang.Object) doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer20.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer10.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.transform(doubleArray61);
        double[] doubleArray64 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer51.transform(complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer67.inversetransform2(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer51.inversetransform(complexArray71);
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException(throwable76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException78);
        java.lang.Throwable[] throwableArray80 = functionEvaluationException78.getSuppressed();
        java.lang.Throwable[] throwableArray81 = functionEvaluationException78.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException78.addSuppressed((java.lang.Throwable) functionEvaluationException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray72, (java.lang.Throwable) functionEvaluationException84);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer10.inversetransform(complexArray72);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("Franz\366sisch", (java.lang.Object[]) complexArray72);
        java.io.PrintStream printStream90 = printStream7.printf("de-DE", (java.lang.Object[]) complexArray72);
        java.io.PrintStream printStream92 = new java.io.PrintStream((java.io.OutputStream) printStream90, false);
        printStream92.println(false);
        java.io.PrintStream printStream96 = new java.io.PrintStream((java.io.OutputStream) printStream92, false);
        printStream92.write((int) (short) 10);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList20, filteringMode23);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray31 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList32);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = locale35.getDisplayScript();
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleKeys();
        java.lang.String str39 = locale35.getISO3Language();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.toLanguageTag();
        boolean boolean43 = locale41.hasExtensions();
        java.lang.String str44 = locale41.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getLanguage();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.toLanguageTag();
        boolean boolean52 = locale50.hasExtensions();
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale53.getDisplayScript();
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleKeys();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getDisplayCountry();
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = locale62.getISO3Country();
        java.lang.String str64 = locale62.getDisplayScript();
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleKeys();
        java.lang.String str66 = locale62.getISO3Language();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale35, locale40, locale41, locale45, locale46, locale49, locale50, locale53, locale57, locale58, locale60, locale61, locale62 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale locale70 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale73.getCountry();
        java.lang.String str75 = locale72.getDisplayCountry(locale73);
        java.lang.String str76 = locale71.getDisplayLanguage(locale73);
        java.lang.String str77 = locale73.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = locale73.getUnicodeLocaleType("allemand (Allemagne)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: allemand (Allemagne)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fra" + "'", str39, "fra");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ja" + "'", str47, "ja");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fr" + "'", str51, "fr");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fra" + "'", str66, "fra");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fran\347ais" + "'", str76, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException(throwable15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException17);
        java.lang.Throwable[] throwableArray19 = functionEvaluationException17.getSuppressed();
        java.lang.Throwable[] throwableArray20 = functionEvaluationException17.getSuppressed();
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        java.lang.String str35 = functionEvaluationException33.getPattern();
        functionEvaluationException26.addSuppressed((java.lang.Throwable) functionEvaluationException33);
        java.lang.Object[] objArray37 = functionEvaluationException26.getArguments();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("und", (java.lang.Object[]) throwableArray20, (java.lang.Throwable) functionEvaluationException26);
        java.io.PrintWriter printWriter39 = printWriter9.format("und", (java.lang.Object[]) throwableArray20);
        printWriter9.print((long) 'x');
        printWriter9.flush();
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getVariant();
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getDisplayCountry();
        java.lang.String str6 = locale4.getISO3Language();
        java.lang.String str7 = locale4.getDisplayVariant();
        java.util.Locale locale8 = locale4.stripExtensions();
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale0.getDisplayVariant(locale8);
        java.util.Set<java.lang.String> strSet11 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale0);
        boolean boolean13 = locale0.hasExtensions();
        boolean boolean14 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fra" + "'", str6, "fra");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.write((int) 'a');
        printStream5.print(0.0f);
        java.io.PrintStream printStream11 = printStream5.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category12);
        java.util.Locale locale18 = java.util.Locale.getDefault(category12);
        printStream11.print((java.lang.Object) locale18);
        java.lang.String str20 = locale0.getDisplayName(locale18);
        java.lang.String str21 = locale0.toLanguageTag();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println((long) (-1));
        printWriter23.println((java.lang.Object) "");
        printWriter23.println();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getScript();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.lang.String str34 = locale31.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        java.io.PrintWriter printWriter41 = printWriter23.printf(locale31, "ja", (java.lang.Object[]) complexArray40);
        java.util.Set<java.lang.String> strSet42 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale31.toLanguageTag();
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getISO3Country();
        java.lang.String str47 = locale45.getISO3Language();
        java.util.Locale.setDefault(category44, locale45);
        java.lang.String str49 = locale45.getVariant();
        java.lang.String str50 = locale31.getDisplayScript(locale45);
        java.util.Locale locale52 = new java.util.Locale("de-DE");
        java.util.Locale.setDefault(locale52);
        java.lang.String str54 = locale31.getDisplayName(locale52);
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleKeys();
        java.lang.String str56 = locale0.getDisplayName(locale52);
        java.lang.String str57 = locale52.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "japonais" + "'", str20, "japonais");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ja" + "'", str21, "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ja" + "'", str43, "ja");
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fra" + "'", str47, "fra");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals(locale52.toString(), "de-de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Japanese" + "'", str54, "Japanese");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Japanese" + "'", str56, "Japanese");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("US");
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.abs();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.add(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        boolean boolean19 = complex17.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("anglais (Etats-Unis)", 1.0839233273386948d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.0839233273386948");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex9.multiply(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex11.atan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.acos();
        org.apache.commons.math.complex.Complex complex19 = complex11.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex4.divide(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex21.tan();
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        double double24 = complex22.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.functionevaluationexception: hi!");
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        boolean boolean13 = complex11.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex0.add(complex11);
        double double23 = complex22.abs();
        org.apache.commons.math.complex.Complex complex24 = complex22.sin();
        org.apache.commons.math.complex.Complex complex25 = complex24.asin();
        double double26 = complex24.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), throwable1);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setExtension('4', "DE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex0.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean11 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = complex10.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        boolean boolean23 = complex19.equals((java.lang.Object) complex21);
        org.apache.commons.math.complex.Complex complex24 = complex15.subtract(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = complex7.divide(complex15);
        double double27 = complex26.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.253380767493447d + "'", double27 == 1.253380767493447d);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        boolean boolean9 = printStream7.checkError();
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        double[] doubleArray39 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer31.inversetransform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer26.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer26.inversetransform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer49.transform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer48.inversetransform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer26.inversetransform2(complexArray56);
        java.io.PrintStream printStream60 = printStream7.printf(locale14, "German (FRA,fr)", (java.lang.Object[]) complexArray56);
        printStream60.write(0);
        printStream60.println("und");
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream60);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        boolean boolean9 = complex7.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex13.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex7.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex7.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", "org.apache.commons.math.functionevaluationexception: zho", "Japon");
        org.junit.Assert.assertEquals(locale3.toString(), "org.apache.commons.math.functionevaluationexception: org.apache.commons.math.functionevaluationexception: fr_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: ZHO_Japon");
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex8.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        boolean boolean20 = complex16.equals((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex18);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        double double25 = complex22.abs();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex30 = complex21.subtract(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex26.asin();
        boolean boolean32 = complex31.isNaN();
        org.apache.commons.math.complex.Complex complex33 = complex4.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex35 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex33.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((-1));
        printStream1.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer28.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer18.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer8.transform(doubleArray51);
        java.io.PrintStream printStream58 = printStream1.printf("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray57);
        java.io.PrintStream printStream60 = printStream1.append('4');
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean63 = printWriter62.checkError();
        java.io.PrintWriter printWriter65 = printWriter62.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.Writer) printWriter62);
        printWriter66.println(false);
        printWriter66.println((float) 0);
        printStream1.print((java.lang.Object) 0);
        boolean boolean72 = printStream1.checkError();
        printStream1.flush();
        java.io.PrintStream printStream75 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: Evaluation failed for argument = -1");
        java.io.PrintStream printStream79 = null; // flaky: printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) (byte) 10, (int) ' ');
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(printStream75);
// flaky:         org.junit.Assert.assertNotNull(printStream79);
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("FR", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayName(locale7);
        java.lang.String str10 = locale7.getDisplayScript();
        java.util.Set<java.lang.String> strSet11 = locale7.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet11, filteringMode12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap14);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.parse("Etats-Unis");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.parse("FR", strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray28 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList29);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.getDisplayScript();
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleKeys();
        java.lang.String str36 = locale32.getISO3Language();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.toLanguageTag();
        boolean boolean40 = locale38.hasExtensions();
        java.lang.String str41 = locale38.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.toLanguageTag();
        boolean boolean49 = locale47.hasExtensions();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getISO3Country();
        java.lang.String str52 = locale50.getDisplayScript();
        java.util.Set<java.lang.String> strSet53 = locale50.getUnicodeLocaleKeys();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getDisplayCountry();
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getISO3Country();
        java.lang.String str61 = locale59.getDisplayScript();
        java.util.Set<java.lang.String> strSet62 = locale59.getUnicodeLocaleKeys();
        java.lang.String str63 = locale59.getISO3Language();
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale32, locale37, locale38, locale42, locale43, locale46, locale47, locale50, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale locale70 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale locale73 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "japonais");
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale70.getDisplayScript(locale73);
        java.util.Set<java.lang.String> strSet76 = locale70.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet77 = locale70.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja" + "'", str8, "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str9, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fra" + "'", str36, "fra");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr" + "'", str39, "fr");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ja" + "'", str44, "ja");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fr" + "'", str48, "fr");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fra" + "'", str63, "fra");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals(locale73.toString(), "org.apache.commons.math.functionevaluationexception: hi!_JAPONAIS");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strSet77);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", "GERMAN (FRA,FR)");
        java.lang.String str3 = locale2.getVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.functionevaluationexception: org.apache.commons.math.functionevaluationexception: org.apache.commons.math.functionevaluationexception: fr_GERMAN (FRA,FR)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream3 = new java.io.PrintStream(outputStream0, false, "Stati Uniti");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.inversetransform(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        double[] doubleArray41 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer33.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray41);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform2(univariateRealFunction44, (double) 100.0f, (double) 100L, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 100.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        boolean boolean9 = complex7.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex10 = complex7.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math.complex.Complex complex12 = complex11.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print("FR");
        printWriter1.write("und");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean19 = printWriter18.checkError();
        java.util.Locale locale20 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.io.PrintWriter printWriter30 = printWriter18.printf(locale20, "zho", objArray29);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException36);
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) functionEvaluationException36);
        java.io.PrintWriter printWriter40 = printWriter1.format(locale11, "fra", objArray29);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.toLanguageTag();
        boolean boolean45 = locale43.hasExtensions();
        boolean boolean46 = locale43.hasExtensions();
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.lang.String str49 = locale47.getDisplayScript(locale48);
        java.lang.String str50 = locale43.getDisplayVariant(locale48);
        java.lang.String str51 = locale48.getVariant();
        printWriter42.print((java.lang.Object) str51);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter42, true);
        printWriter54.flush();
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.Writer) printWriter54);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter60 = printWriter54.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e (HI!)", 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.inversetransform(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        java.io.PrintStream printStream46 = new java.io.PrintStream("japonais");
        printStream46.print(0.0f);
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform(doubleArray57);
        java.io.PrintStream printStream59 = printStream46.format(locale49, "japonais", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        printStream59.print((java.lang.Object) doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer40.transform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer40.transform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer33.transform2(doubleArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer77.transform(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer76.transform2(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer33.inversetransform(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.transform2(doubleArray82);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer0.transform2(univariateRealFunction92, 97.0d, 0.8734582355173112d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [97.0, 0.8734582355173112]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0, 1.213053294120664d);
        double double3 = complex2.abs();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.213053294120664d + "'", double3 == 1.213053294120664d);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getVariant();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.lang.String str4 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "China" + "'", str3, "China");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinesisch" + "'", str4, "Chinesisch");
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        java.io.PrintStream printStream29 = printStream16.format(locale19, "japonais", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        printStream29.print((java.lang.Object) doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer10.transform2(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer5.transform(complexArray37);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, (java.lang.Throwable) functionEvaluationException46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "chinois", (java.lang.Object[]) complexArray38, (java.lang.Throwable) functionEvaluationException47);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) 'x', "china", (java.lang.Object[]) complexArray38, throwable49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("USA", (java.lang.Object[]) complexArray38);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream35, true);
        printStream35.print('4');
        printStream35.println();
        printStream35.print((float) 'x');
        printStream35.write(0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.setExtension('a', "China");
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.toLanguageTag();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale8.getLanguage();
        java.util.Locale.Builder builder12 = builder4.setLocale(locale8);
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale13.getScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        java.lang.String str16 = locale13.getVariant();
        java.lang.String str17 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getUnicodeLocaleType("de");
        java.lang.String str20 = locale13.getScript();
        java.util.Locale.Builder builder21 = builder4.setLocale(locale13);
        java.util.Locale.Builder builder23 = builder4.addUnicodeLocaleAttribute("kor");
        java.util.Locale.Builder builder24 = builder4.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ja" + "'", str17, "ja");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("kor");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setLanguage("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.toLanguageTag();
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        java.util.Locale locale7 = new java.util.Locale("englisch", "org.apache.commons.math.FunctionEvaluationException: en");
        java.lang.String str8 = locale1.getDisplayLanguage(locale7);
        java.lang.String str9 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertEquals(locale7.toString(), "englisch_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: EN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("FR");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "anglais (Etats-Unis)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: anglais (Etats-Unis)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.close();
        printWriter1.print((double) 1L);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter8.println(' ');
        printWriter8.println((long) (-1));
        printWriter8.println((java.lang.Object) "");
        char[] charArray21 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter8.println(charArray21);
        printWriter8.println(10);
        printWriter8.print('a');
        char[] charArray27 = new char[] {};
        printWriter8.println(charArray27);
        printWriter1.write(charArray27);
        printWriter1.write("fran\347ais (JAPANESE)");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println('u');
        boolean boolean18 = printWriter1.checkError();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.write((int) 'a');
        boolean boolean22 = printWriter1.checkError();
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale.Builder builder12 = builder7.setScript("");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "_FR");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: FR", "org.apache.commons.math.MathException: Englisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: Englisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "ja_jp (UND)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ja_jp (UND)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("Englisch");
        java.util.Locale.Builder builder6 = builder4.setLanguage("en");
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("allemand");
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.lang.String str15 = locale12.getDisplayCountry(locale13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getCountry();
        java.lang.String str18 = locale13.getDisplayName(locale16);
        java.util.Locale.Builder builder19 = builder11.setLocale(locale16);
        java.util.Locale.Builder builder21 = builder11.setLanguageTag("Japanese");
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = locale29.getCountry();
        java.lang.String str31 = locale26.getDisplayName(locale29);
        java.util.Locale.Builder builder32 = builder24.setLocale(locale29);
        java.util.Locale.Builder builder34 = builder24.setLanguageTag("Japanese");
        java.util.Locale locale35 = builder34.build();
        java.util.Locale.Builder builder36 = builder11.setLocale(locale35);
        java.util.Locale locale37 = builder36.build();
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale37.getDisplayLanguage();
        java.util.Locale locale40 = locale37.stripExtensions();
        java.util.Locale.Builder builder41 = builder8.setLocale(locale40);
        java.util.Locale.Builder builder43 = builder41.setVariant("Japanese");
        java.util.Locale.Builder builder45 = builder41.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder46 = builder41.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FR" + "'", str17, "FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fran\347ais" + "'", str18, "fran\347ais");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FR" + "'", str30, "FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fran\347ais" + "'", str31, "fran\347ais");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "japanese");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "japanese" + "'", str39, "japanese");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.FunctionEvaluationException: en-US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "org.apache.commons.math.MathException");
        java.lang.Object[] objArray3 = functionEvaluationException2.getArguments();
        java.lang.Throwable[] throwableArray4 = functionEvaluationException2.getSuppressed();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        java.util.Locale locale3 = new java.util.Locale("JA_JP", "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)", "en-US");
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale11.getISO3Country();
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale9.getDisplayScript(locale11);
        boolean boolean16 = locale3.equals((java.lang.Object) str15);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)_en-US");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream39.println("org.apache.commons.math.FunctionEvaluationException");
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        printWriter42.println(true);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter42);
        printWriter42.print("org.apache.commons.math.MathException: org.apache.commons.math.MathException: fra");
        printWriter42.write("ja_jp (UND)");
        java.io.PrintWriter printWriter51 = printWriter42.append((java.lang.CharSequence) "en-US");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "chinois-x-lvariant-ja");
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Englisch");
        java.lang.String str2 = languageRange1.getRange();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer3.transform(doubleArray8);
        double[] doubleArray11 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.inversetransform2(doubleArray11);
        double[] doubleArray14 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray11, (double) 1);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        boolean boolean16 = languageRange1.equals((java.lang.Object) doubleArray14);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "englisch" + "'", str2, "englisch");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.close();
        printStream1.println("deu");
        printStream1.println((float) 10);
        printStream1.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        java.util.Locale locale2 = new java.util.Locale("fr", "\u30c9\u30a4\u30c4\u8a9e");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.println('a');
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Language();
        printWriter3.print((java.lang.Object) locale6);
        java.lang.String str10 = locale6.getScript();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale locale12 = locale6.stripExtensions();
        java.lang.String str13 = locale12.getDisplayVariant();
        java.lang.String str14 = locale12.toLanguageTag();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("ITA", "anglais (Etats-Unis)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: anglais (Etats-Unis)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = printWriter1.append((java.lang.CharSequence) "Japanese");
        printWriter8.println((double) 'x');
        java.io.PrintWriter printWriter12 = printWriter8.append('a');
        java.io.PrintWriter printWriter14 = printWriter8.append((java.lang.CharSequence) "Koreanisch");
        printWriter14.println();
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter14);
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        boolean boolean15 = printStream14.checkError();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream14);
        java.lang.Object obj17 = null;
        printStream14.print(obj17);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter22.println(' ');
        printWriter22.println((long) (-1));
        printWriter22.println((java.lang.Object) "");
        printWriter22.println();
        printWriter22.println("org.apache.commons.math.MathException");
        printWriter22.println();
        java.io.PrintStream printStream34 = new java.io.PrintStream("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream34.println((double) 'x');
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter38.println(' ');
        printWriter38.println((long) (-1));
        printWriter38.println((java.lang.Object) "");
        char[] charArray51 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter38.println(charArray51);
        printWriter38.println(10);
        printWriter38.println("zh");
        printWriter38.println((float) (short) 10);
        java.io.PrintWriter printWriter60 = printWriter38.append((java.lang.CharSequence) "FR");
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter64 = printWriter62.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter66 = printWriter64.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean71 = printWriter70.checkError();
        java.io.PrintWriter printWriter73 = printWriter70.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter((java.io.Writer) printWriter70);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter76.println(' ');
        printWriter76.println((long) (-1));
        printWriter76.println((java.lang.Object) "");
        char[] charArray89 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter76.println(charArray89);
        printWriter70.write(charArray89);
        printWriter68.write(charArray89);
        printWriter66.write(charArray89);
        printWriter60.write(charArray89);
        printStream34.print(charArray89);
        printWriter22.write(charArray89);
        printStream14.println(charArray89);
        printStream14.println((float) '4');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(74.68593339875962d);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ko", (java.lang.Throwable) functionEvaluationException3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("GERMAN (FRA,FR)", (java.lang.Throwable) functionEvaluationException3);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, (double) '4');
        org.apache.commons.math.complex.Complex complex3 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        java.util.Locale locale2 = new java.util.Locale("english", "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.lang.String str3 = locale2.getDisplayVariant();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.setExtension('a', "China");
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.toLanguageTag();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale8.getLanguage();
        java.util.Locale.Builder builder12 = builder4.setLocale(locale8);
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale13.getScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        java.lang.String str16 = locale13.getVariant();
        java.lang.String str17 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getUnicodeLocaleType("de");
        java.lang.String str20 = locale13.getScript();
        java.util.Locale.Builder builder21 = builder4.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder4.setRegion("FRAN\347AIS");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: FRANc?AIS [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ja" + "'", str17, "ja");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex7.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex15.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex21.tan();
        org.apache.commons.math.complex.Complex complex23 = complex13.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex25.cos();
        org.apache.commons.math.complex.Complex complex29 = complex13.add(complex25);
        org.apache.commons.math.complex.Complex complex30 = null;
        org.apache.commons.math.complex.Complex complex31 = complex29.multiply(complex30);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex11);
        org.apache.commons.math.complex.Complex complex13 = null;
        org.apache.commons.math.complex.Complex complex14 = complex4.subtract(complex13);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable27);
        printStream1.print((java.lang.Object) throwable27);
        printStream1.println(100.0d);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter33.println(' ');
        printWriter33.println((long) (-1));
        printWriter33.println((java.lang.Object) "");
        printWriter33.println(10L);
        printWriter33.println(true);
        printWriter33.write((int) (short) -1);
        printStream1.println((java.lang.Object) printWriter33);
        printStream1.println((float) 'a');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter17 = printWriter15.append('x');
        printWriter17.println((double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        printWriter17.print((java.lang.Object) fastFourierTransformer20);
        java.io.PrintWriter printWriter27 = printWriter17.append((java.lang.CharSequence) "Franz\366sisch");
        printWriter17.flush();
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printWriter27);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        boolean boolean13 = complex11.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex0.add(complex11);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex31 = complex30.acos();
        org.apache.commons.math.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math.complex.Complex complex33 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex28.divide(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cos();
        org.apache.commons.math.complex.Complex complex39 = complex37.cos();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex36.add(complex40);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.getImaginary();
        org.apache.commons.math.complex.Complex complex45 = complex42.sinh();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex47 = complex46.acos();
        org.apache.commons.math.complex.Complex complex48 = complex47.negate();
        org.apache.commons.math.complex.Complex complex49 = complex45.multiply(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex47.atan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex54 = complex51.acos();
        org.apache.commons.math.complex.Complex complex55 = complex47.add(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex57 = complex40.divide(complex55);
        org.apache.commons.math.complex.Complex complex58 = complex34.pow(complex55);
        org.apache.commons.math.complex.Complex complex59 = complex55.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.print((long) (short) 10);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter11.println(' ');
        printWriter11.println((long) (-1));
        printWriter11.println((java.lang.Object) "");
        char[] charArray24 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter11.println(charArray24);
        printWriter11.println(10);
        printWriter11.print('a');
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.println((long) (-1));
        printWriter31.println((java.lang.Object) "");
        char[] charArray44 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter31.println(charArray44);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter31, true);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.print(0);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter53.println(' ');
        printWriter53.println((long) (-1));
        printWriter53.println((java.lang.Object) "");
        char[] charArray66 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter53.println(charArray66);
        printWriter49.println(charArray66);
        printWriter47.write(charArray66);
        printWriter11.write(charArray66, (int) (short) 0, 1);
        printStream1.println(charArray66);
        printStream1.print("French");
        java.io.PrintStream printStream77 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println("fra");
        java.io.PrintStream printStream80 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex6.sin();
        org.apache.commons.math.complex.Complex complex9 = complex6.sin();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cos();
        org.apache.commons.math.complex.Complex complex24 = complex22.cos();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex18.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex32 = complex31.acos();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex30.multiply(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex26.subtract(complex35);
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex35.multiply(complex39);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.getImaginary();
        org.apache.commons.math.complex.Complex complex45 = complex42.acos();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt1z();
        org.apache.commons.math.complex.Complex complex48 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex42.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex39.subtract(complex49);
        double double51 = complex50.getReal();
        org.apache.commons.math.complex.Complex complex52 = complex10.pow(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex55.negate();
        org.apache.commons.math.complex.Complex complex57 = complex55.atan();
        org.apache.commons.math.complex.Complex complex58 = complex57.tan();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.getImaginary();
        org.apache.commons.math.complex.Complex complex62 = complex59.sinh();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex64 = complex62.divide(complex63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt1z();
        org.apache.commons.math.complex.Complex complex67 = complex65.conjugate();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        org.apache.commons.math.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex65.divide(complex70);
        double double72 = complex70.getReal();
        org.apache.commons.math.complex.Complex complex73 = complex63.divide(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex73.tan();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex76 = complex75.acos();
        org.apache.commons.math.complex.Complex complex77 = complex76.negate();
        org.apache.commons.math.complex.Complex complex78 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.conjugate();
        boolean boolean80 = complex78.isInfinite();
        org.apache.commons.math.complex.Complex complex81 = complex74.pow(complex78);
        org.apache.commons.math.complex.Complex complex82 = complex58.subtract(complex78);
        double double83 = complex58.getReal();
        org.apache.commons.math.complex.Complex complex84 = complex53.subtract(complex58);
        double double85 = complex58.getReal();
        org.apache.commons.math.complex.Complex complex86 = complex6.pow(complex58);
        org.apache.commons.math.complex.Complex complex87 = complex86.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.7350525871447157d + "'", double72 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex1.divide(complex4);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = complex8.asin();
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex1.multiply(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex1.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter19.println(' ');
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        org.apache.commons.math.complex.Complex complex28 = complex27.negate();
        org.apache.commons.math.complex.Complex complex29 = complex25.multiply(complex27);
        printWriter19.println((java.lang.Object) complex25);
        double double31 = complex25.getReal();
        org.apache.commons.math.complex.Complex complex32 = complex25.asin();
        org.apache.commons.math.complex.Complex complex33 = complex17.add(complex25);
        org.apache.commons.math.complex.Complex complex34 = complex33.cos();
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex6.tan();
        org.apache.commons.math.complex.Complex complex8 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex11);
        double double13 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex15.tan();
        boolean boolean18 = complex17.isNaN();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex22.multiply(complex24);
        org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex30 = complex24.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex32 = complex24.negate();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cos();
        org.apache.commons.math.complex.Complex complex35 = complex33.cos();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex33.cosh();
        double double38 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex39 = complex24.add(complex37);
        double double40 = complex37.abs();
        org.apache.commons.math.complex.Complex complex41 = complex17.subtract(complex37);
        org.apache.commons.math.complex.Complex complex42 = complex17.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.7350525871447157d + "'", double13 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.5403023058681398d + "'", double40 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale1.getDisplayLanguage(locale4);
        java.lang.String str7 = locale1.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale1.getDisplayVariant(locale8);
        java.lang.String str10 = locale8.getDisplayName();
        java.lang.String str11 = locale8.getScript();
        java.util.Locale.setDefault(locale8);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ja" + "'", str5, "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str10, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.print(0);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter13.println(' ');
        printWriter13.println((long) (-1));
        printWriter13.println((java.lang.Object) "");
        char[] charArray26 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter13.println(charArray26);
        printWriter9.println(charArray26);
        printStream1.print(charArray26);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.util.Locale locale32 = new java.util.Locale("fra");
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale32.getDisplayScript(locale34);
        java.lang.String str36 = locale32.getDisplayScript();
        java.lang.String str37 = locale32.getISO3Country();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        double[] doubleArray53 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer45.inversetransform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer40.transform(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer40.inversetransform(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer62.inversetransform(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray70, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer40.inversetransform2(complexArray70);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("fran\347ais", (java.lang.Object[]) complexArray73);
        java.io.PrintStream printStream75 = printStream30.printf(locale32, "French", (java.lang.Object[]) complexArray73);
        printStream30.flush();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #,  , a, a, a]");
        org.junit.Assert.assertEquals(locale32.toString(), "fra");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(printStream75);
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream33.print((int) (short) 10);
        printStream33.println();
        java.util.Locale locale46 = new java.util.Locale("de", "fr", "japonais");
        java.io.PrintStream printStream49 = new java.io.PrintStream("japonais");
        printStream49.print(true);
        printStream49.println("Chinesisch");
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException60);
        java.lang.Throwable[] throwableArray62 = functionEvaluationException60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = functionEvaluationException60.getSuppressed();
        java.io.PrintStream printStream64 = printStream49.format("hi!", (java.lang.Object[]) throwableArray63);
        java.io.PrintStream printStream65 = printStream33.format(locale46, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", (java.lang.Object[]) throwableArray63);
        printStream33.println((-1.0f));
        boolean boolean68 = printStream33.checkError();
        printStream33.print(100.0f);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.getDisplayCountry();
        java.lang.String str73 = locale71.getISO3Language();
        java.lang.String str74 = locale71.getDisplayVariant();
        java.util.Locale locale75 = locale71.stripExtensions();
        java.util.Locale.Category category76 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.lang.String str78 = locale77.getCountry();
        java.lang.String str79 = locale77.getDisplayCountry();
        java.util.Locale.setDefault(category76, locale77);
        java.util.Locale locale81 = java.util.Locale.getDefault(category76);
        java.util.Locale locale82 = java.util.Locale.getDefault(category76);
        java.util.Locale locale86 = new java.util.Locale("", "\u30c9\u30a4\u30c4\u8a9e", "FR");
        java.lang.String str87 = locale82.getDisplayName(locale86);
        java.lang.String str88 = locale75.getDisplayScript(locale82);
        printStream33.println((java.lang.Object) str88);
        printStream33.print("\u5fb7\u56fd");
        printStream33.print(' ');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertEquals(locale46.toString(), "de_FR_japonais");
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fra" + "'", str73, "fra");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertTrue("'" + category76 + "' != '" + java.util.Locale.Category.FORMAT + "'", category76.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals(locale86.toString(), "\u30c9\u30a4\u30c4\u8a9e_FR");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "French" + "'", str87, "French");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex1.tan();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        double double6 = complex5.getReal();
        org.apache.commons.math.complex.Complex complex7 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex5.atan();
        org.apache.commons.math.complex.Complex complex10 = complex1.divide(complex9);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        printWriter13.println((float) (byte) 0);
        printWriter13.print('a');
        printWriter13.close();
        printWriter13.println("TWN");
        printWriter13.println((long) 100);
        java.lang.Object[] objArray28 = null;
        java.io.PrintWriter printWriter29 = printWriter13.printf("TWN", objArray28);
        printWriter29.print((float) (byte) 10);
        org.junit.Assert.assertNotNull(printWriter29);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder2.setUnicodeLocaleKeyword("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: German (FRA,fr)", "\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: German (FRA,fr) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("org.apache.commons.math.MathException: org.apache.commons.math.functionevaluationexception: fr (ANGLAIS,Chine)", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "French");
        java.lang.Throwable[] throwableArray3 = functionEvaluationException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex0.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex7.sin();
        org.apache.commons.math.complex.Complex complex10 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex16 = complex15.acos();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex14.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex14.exp();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex23 = complex19.add(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex7.add(complex25);
        boolean boolean27 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex7.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream33.print(false);
        printStream33.print('x');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream33, false, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en-us_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: ?????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.flush();
        printStream5.print("DEU");
        printStream5.close();
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale18.getDisplayCountry();
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale18.getDisplayVariant();
        java.util.Locale locale22 = locale18.stripExtensions();
        java.lang.String str23 = locale18.getDisplayScript();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer25.transform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer25.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer41.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer41.transform2(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        double[] doubleArray67 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer59.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer41.transform2(doubleArray67);
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, (-1.0d));
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer25.transform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer73.transform(doubleArray78);
        double[] doubleArray81 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer73.inversetransform2(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer25.transform(doubleArray81);
        java.io.PrintStream printStream84 = printStream17.printf(locale18, "org.apache.commons.math.MathException: ja", (java.lang.Object[]) complexArray83);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.OutputStream) printStream84, false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print((long) (short) 1);
        printWriter4.flush();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        printWriter4.print((float) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale9);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Locale locale14 = locale11.stripExtensions();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getCountry();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.util.Locale locale21 = java.util.Locale.getDefault(category15);
        java.lang.String str22 = locale14.getDisplayVariant(locale21);
        java.lang.String str23 = locale21.getDisplayLanguage();
        boolean boolean24 = locale9.equals((java.lang.Object) str23);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u6cd5\u6587" + "'", str23, "\u6cd5\u6587");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream14.print((int) '4');
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter18.println(' ');
        printWriter18.println((long) (-1));
        printWriter18.println((java.lang.Object) "");
        char[] charArray31 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter18.println(charArray31);
        printWriter18.println(10);
        printWriter18.print('a');
        char[] charArray37 = new char[] {};
        printWriter18.println(charArray37);
        printStream14.println(charArray37);
        printStream14.print((float) (-1L));
        boolean boolean42 = printStream14.checkError();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream14);
        printStream14.println('u');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(true);
        boolean boolean6 = printStream3.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        double[] doubleArray24 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer11.transform(complexArray25);
        java.io.PrintStream printStream27 = printStream3.format(locale9, "fr", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("Franz\366sisch", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException29);
        java.lang.String str31 = mathException30.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org.apache.commons.math.MathException: Franz\366sisch" + "'", str31, "org.apache.commons.math.MathException: Franz\366sisch");
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getCountry();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setRegion("");
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.removeUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder14 = builder10.setExtension('u', "de_FR_japonais");
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.setScript("");
        java.util.Locale locale19 = builder16.build();
        java.util.Locale.Builder builder20 = builder10.setLocale(locale19);
        java.lang.String str21 = locale0.getDisplayCountry(locale19);
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charSet22);
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.util.Locale locale3 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer6.inversetransform2(doubleArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray10);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        java.io.PrintWriter printWriter13 = printWriter1.printf(locale3, "zho", objArray12);
        printWriter1.write("German (FRA,fr)");
        printWriter1.println((long) (short) 100);
        java.util.Locale locale20 = new java.util.Locale("und", "org.apache.commons.math.FunctionEvaluationException");
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.toLanguageTag();
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale21.getISO3Country();
        java.lang.String str26 = locale20.getDisplayVariant(locale21);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter30.print(0);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.println((long) (-1));
        printWriter34.println((java.lang.Object) "");
        char[] charArray47 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter34.println(charArray47);
        printWriter30.println(charArray47);
        java.util.Locale locale50 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray57);
        java.io.PrintWriter printWriter59 = printWriter30.format(locale50, "und", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray61 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, (double) 'u');
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray61);
        java.io.PrintWriter printWriter63 = printWriter1.printf(locale21, "hi!", (java.lang.Object[]) complexArray61);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertEquals(locale20.toString(), "und_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr" + "'", str22, "fr");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(printWriter63);
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException(throwable5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException7);
        java.lang.Throwable[] throwableArray9 = functionEvaluationException7.getSuppressed();
        java.lang.Throwable[] throwableArray10 = functionEvaluationException7.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) mathException11);
        double double13 = functionEvaluationException12.getArgument();
        java.lang.String str14 = functionEvaluationException12.toString();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str14, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!");
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        java.util.Locale locale2 = new java.util.Locale("Chine", "");
        java.lang.String str3 = locale2.toLanguageTag();
        java.util.Locale locale7 = new java.util.Locale("chinois (Taiwan)", "German (FRA,fr)", "org.apache.commons.math.MathException: Franz\366sisch");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale2.getDisplayScript(locale8);
        org.junit.Assert.assertEquals(locale2.toString(), "chine");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chine" + "'", str3, "chine");
        org.junit.Assert.assertEquals(locale7.toString(), "chinois (taiwan)_GERMAN (FRA,FR)_org.apache.commons.math.MathException: Franz\366sisch");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "chinois (taiwan)_GERMAN (FRA,FR)_org.apache.commons.math.MathException: Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println(10L);
        printWriter1.println(true);
        printWriter1.write((int) (short) -1);
        printWriter1.write((int) (byte) 1);
        printWriter1.print((long) (short) 1);
        printWriter1.println((long) 'x');
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale24 = new java.util.Locale("und", "org.apache.commons.math.FunctionEvaluationException");
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.toLanguageTag();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getISO3Language();
        java.lang.String str29 = locale25.getISO3Country();
        java.lang.String str30 = locale24.getDisplayVariant(locale25);
        java.lang.String str31 = locale20.getDisplayVariant(locale24);
        java.lang.String str32 = locale20.getDisplayScript();
        printWriter1.print((java.lang.Object) locale20);
        printWriter1.println(false);
        java.io.PrintWriter printWriter37 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.functionevaluationexception: zho");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals(locale24.toString(), "und_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr" + "'", str26, "fr");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fra" + "'", str28, "fra");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(printWriter37);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("FR");
        java.util.Locale.Builder builder8 = builder4.removeUnicodeLocaleAttribute("chinois");
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter10.println(' ');
        printWriter10.println((long) (-1));
        printWriter10.println((java.lang.Object) "");
        java.io.PrintStream printStream18 = new java.io.PrintStream("japonais");
        printStream18.print(0.0f);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream18, true);
        printStream22.print((float) (short) -1);
        printStream22.print('a');
        printStream22.println();
        printStream22.print("hi!");
        printStream22.println((-1L));
        printStream22.println((double) 0.0f);
        printStream22.close();
        printWriter10.print((java.lang.Object) printStream22);
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getVariant();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        java.util.Locale locale39 = locale36.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = locale36.getDisplayLanguage(locale40);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter48 = printWriter46.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        double[] doubleArray63 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer55.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer50.transform(complexArray64);
        java.io.PrintWriter printWriter66 = printWriter46.format("ja", (java.lang.Object[]) complexArray64);
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException(throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException72);
        java.lang.Throwable[] throwableArray74 = functionEvaluationException72.getSuppressed();
        java.lang.Throwable[] throwableArray75 = functionEvaluationException72.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException72.addSuppressed((java.lang.Throwable) functionEvaluationException78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray64, (java.lang.Throwable) functionEvaluationException78);
        java.io.PrintStream printStream81 = printStream22.printf(locale40, "org.apache.commons.math.FunctionEvaluationException: FR", (java.lang.Object[]) complexArray64);
        java.util.Locale.Builder builder82 = builder4.setLocale(locale40);
        java.util.Locale.setDefault(category0, locale40);
        java.util.Locale locale84 = java.util.Locale.getDefault(category0);
        java.util.Locale locale85 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Japanese" + "'", str41, "Japanese");
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.FunctionEvaluationException: hi!");
        java.lang.String str3 = functionEvaluationException2.getPattern();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException2);
        java.lang.Object[] objArray5 = mathException4.getArguments();
        java.lang.Throwable[] throwableArray6 = mathException4.getSuppressed();
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException(throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException18);
        java.lang.Throwable[] throwableArray20 = functionEvaluationException18.getSuppressed();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "zh", (java.lang.Throwable) functionEvaluationException22);
        java.lang.Throwable[] throwableArray24 = functionEvaluationException22.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: fr", (java.lang.Throwable) functionEvaluationException22);
        mathException4.addSuppressed((java.lang.Throwable) functionEvaluationException25);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: hi!" + "'", str3, "org.apache.commons.math.FunctionEvaluationException: hi!");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = printWriter1.append((java.lang.CharSequence) "Japanese");
        printWriter8.println((double) 'x');
        java.io.PrintWriter printWriter12 = printWriter8.append('a');
        printWriter8.print(' ');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter8, true);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex7.multiply(complex9);
        printWriter1.println((java.lang.Object) complex7);
        printWriter1.println((double) 'a');
        printWriter1.println("tedesco");
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream1.print((int) '4');
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream20 = printStream1.append((java.lang.CharSequence) "\u5fb7\u56fd");
        printStream1.print((int) (byte) 100);
        boolean boolean23 = printStream1.checkError();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.write((int) '#');
        printWriter1.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        printWriter1.close();
        java.util.Locale locale18 = new java.util.Locale("ja", "");
        java.lang.String str19 = locale18.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println(false);
        java.io.PrintStream printStream29 = new java.io.PrintStream("japonais");
        printStream29.print(true);
        boolean boolean32 = printStream29.checkError();
        printStream29.println();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer37.inversetransform(complexArray53);
        java.io.PrintStream printStream55 = printStream29.printf(locale34, "de", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer57.inversetransform(complexArray73);
        java.io.PrintWriter printWriter75 = printWriter23.format(locale34, "GB", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer21.inversetransform2(complexArray74);
        java.io.PrintWriter printWriter77 = printWriter1.format(locale18, "chinois", (java.lang.Object[]) complexArray74);
        java.io.PrintWriter printWriter79 = printWriter1.append((java.lang.CharSequence) "gb");
        printWriter1.println((float) (short) -1);
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println((long) (short) 1);
        java.io.PrintWriter printWriter86 = printWriter1.append(' ');
        printWriter86.println(3.9044258434917195E-17d);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ja" + "'", str19, "ja");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ja" + "'", str35, "ja");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printWriter86);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        printStream14.print((long) (byte) 10);
        printStream14.print('#');
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter27.println(' ');
        printWriter27.close();
        java.io.PrintWriter printWriter32 = printWriter27.append('4');
        boolean boolean33 = printWriter32.checkError();
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(true);
        boolean boolean38 = printStream35.checkError();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream35, true);
        boolean boolean41 = printStream35.checkError();
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        java.io.PrintStream printStream44 = new java.io.PrintStream("japonais");
        printStream44.println((long) 10);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter48.println(' ');
        printWriter48.close();
        printWriter48.print((double) 1L);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter55.println(' ');
        printWriter55.println((long) (-1));
        printWriter55.println((java.lang.Object) "");
        char[] charArray68 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter55.println(charArray68);
        printWriter55.println(10);
        printWriter55.print('a');
        char[] charArray74 = new char[] {};
        printWriter55.println(charArray74);
        printWriter48.write(charArray74);
        printStream44.println(charArray74);
        printStream35.println(charArray74);
        printWriter32.println(charArray74);
        printStream14.print(charArray74);
        printStream14.write(10);
        java.io.PrintStream printStream83 = new java.io.PrintStream((java.io.OutputStream) printStream14);
        java.io.PrintStream printStream85 = printStream14.append(' ');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[]");
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(100.0f);
        java.util.Locale locale19 = new java.util.Locale("Deutsch (Deutschland)");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream("japonais");
        printStream37.print(0.0f);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform(doubleArray48);
        java.io.PrintStream printStream50 = printStream37.format(locale40, "japonais", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        printStream50.print((java.lang.Object) doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer31.transform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer31.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer21.transform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform(doubleArray72);
        double[] doubleArray75 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer67.inversetransform2(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer78.transform(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer77.inversetransform2(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer67.transform(complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer21.inversetransform(complexArray86);
        java.io.PrintWriter printWriter89 = printWriter1.format(locale19, "chinois-x-lvariant-ja", (java.lang.Object[]) complexArray86);
        java.io.PrintWriter printWriter91 = printWriter1.append((java.lang.CharSequence) "Italian");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertEquals(locale19.toString(), "deutsch (deutschland)");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(printWriter89);
        org.junit.Assert.assertNotNull(printWriter91);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer5.transform(doubleArray10);
        double[] doubleArray13 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        double[] doubleArray37 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer29.inversetransform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer24.transform(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer41.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer0.transform(doubleArray47);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter53.print(0);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter57.println(' ');
        printWriter57.println((long) (-1));
        printWriter57.println((java.lang.Object) "");
        char[] charArray70 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter57.println(charArray70);
        printWriter53.println(charArray70);
        java.util.Locale locale73 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray80);
        java.io.PrintWriter printWriter82 = printWriter53.format(locale73, "und", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray80, (double) 'u');
        org.apache.commons.math.complex.Complex[] complexArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray84, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.transform(complexArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.inversetransform(univariateRealFunction88, 4.1132503787829275d, 0.9149994957367077d, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [4.1132503787829275, 0.9149994957367077]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer5.transform2(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer34.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.inversetransform2(complexArray51);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(univariateRealFunction53, 0.8813735870195428d, (double) (-1L), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.8813735870195428, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 1, 0.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex8.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex16 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex13.multiply(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex20 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.log();
        org.apache.commons.math.complex.Complex complex26 = complex13.divide(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex13.cos();
        org.apache.commons.math.complex.Complex complex28 = complex11.divide(complex13);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex38 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex36.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex47.divide(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex49.log();
        boolean boolean51 = complex50.isNaN();
        org.apache.commons.math.complex.Complex complex52 = complex43.multiply(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex33.pow(complex43);
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        double double56 = complex54.getImaginary();
        org.apache.commons.math.complex.Complex complex57 = complex54.cos();
        org.apache.commons.math.complex.Complex complex58 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex54.acos();
        org.apache.commons.math.complex.Complex complex60 = complex54.cos();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cos();
        org.apache.commons.math.complex.Complex complex63 = complex61.cos();
        org.apache.commons.math.complex.Complex complex64 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex60.multiply(complex61);
        org.apache.commons.math.complex.Complex complex66 = complex61.negate();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.getImaginary();
        org.apache.commons.math.complex.Complex complex70 = complex67.cos();
        org.apache.commons.math.complex.Complex complex71 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex72 = complex67.acos();
        org.apache.commons.math.complex.Complex complex73 = complex67.cos();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cos();
        org.apache.commons.math.complex.Complex complex76 = complex74.cos();
        org.apache.commons.math.complex.Complex complex77 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex78 = complex74.cosh();
        double double79 = complex78.getImaginary();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex83 = complex78.multiply(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex67.pow(complex78);
        org.apache.commons.math.complex.Complex complex85 = complex84.tan();
        org.apache.commons.math.complex.Complex complex86 = complex66.pow(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex33.multiply(complex66);
        org.apache.commons.math.complex.Complex complex88 = complex33.asin();
        org.apache.commons.math.complex.Complex complex89 = complex32.pow(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex11.subtract(complex32);
        org.apache.commons.math.complex.Complex complex91 = complex4.add(complex11);
        org.apache.commons.math.complex.Complex complex92 = complex91.negate();
        double double93 = complex91.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print(0);
        printWriter1.print('u');
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(true);
        boolean boolean12 = printStream9.checkError();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream9, true);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        double[] doubleArray30 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.inversetransform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer17.transform(complexArray31);
        java.io.PrintStream printStream33 = printStream9.format(locale15, "fr", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter35 = printWriter1.printf("", (java.lang.Object[]) complexArray32);
        printWriter1.print((-1L));
        char[] charArray41 = new char[] { '#', 'a', '4' };
        printWriter1.print(charArray41);
        printWriter1.print((float) 'a');
        printWriter1.print((float) 1L);
        printWriter1.print(' ');
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, a, 4]");
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale3.getDisplayName(locale5);
        java.lang.String str8 = locale3.getLanguage();
        java.lang.String str9 = locale0.getDisplayName(locale3);
        java.lang.String str10 = locale3.getDisplayName();
        java.lang.String str11 = locale3.getVariant();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getScript();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.lang.String str16 = locale3.getDisplayVariant(locale12);
        java.lang.String str17 = locale12.getISO3Country();
        java.util.Set<java.lang.Character> charSet18 = locale12.getExtensionKeys();
        java.lang.String str19 = locale12.getScript();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayScript();
        java.lang.String str23 = locale21.getISO3Country();
        java.lang.String str24 = locale21.getDisplayScript();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.util.Locale.setDefault(category25, locale26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category25);
        java.util.Locale locale31 = java.util.Locale.getDefault(category25);
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.lang.String str33 = locale21.getDisplayCountry(locale31);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.toLanguageTag();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale34.getLanguage();
        java.util.Locale locale39 = new java.util.Locale("hi!");
        java.lang.String str40 = locale39.getISO3Country();
        java.lang.String str41 = locale34.getDisplayName(locale39);
        java.lang.String str42 = locale21.getDisplayScript(locale39);
        java.util.Locale locale44 = new java.util.Locale("hi!");
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale44.getISO3Country();
        java.lang.String str47 = locale44.getDisplayScript();
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getCountry();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale locale53 = java.util.Locale.getDefault(category48);
        java.util.Locale locale54 = java.util.Locale.getDefault(category48);
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        java.lang.String str56 = locale44.getDisplayCountry(locale54);
        java.lang.String str57 = locale44.getDisplayLanguage();
        java.lang.String str58 = locale21.getDisplayScript(locale44);
        java.lang.String str59 = locale12.getDisplayScript(locale21);
        java.lang.String str60 = locale21.getLanguage();
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = locale21.getDisplayName(locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ja" + "'", str6, "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str7, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois" + "'", str9, "chinois");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u6cd5\u6587" + "'", str10, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fr" + "'", str37, "fr");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "French" + "'", str41, "French");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter1.printf("fra", (java.lang.Object[]) strArray7);
        printWriter1.println((long) (short) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.setDefault(locale5);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream35, true);
        java.io.PrintStream printStream41 = printStream37.append((java.lang.CharSequence) "de", (int) (short) 0, (int) (byte) 1);
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getLanguage();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        double[] doubleArray59 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer51.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer46.transform(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer46.inversetransform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer68.inversetransform(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer46.inversetransform2(complexArray76);
        java.io.PrintStream printStream80 = printStream37.format(locale42, "japonais", (java.lang.Object[]) complexArray76);
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        printWriter82.write((int) (byte) 1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ja" + "'", str43, "ja");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer4.transform(doubleArray9);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray9);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform2(doubleArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer13.inversetransform2(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer3.transform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        double[] doubleArray27 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.inversetransform2(doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.print(0.0f);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        java.io.PrintStream printStream43 = printStream30.format(locale33, "japonais", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        printStream43.print((java.lang.Object) doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer19.inversetransform(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray53 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray51, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray51, (double) 10.0f);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer3.inversetransform(complexArray51);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("German (FRA,fr)", (java.lang.Object[]) complexArray56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(0.7071067811865475d, "KR", (java.lang.Object[]) complexArray56);
        double double59 = functionEvaluationException58.getArgument();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.7071067811865475d + "'", double59 == 0.7071067811865475d);
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u65e5\u672c\u8a9e");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream5 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: fr-fr", 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 52");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer7.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer7.transform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer7.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.transform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray49, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        double[] doubleArray66 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.inversetransform2(doubleArray66);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray66, (double) 1);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.transform(doubleArray69);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.transform(univariateRealFunction71, 0.6074753677218339d, (-0.8764755111668926d), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.6074753677218339, -0.8764755111668926]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex6.cos();
        org.apache.commons.math.complex.Complex complex8 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        double double10 = complex9.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.5353099262733676d + "'", double10 == 1.5353099262733676d);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder5 = builder1.setLanguage("zho");
        java.util.Locale locale6 = builder1.build();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Set<java.lang.Character> charSet8 = locale6.getExtensionKeys();
        java.lang.String str9 = locale6.getCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zho");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zho");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        printWriter1.println((long) 'x');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println(false);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder5 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder5.setVariant("Chinese");
        java.util.Locale.Builder builder8 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("\u30c9\u30a4\u30c4\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.FunctionEvaluationException: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Vereinigte Staaten von Amerika", "org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.functionevaluationexception: fr");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale6.getISO3Language();
        java.lang.String str11 = locale6.getISO3Language();
        java.util.Locale.Builder builder12 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = locale14.getVariant();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale14.getDisplayLanguage(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale16);
        boolean boolean20 = locale16.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fra" + "'", str10, "fra");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinesisch" + "'", str17, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Allemagne" + "'", str18, "Allemagne");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale10 = new java.util.Locale("en-US", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.toLanguageTag();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale11.getDisplayName(locale13);
        java.util.Set<java.lang.Character> charSet18 = locale11.getExtensionKeys();
        java.lang.String str19 = locale10.getDisplayScript(locale11);
        java.util.Locale.Builder builder20 = builder7.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder7.removeUnicodeLocaleAttribute("German (Germany)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: German (Germany) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fra" + "'", str16, "fra");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "japonais" + "'", str17, "japonais");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("German (France,japonais)", "FR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: FR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "en-us");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en-us");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.inversetransform(complexArray16);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.inversetransform(univariateRealFunction18, (-0.428182669496151d), (double) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        double[] doubleArray18 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray18);
        java.io.PrintStream printStream21 = new java.io.PrintStream("japonais");
        printStream21.print(0.0f);
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform(doubleArray32);
        java.io.PrintStream printStream34 = printStream21.format(locale24, "japonais", (java.lang.Object[]) complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        printStream34.print((java.lang.Object) doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer10.inversetransform(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform2(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray46);
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        java.io.PrintStream printStream1 = new java.io.PrintStream("allemand (Allemagne)");
        printStream1.print(true);
        java.io.PrintStream printStream5 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: fr");
        java.io.PrintStream printStream6 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream5.print("org.apache.commons.math.MathException: Englisch");
        org.junit.Assert.assertNotNull(printStream5);
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(97.0d, (double) (byte) 100);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cos();
        org.apache.commons.math.complex.Complex complex6 = complex4.cos();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.add(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        double double11 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex12 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        org.apache.commons.math.complex.Complex complex16 = complex12.multiply(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex14.atan();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = complex18.acos();
        org.apache.commons.math.complex.Complex complex22 = complex14.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex7.divide(complex22);
        org.apache.commons.math.complex.Complex complex27 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean28 = complex27.isInfinite();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex29.exp();
        org.apache.commons.math.complex.Complex complex33 = complex27.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex24.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex24.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.atan();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex43 = complex41.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex36.add(complex42);
        boolean boolean45 = complex42.isNaN();
        org.apache.commons.math.complex.Complex complex46 = complex2.multiply(complex42);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.getImaginary();
        double double50 = complex47.getReal();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex54 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex56 = complex54.divide(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.acos();
        org.apache.commons.math.complex.Complex complex58 = complex57.asin();
        boolean boolean60 = complex58.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = complex61.sinh();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex66 = complex64.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex65.sinh();
        org.apache.commons.math.complex.Complex complex68 = complex58.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex47.add(complex58);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex71 = complex70.acos();
        org.apache.commons.math.complex.Complex complex72 = complex71.negate();
        org.apache.commons.math.complex.Complex complex73 = complex71.cosh();
        org.apache.commons.math.complex.Complex complex74 = complex69.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex42.divide(complex75);
        org.apache.commons.math.complex.Complex complex79 = new org.apache.commons.math.complex.Complex((double) (short) 10, 1.0839233273386948d);
        org.apache.commons.math.complex.Complex complex80 = complex76.divide(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex76.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex0.multiply(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex7.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex0.divide(complex10);
        org.apache.commons.math.complex.Complex complex14 = complex0.cos();
        double double15 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex14.sin();
        double double17 = complex16.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(1.5023867059816833d);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 1, 0.7456241416655579d);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.tan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.2473793972302494d + "'", double4 == 1.2473793972302494d);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        java.lang.String str5 = locale0.getLanguage();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale0.getLanguage();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category8);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale.setDefault(category8, locale15);
        java.util.Locale locale18 = java.util.Locale.getDefault(category8);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setLanguage("de");
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale locale24 = builder22.build();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.util.Locale.setDefault(category25, locale26);
        java.lang.String str30 = locale24.getDisplayVariant(locale26);
        java.util.Locale.setDefault(category8, locale24);
        java.lang.String str32 = locale0.getDisplayName(locale24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ja" + "'", str3, "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str4, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Franz\366sisch" + "'", str32, "Franz\366sisch");
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        printStream1.print(false);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.print(0.0f);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        java.io.PrintStream printStream25 = printStream12.format(locale15, "japonais", (java.lang.Object[]) complexArray24);
        printStream25.print((int) '4');
        java.io.PrintStream printStream29 = printStream25.append('u');
        printStream1.println((java.lang.Object) 'u');
        printStream1.println('#');
        printStream1.println('a');
        printStream1.println((int) '4');
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print("\u65e5\u6587");
        printWriter4.println(true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        printWriter12.close();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale15.getDisplayLanguage(locale18);
        java.lang.String str21 = locale15.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale15.getDisplayVariant(locale22);
        java.lang.String str24 = locale22.getDisplayName();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.transform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer26.inversetransform(complexArray42);
        org.apache.commons.math.complex.Complex[] complexArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray42, (double) (-1));
        java.io.PrintWriter printWriter46 = printWriter12.printf(locale22, "en_CA", (java.lang.Object[]) complexArray45);
        printWriter46.write("Canada", 0, (int) (byte) 0);
        printWriter46.println(100L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ja" + "'", str19, "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinesisch" + "'", str24, "Chinesisch");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(printWriter46);
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getISO3Language();
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(true);
        boolean boolean8 = printStream5.checkError();
        printStream5.println();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException(throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException18);
        java.lang.Object[] objArray20 = functionEvaluationException19.getArguments();
        java.io.PrintStream printStream21 = printStream5.printf("org.apache.commons.math.FunctionEvaluationException: hi!", objArray20);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream22.println();
        printStream22.print((float) 'a');
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        boolean boolean27 = locale0.equals((java.lang.Object) printStream22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getLanguage();
        printWriter1.print((java.lang.Object) str10);
        printWriter1.write("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.write((int) 'a');
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter21.println(' ');
        printWriter21.print((float) 10L);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter28.println(' ');
        printWriter28.println((long) (-1));
        printWriter28.println((java.lang.Object) "");
        printWriter28.println();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getScript();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.lang.String str39 = locale36.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer41.inversetransform2(doubleArray44);
        java.io.PrintWriter printWriter46 = printWriter28.printf(locale36, "ja", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter47 = printWriter21.format("", (java.lang.Object[]) complexArray45);
        java.io.PrintStream printStream48 = printStream16.format("de", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter49 = printWriter1.format("French", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter51 = printWriter1.append((java.lang.CharSequence) "allemand");
        printWriter1.close();
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale53);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.toLanguageTag();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getISO3Language();
        java.lang.String str59 = locale53.getDisplayName(locale55);
        java.util.Set<java.lang.Character> charSet60 = locale55.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet61 = locale55.getExtensionKeys();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("");
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.lang.String str65 = locale55.getDisplayCountry(locale63);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter68.println(' ');
        printWriter68.println((long) (-1));
        printWriter68.println((java.lang.Object) "");
        printWriter68.println();
        java.util.Locale locale76 = java.util.Locale.JAPANESE;
        java.lang.String str77 = locale76.getScript();
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        java.lang.String str79 = locale76.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer81.inversetransform2(doubleArray84);
        java.io.PrintWriter printWriter86 = printWriter68.printf(locale76, "ja", (java.lang.Object[]) complexArray85);
        java.io.PrintWriter printWriter87 = printWriter1.printf(locale63, "org.apache.commons.math.MathException: zh", (java.lang.Object[]) complexArray85);
        java.lang.String str88 = locale63.getLanguage();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr" + "'", str56, "fr");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fra" + "'", str58, "fra");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "japonais" + "'", str59, "japonais");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray12 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList22, filteringMode25);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList34);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale37.getDisplayScript();
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.lang.String str41 = locale37.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.toLanguageTag();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getLanguage();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.toLanguageTag();
        boolean boolean54 = locale52.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleKeys();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getISO3Country();
        java.lang.String str66 = locale64.getDisplayScript();
        java.util.Set<java.lang.String> strSet67 = locale64.getUnicodeLocaleKeys();
        java.lang.String str68 = locale64.getISO3Language();
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale37, locale42, locale43, locale47, locale48, locale51, locale52, locale55, locale59, locale60, locale62, locale63, locale64 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale locale72 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList70);
        printWriter1.print((java.lang.Object) languageRangeList5);
        printWriter1.println(0);
        printWriter1.println((long) 0);
        printWriter1.print(1.0f);
        printWriter1.print('x');
        boolean boolean83 = printWriter1.checkError();
        boolean boolean84 = printWriter1.checkError();
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fr" + "'", str53, "fr");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fra" + "'", str68, "fra");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setScript("");
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "zho");
        java.util.Locale locale14 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder10.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter1.println(10);
        printWriter1.write((int) (byte) -1);
        printWriter1.print(100L);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        boolean boolean3 = locale0.hasExtensions();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.getDisplayLanguage();
        java.lang.Object obj6 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr" + "'", str1, "fr");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str5, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "fr");
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "org.apache.commons.math.MathException: Franz\366sisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: Franzo?sisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.MathException: Evaluation failed for argument = -1", "en-CA");
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.mathexception: evaluation failed for argument = -1_EN-CA");
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter8.println(' ');
        printWriter8.println((long) (-1));
        printWriter8.println((java.lang.Object) "");
        printWriter8.println();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        java.io.PrintWriter printWriter26 = printWriter8.printf(locale16, "ja", (java.lang.Object[]) complexArray25);
        java.io.PrintWriter printWriter27 = printWriter1.format("", (java.lang.Object[]) complexArray25);
        boolean boolean28 = printWriter27.checkError();
        printWriter27.println('a');
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter32.println(' ');
        printWriter32.println((long) (-1));
        printWriter32.println((java.lang.Object) "");
        char[] charArray45 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter32.println(charArray45);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter32, true);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter50.print(0);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter54.println(' ');
        printWriter54.println((long) (-1));
        printWriter54.println((java.lang.Object) "");
        char[] charArray67 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter54.println(charArray67);
        printWriter50.println(charArray67);
        printWriter48.write(charArray67);
        printWriter27.write(charArray67);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setScript("");
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale.Builder builder12 = builder10.setRegion("en");
        java.util.Locale locale13 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder10.setExtension(' ', "Italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "_EN");
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray12 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList22, filteringMode25);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList34);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale37.getDisplayScript();
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.lang.String str41 = locale37.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.toLanguageTag();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getLanguage();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.toLanguageTag();
        boolean boolean54 = locale52.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleKeys();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getISO3Country();
        java.lang.String str66 = locale64.getDisplayScript();
        java.util.Set<java.lang.String> strSet67 = locale64.getUnicodeLocaleKeys();
        java.lang.String str68 = locale64.getISO3Language();
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale37, locale42, locale43, locale47, locale48, locale51, locale52, locale55, locale59, locale60, locale62, locale63, locale64 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale locale72 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList70);
        printWriter1.print((java.lang.Object) languageRangeList5);
        printWriter1.println(0);
        printWriter1.println((long) 0);
        printWriter1.print(1.0f);
        printWriter1.print((-1));
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter84.println('a');
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fr" + "'", str53, "fr");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fra" + "'", str68, "fra");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(Double.NEGATIVE_INFINITY, (-1.163916074336452d));
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.flush();
        printWriter3.println((int) 'x');
        boolean boolean7 = printWriter3.checkError();
        java.io.PrintStream printStream9 = new java.io.PrintStream("org.apache.commons.math.FunctionEvaluationException: Chinesisch");
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream9);
        printWriter3.print((java.lang.Object) printStream9);
        printWriter3.write((int) (byte) -1);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.flush();
        printWriter3.print((long) 0);
        printWriter3.flush();
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("de-FR-japonais", 0.49536728921867335d);
        java.lang.String str3 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de-fr-japonais" + "'", str3, "de-fr-japonais");
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter5 = printWriter3.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter3);
        printWriter3.print(' ');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printWriter5);
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\u5fb7\u56fd");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        printWriter13.println((float) (byte) 0);
        printWriter13.print((double) 1);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getLanguage();
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(0.0f);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        java.io.PrintStream printStream40 = printStream27.format(locale30, "japonais", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter41 = printWriter13.format(locale23, "ja", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter43 = printWriter13.append((java.lang.CharSequence) "GB");
        printWriter43.println((float) (short) 100);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter43);
        printWriter46.println((double) (byte) 1);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter43);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex16 = complex5.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.tan();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        java.util.Locale locale26 = new java.util.Locale("hi!");
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale.setDefault(locale26);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        java.lang.String str32 = locale30.getISO3Language();
        java.util.Locale.setDefault(category29, locale30);
        java.lang.String str34 = locale30.getVariant();
        java.lang.String str35 = locale26.getDisplayVariant(locale30);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.toLanguageTag();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getISO3Country();
        java.lang.String str40 = locale36.getISO3Country();
        java.util.Set<java.lang.String> strSet41 = locale36.getUnicodeLocaleKeys();
        java.lang.String str42 = locale30.getDisplayCountry(locale36);
        java.lang.String str44 = locale30.getExtension('x');
        boolean boolean45 = complex24.equals((java.lang.Object) locale30);
        double double46 = complex24.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fr" + "'", str37, "fr");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Italian");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "italian");
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex1.divide(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex7.asin();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex22.negate();
        org.apache.commons.math.complex.Complex complex26 = complex15.divide(complex25);
        boolean boolean27 = complex26.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex26.sqrt();
        double double29 = complex28.abs();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex9.divide(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex28.atan();
        org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) '4', 0.9888977057628651d);
        org.apache.commons.math.complex.Complex complex36 = complex35.log();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex42 = complex41.acos();
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex40.multiply(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex40.exp();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex47.sinh();
        org.apache.commons.math.complex.Complex complex49 = complex45.add(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex45.atan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex54 = complex51.sinh();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex56 = complex54.divide(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.acos();
        org.apache.commons.math.complex.Complex complex58 = complex55.cos();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex60 = complex59.cos();
        org.apache.commons.math.complex.Complex complex61 = complex59.cos();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex55.multiply(complex62);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.getImaginary();
        org.apache.commons.math.complex.Complex complex67 = complex64.sinh();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex69 = complex68.acos();
        org.apache.commons.math.complex.Complex complex70 = complex69.negate();
        org.apache.commons.math.complex.Complex complex71 = complex67.multiply(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex71.log();
        org.apache.commons.math.complex.Complex complex73 = complex63.subtract(complex72);
        double double74 = complex72.abs();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex76 = complex75.acos();
        org.apache.commons.math.complex.Complex complex77 = complex76.negate();
        org.apache.commons.math.complex.Complex complex78 = complex72.multiply(complex76);
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        double double81 = complex79.getImaginary();
        org.apache.commons.math.complex.Complex complex82 = complex79.acos();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex84 = complex83.sqrt1z();
        org.apache.commons.math.complex.Complex complex85 = complex83.conjugate();
        org.apache.commons.math.complex.Complex complex86 = complex79.multiply(complex85);
        org.apache.commons.math.complex.Complex complex87 = complex76.subtract(complex86);
        double double88 = complex87.getReal();
        org.apache.commons.math.complex.Complex complex89 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex90 = complex89.cosh();
        double double91 = complex89.getImaginary();
        org.apache.commons.math.complex.Complex complex92 = complex89.cos();
        org.apache.commons.math.complex.Complex complex93 = complex89.conjugate();
        org.apache.commons.math.complex.Complex complex94 = complex89.acos();
        org.apache.commons.math.complex.Complex complex95 = complex87.divide(complex94);
        org.apache.commons.math.complex.Complex complex96 = complex50.divide(complex87);
        org.apache.commons.math.complex.Complex complex97 = complex96.exp();
        org.apache.commons.math.complex.Complex complex98 = complex35.subtract(complex97);
        org.apache.commons.math.complex.Complex complex99 = complex32.divide(complex97);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        printStream5.print('#');
        printStream5.println((float) 100);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getCountry();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category8);
        java.util.Locale locale14 = java.util.Locale.getDefault(category8);
        printStream7.print((java.lang.Object) locale14);
        java.util.Locale locale16 = null;
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter19.print(0);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println((long) (-1));
        printWriter23.println((java.lang.Object) "");
        char[] charArray36 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter23.println(charArray36);
        printWriter19.println(charArray36);
        java.util.Locale locale39 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray46);
        java.io.PrintWriter printWriter48 = printWriter19.format(locale39, "und", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.transform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer50.transform(complexArray64);
        java.io.PrintWriter printWriter66 = printWriter19.format("japonais", (java.lang.Object[]) complexArray64);
        java.io.PrintStream printStream67 = printStream7.printf(locale16, "French", (java.lang.Object[]) complexArray64);
        printStream7.println((double) 100);
        printStream7.print((float) 10L);
        java.io.PrintStream printStream73 = new java.io.PrintStream("japonais");
        printStream73.print(true);
        boolean boolean76 = printStream73.checkError();
        printStream73.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer81.transform(doubleArray86);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer80.transform2(doubleArray86);
        java.io.PrintStream printStream90 = printStream73.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray89);
        java.io.PrintStream printStream92 = printStream90.append('4');
        byte[] byteArray96 = new byte[] { (byte) 100, (byte) 1, (byte) 10 };
        printStream92.write(byteArray96);
        printStream7.write(byteArray96);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printStream92);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[100, 1, 10]");
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter1.printf("fra", (java.lang.Object[]) strArray7);
        boolean boolean9 = printWriter1.checkError();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter1.println((double) 1.0f);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter16.println(' ');
        printWriter16.println((long) (-1));
        printWriter16.println((java.lang.Object) "");
        printWriter16.println();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter16.println((java.lang.Object) printWriter25);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter16, true);
        printWriter28.println((java.lang.Object) true);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.getISO3Language();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getCountry();
        java.lang.String str39 = locale36.getDisplayCountry(locale37);
        java.util.Locale.setDefault(category31, locale37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintStream printStream55 = new java.io.PrintStream("japonais");
        printStream55.print(0.0f);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform(doubleArray66);
        java.io.PrintStream printStream68 = printStream55.format(locale58, "japonais", (java.lang.Object[]) complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray72);
        printStream68.print((java.lang.Object) doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer49.transform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer49.transform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer42.transform2(doubleArray80);
        java.io.PrintWriter printWriter85 = printWriter28.printf(locale37, "anglais", (java.lang.Object[]) complexArray84);
        org.apache.commons.math.complex.Complex[] complexArray87 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray84, (double) 'u');
        java.io.PrintWriter printWriter88 = printWriter1.printf("FR", (java.lang.Object[]) complexArray87);
        printWriter88.print(100.0f);
        printWriter88.println(' ');
        printWriter88.write("zh_TW");
        printWriter88.println("");
        printWriter88.println(2.319776824715853d);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(printWriter85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(printWriter88);
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer0.inversetransform(doubleArray6);
        java.io.PrintStream printStream10 = new java.io.PrintStream("japonais");
        printStream10.print(0.0f);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream10, true);
        printStream14.print((float) (short) -1);
        printStream14.print('a');
        printStream14.println();
        printStream14.print("hi!");
        printStream14.println((-1L));
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream14);
        java.io.PrintWriter printWriter26 = printWriter24.append('x');
        printWriter26.println((double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        printWriter26.print((java.lang.Object) fastFourierTransformer29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(0.0f);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        java.io.PrintStream printStream54 = printStream41.format(locale44, "japonais", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray58);
        printStream54.print((java.lang.Object) doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer35.transform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.transform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer35.inversetransform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer74.transform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer35.inversetransform2(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer29.inversetransform(doubleArray80);
        double[] doubleArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, 0.5403023058681398d);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[18.91058070538489, 54.03023058681398, 0.0, 28.09571990514327]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[18.91058070538489, 54.03023058681398, 0.0, 28.09571990514327]");
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable27);
        printStream1.print((java.lang.Object) throwable27);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(true);
        printStream31.println((float) (short) 10);
        printStream31.print((long) (short) 10);
        java.io.PrintStream printStream39 = printStream31.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(0.0f);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        java.io.PrintStream printStream54 = printStream41.format(locale44, "japonais", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray58);
        printStream54.print((java.lang.Object) doubleArray58);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.print(0);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.println((long) (-1));
        printWriter67.println((java.lang.Object) "");
        char[] charArray80 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter67.println(charArray80);
        printWriter63.println(charArray80);
        printStream54.print(charArray80);
        printStream31.print(charArray80);
        printStream1.print(charArray80);
        printStream1.print((double) (byte) 0);
        java.io.PrintWriter printWriter88 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        boolean boolean89 = printStream1.checkError();
        java.io.PrintStream printStream91 = printStream1.append((java.lang.CharSequence) "Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream94 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "\u671d\u9c9c\u6587");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ???");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(printStream91);
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (-0.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr-FR");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale15 = java.util.Locale.getDefault(category10);
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = locale15.getDisplayScript(locale17);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.println(false);
        printWriter24.print("FR");
        printWriter24.write("und");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean42 = printWriter41.checkError();
        java.util.Locale locale43 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray50);
        java.lang.Object[] objArray52 = mathException51.getArguments();
        java.io.PrintWriter printWriter53 = printWriter41.printf(locale43, "zho", objArray52);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException59);
        double double61 = functionEvaluationException59.getArgument();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray52, (java.lang.Throwable) functionEvaluationException59);
        java.io.PrintWriter printWriter63 = printWriter24.format(locale34, "fra", objArray52);
        java.io.PrintStream printStream64 = printStream9.format(locale15, "\u30d5\u30e9\u30f3\u30b9\u8a9e", objArray52);
        java.io.PrintStream printStream66 = printStream9.append((java.lang.CharSequence) "Etats-Unis");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream69 = new java.io.PrintStream((java.io.OutputStream) printStream9, false, "org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ja");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream66);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print("\u65e5\u6587");
        printWriter4.println(true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        boolean boolean13 = printWriter4.checkError();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(0.5403023058681398d);
        java.lang.Object[] objArray19 = functionEvaluationException18.getArguments();
        java.io.PrintWriter printWriter20 = printWriter4.format(locale15, "org.apache.commons.math.FunctionEvaluationException: hi!", objArray19);
        printWriter4.println(1.4142135623730951d);
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        java.util.Locale locale25 = java.util.Locale.getDefault(category23);
        java.util.Locale locale26 = java.util.Locale.getDefault(category23);
        java.util.Locale locale27 = java.util.Locale.getDefault(category23);
        java.lang.String str28 = locale27.toLanguageTag();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        printWriter4.print((java.lang.Object) strSet29);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[0.5403023058681398]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[0.5403023058681398]");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex1.multiply(complex4);
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.atan();
        org.apache.commons.math.complex.Complex complex8 = complex4.cos();
        org.apache.commons.math.complex.Complex complex9 = complex4.log();
        java.lang.Class<?> wildcardClass10 = complex4.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex8.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        boolean boolean20 = complex16.equals((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex18);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        double double25 = complex22.abs();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex30 = complex21.subtract(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex26.asin();
        boolean boolean32 = complex31.isNaN();
        org.apache.commons.math.complex.Complex complex33 = complex4.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex35 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex33.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = complex37.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex45 = complex43.divide(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.acos();
        org.apache.commons.math.complex.Complex complex47 = complex44.cos();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cos();
        org.apache.commons.math.complex.Complex complex50 = complex48.cos();
        org.apache.commons.math.complex.Complex complex51 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex44.multiply(complex51);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex58 = complex57.acos();
        org.apache.commons.math.complex.Complex complex59 = complex58.negate();
        org.apache.commons.math.complex.Complex complex60 = complex56.multiply(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex62 = complex52.subtract(complex61);
        double double63 = complex61.abs();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex65 = complex64.acos();
        org.apache.commons.math.complex.Complex complex66 = complex65.negate();
        org.apache.commons.math.complex.Complex complex67 = complex61.multiply(complex65);
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = complex68.sinh();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex73 = complex72.acos();
        org.apache.commons.math.complex.Complex complex74 = complex73.negate();
        org.apache.commons.math.complex.Complex complex75 = complex71.multiply(complex73);
        org.apache.commons.math.complex.Complex complex78 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex79 = complex73.add(complex78);
        boolean boolean81 = complex79.equals((java.lang.Object) 0L);
        org.apache.commons.math.complex.Complex complex82 = complex79.sinh();
        org.apache.commons.math.complex.Complex complex83 = complex65.divide(complex82);
        boolean boolean84 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex85 = complex39.add(complex65);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.println("zh");
        printWriter1.println((float) (short) 10);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getVariant();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale23.getDisplayLanguage();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getDisplayCountry();
        java.lang.String str30 = locale28.getISO3Language();
        java.lang.String str31 = locale28.getDisplayVariant();
        java.util.Set<java.lang.String> strSet32 = locale28.getUnicodeLocaleKeys();
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale34.toLanguageTag();
        java.lang.String str37 = locale28.getDisplayName(locale34);
        java.lang.String str38 = locale23.getDisplayVariant(locale34);
        java.util.Set<java.lang.Character> charSet39 = locale34.getExtensionKeys();
        java.io.PrintStream printStream43 = new java.io.PrintStream("japonais");
        printStream43.print(true);
        boolean boolean46 = printStream43.checkError();
        printStream43.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.transform2(doubleArray56);
        java.io.PrintStream printStream60 = printStream43.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray59, (java.lang.Throwable) functionEvaluationException62);
        java.lang.Object[] objArray64 = mathException63.getArguments();
        java.io.PrintWriter printWriter65 = printWriter1.format(locale34, "chine", objArray64);
        printWriter65.print(' ');
        java.util.Locale locale69 = new java.util.Locale("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.lang.Object[] objArray71 = null;
        java.io.PrintWriter printWriter72 = printWriter65.printf(locale69, "org.apache.commons.math.MathException: Evaluation failed for argument = 52", objArray71);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "japonais" + "'", str27, "japonais");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fra" + "'", str30, "fra");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "und" + "'", str36, "und");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "French" + "'", str37, "French");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertEquals(locale69.toString(), "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertNotNull(printWriter72);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        boolean boolean20 = printStream17.checkError();
        printStream17.println();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException30);
        java.lang.Object[] objArray32 = functionEvaluationException31.getArguments();
        java.io.PrintStream printStream33 = printStream17.printf("org.apache.commons.math.FunctionEvaluationException: hi!", objArray32);
        printStream5.print((java.lang.Object) printStream17);
        printStream17.println("German (Germany)");
        printStream17.println("\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        java.util.Locale locale2 = new java.util.Locale("fran\347ais", "Japanese");
        java.util.Locale locale4 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.print(0.0f);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.transform(doubleArray18);
        java.io.PrintStream printStream20 = printStream7.format(locale10, "japonais", (java.lang.Object[]) complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        printStream20.print((java.lang.Object) doubleArray24);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream20.write(byteArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        java.io.PrintStream printStream41 = printStream20.printf("de", (java.lang.Object[]) complexArray40);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream41, true);
        java.io.PrintStream printStream47 = printStream43.append((java.lang.CharSequence) "de", (int) (short) 0, (int) (byte) 1);
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getLanguage();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        double[] doubleArray65 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer52.transform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer52.inversetransform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer74.inversetransform(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray82, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer52.inversetransform2(complexArray82);
        java.io.PrintStream printStream86 = printStream43.format(locale48, "japonais", (java.lang.Object[]) complexArray82);
        java.lang.String str87 = locale48.getVariant();
        java.lang.String str88 = locale4.getDisplayLanguage(locale48);
        java.util.Locale locale89 = locale4.stripExtensions();
        java.util.Set<java.lang.Character> charSet90 = locale4.getExtensionKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "fran\347ais_JAPANESE");
        org.junit.Assert.assertEquals(locale4.toString(), "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math.functionevaluationexception: fr" + "'", str88, "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertNotNull(charSet90);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.util.Locale locale5 = new java.util.Locale("ja", "");
        java.lang.String str6 = locale2.getDisplayLanguage(locale5);
        java.lang.String str7 = locale0.getDisplayLanguage(locale2);
        java.lang.String str8 = locale2.getDisplayName();
        java.io.PrintStream printStream10 = new java.io.PrintStream("japonais");
        printStream10.print(true);
        boolean boolean13 = printStream10.checkError();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream10, true);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        double[] doubleArray31 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer23.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer18.transform(complexArray32);
        java.io.PrintStream printStream34 = printStream10.format(locale16, "fr", (java.lang.Object[]) complexArray33);
        java.util.Set<java.lang.String> strSet35 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale2.getDisplayCountry(locale16);
        java.lang.String str37 = locale2.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str6, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Franz\366sisch" + "'", str7, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "allemand (Allemagne)" + "'", str8, "allemand (Allemagne)");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Germany" + "'", str36, "Germany");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DE" + "'", str37, "DE");
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer8.transform(doubleArray13);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer7.inversetransform2(doubleArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer17.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer7.transform(doubleArray23);
        double[] doubleArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray23, 74.68593339875962d);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer2.transform(doubleArray30);
        java.io.PrintStream printStream36 = new java.io.PrintStream("japonais");
        printStream36.print(true);
        boolean boolean39 = printStream36.checkError();
        printStream36.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.transform2(doubleArray49);
        java.io.PrintStream printStream53 = printStream36.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray52, (java.lang.Throwable) functionEvaluationException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer2.inversetransform(complexArray52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) 'x', "org.apache.commons.math.MathException: fr");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((-0.428182669496151d), "\u7f8e\u56fd", (java.lang.Object[]) complexArray52, (java.lang.Throwable) functionEvaluationException61);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[2614.0076689565867, 7468.593339875962, 0.0, 3883.6685367355]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[2614.0076689565867, 7468.593339875962, 0.0, 3883.6685367355]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(complexArray58);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.negate();
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex15.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 9496.918591904647d + "'", double16 == 9496.918591904647d);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex12.atan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = complex25.tan();
        org.apache.commons.math.complex.Complex complex27 = complex12.subtract(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex12.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex12.acos();
        org.apache.commons.math.complex.Complex complex31 = null;
        org.apache.commons.math.complex.Complex complex32 = complex12.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex12.asin();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        double double38 = complex35.getReal();
        org.apache.commons.math.complex.Complex complex39 = complex35.asin();
        org.apache.commons.math.complex.Complex complex40 = complex34.add(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex46 = complex43.sinh();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex48 = complex47.acos();
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex46.multiply(complex48);
        org.apache.commons.math.complex.Complex complex51 = complex48.atan();
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex51.sin();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        double double56 = complex54.getImaginary();
        org.apache.commons.math.complex.Complex complex57 = complex54.sinh();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex59 = complex57.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex62 = complex60.sin();
        org.apache.commons.math.complex.Complex complex63 = complex60.sin();
        org.apache.commons.math.complex.Complex complex64 = complex53.add(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex64.atan();
        org.apache.commons.math.complex.Complex complex66 = complex34.divide(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex12.pow(complex66);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("FR");
        java.lang.String str7 = locale6.getVariant();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale8.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale8.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale19.getDisplayScript();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.lang.String str25 = locale19.getDisplayName(locale24);
        java.lang.String str26 = locale13.getDisplayCountry(locale24);
        java.lang.String str27 = locale6.getDisplayName(locale24);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale31 = new java.util.Locale("ja", "");
        java.lang.String str32 = locale31.getScript();
        java.util.Locale locale34 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale37 = new java.util.Locale("zho", "fran\347ais");
        java.lang.String str38 = locale34.getDisplayCountry(locale37);
        java.lang.String str39 = locale31.getDisplayLanguage(locale34);
        java.util.Locale.setDefault(category0, locale34);
        java.util.Locale locale41 = java.util.Locale.getDefault(category0);
        java.lang.String str42 = locale41.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "chinois" + "'", str11, "chinois");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u6587" + "'", str14, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ja" + "'", str20, "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str21, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str25, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str27, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(locale34.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals(locale37.toString(), "zho_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanese" + "'", str39, "Japanese");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str42, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Japanisch");
        java.lang.String str2 = locale1.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.flush();
        printWriter1.println(false);
        printWriter1.write("FR");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer19.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform(doubleArray53);
        double[] doubleArray56 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer48.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer43.transform(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer19.transform2(complexArray58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "Franz\366sisch", (java.lang.Object[]) complexArray58);
        printWriter1.print((java.lang.Object) functionEvaluationException60);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.Writer) printWriter62);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        java.io.PrintStream printStream4 = new java.io.PrintStream("japonais");
        printStream4.print(true);
        boolean boolean7 = printStream4.checkError();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream4, true);
        boolean boolean10 = printStream4.checkError();
        java.io.PrintStream printStream12 = printStream4.append((java.lang.CharSequence) "zh");
        printStream4.println((long) (-1));
        printStream4.print((int) (byte) 100);
        printStream4.print("org.apache.commons.math.MathException");
        java.lang.String[] strArray20 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream21 = printStream4.format("de_ALLEMAND_zh", (java.lang.Object[]) strArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(Double.NaN, "en_US", (java.lang.Object[]) strArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, (java.lang.Throwable) functionEvaluationException22);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(printStream21);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray12 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList22, filteringMode25);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList34);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale37.getDisplayScript();
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.lang.String str41 = locale37.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.toLanguageTag();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getLanguage();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.toLanguageTag();
        boolean boolean54 = locale52.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleKeys();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getISO3Country();
        java.lang.String str66 = locale64.getDisplayScript();
        java.util.Set<java.lang.String> strSet67 = locale64.getUnicodeLocaleKeys();
        java.lang.String str68 = locale64.getISO3Language();
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale37, locale42, locale43, locale47, locale48, locale51, locale52, locale55, locale59, locale60, locale62, locale63, locale64 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale locale72 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList70);
        printWriter1.print((java.lang.Object) languageRangeList5);
        printWriter1.println(0);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("");
        java.lang.Object[] objArray80 = mathException79.getArguments();
        java.io.PrintWriter printWriter81 = printWriter1.format("chinois", objArray80);
        printWriter1.close();
        printWriter1.flush();
        java.io.PrintWriter printWriter85 = printWriter1.append(' ');
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fr" + "'", str53, "fr");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fra" + "'", str68, "fra");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printWriter85);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        boolean boolean9 = printStream7.checkError();
        java.util.Locale locale11 = new java.util.Locale("fra");
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        boolean boolean20 = printStream17.checkError();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        double[] doubleArray38 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer25.transform(complexArray39);
        java.io.PrintStream printStream41 = printStream17.format(locale23, "fr", (java.lang.Object[]) complexArray40);
        java.io.PrintStream printStream42 = printStream7.format(locale13, "French", (java.lang.Object[]) complexArray40);
        java.io.PrintStream printStream45 = new java.io.PrintStream("japonais");
        printStream45.print(true);
        printStream45.println((float) (short) 10);
        printStream45.println((long) (byte) 0);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream45, false);
        java.lang.Throwable throwable59 = null;
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException(throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException61);
        java.lang.Throwable[] throwableArray63 = functionEvaluationException61.getSuppressed();
        java.lang.Throwable[] throwableArray64 = functionEvaluationException61.getSuppressed();
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException(throwable75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException77);
        java.lang.String str79 = functionEvaluationException77.getPattern();
        functionEvaluationException70.addSuppressed((java.lang.Throwable) functionEvaluationException77);
        java.lang.Object[] objArray81 = functionEvaluationException70.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("und", (java.lang.Object[]) throwableArray64, (java.lang.Throwable) functionEvaluationException70);
        java.io.PrintWriter printWriter83 = printWriter53.format("und", (java.lang.Object[]) throwableArray64);
        java.io.PrintStream printStream84 = printStream7.format("org.apache.commons.math.MathException: fr", (java.lang.Object[]) throwableArray64);
        boolean boolean85 = printStream84.checkError();
        printStream84.println('#');
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "fra");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        printStream1.print(false);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.print(0.0f);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        java.io.PrintStream printStream25 = printStream12.format(locale15, "japonais", (java.lang.Object[]) complexArray24);
        printStream25.print((int) '4');
        java.io.PrintStream printStream29 = printStream25.append('u');
        printStream1.println((java.lang.Object) 'u');
        printStream1.println('#');
        printStream1.println((long) 1);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter37.println(' ');
        printWriter37.println((long) (-1));
        printWriter37.println((java.lang.Object) "");
        char[] charArray50 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter37.println(charArray50);
        printWriter37.println('u');
        boolean boolean54 = printWriter37.checkError();
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Throwable[] throwableArray64 = functionEvaluationException62.getSuppressed();
        java.io.PrintWriter printWriter65 = printWriter37.printf("Koreanisch", (java.lang.Object[]) throwableArray64);
        java.io.PrintStream printStream66 = printStream1.format("ja", (java.lang.Object[]) throwableArray64);
        boolean boolean67 = printStream66.checkError();
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        printStream14.println(true);
        printStream14.println("allemand");
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream14, true);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100, (byte) 100, (byte) 10 };
        printStream14.write(byteArray46);
        printStream14.print(false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 100, 100, 10]");
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) 10, (double) 100L);
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex0.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        double double11 = complex7.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.319776824715853d + "'", double11 == 2.319776824715853d);
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("anglais");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        java.lang.Throwable throwable9 = null;
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException(throwable9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException11);
        java.lang.Throwable[] throwableArray13 = functionEvaluationException11.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "zh", (java.lang.Throwable) functionEvaluationException15);
        java.lang.Throwable[] throwableArray17 = functionEvaluationException15.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: fr", (java.lang.Throwable) functionEvaluationException15);
        java.lang.Object[] objArray19 = functionEvaluationException18.getArguments();
        java.lang.Object[] objArray20 = functionEvaluationException18.getArguments();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getCountry();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale4.getDisplayName(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder2.setLanguageTag("Japanese");
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale17.getDisplayName(locale20);
        java.util.Locale.Builder builder23 = builder15.setLocale(locale20);
        java.util.Locale.Builder builder25 = builder15.setLanguageTag("Japanese");
        java.util.Locale locale26 = builder25.build();
        java.util.Locale.Builder builder27 = builder2.setLocale(locale26);
        java.util.Locale locale28 = builder27.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder27.addUnicodeLocaleAttribute("org.apache.commons.math.functionevaluationexception: zho");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.functionevaluationexception: zho [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais" + "'", str22, "fran\347ais");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "japanese");
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException(throwable5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException7);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException(throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException14);
        java.lang.String str16 = functionEvaluationException14.getPattern();
        functionEvaluationException7.addSuppressed((java.lang.Throwable) functionEvaluationException14);
        java.lang.Throwable[] throwableArray18 = functionEvaluationException14.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "org.apache.commons.math.MathException: hi!", (java.lang.Throwable) functionEvaluationException14);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException19);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        double[] doubleArray18 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer5.transform(complexArray19);
        java.io.PrintWriter printWriter21 = printWriter1.format("ja", (java.lang.Object[]) complexArray19);
        printWriter21.println((float) 1L);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getLanguage();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleAttributes();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter30.println(' ');
        printWriter30.println((long) (-1));
        printWriter30.println((java.lang.Object) "");
        printWriter30.println();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getLanguage();
        printWriter30.print((java.lang.Object) str39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer42.inversetransform2(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer42.transform2(complexArray58);
        java.io.PrintWriter printWriter60 = printWriter30.format("fran\347ais", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter61 = printWriter21.format(locale24, "org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter63 = printWriter61.append((java.lang.CharSequence) "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        java.io.PrintWriter printWriter65 = printWriter63.append('u');
        java.io.PrintWriter printWriter69 = printWriter63.append((java.lang.CharSequence) "TWN", (int) (short) 1, 1);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de" + "'", str25, "de");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ja" + "'", str39, "ja");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.flush();
        printStream1.println((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream8 = printStream1.append((java.lang.CharSequence) "chinois (JAPONAIS)", (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 32");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        boolean boolean9 = complex7.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex13.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex7.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex19.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.println((int) '4');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        java.io.PrintWriter printWriter17 = printWriter1.append((java.lang.CharSequence) "zh");
        printWriter1.println(100.0f);
        printWriter1.println('4');
        org.junit.Assert.assertNotNull(printWriter17);
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd_FR");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(true);
        boolean boolean6 = printStream3.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        double[] doubleArray24 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer11.transform(complexArray25);
        java.io.PrintStream printStream27 = printStream3.format(locale9, "fr", (java.lang.Object[]) complexArray26);
        printStream3.print((double) 100);
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale30.getDisplayVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer35.inversetransform(complexArray51);
        java.io.PrintStream printStream53 = printStream3.printf(locale30, "\u65e5\u6587", (java.lang.Object[]) complexArray51);
        printStream1.println((java.lang.Object) "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u6587" + "'", str32, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ja", 0.7075128122711367d);
        java.lang.String str3 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ja" + "'", str3, "ja");
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        java.lang.String[] strArray3 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) strArray3);
        java.lang.Throwable[] throwableArray6 = mathException5.getSuppressed();
        java.lang.String str7 = mathException5.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.math.MathException: GB" + "'", str7, "org.apache.commons.math.MathException: GB");
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) (short) 100, 1.3043045862358962d, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 1.3043045862358962]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale.Builder builder8 = builder2.clear();
        java.util.Locale.Builder builder11 = builder2.setExtension('u', "en-CA");
        java.util.Locale.Builder builder13 = builder2.setRegion("FR");
        java.util.Locale.Builder builder15 = builder2.addUnicodeLocaleAttribute("TWN");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("en-US", "it");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: it");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        printStream1.print(false);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.print(0.0f);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        java.io.PrintStream printStream25 = printStream12.format(locale15, "japonais", (java.lang.Object[]) complexArray24);
        printStream25.print((int) '4');
        java.io.PrintStream printStream29 = printStream25.append('u');
        printStream1.println((java.lang.Object) 'u');
        printStream1.println('#');
        printStream1.println((long) 1);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter37.println(' ');
        printWriter37.println((long) (-1));
        printWriter37.println((java.lang.Object) "");
        char[] charArray50 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter37.println(charArray50);
        printWriter37.println('u');
        boolean boolean54 = printWriter37.checkError();
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Throwable[] throwableArray64 = functionEvaluationException62.getSuppressed();
        java.io.PrintWriter printWriter65 = printWriter37.printf("Koreanisch", (java.lang.Object[]) throwableArray64);
        java.io.PrintStream printStream66 = printStream1.format("ja", (java.lang.Object[]) throwableArray64);
        printStream66.println((long) '4');
        printStream66.print(100L);
        boolean boolean71 = printStream66.checkError();
        printStream66.println((float) (short) 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("chinois (Chine)");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("englisch", (java.lang.Throwable) mathException2);
        java.lang.String str4 = mathException2.getPattern();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chinois (Chine)" + "'", str4, "chinois (Chine)");
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        printStream1.print((-1));
        printStream1.println(false);
        printStream1.print((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder6 = builder2.removeUnicodeLocaleAttribute("chinois");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setLanguageTag("Italian");
        java.util.Locale.Builder builder10 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setScript("org.apache.commons.math.FunctionEvaluationException: English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: org.apache.commons.math.FunctionEvaluationException: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print("FR");
        printWriter1.write("und");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean19 = printWriter18.checkError();
        java.util.Locale locale20 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.io.PrintWriter printWriter30 = printWriter18.printf(locale20, "zho", objArray29);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException36);
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) functionEvaluationException36);
        java.io.PrintWriter printWriter40 = printWriter1.format(locale11, "fra", objArray29);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println(false);
        printWriter42.print((int) (short) 1);
        printWriter1.println((java.lang.Object) printWriter42);
        java.io.PrintWriter printWriter51 = printWriter1.append('4');
        printWriter51.flush();
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter51, true);
        printWriter54.print("allemand (FRA)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(0.6865874069985796d, "de-de");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("franz\366sisch_ZH", (java.lang.Throwable) functionEvaluationException3);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        printStream1.print((-1));
        printStream1.println(false);
        printStream1.println("japonais");
        printStream1.println((float) (-1L));
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: ja_JP");
        printStream1.println(' ');
        printStream1.println(false);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException: zho");
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println((long) (-1));
        printStream1.print((int) (byte) 100);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("japonais");
        printStream26.print(0.0f);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        java.io.PrintStream printStream39 = printStream26.format(locale29, "japonais", (java.lang.Object[]) complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        printStream39.print((java.lang.Object) doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer20.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer15.transform(complexArray47);
        java.io.PrintStream printStream49 = printStream1.printf("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray48);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream49, false);
        printStream51.println("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream51, true);
        printStream51.println();
        printStream51.print(1L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printStream49);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        java.io.PrintStream printStream31 = printStream27.append((java.lang.CharSequence) "Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)", 0, (int) (short) 10);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream27);
        printStream27.close();
        printStream27.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.3043045862358962d, 0.21431630255703113d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.3043045862358962, 0.21431630255703113]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 'x', 35.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream3, true);
        printStream7.print((float) (short) -1);
        printStream7.print('a');
        printStream7.println();
        printStream7.print("hi!");
        printStream7.println((-1L));
        printStream7.println((double) 0.0f);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean25 = printWriter24.checkError();
        java.util.Locale locale26 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray33);
        java.lang.Object[] objArray35 = mathException34.getArguments();
        java.io.PrintWriter printWriter36 = printWriter24.printf(locale26, "zho", objArray35);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException42);
        double double44 = functionEvaluationException42.getArgument();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("", objArray35, (java.lang.Throwable) functionEvaluationException42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "Chinesisch", (java.lang.Throwable) mathException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException46);
        java.lang.Throwable[] throwableArray48 = functionEvaluationException46.getSuppressed();
        java.io.PrintStream printStream49 = printStream7.printf("Evaluation failed for argument = -1", (java.lang.Object[]) throwableArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        java.io.PrintStream printStream57 = new java.io.PrintStream("japonais");
        printStream57.print(0.0f);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        java.io.PrintStream printStream70 = printStream57.format(locale60, "japonais", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer71.inversetransform2(doubleArray74);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray74);
        printStream70.print((java.lang.Object) doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer51.transform2(doubleArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer80.transform(doubleArray85);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer79.transform2(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer51.inversetransform(complexArray88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: fr", (java.lang.Object[]) complexArray88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(2.3875907313528697d, "ALLEMAND", (java.lang.Object[]) throwableArray48, (java.lang.Throwable) mathException91);
        java.lang.String str93 = functionEvaluationException92.getPattern();
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ALLEMAND" + "'", str93, "ALLEMAND");
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getCountry();
        java.lang.String str37 = locale35.getDisplayCountry();
        java.util.Locale.setDefault(category34, locale35);
        java.util.Locale locale39 = java.util.Locale.getDefault(category34);
        java.util.Locale locale40 = java.util.Locale.getDefault(category34);
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = locale40.getScript();
        printStream33.println((java.lang.Object) locale40);
        printStream33.write((int) ' ');
        java.io.PrintStream printStream48 = printStream33.append('x');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.7456241416655578d, 0.9999999999999999d, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.exp();
        org.apache.commons.math.complex.Complex complex11 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex2.multiply(complex5);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex24 = complex18.add(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex18.negate();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cos();
        org.apache.commons.math.complex.Complex complex29 = complex27.cos();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex27.cosh();
        double double32 = complex31.getImaginary();
        org.apache.commons.math.complex.Complex complex33 = complex18.add(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex31.negate();
        org.apache.commons.math.complex.Complex complex35 = complex5.multiply(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.acos();
        double double37 = complex31.abs();
        org.apache.commons.math.complex.Complex complex38 = complex31.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.5403023058681398d + "'", double37 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter10.print((float) (-1));
        printWriter10.println('4');
        java.io.PrintWriter printWriter17 = printWriter10.append('4');
        printWriter17.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform(doubleArray25);
        double[] doubleArray28 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer20.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.inversetransform2(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer20.transform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter42 = printWriter17.format("Italy", (java.lang.Object[]) complexArray39);
        printWriter42.write((int) 'u');
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printWriter42);
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.FunctionEvaluationException: DEU");
        printStream1.print((long) (byte) 0);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println(' ');
        printWriter2.println(false);
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(true);
        boolean boolean11 = printStream8.checkError();
        printStream8.println();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale13.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer16.inversetransform(complexArray32);
        java.io.PrintStream printStream34 = printStream8.printf(locale13, "de", (java.lang.Object[]) complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer36.transform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer46.transform(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer36.inversetransform(complexArray52);
        java.io.PrintWriter printWriter54 = printWriter2.format(locale13, "GB", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform2(complexArray53);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.inversetransform(univariateRealFunction56, (-0.8813735870195429d), 0.9149994957367077d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ja" + "'", str14, "ja");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(complexArray55);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        java.lang.String[] strArray2 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(4.1132503787829275d, "Canada", (java.lang.Object[]) strArray2);
        java.lang.Throwable[] throwableArray4 = functionEvaluationException3.getSuppressed();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.FunctionEvaluationException: fr");
        printWriter1.println((long) (byte) 1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println(' ');
        printWriter5.println((long) (-1));
        printWriter5.println((java.lang.Object) "");
        printWriter5.println();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println((java.lang.Object) printWriter14);
        printWriter14.print((float) (-1));
        printWriter14.println('4');
        java.io.PrintWriter printWriter21 = printWriter14.append('4');
        printWriter14.write((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getISO3Country();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale27.getDisplayName(locale29);
        java.lang.String str32 = locale27.getLanguage();
        java.lang.String str33 = locale24.getDisplayName(locale27);
        java.lang.String str34 = locale27.getDisplayName();
        java.lang.String str35 = locale27.getVariant();
        java.io.PrintStream printStream38 = new java.io.PrintStream("japonais");
        printStream38.print(0.0f);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        java.io.PrintStream printStream51 = printStream38.format(locale41, "japonais", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        printStream51.print((java.lang.Object) doubleArray55);
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale59.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        java.io.PrintStream printStream70 = printStream51.printf(locale59, "GB", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, (double) 0.0f);
        java.io.PrintWriter printWriter73 = printWriter14.format(locale27, "ja", (java.lang.Object[]) complexArray72);
        printWriter73.println(100);
        printWriter1.print((java.lang.Object) printWriter73);
        printWriter73.print("");
        printWriter73.print(false);
        printWriter73.print(false);
        printWriter73.print((long) 'u');
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ja" + "'", str30, "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str31, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr" + "'", str32, "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "chinois" + "'", str33, "chinois");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fran\347ais" + "'", str34, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh" + "'", str61, "zh");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printWriter73);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        printWriter13.println((float) (byte) 0);
        printWriter13.print((double) 1);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getLanguage();
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(0.0f);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        java.io.PrintStream printStream40 = printStream27.format(locale30, "japonais", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter41 = printWriter13.format(locale23, "ja", (java.lang.Object[]) complexArray39);
        java.util.Set<java.lang.String> strSet42 = locale23.getUnicodeLocaleKeys();
        java.lang.String str43 = locale23.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream14);
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) -1, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex6.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = complex7.acos();
        org.apache.commons.math.complex.Complex complex10 = complex7.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cos();
        org.apache.commons.math.complex.Complex complex13 = complex11.cos();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex7.multiply(complex14);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex19.multiply(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex15.subtract(complex24);
        double double26 = complex24.abs();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex32 = complex2.subtract(complex24);
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.sin();
        double double35 = complex32.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer3.transform(doubleArray8);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer2.inversetransform(doubleArray8);
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.print(true);
        printStream12.println((-1));
        printStream12.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer29.transform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        java.io.PrintStream printStream45 = new java.io.PrintStream("japonais");
        printStream45.print(0.0f);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        java.io.PrintStream printStream58 = printStream45.format(locale48, "japonais", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        printStream58.print((java.lang.Object) doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer39.transform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer29.inversetransform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer19.transform(doubleArray62);
        java.io.PrintStream printStream69 = printStream12.printf("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer2.transform(complexArray68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("anglais (Etats-Unis)", (java.lang.Object[]) complexArray68, (java.lang.Throwable) functionEvaluationException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("FRENCH", (java.lang.Throwable) mathException74);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.transform(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray7);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform2(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(0.0f);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        java.io.PrintStream printStream30 = printStream17.format(locale20, "japonais", (java.lang.Object[]) complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray34);
        printStream30.print((java.lang.Object) doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer11.transform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer1.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        double[] doubleArray55 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer47.inversetransform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer42.transform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer42.inversetransform(complexArray62);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException(throwable67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException69);
        java.lang.Throwable[] throwableArray71 = functionEvaluationException69.getSuppressed();
        java.lang.Throwable[] throwableArray72 = functionEvaluationException69.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException69.addSuppressed((java.lang.Throwable) functionEvaluationException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray63, (java.lang.Throwable) functionEvaluationException75);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer1.inversetransform(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer80.inversetransform2(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer1.inversetransform(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray92 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer87.transform(doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer1.transform(doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray96 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray94, (double) (short) 100);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", (java.lang.Object[]) complexArray94);
        java.lang.Throwable[] throwableArray98 = mathException97.getSuppressed();
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException97);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setLanguage("de");
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder14 = builder11.setRegion("FR");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder14.setScript("");
        java.util.Locale.Builder builder19 = builder14.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.setRegion("");
        java.util.Locale.Builder builder23 = builder20.clearExtensions();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getCountry();
        java.lang.String str27 = locale25.getDisplayCountry();
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale locale29 = java.util.Locale.getDefault(category24);
        java.util.Locale locale30 = java.util.Locale.getDefault(category24);
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder32 = builder20.setLocale(locale30);
        java.util.Locale locale33 = builder20.build();
        java.util.Locale.Builder builder34 = builder19.setLocale(locale33);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("org.apache.commons.math.FunctionEvaluationException: Chinesisch");
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        boolean boolean38 = locale37.hasExtensions();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale37.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale37.getDisplayScript(locale42);
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.getISO3Country();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale46.getDisplayName(locale48);
        java.lang.String str51 = locale48.getDisplayScript();
        java.util.Set<java.lang.String> strSet52 = locale48.getUnicodeLocaleKeys();
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = locale48.getDisplayName(locale53);
        java.lang.String str55 = locale42.getDisplayCountry(locale53);
        java.lang.String str56 = locale36.getDisplayCountry(locale42);
        java.util.Locale.Builder builder57 = builder34.setLocale(locale36);
        java.util.Locale.setDefault(category0, locale36);
        java.lang.String str59 = locale36.getISO3Country();
        boolean boolean60 = locale36.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "chinois" + "'", str40, "chinois");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u65e5\u6587" + "'", str43, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str50, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str54, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.FunctionEvaluationException: Chinesisch");
        java.util.Locale locale2 = null;
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(true);
        boolean boolean8 = printStream5.checkError();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        boolean boolean11 = printStream5.checkError();
        java.io.PrintStream printStream13 = printStream5.append((java.lang.CharSequence) "zh");
        printStream5.println((long) (-1));
        printStream5.print((int) (byte) 100);
        printStream5.print("org.apache.commons.math.MathException");
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream22 = printStream5.format("de_ALLEMAND_zh", (java.lang.Object[]) strArray21);
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.print(true);
        boolean boolean28 = printStream25.checkError();
        printStream25.println();
        printStream25.print((-1));
        printStream25.println((float) (-1));
        java.util.Locale locale37 = new java.util.Locale("de", "allemand", "zh");
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.print(0);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter44.println(' ');
        printWriter44.println((long) (-1));
        printWriter44.println((java.lang.Object) "");
        char[] charArray57 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter44.println(charArray57);
        printWriter40.println(charArray57);
        java.util.Locale locale60 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray67);
        java.io.PrintWriter printWriter69 = printWriter40.format(locale60, "und", (java.lang.Object[]) complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, (double) 'u');
        java.io.PrintStream printStream72 = printStream25.format(locale37, "org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray67);
        java.io.PrintStream printStream73 = printStream22.format("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray67);
        java.io.PrintStream printStream74 = printStream1.format(locale2, "org.apache.commons.math.functionevaluationexception: hi!", (java.lang.Object[]) complexArray67);
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter77 = printWriter75.append((java.lang.CharSequence) "ALLEMAND");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(locale37.toString(), "de_ALLEMAND_zh");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        java.util.Locale locale2 = new java.util.Locale("und-Chine", "\u5fb7\u56fd");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale3.getVariant();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = locale3.stripExtensions();
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.write((int) 'a');
        printStream8.print(0.0f);
        java.io.PrintStream printStream14 = printStream8.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getCountry();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.util.Locale locale21 = java.util.Locale.getDefault(category15);
        printStream14.print((java.lang.Object) locale21);
        java.lang.String str23 = locale3.getDisplayName(locale21);
        java.lang.String str24 = locale3.toLanguageTag();
        java.lang.String str25 = locale2.getDisplayScript(locale3);
        java.lang.String str26 = locale2.getCountry();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "japonais" + "'", str23, "japonais");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ja" + "'", str24, "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u5fb7\u56fd" + "'", str26, "\u5fb7\u56fd");
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.println((float) (byte) 100);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = locale30.getDisplayCountry(locale31);
        java.lang.String str34 = locale30.getDisplayCountry();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.Throwable[] throwableArray40 = functionEvaluationException39.getSuppressed();
        java.lang.String[] strArray44 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray44);
        double double46 = functionEvaluationException45.getArgument();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\u65e5\u6587", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) mathException48);
        java.io.PrintStream printStream50 = printStream1.format(locale30, "en", (java.lang.Object[]) throwableArray40);
        printStream50.println("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream50, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(printStream50);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15, filteringMode18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("fr", strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale34.getDisplayScript();
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        java.lang.String str38 = locale34.getISO3Language();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.toLanguageTag();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getLanguage();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.toLanguageTag();
        boolean boolean51 = locale49.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = locale52.getDisplayScript();
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getDisplayCountry();
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = locale61.getISO3Country();
        java.lang.String str63 = locale61.getDisplayScript();
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleKeys();
        java.lang.String str65 = locale61.getISO3Language();
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale34, locale39, locale40, locale44, locale45, locale48, locale49, locale52, locale56, locale57, locale59, locale60, locale61 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale70 = java.util.Locale.lookup(languageRangeList24, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = locale72.getISO3Country();
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.lang.String str75 = locale74.getLanguage();
        java.lang.String str76 = locale72.getDisplayName(locale74);
        java.lang.String str77 = locale72.getLanguage();
        java.util.Set<java.lang.String> strSet78 = locale72.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode79 = null;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet78, filteringMode79);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode18.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr" + "'", str41, "fr");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fra" + "'", str43, "fra");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ja" + "'", str46, "ja");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fra" + "'", str65, "fra");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ja" + "'", str75, "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str76, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fr" + "'", str77, "fr");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter6.println(' ');
        printWriter6.println(false);
        printWriter6.print((int) (short) 1);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter17.println(' ');
        printWriter17.print((float) 10L);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.println((long) (-1));
        printWriter24.println((java.lang.Object) "");
        printWriter24.println();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale32.getScript();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleKeys();
        java.lang.String str35 = locale32.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        java.io.PrintWriter printWriter42 = printWriter24.printf(locale32, "ja", (java.lang.Object[]) complexArray41);
        java.io.PrintWriter printWriter43 = printWriter17.format("", (java.lang.Object[]) complexArray41);
        java.io.PrintWriter printWriter44 = printWriter6.printf(locale13, "org.apache.commons.math.MathException: japonais", (java.lang.Object[]) complexArray41);
        java.lang.String str45 = locale13.toLanguageTag();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale46.toLanguageTag();
        java.lang.String str49 = locale46.getDisplayVariant();
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("org.apache.commons.math.functionevaluationexception: fr");
        java.lang.String str52 = locale46.getDisplayScript(locale51);
        java.lang.String str53 = locale13.getDisplayLanguage(locale46);
        java.util.Locale.Builder builder54 = builder4.setLocale(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder57 = builder54.setExtension(' ', "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fr" + "'", str45, "fr");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh" + "'", str48, "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u6cd5\u6587" + "'", str53, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = printWriter1.append((java.lang.CharSequence) "Japanese");
        printWriter8.print((double) (short) 100);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter11.println((long) 100);
        org.junit.Assert.assertNotNull(printWriter8);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("de", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("Chine", strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("FR", strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap11);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale13.getDisplayName(locale15);
        java.lang.String str18 = locale15.getDisplayScript();
        java.util.Set<java.lang.String> strSet19 = locale15.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strSet19, filteringMode20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray29 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.parse("FR", strMap36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray43 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.getDisplayScript();
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        java.lang.String str51 = locale47.getISO3Language();
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale53.toLanguageTag();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getISO3Language();
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleKeys();
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = locale62.toLanguageTag();
        boolean boolean64 = locale62.hasExtensions();
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = locale65.getISO3Country();
        java.lang.String str67 = locale65.getDisplayScript();
        java.util.Set<java.lang.String> strSet68 = locale65.getUnicodeLocaleKeys();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.lang.String str71 = locale70.getDisplayCountry();
        java.util.Locale locale72 = java.util.Locale.KOREA;
        java.util.Locale locale73 = java.util.Locale.KOREA;
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.lang.String str75 = locale74.getISO3Country();
        java.lang.String str76 = locale74.getDisplayScript();
        java.util.Set<java.lang.String> strSet77 = locale74.getUnicodeLocaleKeys();
        java.lang.String str78 = locale74.getISO3Language();
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale47, locale52, locale53, locale57, locale58, locale61, locale62, locale65, locale69, locale70, locale72, locale73, locale74 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale locale82 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter(languageRangeList37, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale84 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter(languageRangeList23, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale87 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList80);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ja" + "'", str16, "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str17, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fr" + "'", str54, "fr");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fra" + "'", str56, "fra");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ja" + "'", str59, "ja");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fr" + "'", str63, "fr");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fra" + "'", str78, "fra");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(locale82);
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNull(locale84);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNull(locale87);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.transform2(doubleArray14);
        java.io.PrintStream printStream18 = printStream1.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray17);
        printStream18.close();
        printStream18.print(false);
        java.io.PrintStream printStream24 = new java.io.PrintStream("japonais");
        printStream24.write((int) 'a');
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        java.io.PrintStream printStream56 = printStream24.format("de", (java.lang.Object[]) complexArray53);
        java.io.PrintStream printStream57 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, (double) (byte) 10);
        java.io.PrintStream printStream70 = printStream57.printf(locale59, "Franz\366sisch", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream71 = printStream18.format("Canada", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream73 = printStream71.append((java.lang.CharSequence) "Japanese");
        printStream71.println((double) (-1));
        printStream71.print("\u671d\u9c9c\u6587");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printStream73);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        java.util.Locale locale1 = new java.util.Locale("japonais");
        java.util.Locale.setDefault(locale1);
        java.lang.String str3 = locale1.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "japonais");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "japonais" + "'", str3, "japonais");
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer7.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer7.transform2(doubleArray30);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.print((float) 10L);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter43.println(' ');
        printWriter43.println((long) (-1));
        printWriter43.println((java.lang.Object) "");
        printWriter43.println();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getScript();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.lang.String str54 = locale51.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        java.io.PrintWriter printWriter61 = printWriter43.printf(locale51, "ja", (java.lang.Object[]) complexArray60);
        java.io.PrintWriter printWriter62 = printWriter36.format("", (java.lang.Object[]) complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer7.inversetransform(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        double[] doubleArray72 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer64.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer7.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer77.transform(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer76.transform2(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform(doubleArray89);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray89);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray89);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex8.acos();
        org.apache.commons.math.complex.Complex complex14 = complex8.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex0.pow(complex15);
        org.apache.commons.math.complex.Complex complex21 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex22.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.write((int) 'a');
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter12.println(' ');
        printWriter12.print((float) 10L);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter19.println(' ');
        printWriter19.println((long) (-1));
        printWriter19.println((java.lang.Object) "");
        printWriter19.println();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getScript();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = locale27.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        java.io.PrintWriter printWriter37 = printWriter19.printf(locale27, "ja", (java.lang.Object[]) complexArray36);
        java.io.PrintWriter printWriter38 = printWriter12.format("", (java.lang.Object[]) complexArray36);
        java.io.PrintStream printStream39 = printStream7.format("de", (java.lang.Object[]) complexArray36);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter41.println(' ');
        printWriter41.println((long) (-1));
        printWriter41.println((java.lang.Object) "");
        char[] charArray54 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter41.println(charArray54);
        printStream39.print(charArray54);
        printStream5.print(charArray54);
        printStream5.println(false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print(true);
        java.io.PrintWriter printWriter21 = printWriter1.append((java.lang.CharSequence) "allemand (Allemagne)");
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder26 = builder23.setExtension('x', "");
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale.Builder builder28 = builder26.clear();
        java.util.Locale locale29 = builder26.build();
        java.util.Locale locale30 = builder26.build();
        printWriter21.println((java.lang.Object) locale30);
        java.lang.String str32 = locale30.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = locale30.getUnicodeLocaleType("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex8.divide(complex9);
        org.apache.commons.math.complex.Complex complex11 = complex9.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        boolean boolean20 = complex16.equals((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex18);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        double double25 = complex22.abs();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex30 = complex21.subtract(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex26.asin();
        boolean boolean32 = complex31.isNaN();
        org.apache.commons.math.complex.Complex complex33 = complex4.subtract(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex31.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        java.lang.String str5 = locale0.getLanguage();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale0.getVariant();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = locale0.getDisplayScript(locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ja" + "'", str3, "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str4, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer0.transform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray41, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.transform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.transform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        java.io.PrintStream printStream66 = new java.io.PrintStream("japonais");
        printStream66.print(0.0f);
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray77 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform(doubleArray77);
        java.io.PrintStream printStream79 = printStream66.format(locale69, "japonais", (java.lang.Object[]) complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer80.inversetransform2(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray83);
        printStream79.print((java.lang.Object) doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer60.transform2(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer50.inversetransform2(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.inversetransform2(doubleArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.inversetransform(univariateRealFunction90, 1.363511343121901E32d, 2.3875907313528697d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.363511343121901E32, 2.3875907313528697]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.lang.String str4 = locale3.getScript();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale3.getDisplayVariant();
        boolean boolean7 = locale3.hasExtensions();
        java.lang.String str8 = locale3.getLanguage();
        java.lang.String str9 = locale0.getDisplayCountry(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "chinois" + "'", str1, "chinois");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh" + "'", str8, "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u56fd" + "'", str9, "\u4e2d\u56fd");
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex3.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex8.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex8.atan();
        org.apache.commons.math.complex.Complex complex14 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex8.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "tedesco");
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer3.transform(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray8);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer12.inversetransform2(doubleArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("japonais");
        printStream18.print(0.0f);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        java.io.PrintStream printStream31 = printStream18.format(locale21, "japonais", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray35);
        printStream31.print((java.lang.Object) doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer12.transform2(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer2.inversetransform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform(doubleArray53);
        double[] doubleArray56 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer48.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer43.transform(complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer43.inversetransform(complexArray63);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable[] throwableArray72 = functionEvaluationException70.getSuppressed();
        java.lang.Throwable[] throwableArray73 = functionEvaluationException70.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException70.addSuppressed((java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray64, (java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer2.inversetransform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer81.inversetransform2(doubleArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer2.inversetransform(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray87, 0.5403023058681398d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(2.319776824715853d, "org.apache.commons.math.functionevaluationexception: chinesisch");
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException92);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.MathException: fr", (java.lang.Object[]) complexArray87, (java.lang.Throwable) functionEvaluationException92);
        java.lang.String str95 = functionEvaluationException92.getPattern();
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException92);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "org.apache.commons.math.functionevaluationexception: chinesisch" + "'", str95, "org.apache.commons.math.functionevaluationexception: chinesisch");
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean19 = printWriter18.checkError();
        java.io.PrintWriter printWriter21 = printWriter18.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter22.write((int) (byte) 1);
        printWriter15.print((java.lang.Object) (byte) 1);
        printWriter15.println((float) 1L);
        java.util.Locale locale30 = new java.util.Locale("ja", "");
        java.lang.String str31 = locale30.getScript();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet33 = locale30.getExtensionKeys();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter38.println(' ');
        printWriter38.print((float) 10L);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.println(' ');
        printWriter45.println((long) (-1));
        printWriter45.println((java.lang.Object) "");
        printWriter45.println();
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = locale53.getScript();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.lang.String str56 = locale53.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        java.io.PrintWriter printWriter63 = printWriter45.printf(locale53, "ja", (java.lang.Object[]) complexArray62);
        java.io.PrintWriter printWriter64 = printWriter38.format("", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) mathException66);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray62);
        java.io.PrintWriter printWriter69 = printWriter15.printf(locale30, "org.apache.commons.math.FunctionEvaluationException: FR", (java.lang.Object[]) complexArray62);
        printWriter15.println(0.7075128122711367d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) 1.0f, "tedesco");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((-0.8813735870195429d), (java.lang.Throwable) functionEvaluationException3);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.removeUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder8 = builder3.removeUnicodeLocaleAttribute("deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("German (ALLEMAND,zh)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: German (ALLEMAND,zh) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.println("zh");
        printWriter1.print(0L);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale27 = new java.util.Locale("ja", "");
        java.lang.String str28 = locale24.getDisplayLanguage(locale27);
        java.lang.String str29 = locale22.getDisplayLanguage(locale24);
        java.lang.String str30 = locale22.getDisplayLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer32.inversetransform2(doubleArray38);
        java.io.PrintStream printStream43 = new java.io.PrintStream("japonais");
        printStream43.print(true);
        boolean boolean46 = printStream43.checkError();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream43, true);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.transform(doubleArray61);
        double[] doubleArray64 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer51.transform(complexArray65);
        java.io.PrintStream printStream67 = printStream43.format(locale49, "fr", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer32.inversetransform2(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer70.transform(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.transform2(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer79.inversetransform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer69.transform(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer32.inversetransform(complexArray84);
        java.io.PrintWriter printWriter86 = printWriter1.printf(locale22, "Allemagne", (java.lang.Object[]) complexArray84);
        printWriter1.println();
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str28, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Franz\366sisch" + "'", str29, "Franz\366sisch");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fran\347ais" + "'", str30, "fran\347ais");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(printWriter86);
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.println((int) '#');
        printWriter4.println();
        java.io.PrintWriter printWriter11 = printWriter4.append('x');
        printWriter11.println();
        // The following exception was thrown during execution in test generation
        try {
            printWriter11.write("", (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 101");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        java.io.PrintStream printStream29 = printStream16.format(locale19, "japonais", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        printStream29.print((java.lang.Object) doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer10.transform2(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder6 = builder4.setLanguage("");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter8.println(' ');
        printWriter8.println(false);
        printWriter8.print((int) (short) 1);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getCountry();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.util.Locale locale21 = java.util.Locale.getDefault(category15);
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.Object[] objArray24 = null;
        java.io.PrintWriter printWriter25 = printWriter8.format(locale21, "org.apache.commons.math.MathException", objArray24);
        java.util.Locale.Builder builder26 = builder4.setLocale(locale21);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getCountry();
        java.lang.String str30 = locale27.getDisplayCountry(locale28);
        java.util.Locale.Builder builder31 = builder4.setLocale(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder31.setRegion("fran\347ais");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: franc?ais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter12.println((float) (byte) 0);
        printWriter12.println();
        printWriter12.println(false);
        printWriter12.print((int) (short) 1);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex16 = complex14.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.acos();
        org.apache.commons.math.complex.Complex complex18 = complex15.cos();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        org.apache.commons.math.complex.Complex complex21 = complex19.cos();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex15.multiply(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex27 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex27.multiply(complex29);
        org.apache.commons.math.complex.Complex complex32 = complex31.log();
        org.apache.commons.math.complex.Complex complex33 = complex23.subtract(complex32);
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex36 = complex35.acos();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex32.multiply(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex10.subtract(complex38);
        boolean boolean40 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex41 = complex10.asin();
        org.apache.commons.math.complex.Complex complex44 = new org.apache.commons.math.complex.Complex((double) 'x', 35.0d);
        org.apache.commons.math.complex.Complex complex45 = complex44.tan();
        org.apache.commons.math.complex.Complex complex46 = complex41.multiply(complex45);
        double double47 = complex46.abs();
        org.apache.commons.math.complex.Complex complex48 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex48.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        java.util.Locale locale3 = new java.util.Locale("inglese", "org.apache.commons.math.functionevaluationexception: chinesisch", "italy");
        org.junit.Assert.assertEquals(locale3.toString(), "inglese_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: CHINESISCH_italy");
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.abs();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.add(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex18.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("anglais");
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("etats-unis");
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setLanguage("\u30c9\u30a4\u30c4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("chinois (Taiwan)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinois(taiwan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Locale locale15 = new java.util.Locale("", "\u30c9\u30a4\u30c4\u8a9e", "FR");
        java.lang.String str16 = locale11.getDisplayName(locale15);
        java.lang.String str17 = locale4.getDisplayScript(locale11);
        java.lang.String str18 = locale4.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u30c9\u30a4\u30c4\u8a9e_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "French" + "'", str16, "French");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fran\347ais" + "'", str18, "fran\347ais");
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.getDefault(category4);
        java.lang.String str11 = locale3.getDisplayVariant(locale10);
        java.util.Locale.setDefault(locale10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.write((int) '#');
        printWriter1.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        printWriter1.close();
        java.util.Locale locale18 = new java.util.Locale("ja", "");
        java.lang.String str19 = locale18.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println(false);
        java.io.PrintStream printStream29 = new java.io.PrintStream("japonais");
        printStream29.print(true);
        boolean boolean32 = printStream29.checkError();
        printStream29.println();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer37.inversetransform(complexArray53);
        java.io.PrintStream printStream55 = printStream29.printf(locale34, "de", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer57.inversetransform(complexArray73);
        java.io.PrintWriter printWriter75 = printWriter23.format(locale34, "GB", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer21.inversetransform2(complexArray74);
        java.io.PrintWriter printWriter77 = printWriter1.format(locale18, "chinois", (java.lang.Object[]) complexArray74);
        printWriter77.print(false);
        java.lang.Object[] objArray81 = null;
        java.io.PrintWriter printWriter82 = printWriter77.printf("japanese", objArray81);
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.Writer) printWriter82, false);
        printWriter82.flush();
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ja" + "'", str19, "ja");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ja" + "'", str35, "ja");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printWriter82);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        boolean boolean9 = printStream7.checkError();
        java.util.Locale locale11 = new java.util.Locale("fra");
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        boolean boolean20 = printStream17.checkError();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        double[] doubleArray38 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer25.transform(complexArray39);
        java.io.PrintStream printStream41 = printStream17.format(locale23, "fr", (java.lang.Object[]) complexArray40);
        java.io.PrintStream printStream42 = printStream7.format(locale13, "French", (java.lang.Object[]) complexArray40);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str46 = locale45.getISO3Language();
        java.util.Locale locale47 = locale45.stripExtensions();
        java.lang.String str48 = locale44.getDisplayVariant(locale45);
        java.lang.String str49 = locale45.getVariant();
        java.lang.String str50 = locale13.getDisplayName(locale45);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "fra");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zho" + "'", str46, "zho");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println("Chinesisch");
        printStream1.print((float) (byte) 0);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        printStream1.println((java.lang.Object) locale8);
        printStream1.close();
        printStream1.print(false);
        printStream1.println((long) (short) -1);
        printStream1.println((long) (byte) 100);
        char[] charArray19 = null;
        printStream1.println(charArray19);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u6587" + "'", str10, "\u65e5\u6587");
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = complex4.add(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        double double13 = complex12.abs();
        double double14 = complex12.abs();
        org.apache.commons.math.complex.Complex complex15 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex7.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.cos();
        org.apache.commons.math.complex.Complex complex19 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex15.acos();
        org.apache.commons.math.complex.Complex complex21 = complex15.cos();
        org.apache.commons.math.complex.Complex complex22 = complex5.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex26.multiply(complex28);
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex34 = complex28.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex36 = complex28.negate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cos();
        org.apache.commons.math.complex.Complex complex39 = complex37.cos();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex37.cosh();
        double double42 = complex41.getImaginary();
        org.apache.commons.math.complex.Complex complex43 = complex28.add(complex41);
        org.apache.commons.math.complex.Complex complex44 = complex5.add(complex41);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter46.println(' ');
        printWriter46.println((long) (-1));
        printWriter46.println((java.lang.Object) "");
        printWriter46.println();
        printWriter46.write((int) '#');
        printWriter46.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter61.println(' ');
        printWriter61.println((long) (-1));
        printWriter61.println((java.lang.Object) "");
        char[] charArray74 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter61.println(charArray74);
        printWriter46.print(charArray74);
        printWriter46.print((double) '#');
        boolean boolean79 = complex41.equals((java.lang.Object) printWriter46);
        boolean boolean80 = complex41.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("allemand (ALLEMAND,zh)");
        java.lang.String str2 = locale1.getScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex0.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex7.sin();
        org.apache.commons.math.complex.Complex complex10 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.tanh();
        org.apache.commons.math.complex.Complex complex14 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.asin();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex23 = complex22.acos();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex21.multiply(complex23);
        org.apache.commons.math.complex.Complex complex28 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex29 = complex23.add(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex31 = complex17.subtract(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex7.subtract(complex17);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CN");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "cn" + "'", str2, "cn");
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.print((float) (short) -1);
        printWriter1.println("ja_JP");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        java.io.PrintWriter printWriter16 = printWriter1.format("\u30d5\u30e9\u30f3\u30b9\u8a9e)", (java.lang.Object[]) complexArray15);
        printWriter16.print(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(printWriter16);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        boolean boolean9 = complex7.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex13.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex7.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.0d, throwable1);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getDisplayName();
        java.lang.String str5 = locale1.getLanguage();
        java.lang.String str6 = locale1.getDisplayName();
        java.util.Set<java.lang.String> strSet7 = locale1.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.getDefault(category4);
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder14 = builder0.clear();
        java.util.Locale.Builder builder16 = builder0.removeUnicodeLocaleAttribute("Chinese");
        java.util.Locale.Builder builder17 = builder0.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(0.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream9, true);
        printStream13.print((float) (short) -1);
        printStream13.print('a');
        printStream13.println();
        printStream13.print("hi!");
        printStream13.println((-1L));
        printStream13.println((double) 0.0f);
        printStream13.close();
        printWriter1.print((java.lang.Object) printStream13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        double[] doubleArray42 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer29.transform(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer29.inversetransform(complexArray49);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException(throwable54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException56);
        java.lang.Throwable[] throwableArray58 = functionEvaluationException56.getSuppressed();
        java.lang.Throwable[] throwableArray59 = functionEvaluationException56.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException56.addSuppressed((java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray50, (java.lang.Throwable) functionEvaluationException62);
        java.io.PrintStream printStream65 = printStream13.printf("\u65e5\u672c\u8a9e", (java.lang.Object[]) complexArray50);
        java.io.PrintStream printStream67 = printStream13.append((java.lang.CharSequence) "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zh");
        printWriter1.flush();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer4.transform(doubleArray9);
        double[] doubleArray12 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer4.inversetransform2(doubleArray12);
        java.io.PrintWriter printWriter14 = printWriter1.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray13);
        printWriter1.print((-1.0f));
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = locale18.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.transform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer21.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        double[] doubleArray45 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.inversetransform2(doubleArray45);
        java.io.PrintStream printStream48 = new java.io.PrintStream("japonais");
        printStream48.print(0.0f);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform(doubleArray59);
        java.io.PrintStream printStream61 = printStream48.format(locale51, "japonais", (java.lang.Object[]) complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray65);
        printStream61.print((java.lang.Object) doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer37.inversetransform(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, (double) 10.0f);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer21.inversetransform(complexArray69);
        java.io.PrintWriter printWriter75 = printWriter1.printf(locale18, "kor", (java.lang.Object[]) complexArray69);
        printWriter75.write((int) 'u');
        printWriter75.print(false);
        printWriter75.print("twn");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream53 = printStream1.append((java.lang.CharSequence) "chinois");
        java.io.PrintStream printStream54 = new java.io.PrintStream((java.io.OutputStream) printStream53);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        // The following exception was thrown during execution in test generation
        try {
            printWriter16.write("englisch", (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 110");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(0.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream9, true);
        printStream13.print((float) (short) -1);
        printStream13.print('a');
        printStream13.println();
        printStream13.print("hi!");
        printStream13.println((-1L));
        printStream13.println((double) 0.0f);
        printStream13.close();
        printWriter1.print((java.lang.Object) printStream13);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getVariant();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale locale30 = locale27.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = locale27.getDisplayLanguage(locale31);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter39 = printWriter37.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer41.inversetransform2(doubleArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer46.transform(doubleArray51);
        double[] doubleArray54 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.inversetransform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer41.transform(complexArray55);
        java.io.PrintWriter printWriter57 = printWriter37.format("ja", (java.lang.Object[]) complexArray55);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException(throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException63);
        java.lang.Throwable[] throwableArray65 = functionEvaluationException63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = functionEvaluationException63.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException63.addSuppressed((java.lang.Throwable) functionEvaluationException69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray55, (java.lang.Throwable) functionEvaluationException69);
        java.io.PrintStream printStream72 = printStream13.printf(locale31, "org.apache.commons.math.FunctionEvaluationException: FR", (java.lang.Object[]) complexArray55);
        printStream72.flush();
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japanese" + "'", str32, "Japanese");
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(printStream72);
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print("Chine");
        printStream1.println((long) (short) 0);
        printStream1.println('#');
        printStream1.print((int) (short) 0);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter12.println((float) (byte) 0);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter12);
        java.io.PrintWriter printWriter17 = printWriter12.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException");
        printWriter12.println((long) (short) 100);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter23 = printWriter21.append((java.lang.CharSequence) "");
        printWriter23.flush();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter26.println(' ');
        printWriter26.println((long) (-1));
        printWriter26.println((java.lang.Object) "");
        char[] charArray39 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter26.println(charArray39);
        printWriter26.println(10);
        printWriter26.print('a');
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter46.println(' ');
        printWriter46.println((long) (-1));
        printWriter46.println((java.lang.Object) "");
        char[] charArray59 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter46.println(charArray59);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.Writer) printWriter46, true);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter64.print(0);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter68.println(' ');
        printWriter68.println((long) (-1));
        printWriter68.println((java.lang.Object) "");
        char[] charArray81 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter68.println(charArray81);
        printWriter64.println(charArray81);
        printWriter62.write(charArray81);
        printWriter26.write(charArray81, (int) (short) 0, 1);
        printWriter23.write(charArray81);
        printWriter12.print(charArray81);
        printWriter12.write("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", (int) (short) 1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        boolean boolean11 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex12 = complex3.subtract(complex10);
        boolean boolean13 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex20.exp();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex25.add(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex16.pow(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex37 = complex35.divide(complex36);
        double double38 = complex37.getReal();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt1z();
        org.apache.commons.math.complex.Complex complex41 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex39.divide(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex46.log();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = complex48.sinh();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex53 = complex51.divide(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex complex56 = complex47.divide(complex54);
        boolean boolean57 = complex54.isInfinite();
        boolean boolean58 = complex37.equals((java.lang.Object) boolean57);
        org.apache.commons.math.complex.Complex complex59 = complex30.add(complex37);
        org.apache.commons.math.complex.Complex complex60 = complex10.multiply(complex37);
        boolean boolean61 = complex60.isNaN();
        org.apache.commons.math.complex.Complex complex62 = complex60.exp();
        org.apache.commons.math.complex.Complex complex65 = new org.apache.commons.math.complex.Complex((double) 1L, (double) 1L);
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        double double67 = complex66.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = complex60.subtract(complex66);
        boolean boolean69 = complex66.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.9888977057628651d + "'", double67 == 0.9888977057628651d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.functionevaluationexception_deu_zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception_deu_zho");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException(throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException14);
        java.lang.Object[] objArray16 = functionEvaluationException15.getArguments();
        java.io.PrintStream printStream17 = printStream1.printf("org.apache.commons.math.FunctionEvaluationException: hi!", objArray16);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintStream printStream21 = new java.io.PrintStream("japonais");
        printStream21.print(true);
        boolean boolean24 = printStream21.checkError();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream21, true);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        double[] doubleArray42 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer29.transform(complexArray43);
        java.io.PrintStream printStream45 = printStream21.format(locale27, "fr", (java.lang.Object[]) complexArray44);
        printStream45.print((float) 'u');
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale.Builder builder51 = builder49.setScript("");
        java.util.Locale.Builder builder53 = builder49.setLanguage("zho");
        java.util.Locale.Builder builder54 = builder49.clear();
        printStream45.println((java.lang.Object) builder49);
        printStream45.print((-1));
        java.lang.Throwable throwable62 = null;
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException(throwable62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException64);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException(throwable69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException71);
        java.lang.String str73 = functionEvaluationException71.getPattern();
        functionEvaluationException64.addSuppressed((java.lang.Throwable) functionEvaluationException71);
        java.lang.Object[] objArray75 = functionEvaluationException71.getArguments();
        java.io.PrintStream printStream76 = printStream45.format("giapponese", objArray75);
        java.io.PrintWriter printWriter77 = printWriter18.format("org.apache.commons.math.FunctionEvaluationException: zh", objArray75);
        printWriter18.println(0.6865874069985796d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter1.printf("fra", (java.lang.Object[]) strArray7);
        boolean boolean9 = printWriter1.checkError();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter11.println("japonais");
        java.io.PrintWriter printWriter15 = printWriter11.append((java.lang.CharSequence) "org.apache.commons.math.MathException: German (FRA,fr)");
        printWriter15.println(true);
        printWriter15.println("\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
        printWriter15.println("\u5fb7\u6587");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=inde?termine?(org.apache.commons.math.functionevaluationexception)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        java.io.PrintStream printStream2 = new java.io.PrintStream("japonais");
        printStream2.print(0.0f);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer8.transform(doubleArray13);
        java.io.PrintStream printStream15 = printStream2.format(locale5, "japonais", (java.lang.Object[]) complexArray14);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        printStream17.println((-1));
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.print(0.0f);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        java.io.PrintStream printStream36 = printStream23.format(locale26, "japonais", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray40);
        printStream36.print((java.lang.Object) doubleArray40);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream36.write(byteArray47);
        printStream17.write(byteArray47);
        printStream2.write(byteArray47);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        printStream2.println();
        printStream2.println((int) 'u');
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream2);
        printStream2.println(10L);
        java.util.Locale locale60 = new java.util.Locale("kor");
        java.lang.String str61 = locale60.getISO3Language();
        java.io.PrintStream printStream64 = new java.io.PrintStream("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream64.println();
        java.util.Locale locale67 = new java.util.Locale("de_ALLEMAND_zh");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer70.transform(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.inversetransform2(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer79.transform(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer69.transform2(complexArray85);
        java.io.PrintStream printStream87 = printStream64.printf(locale67, "United States", (java.lang.Object[]) complexArray86);
        java.io.PrintStream printStream88 = printStream2.format(locale60, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION", (java.lang.Object[]) complexArray86);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10, -1]");
        org.junit.Assert.assertEquals(locale60.toString(), "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals(locale67.toString(), "de_allemand_zh");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream88);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex2.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex2.asin();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex10.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.acos();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex11.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex23.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex24.acos();
        double double27 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex18.add(complex24);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex29.cos();
        org.apache.commons.math.complex.Complex complex32 = complex28.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = complex33.cos();
        org.apache.commons.math.complex.Complex complex37 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math.complex.Complex complex40 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex6.multiply(complex38);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(true);
        boolean boolean11 = printStream8.checkError();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream8, true);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer21.transform(doubleArray26);
        double[] doubleArray29 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.inversetransform2(doubleArray29);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer16.transform(complexArray30);
        java.io.PrintStream printStream32 = printStream8.format(locale14, "fr", (java.lang.Object[]) complexArray31);
        printStream32.print((float) 'u');
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter38 = printWriter36.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter40 = printWriter38.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean45 = printWriter44.checkError();
        java.io.PrintWriter printWriter47 = printWriter44.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter44);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter50.println(' ');
        printWriter50.println((long) (-1));
        printWriter50.println((java.lang.Object) "");
        char[] charArray63 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter50.println(charArray63);
        printWriter44.write(charArray63);
        printWriter42.write(charArray63);
        printWriter40.write(charArray63);
        printStream32.println(charArray63);
        printStream1.println(charArray63);
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.lang.String str71 = locale70.getISO3Country();
        java.util.Locale locale72 = java.util.Locale.GERMANY;
        java.util.Locale locale75 = new java.util.Locale("ja", "");
        java.lang.String str76 = locale72.getDisplayLanguage(locale75);
        java.lang.String str77 = locale70.getDisplayLanguage(locale72);
        java.lang.String str78 = locale72.getDisplayName();
        java.util.Locale locale79 = java.util.Locale.CANADA;
        boolean boolean80 = locale79.hasExtensions();
        java.lang.String str81 = locale72.getDisplayVariant(locale79);
        java.util.Locale locale82 = java.util.Locale.CHINESE;
        boolean boolean83 = locale82.hasExtensions();
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleAttributes();
        java.util.Locale locale85 = java.util.Locale.FRENCH;
        java.lang.String str86 = locale85.getISO3Country();
        java.util.Locale locale87 = java.util.Locale.JAPANESE;
        java.lang.String str88 = locale87.getLanguage();
        java.lang.String str89 = locale85.getDisplayName(locale87);
        java.lang.String str90 = locale85.getLanguage();
        java.lang.String str91 = locale82.getDisplayName(locale85);
        java.lang.String str92 = locale85.getDisplayName();
        java.lang.String str93 = locale85.getVariant();
        java.lang.String str94 = locale72.getDisplayVariant(locale85);
        java.lang.String str95 = locale72.getDisplayName();
        printStream1.println((java.lang.Object) locale72);
        java.lang.String str97 = locale72.toLanguageTag();
        java.lang.String str98 = locale72.getScript();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale75.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str76, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Franz\366sisch" + "'", str77, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "allemand (Allemagne)" + "'", str78, "allemand (Allemagne)");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ja" + "'", str88, "ja");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str89, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "fr" + "'", str90, "fr");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "chinois" + "'", str91, "chinois");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "fran\347ais" + "'", str92, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "allemand (Allemagne)" + "'", str95, "allemand (Allemagne)");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "de-DE" + "'", str97, "de-DE");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "jpn" + "'", str4, "jpn");
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex8.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex16.subtract(complex25);
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex25.multiply(complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex38 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex32.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex29.subtract(complex39);
        double double41 = complex40.getReal();
        org.apache.commons.math.complex.Complex complex42 = complex0.pow(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex0.exp();
        org.apache.commons.math.complex.Complex complex44 = complex0.log();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        double[] doubleArray18 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer5.transform(complexArray19);
        java.io.PrintWriter printWriter21 = printWriter1.format("ja", (java.lang.Object[]) complexArray19);
        printWriter21.println((float) 1L);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter21, false);
        printWriter21.println((-1));
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = complex28.acos();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex34 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex28.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex25.subtract(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex37.subtract(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex44.exp();
        org.apache.commons.math.complex.Complex complex47 = complex44.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale1.getDisplayVariant(locale2);
        java.lang.String str6 = locale1.getLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.toLanguageTag();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale7.getLanguage();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = locale7.getDisplayName(locale12);
        java.util.Set<java.lang.String> strSet15 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale7.getDisplayLanguage();
        java.lang.String str17 = locale1.getDisplayCountry(locale7);
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale19.toLanguageTag();
        java.lang.String str22 = locale19.getDisplayName();
        java.lang.String str23 = locale19.getDisplayLanguage();
        java.lang.String str24 = locale7.getDisplayVariant(locale19);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println(' ');
        printWriter9.println((long) (-1));
        printWriter9.println((java.lang.Object) "");
        printWriter9.println();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println((java.lang.Object) printWriter18);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        printWriter21.println((java.lang.Object) true);
        printWriter21.print("org.apache.commons.math.MathException");
        printWriter21.println((float) (byte) 0);
        printWriter21.print((double) 1);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getLanguage();
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(0.0f);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer41.transform(doubleArray46);
        java.io.PrintStream printStream48 = printStream35.format(locale38, "japonais", (java.lang.Object[]) complexArray47);
        java.io.PrintWriter printWriter49 = printWriter21.format(locale31, "ja", (java.lang.Object[]) complexArray47);
        java.io.PrintStream printStream50 = printStream1.format("und", (java.lang.Object[]) complexArray47);
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.lang.CharSequence charSequence53 = null;
        java.io.PrintStream printStream54 = printStream1.append(charSequence53);
        boolean boolean55 = printStream54.checkError();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        double double10 = complex7.getReal();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex11.add(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex22.atan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex26.acos();
        org.apache.commons.math.complex.Complex complex30 = complex22.add(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex32 = complex15.divide(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex7.multiply(complex30);
        double double34 = complex30.abs();
        org.apache.commons.math.complex.Complex complex35 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex30.log();
        org.apache.commons.math.complex.Complex complex37 = complex30.tan();
        org.apache.commons.math.complex.Complex complex38 = complex6.multiply(complex30);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer34.inversetransform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray40);
        java.io.PrintStream printStream48 = new java.io.PrintStream("japonais");
        printStream48.print(true);
        boolean boolean51 = printStream48.checkError();
        printStream48.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.transform(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer55.transform2(doubleArray61);
        java.io.PrintStream printStream65 = printStream48.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray64, (java.lang.Throwable) functionEvaluationException67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.transform(complexArray64);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.inversetransform2(univariateRealFunction71, 100.4987562112089d, 73.80455981174008d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.apache.commons.math.complex.Complex complex4 = new org.apache.commons.math.complex.Complex(1.367947197099293d, 1.0d);
        boolean boolean5 = locale1.equals((java.lang.Object) 1.367947197099293d);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        double double6 = complex5.getReal();
        org.apache.commons.math.complex.Complex complex7 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.println('a');
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Language();
        printWriter3.print((java.lang.Object) locale6);
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = locale6.stripExtensions();
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale11.getLanguage();
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale11.getDisplayName();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fran\347ais" + "'", str15, "fran\347ais");
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append('#');
        printStream7.println("\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex13.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.acos();
        printStream7.println((java.lang.Object) complex14);
        org.apache.commons.math.complex.Complex complex18 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex14.tan();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("en_CA");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("fr-fr");
        java.lang.String str4 = locale1.getDisplayName(locale3);
        java.lang.String str5 = locale3.getScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex4.tanh();
        double double6 = complex4.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getLanguage();
        printWriter1.print((java.lang.Object) str10);
        java.io.PrintWriter printWriter13 = printWriter1.append(' ');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter15.println(' ');
        printWriter15.println((long) (-1));
        printWriter15.println((java.lang.Object) "");
        printWriter15.println();
        printWriter15.write((int) '#');
        java.io.PrintWriter printWriter26 = printWriter15.append((java.lang.CharSequence) "japonais");
        java.io.PrintStream printStream28 = new java.io.PrintStream("japonais");
        printStream28.print(0.0f);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        java.io.PrintStream printStream41 = printStream28.format(locale31, "japonais", (java.lang.Object[]) complexArray40);
        printStream41.print((int) '4');
        java.io.PrintStream printStream45 = printStream41.append('u');
        java.io.PrintStream printStream47 = new java.io.PrintStream("japonais");
        printStream47.print(0.0f);
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        java.io.PrintStream printStream60 = printStream47.format(locale50, "japonais", (java.lang.Object[]) complexArray59);
        printStream60.print((int) '4');
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter64.println(' ');
        printWriter64.println((long) (-1));
        printWriter64.println((java.lang.Object) "");
        char[] charArray77 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter64.println(charArray77);
        printWriter64.println(10);
        printWriter64.print('a');
        char[] charArray83 = new char[] {};
        printWriter64.println(charArray83);
        printStream60.println(charArray83);
        printStream45.print(charArray83);
        printWriter15.write(charArray83);
        printWriter1.write(charArray83);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[]");
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("fr");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setExtension('#', "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 1.571");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print('a');
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.print((float) (byte) -1);
        printWriter1.close();
        printWriter1.println((-1L));
        printWriter1.println((int) '4');
        printWriter1.println(1.0f);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(true);
        boolean boolean6 = printStream3.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        double[] doubleArray24 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer11.transform(complexArray25);
        java.io.PrintStream printStream27 = printStream3.format(locale9, "fr", (java.lang.Object[]) complexArray26);
        boolean boolean28 = locale9.hasExtensions();
        java.lang.String str29 = locale1.getDisplayVariant(locale9);
        java.lang.String str31 = locale9.getExtension('x');
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clear();
        java.util.Locale.Builder builder36 = builder33.setExtension('x', "");
        java.util.Locale.Builder builder37 = builder33.clear();
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale9.getDisplayLanguage(locale38);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English" + "'", str39, "English");
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream27.println(true);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.println((long) (-1));
        printWriter31.println((java.lang.Object) "");
        printWriter31.println(10L);
        printWriter31.println(true);
        printWriter31.println((int) 'a');
        printStream27.print((java.lang.Object) 'a');
        printStream27.println("\u30d5\u30e9\u30f3\u30b9\u8a9e (HI!)");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream27, false, "English");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: English");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.println("org.apache.commons.math.MathException");
        printWriter1.write("FR");
        printWriter1.println(' ');
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.lang.String str26 = locale7.getDisplayLanguage();
        java.lang.String str27 = locale7.getScript();
        java.lang.String str28 = locale7.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zh-CN");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter5 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: hi!", 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(0.0f);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        java.io.PrintStream printStream18 = printStream5.format(locale8, "japonais", (java.lang.Object[]) complexArray17);
        printStream18.print((int) '4');
        printStream18.println((long) (short) 100);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        java.io.PrintStream printStream31 = printStream18.format("Chinesisch", (java.lang.Object[]) complexArray30);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(0.7456241416655579d, "Chine", (java.lang.Object[]) complexArray30, throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(1.0839233273386948d, "Korean", (java.lang.Throwable) functionEvaluationException33);
        java.lang.Object[] objArray35 = functionEvaluationException33.getArguments();
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(objArray35);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex3.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex8.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex8.atan();
        org.apache.commons.math.complex.Complex complex14 = complex8.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex8.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer6.transform(doubleArray11);
        double[] doubleArray14 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.inversetransform2(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer1.transform(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer1.inversetransform(complexArray21);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = functionEvaluationException28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = functionEvaluationException28.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException28.addSuppressed((java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray22, (java.lang.Throwable) functionEvaluationException34);
        double double37 = functionEvaluationException34.getArgument();
        java.lang.Throwable[] throwableArray38 = functionEvaluationException34.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex13 = complex11.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex12.exp();
        org.apache.commons.math.complex.Complex complex15 = complex4.pow(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math.complex.Complex complex17 = complex0.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = null;
        org.apache.commons.math.complex.Complex complex19 = complex17.multiply(complex18);
        double double20 = complex17.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        printStream1.print((-1));
        printStream1.println(false);
        printStream1.println("japonais");
        printStream1.println((float) (-1L));
        java.io.PrintStream printStream15 = new java.io.PrintStream("japonais");
        printStream15.print(true);
        boolean boolean18 = printStream15.checkError();
        printStream15.println('#');
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream15.write(byteArray46);
        printStream1.write(byteArray46);
        printStream1.println(true);
        printStream1.print("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream1.close();
        java.util.Locale locale55 = java.util.Locale.US;
        java.lang.String str56 = locale55.getDisplayVariant();
        java.lang.String str57 = locale55.getDisplayCountry();
        java.lang.String[] strArray62 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray62);
        double double64 = functionEvaluationException63.getArgument();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException63);
        java.lang.Object[] objArray66 = mathException65.getArguments();
        java.io.PrintStream printStream67 = printStream1.printf(locale55, "org.apache.commons.math.MathException: GB", objArray66);
        java.io.PrintStream printStream68 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream68.println((float) 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etats-Unis" + "'", str57, "Etats-Unis");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: ", "ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream35, true);
        java.io.PrintStream printStream39 = printStream35.append((java.lang.CharSequence) "allemand");
        java.io.PrintStream printStream41 = printStream39.append('a');
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getVariant();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = locale42.stripExtensions();
        java.lang.Object[] objArray47 = null;
        java.io.PrintStream printStream48 = printStream41.printf(locale45, "Etats-Unis", objArray47);
        printStream48.print((double) (byte) 10);
        printStream48.print((int) (short) -1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean9 = printStream8.checkError();
        java.io.PrintStream printStream11 = printStream8.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.write((int) 'a');
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter18.println(' ');
        printWriter18.print((float) 10L);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter25.println(' ');
        printWriter25.println((long) (-1));
        printWriter25.println((java.lang.Object) "");
        printWriter25.println();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getScript();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.lang.String str36 = locale33.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        java.io.PrintWriter printWriter43 = printWriter25.printf(locale33, "ja", (java.lang.Object[]) complexArray42);
        java.io.PrintWriter printWriter44 = printWriter18.format("", (java.lang.Object[]) complexArray42);
        java.io.PrintStream printStream45 = printStream13.format("de", (java.lang.Object[]) complexArray42);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter47.println(' ');
        printWriter47.println((long) (-1));
        printWriter47.println((java.lang.Object) "");
        char[] charArray60 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter47.println(charArray60);
        printStream45.print(charArray60);
        printStream11.print(charArray60);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale.Builder builder8 = builder2.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder8.setUnicodeLocaleKeyword("German (Germany)", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: German (Germany) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer5.transform(doubleArray10);
        double[] doubleArray13 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.inversetransform(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer22.transform2(complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        double[] doubleArray48 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer40.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer22.transform2(doubleArray48);
        double[] doubleArray52 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, (-1.0d));
        double[] doubleArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform(doubleArray48);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.inversetransform(univariateRealFunction56, (double) 'x', (double) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [120.0, 10.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0]");
        org.junit.Assert.assertNotNull(complexArray55);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.getDefault(category2);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray12);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer6.transform(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.print(0.0f);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        java.io.PrintStream printStream43 = printStream30.format(locale33, "japonais", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        printStream43.print((java.lang.Object) doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer24.transform2(doubleArray47);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter53.println(' ');
        printWriter53.print((float) 10L);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter60.println(' ');
        printWriter60.println((long) (-1));
        printWriter60.println((java.lang.Object) "");
        printWriter60.println();
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale68.getScript();
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleKeys();
        java.lang.String str71 = locale68.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        java.io.PrintWriter printWriter78 = printWriter60.printf(locale68, "ja", (java.lang.Object[]) complexArray77);
        java.io.PrintWriter printWriter79 = printWriter53.format("", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer24.inversetransform(complexArray77);
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException(throwable84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException86);
        java.lang.Object[] objArray88 = functionEvaluationException87.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray77, (java.lang.Throwable) functionEvaluationException87);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer6.inversetransform(complexArray77);
        java.io.PrintStream printStream91 = printStream1.format(locale4, "allemand", (java.lang.Object[]) complexArray77);
        java.util.Locale locale93 = java.util.Locale.forLanguageTag("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!");
        java.lang.String str94 = locale4.getDisplayCountry(locale93);
        java.lang.String str96 = locale4.getExtension('u');
        java.lang.String str97 = locale4.toString();
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "fr" + "'", str97, "fr");
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("English (Canada)", (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("French");
        java.lang.String str2 = locale1.getVariant();
        java.lang.String str3 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "french");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "french" + "'", str3, "french");
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer5.transform2(doubleArray28);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.print((float) 10L);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter41.println(' ');
        printWriter41.println((long) (-1));
        printWriter41.println((java.lang.Object) "");
        printWriter41.println();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.getScript();
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        java.io.PrintWriter printWriter59 = printWriter41.printf(locale49, "ja", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter60 = printWriter34.format("", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer5.inversetransform(complexArray58);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException(throwable65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException67);
        java.lang.Object[] objArray69 = functionEvaluationException68.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray58, (java.lang.Throwable) functionEvaluationException68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(0.21431630255703113d, "", (java.lang.Throwable) functionEvaluationException70);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, (java.lang.Throwable) functionEvaluationException70);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter3.print(0);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter7.println(' ');
        printWriter7.println((long) (-1));
        printWriter7.println((java.lang.Object) "");
        char[] charArray20 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter7.println(charArray20);
        printWriter3.println(charArray20);
        java.util.Locale locale23 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray30);
        java.io.PrintWriter printWriter32 = printWriter3.format(locale23, "und", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, (double) 'u');
        org.apache.commons.math.complex.Complex[] complexArray36 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray30, (double) (-1.0f));
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException(throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException48);
        java.lang.Throwable[] throwableArray50 = functionEvaluationException48.getSuppressed();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "zh", (java.lang.Throwable) functionEvaluationException52);
        java.lang.Throwable[] throwableArray54 = functionEvaluationException52.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: fr", (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((-1.833789474235432d), "US", (java.lang.Object[]) complexArray30, (java.lang.Throwable) functionEvaluationException55);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException(throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException62);
        java.lang.Object[] objArray64 = functionEvaluationException63.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "");
        functionEvaluationException63.addSuppressed((java.lang.Throwable) functionEvaluationException67);
        functionEvaluationException55.addSuppressed((java.lang.Throwable) functionEvaluationException63);
        double double70 = functionEvaluationException55.getArgument();
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList21);
        java.lang.String str24 = java.util.Locale.lookupTag(languageRangeList10, (java.util.Collection<java.lang.String>) strList21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("anglais", strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("anglais", strMap29);
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Locale.setDefault(category31, locale32);
        java.lang.String str36 = locale32.getScript();
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray43 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList53);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList53, filteringMode56);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet37, filteringMode56);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet37);
        java.lang.String str60 = java.util.Locale.lookupTag(languageRangeList10, (java.util.Collection<java.lang.String>) strList59);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        java.util.Locale locale1 = new java.util.Locale("GERMAN (FRA,FR)");
        java.lang.String str2 = locale1.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "german (fra,fr)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        printStream14.println(true);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.println(' ');
        printWriter40.println(false);
        printWriter40.print("FR");
        printWriter40.write("und");
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getCountry();
        java.lang.String str52 = locale49.getDisplayCountry(locale50);
        boolean boolean53 = locale50.hasExtensions();
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean58 = printWriter57.checkError();
        java.util.Locale locale59 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray66);
        java.lang.Object[] objArray68 = mathException67.getArguments();
        java.io.PrintWriter printWriter69 = printWriter57.printf(locale59, "zho", objArray68);
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException75);
        double double77 = functionEvaluationException75.getArgument();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("", objArray68, (java.lang.Throwable) functionEvaluationException75);
        java.io.PrintWriter printWriter79 = printWriter40.format(locale50, "fra", objArray68);
        java.io.PrintStream printStream80 = printStream14.format("Franz\366sisch", objArray68);
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.OutputStream) printStream80, true);
        printWriter82.println((float) (short) 100);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 1, 0.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        double double7 = complex4.getReal();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cos();
        org.apache.commons.math.complex.Complex complex11 = complex9.cos();
        org.apache.commons.math.complex.Complex complex12 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex8.add(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex18.acos();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex17.multiply(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex19.atan();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex23.acos();
        org.apache.commons.math.complex.Complex complex27 = complex19.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex12.divide(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex4.multiply(complex27);
        double double31 = complex27.abs();
        org.apache.commons.math.complex.Complex complex32 = complex27.atan();
        org.apache.commons.math.complex.Complex complex33 = complex27.tan();
        org.apache.commons.math.complex.Complex complex34 = complex2.subtract(complex27);
        org.apache.commons.math.complex.Complex complex35 = complex27.acos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        double double10 = complex7.abs();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex7.add(complex11);
        org.apache.commons.math.complex.Complex complex15 = complex4.multiply(complex7);
        org.apache.commons.math.complex.Complex complex16 = complex7.asin();
        org.apache.commons.math.complex.Complex complex17 = complex7.sinh();
        double double18 = complex7.getReal();
        org.apache.commons.math.complex.Complex complex19 = complex7.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex7.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex5.add(complex13);
        boolean boolean15 = complex14.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print('a');
        char[] charArray20 = new char[] {};
        printWriter1.println(charArray20);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter25 = printWriter23.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        double[] doubleArray40 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer32.inversetransform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer27.transform(complexArray41);
        java.io.PrintWriter printWriter43 = printWriter23.format("ja", (java.lang.Object[]) complexArray41);
        java.io.PrintStream printStream45 = new java.io.PrintStream("japonais");
        printStream45.print(0.0f);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        java.io.PrintStream printStream58 = printStream45.format(locale48, "japonais", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        printStream58.print((java.lang.Object) doubleArray62);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.print(0);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter71.println(' ');
        printWriter71.println((long) (-1));
        printWriter71.println((java.lang.Object) "");
        char[] charArray84 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter71.println(charArray84);
        printWriter67.println(charArray84);
        printStream58.print(charArray84);
        printWriter43.print(charArray84);
        printWriter1.write(charArray84);
        printWriter1.print(0.0d);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[a, #,  , a, a, a]");
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex15.multiply(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex15.exp();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex20.add(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex20.atan();
        org.apache.commons.math.complex.Complex complex26 = complex20.atan();
        org.apache.commons.math.complex.Complex complex27 = complex10.pow(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex34 = complex32.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex38 = complex37.tan();
        org.apache.commons.math.complex.Complex complex39 = complex33.add(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex39.atan();
        org.apache.commons.math.complex.Complex complex41 = complex39.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex43 = complex10.divide(complex39);
        double double44 = complex43.getImaginary();
        double double45 = complex43.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr-FR");
        printStream1.write((int) '#');
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException(throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException21);
        java.lang.Throwable[] throwableArray23 = functionEvaluationException21.getSuppressed();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "zh", (java.lang.Throwable) functionEvaluationException25);
        printStream1.print((java.lang.Object) functionEvaluationException26);
        printStream1.println(false);
        printStream1.print("\u975e\u78ba\u5b9a");
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        printWriter13.println((float) (byte) 0);
        printWriter13.print((double) 1);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getLanguage();
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(0.0f);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        java.io.PrintStream printStream40 = printStream27.format(locale30, "japonais", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter41 = printWriter13.format(locale23, "ja", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter43 = printWriter13.append((java.lang.CharSequence) "GB");
        java.io.PrintWriter printWriter45 = printWriter43.append('4');
        java.io.PrintWriter printWriter47 = printWriter43.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: Chinesisch");
        printWriter43.close();
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Etats-Unis");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(0.0f);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        printStream9.print((float) (short) -1);
        printStream9.print('a');
        printStream9.println();
        printStream9.print("hi!");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream9, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter18, true);
        printWriter20.print("\u97d3\u56fd\u8a9e");
        printWriter20.print((float) 10L);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("FR", strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap28);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray35 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList36);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray44 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList45);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, strMap49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, strMap51);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray58 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, strMap62);
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        boolean boolean65 = locale64.hasExtensions();
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList63, (java.util.Collection<java.lang.String>) strSet66);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags(languageRangeList52, (java.util.Collection<java.lang.String>) strList67);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList68);
        printWriter20.print((java.lang.Object) languageRangeList29);
        java.util.Locale.Category category71 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = locale72.getCountry();
        java.lang.String str74 = locale72.getDisplayCountry();
        java.util.Locale.setDefault(category71, locale72);
        java.lang.String str76 = locale72.getScript();
        java.util.Set<java.lang.String> strSet77 = locale72.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strSet77);
        java.util.Locale.FilteringMode filteringMode79 = null;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strList78, filteringMode79);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + category71 + "' != '" + java.util.Locale.Category.FORMAT + "'", category71.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((double) 'a');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "evaluation failed for argument = -1", (java.lang.Throwable) functionEvaluationException3);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getCountry();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category8);
        java.util.Locale locale14 = java.util.Locale.getDefault(category8);
        printStream7.print((java.lang.Object) locale14);
        java.util.Locale locale16 = null;
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter19.print(0);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println((long) (-1));
        printWriter23.println((java.lang.Object) "");
        char[] charArray36 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter23.println(charArray36);
        printWriter19.println(charArray36);
        java.util.Locale locale39 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray46);
        java.io.PrintWriter printWriter48 = printWriter19.format(locale39, "und", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.transform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer50.transform(complexArray64);
        java.io.PrintWriter printWriter66 = printWriter19.format("japonais", (java.lang.Object[]) complexArray64);
        java.io.PrintStream printStream67 = printStream7.printf(locale16, "French", (java.lang.Object[]) complexArray64);
        printStream7.println((double) 100);
        printStream7.println(true);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter15, true);
        java.util.Locale locale19 = java.util.Locale.ITALY;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer21.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer21.transform2(complexArray37);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.println(' ');
        printWriter40.print((float) 10L);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter47.println(' ');
        printWriter47.println((long) (-1));
        printWriter47.println((java.lang.Object) "");
        printWriter47.println();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getScript();
        java.util.Set<java.lang.String> strSet57 = locale55.getUnicodeLocaleKeys();
        java.lang.String str58 = locale55.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        java.io.PrintWriter printWriter65 = printWriter47.printf(locale55, "ja", (java.lang.Object[]) complexArray64);
        java.io.PrintWriter printWriter66 = printWriter40.format("", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer21.inversetransform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray73);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer21.inversetransform2(complexArray73);
        java.io.PrintWriter printWriter76 = printWriter15.format(locale19, "org.apache.commons.math.functionevaluationexception: fr", (java.lang.Object[]) complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray73);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(printWriter76);
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.lang.String str7 = locale6.getISO3Country();
        java.util.Locale locale8 = locale6.stripExtensions();
        java.lang.String str9 = locale6.getLanguage();
        java.lang.String str10 = locale6.getDisplayScript();
        java.lang.String str11 = locale6.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getVariant();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = locale12.stripExtensions();
        java.lang.String str16 = locale12.getDisplayLanguage();
        java.util.Locale locale17 = locale12.stripExtensions();
        java.lang.String str18 = locale12.getDisplayCountry();
        java.lang.String str19 = locale6.getDisplayLanguage(locale12);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "japonais" + "'", str16, "japonais");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str19, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        boolean boolean8 = printWriter1.checkError();
        printWriter1.flush();
        printWriter1.close();
        printWriter1.println((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "ind\351termin\351 (org.apache.commons.math.functionevaluationexception)_DEU_Chinese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: inde?termine? (org.apache.commons.math.functionevaluationexception)_DEU_Chinese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.Throwable[] throwableArray6 = functionEvaluationException5.getSuppressed();
        java.lang.String[] strArray10 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray10);
        double double12 = functionEvaluationException11.getArgument();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException11);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("\u65e5\u6587", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) mathException14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray21);
        java.lang.Object[] objArray23 = mathException22.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "fr", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) mathException22);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(objArray23);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale.setDefault(locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str9 = locale5.getVariant();
        java.lang.String str10 = locale1.getDisplayVariant(locale5);
        java.util.Set<java.lang.String> strSet11 = locale5.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream11.println(true);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.format("", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.write((int) 'a');
        printStream25.print(0.0f);
        java.io.PrintStream printStream31 = printStream25.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.getISO3Language();
        printStream25.println((java.lang.Object) locale32);
        java.util.Locale locale38 = new java.util.Locale("fra");
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.lang.String str42 = locale32.getDisplayScript(locale38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer44.inversetransform(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, (double) (-1));
        java.io.PrintStream printStream64 = printStream23.format(locale32, "allemand", (java.lang.Object[]) complexArray63);
        java.util.Locale locale66 = new java.util.Locale("de-DE");
        java.lang.String str67 = locale32.getDisplayScript(locale66);
        java.lang.String str68 = locale32.getDisplayLanguage();
        boolean boolean69 = locale32.hasExtensions();
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals(locale38.toString(), "fra");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertEquals(locale66.toString(), "de-de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "chinois" + "'", str68, "chinois");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print("German (FRA,fr)");
        printWriter1.println((long) '#');
        printWriter1.println((int) (short) 10);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("englisch");
        java.util.Locale.Builder builder9 = builder6.clearExtensions();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale11.toLanguageTag();
        boolean boolean14 = locale11.hasExtensions();
        java.util.Locale locale15 = locale11.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder6.setLocale(locale15);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.print(0.0f);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.transform(doubleArray18);
        java.io.PrintStream printStream20 = printStream7.format(locale10, "japonais", (java.lang.Object[]) complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        printStream20.print((java.lang.Object) doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer1.transform2(doubleArray24);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter30.println(' ');
        printWriter30.print((float) 10L);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter37.println(' ');
        printWriter37.println((long) (-1));
        printWriter37.println((java.lang.Object) "");
        printWriter37.println();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getScript();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = locale45.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        java.io.PrintWriter printWriter55 = printWriter37.printf(locale45, "ja", (java.lang.Object[]) complexArray54);
        java.io.PrintWriter printWriter56 = printWriter30.format("", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer1.inversetransform(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer1.inversetransform2(doubleArray63);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fran\347ais", (java.lang.Object[]) complexArray66);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-1.163916074336452d), "org.apache.commons.math.MathException: Evaluation failed for argument = 52");
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex13 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex13.multiply(complex16);
        boolean boolean18 = complex16.isNaN();
        org.apache.commons.math.complex.Complex complex19 = complex16.atan();
        org.apache.commons.math.complex.Complex complex20 = complex11.pow(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        double double25 = complex22.abs();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex22.add(complex26);
        org.apache.commons.math.complex.Complex complex30 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex20.multiply(complex26);
        org.apache.commons.math.complex.Complex complex32 = complex31.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("japonais");
        printStream24.print(0.0f);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        java.io.PrintStream printStream37 = printStream24.format(locale27, "japonais", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        printStream37.print((java.lang.Object) doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer18.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.transform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer18.inversetransform(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer18.inversetransform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.transform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform(doubleArray79);
        double[] doubleArray82 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer74.inversetransform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer69.transform(complexArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray88 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer85.inversetransform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer69.inversetransform(complexArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer0.transform(complexArray89);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer0.transform2(univariateRealFunction92, 0.7456241416655578d, (double) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.7456241416655578, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en-US" + "'", str2, "en-US");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale4 = new java.util.Locale("org.apache.commons.math.functionevaluationexception: fr", "anglais", "Chine");
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = locale5.getDisplayName(locale7);
        java.lang.String str10 = locale7.getDisplayScript();
        java.util.Set<java.lang.String> strSet11 = locale7.getUnicodeLocaleKeys();
        java.lang.String str12 = locale7.toLanguageTag();
        java.lang.String str13 = locale4.getDisplayLanguage(locale7);
        java.lang.String str14 = locale4.toLanguageTag();
        java.util.Set<java.lang.String> strSet15 = locale4.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "org.apache.commons.math.functionevaluationexception: fr_ANGLAIS_Chine");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja" + "'", str8, "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str9, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ja" + "'", str12, "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.functionevaluationexception: fr" + "'", str13, "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und-Chine" + "'", str14, "und-Chine");
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        java.util.Locale locale2 = new java.util.Locale("english", "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale2.getDisplayName();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "english" + "'", str3, "english");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2))" + "'", str4, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2))");
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter1.printf("fra", (java.lang.Object[]) strArray7);
        printWriter8.print((long) (byte) 10);
        printWriter8.close();
        printWriter8.println(' ');
        boolean boolean14 = printWriter8.checkError();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println((long) (-1));
        printStream1.close();
        printStream1.println();
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "Evaluation failed for argument = {0}");
        printStream1.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter1.printf("fra", (java.lang.Object[]) strArray7);
        boolean boolean9 = printWriter1.checkError();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter11.println("japonais");
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter16.println(' ');
        printWriter16.print((double) (short) 100);
        boolean boolean21 = printWriter16.checkError();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter16, false);
        printWriter16.print((float) (-1L));
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getCountry();
        java.lang.String str29 = locale26.getDisplayCountry(locale27);
        boolean boolean30 = locale27.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        double[] doubleArray46 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer38.inversetransform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer33.transform(complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer33.inversetransform(complexArray53);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException60);
        java.lang.Throwable[] throwableArray62 = functionEvaluationException60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = functionEvaluationException60.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException60.addSuppressed((java.lang.Throwable) functionEvaluationException66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray54, (java.lang.Throwable) functionEvaluationException66);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 100.0d);
        java.io.PrintWriter printWriter71 = printWriter16.format(locale27, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray54);
        java.io.PrintWriter printWriter72 = printWriter11.format("und", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray74 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, 97.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray54);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(complexArray74);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.exp();
        org.apache.commons.math.complex.Complex complex11 = complex0.pow(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex11.exp();
        org.apache.commons.math.complex.Complex complex13 = complex11.atan();
        double double14 = complex13.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        java.util.Locale locale1 = new java.util.Locale("English (United Kingdom)");
        java.lang.String str2 = locale1.getLanguage();
        java.lang.Object obj3 = locale1.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "english (united kingdom)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "english (united kingdom)" + "'", str2, "english (united kingdom)");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "english (united kingdom)");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "english (united kingdom)");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "english (united kingdom)");
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = printWriter1.append((java.lang.CharSequence) "Japanese");
        printWriter8.println((double) 'x');
        java.io.PrintWriter printWriter12 = printWriter8.append('a');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter15.println(' ');
        printWriter15.println((long) (-1));
        printWriter15.println((java.lang.Object) "");
        boolean boolean22 = printWriter15.checkError();
        java.util.Locale locale23 = null;
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter29 = printWriter15.format(locale23, "zho", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter30 = printWriter8.format("allemand (Allemagne)", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter32 = printWriter8.append((java.lang.CharSequence) "ja_JP");
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.print(0);
        printWriter35.print('u');
        java.io.PrintStream printStream43 = new java.io.PrintStream("japonais");
        printStream43.print(true);
        boolean boolean46 = printStream43.checkError();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream43, true);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.transform(doubleArray61);
        double[] doubleArray64 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer51.transform(complexArray65);
        java.io.PrintStream printStream67 = printStream43.format(locale49, "fr", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray66);
        java.io.PrintWriter printWriter69 = printWriter35.printf("", (java.lang.Object[]) complexArray66);
        printWriter35.print((-1L));
        char[] charArray75 = new char[] { '#', 'a', '4' };
        printWriter35.print(charArray75);
        printWriter32.write(charArray75);
        printWriter32.print(0L);
        printWriter32.print((long) 'a');
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "#a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "#a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#, a, 4]");
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex0.cosh();
        double double5 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex9 = complex4.multiply(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex13.divide(complex14);
        boolean boolean16 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex15.asin();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        double double23 = complex20.abs();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex27 = complex20.add(complex24);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex28.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex24.subtract(complex28);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = complex28.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex19.add(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex19.asin();
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.apache.commons.math.complex.Complex complex40 = complex8.subtract(complex39);
        double double41 = complex40.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.addUnicodeLocaleAttribute("anglais (Royaume-Uni)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: anglais (Royaume-Uni) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.setLanguage("italien");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: zh_TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex16 = complex5.divide(complex15);
        boolean boolean17 = complex16.isInfinite();
        org.apache.commons.math.complex.Complex complex18 = complex16.sqrt();
        double double19 = complex18.abs();
        org.apache.commons.math.complex.Complex complex20 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex18.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder6 = builder2.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder6.clearExtensions();
        java.util.Locale locale9 = builder6.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(true);
        printStream5.println((float) (short) 10);
        printStream5.print((long) (short) 10);
        printStream5.println(0.0d);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintStream printStream18 = new java.io.PrintStream("japonais");
        printStream18.print(0.0f);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        java.io.PrintStream printStream31 = printStream18.format(locale21, "japonais", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream33 = new java.io.PrintStream("japonais");
        printStream33.print(true);
        printStream33.println((-1));
        java.io.PrintStream printStream39 = new java.io.PrintStream("japonais");
        printStream39.print(0.0f);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        java.io.PrintStream printStream52 = printStream39.format(locale42, "japonais", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        printStream52.print((java.lang.Object) doubleArray56);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream52.write(byteArray63);
        printStream33.write(byteArray63);
        printStream18.write(byteArray63);
        printStream5.write(byteArray63);
        printStream5.print('4');
        printStream5.print(true);
        printStream5.println((float) (short) -1);
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.lang.String str75 = locale74.getDisplayScript();
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException(throwable80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException82);
        java.lang.Throwable throwable87 = null;
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException(throwable87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException89);
        java.lang.String str91 = functionEvaluationException89.getPattern();
        functionEvaluationException82.addSuppressed((java.lang.Throwable) functionEvaluationException89);
        java.lang.Object[] objArray93 = functionEvaluationException82.getArguments();
        java.io.PrintStream printStream94 = printStream5.printf(locale74, "FR", objArray93);
        java.util.Locale.Builder builder95 = builder1.setLocale(locale74);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder97 = builder1.setLanguageTag("italien (Italie)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: italien (Italie) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
        org.junit.Assert.assertNotNull(printStream94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer3.transform(doubleArray8);
        double[] doubleArray11 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.inversetransform2(doubleArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.print(0.0f);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform(doubleArray25);
        java.io.PrintStream printStream27 = printStream14.format(locale17, "japonais", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        printStream27.print((java.lang.Object) doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer3.inversetransform(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray37 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray35, (double) (byte) -1);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "English (United Kingdom)", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("United States", (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer41.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer51.transform2(doubleArray57);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer41.transform(doubleArray57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException(throwable69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException71);
        java.lang.Throwable[] throwableArray73 = functionEvaluationException71.getSuppressed();
        java.lang.Throwable[] throwableArray74 = functionEvaluationException71.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException71.addSuppressed((java.lang.Throwable) functionEvaluationException77);
        functionEvaluationException65.addSuppressed((java.lang.Throwable) functionEvaluationException71);
        java.lang.String str80 = functionEvaluationException65.getPattern();
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("\u65e5\u6587", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException65);
        functionEvaluationException38.addSuppressed((java.lang.Throwable) functionEvaluationException65);
        double double83 = functionEvaluationException65.getArgument();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException65);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: fr" + "'", str80, "org.apache.commons.math.FunctionEvaluationException: fr");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 10.0d + "'", double83 == 10.0d);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        printWriter13.println((float) (byte) 0);
        printWriter13.print((double) 1);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getLanguage();
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(0.0f);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        java.io.PrintStream printStream40 = printStream27.format(locale30, "japonais", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter41 = printWriter13.format(locale23, "ja", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter43 = printWriter13.append((java.lang.CharSequence) "GB");
        java.io.PrintWriter printWriter45 = printWriter43.append('4');
        java.io.PrintWriter printWriter47 = printWriter43.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: Chinesisch");
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter47, false);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "ja", (java.lang.Object[]) complexArray18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.write((int) 'a');
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter27.println(' ');
        printWriter27.print((float) 10L);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.println((long) (-1));
        printWriter34.println((java.lang.Object) "");
        printWriter34.println();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getScript();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = locale42.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        java.io.PrintWriter printWriter52 = printWriter34.printf(locale42, "ja", (java.lang.Object[]) complexArray51);
        java.io.PrintWriter printWriter53 = printWriter27.format("", (java.lang.Object[]) complexArray51);
        java.io.PrintStream printStream54 = printStream22.format("de", (java.lang.Object[]) complexArray51);
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream54);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, (double) (byte) 10);
        java.io.PrintStream printStream68 = printStream55.printf(locale57, "Franz\366sisch", (java.lang.Object[]) complexArray67);
        java.io.PrintWriter printWriter69 = printWriter19.printf("ja_JP", (java.lang.Object[]) complexArray67);
        char[] charArray75 = new char[] { '#', ' ', '4', ' ', 'u' };
        printWriter19.write(charArray75);
        java.io.PrintWriter printWriter80 = printWriter19.append((java.lang.CharSequence) "org.apache.commons.math.functionevaluationexception: fr", (int) ' ', (int) '4');
        printWriter19.print(0.5959039568078985d);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "# 4 u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "# 4 u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#,  , 4,  , u]");
        org.junit.Assert.assertNotNull(printWriter80);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println((long) (-1));
        printStream1.close();
        printStream1.write((int) (short) -1);
        java.util.Locale locale15 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException(0.0d);
        double double19 = functionEvaluationException18.getArgument();
        java.lang.Throwable[] throwableArray20 = functionEvaluationException18.getSuppressed();
        java.io.PrintStream printStream21 = printStream1.format(locale15, "ind\351termin\351 (org.apache.commons.math.functionevaluationexception)_DEU_Chinese", (java.lang.Object[]) throwableArray20);
        printStream1.println(10L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printStream21);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        boolean boolean9 = complex7.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex13.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex7.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        boolean boolean20 = complex19.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer0.transform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray41, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.transform(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        java.io.PrintStream printStream56 = new java.io.PrintStream("japonais");
        printStream56.print(0.0f);
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet60 = locale59.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer62.transform(doubleArray67);
        java.io.PrintStream printStream69 = printStream56.format(locale59, "japonais", (java.lang.Object[]) complexArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray73);
        printStream69.print((java.lang.Object) doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer50.transform2(doubleArray73);
        double[] doubleArray79 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray73, Double.NaN);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray79);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform(doubleArray79);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.transform2(univariateRealFunction83, 1.0000000000000002d, 1.2185939282071239d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray82);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.lang.String str5 = locale0.getDisplayScript();
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale0.getDisplayVariant(locale6);
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(0.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream9, true);
        printStream13.print((float) (short) -1);
        printStream13.print('a');
        printStream13.println();
        printStream13.println((float) 1);
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.write((int) 'a');
        printStream22.print(0.0f);
        java.io.PrintStream printStream28 = printStream22.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream28.println("hi!");
        printStream28.println((int) '#');
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale33.getDisplayVariant();
        java.lang.String str35 = locale33.getDisplayVariant();
        printStream28.print((java.lang.Object) locale33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform(doubleArray48);
        double[] doubleArray51 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer38.transform(complexArray52);
        java.io.PrintStream printStream54 = printStream13.format(locale33, "zh", (java.lang.Object[]) complexArray53);
        java.lang.String str55 = locale0.getDisplayVariant(locale33);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getScript();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        java.lang.String str59 = locale56.getVariant();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.lang.String str62 = locale60.getISO3Language();
        java.lang.String str63 = locale60.getDisplayVariant();
        java.util.Locale locale64 = locale60.stripExtensions();
        java.util.Locale locale65 = locale64.stripExtensions();
        java.lang.String str66 = locale56.getDisplayVariant(locale64);
        java.lang.String str67 = locale56.getISO3Language();
        java.lang.String str68 = locale56.getDisplayCountry();
        java.lang.String str69 = locale56.getVariant();
        java.lang.String str70 = locale0.getDisplayLanguage(locale56);
        java.util.Set<java.lang.Character> charSet71 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u65e5\u6587" + "'", str2, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "jpn" + "'", str67, "jpn");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str70, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(charSet71);
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        java.util.Locale locale1 = new java.util.Locale("Chinesisch");
        java.util.Locale.setDefault(locale1);
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale3.getVariant();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = locale3.stripExtensions();
        java.lang.String str7 = locale3.getDisplayLanguage();
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale8.getDisplayVariant();
        java.util.Set<java.lang.String> strSet12 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale14.toLanguageTag();
        java.lang.String str17 = locale8.getDisplayName(locale14);
        java.lang.String str18 = locale3.getDisplayVariant(locale14);
        java.util.Locale locale19 = locale3.stripExtensions();
        java.lang.String str20 = locale1.getDisplayCountry(locale19);
        java.lang.String str21 = locale1.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "chinesisch");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Japanese" + "'", str7, "Japanese");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fra" + "'", str10, "fra");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "French" + "'", str17, "French");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray12);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer6.transform(complexArray20);
        java.io.PrintStream printStream22 = printStream1.format("ja", (java.lang.Object[]) complexArray20);
        printStream22.flush();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        double[] doubleArray33 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer25.inversetransform2(doubleArray33);
        java.io.PrintStream printStream36 = new java.io.PrintStream("japonais");
        printStream36.print(0.0f);
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        java.io.PrintStream printStream49 = printStream36.format(locale39, "japonais", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray53);
        printStream49.print((java.lang.Object) doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer25.inversetransform(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, 1.0d);
        java.io.PrintStream printStream60 = printStream22.printf("ja", (java.lang.Object[]) complexArray59);
        printStream22.flush();
        boolean boolean62 = printStream22.checkError();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        java.io.PrintStream printStream31 = printStream27.append((java.lang.CharSequence) "Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)", 0, (int) (short) 10);
        printStream27.println((long) (short) 0);
        printStream27.print(10.024906793143211d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream11.println(true);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.format("", (java.lang.Object[]) throwableArray22);
        printStream23.print(false);
        printStream23.print(false);
        printStream23.print((float) (byte) 10);
        printStream23.print(10.024906793143211d);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer4.inversetransform2(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        java.io.PrintStream printStream15 = new java.io.PrintStream("japonais");
        printStream15.print(0.0f);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer21.transform(doubleArray26);
        java.io.PrintStream printStream28 = printStream15.format(locale18, "japonais", (java.lang.Object[]) complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray32);
        printStream28.print((java.lang.Object) doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer9.transform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer4.transform(complexArray36);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "chinois", (java.lang.Object[]) complexArray37, (java.lang.Throwable) functionEvaluationException46);
        java.lang.Throwable[] throwableArray48 = functionEvaluationException47.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(0.7456241416655578d, "United Kingdom", (java.lang.Object[]) throwableArray48);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex0.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean11 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex12.exp();
        org.apache.commons.math.complex.Complex complex16 = complex10.subtract(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        boolean boolean23 = complex19.equals((java.lang.Object) complex21);
        org.apache.commons.math.complex.Complex complex24 = complex15.subtract(complex21);
        org.apache.commons.math.complex.Complex complex25 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = complex7.divide(complex15);
        org.apache.commons.math.complex.Complex complex27 = complex26.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = complex0.exp();
        org.apache.commons.math.complex.Complex complex3 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex5 = complex0.cos();
        org.apache.commons.math.complex.Complex complex6 = complex0.asin();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        double double3 = complex2.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex5 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        double double9 = complex6.abs();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex13.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.acos();
        org.apache.commons.math.complex.Complex complex17 = complex14.cos();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex20 = complex18.cos();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex14.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        org.apache.commons.math.complex.Complex complex30 = complex26.multiply(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex22.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex33.cos();
        org.apache.commons.math.complex.Complex complex37 = complex32.pow(complex33);
        org.apache.commons.math.complex.Complex complex38 = complex6.multiply(complex33);
        org.apache.commons.math.complex.Complex complex39 = complex5.pow(complex6);
        org.apache.commons.math.complex.Complex complex40 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex40.atan();
        org.apache.commons.math.complex.Complex complex42 = complex41.tanh();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex46 = complex43.sinh();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex48 = complex47.acos();
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex46.multiply(complex48);
        org.apache.commons.math.complex.Complex complex51 = complex48.atan();
        org.apache.commons.math.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math.complex.Complex complex53 = complex51.sin();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        double double56 = complex54.getImaginary();
        org.apache.commons.math.complex.Complex complex57 = complex54.sinh();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex59 = complex57.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex58.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.apache.commons.math.complex.Complex complex62 = complex60.sin();
        org.apache.commons.math.complex.Complex complex63 = complex60.sin();
        org.apache.commons.math.complex.Complex complex64 = complex53.add(complex63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex66 = complex65.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex65.exp();
        org.apache.commons.math.complex.Complex complex68 = complex65.atan();
        org.apache.commons.math.complex.Complex complex69 = complex65.sqrt1z();
        org.apache.commons.math.complex.Complex complex70 = complex69.asin();
        org.apache.commons.math.complex.Complex complex71 = complex69.exp();
        org.apache.commons.math.complex.Complex complex72 = complex64.add(complex69);
        org.apache.commons.math.complex.Complex complex73 = complex72.sin();
        org.apache.commons.math.complex.Complex complex74 = complex42.subtract(complex72);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.println("zh");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println(true);
        printWriter1.println((int) (short) 100);
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer5.transform2(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.transform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer34.transform2(complexArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.inversetransform2(complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        java.io.PrintStream printStream59 = new java.io.PrintStream("japonais");
        printStream59.print(0.0f);
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform(doubleArray70);
        java.io.PrintStream printStream72 = printStream59.format(locale62, "japonais", (java.lang.Object[]) complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray76);
        printStream72.print((java.lang.Object) doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer53.transform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.inversetransform(doubleArray76);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.inversetransform(univariateRealFunction82, 0.5959039568078985d, 0.5403023058681398d, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.5959039568078985, 0.5403023058681398]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.transform(doubleArray7);
        double[] doubleArray10 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer2.inversetransform(doubleArray30);
        java.lang.String[] strArray38 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray38);
        double double40 = functionEvaluationException39.getArgument();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException39);
        java.lang.Object[] objArray42 = mathException41.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 1, "org.apache.commons.math.FunctionEvaluationException: zho", (java.lang.Object[]) complexArray34, (java.lang.Throwable) mathException41);
        java.lang.String str44 = mathException41.toString();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.apache.commons.math.MathException: fra" + "'", str44, "org.apache.commons.math.MathException: fra");
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getDisplayCountry();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale6.getDisplayVariant();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.getCountry();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer13.inversetransform2(doubleArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("japonais");
        printStream19.print(0.0f);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        java.io.PrintStream printStream32 = printStream19.format(locale22, "japonais", (java.lang.Object[]) complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray36);
        printStream32.print((java.lang.Object) doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer13.transform2(doubleArray36);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.print((float) 10L);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.println(' ');
        printWriter49.println((long) (-1));
        printWriter49.println((java.lang.Object) "");
        printWriter49.println();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getScript();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = locale57.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        java.io.PrintWriter printWriter67 = printWriter49.printf(locale57, "ja", (java.lang.Object[]) complexArray66);
        java.io.PrintWriter printWriter68 = printWriter42.format("", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer13.inversetransform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer70.transform(doubleArray75);
        double[] doubleArray78 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer70.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer13.inversetransform2(doubleArray78);
        java.io.PrintStream printStream81 = printStream3.format(locale6, "Chinesisch", (java.lang.Object[]) complexArray80);
        java.lang.String str82 = locale6.toLanguageTag();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale84 = java.util.Locale.getDefault(category0);
        java.util.Locale locale85 = java.util.Locale.getDefault(category0);
        java.util.Locale locale86 = java.util.Locale.JAPANESE;
        java.lang.String str87 = locale86.getVariant();
        java.util.Set<java.lang.String> strSet88 = locale86.getUnicodeLocaleAttributes();
        java.util.Locale locale89 = locale86.stripExtensions();
        java.util.Locale locale90 = java.util.Locale.ENGLISH;
        java.lang.String str91 = locale86.getDisplayLanguage(locale90);
        java.lang.String str92 = locale90.getCountry();
        java.util.Locale.setDefault(category0, locale90);
        java.util.Locale locale94 = java.util.Locale.getDefault(category0);
        java.lang.String str95 = locale94.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "chinesisch");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "fr" + "'", str82, "fr");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Japanese" + "'", str91, "Japanese");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "en");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "en" + "'", str95, "en");
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer0.inversetransform(doubleArray6);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer0.transform(univariateRealFunction9, 0.21431630255703113d, (-0.428182669496151d), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.21431630255703113, -0.428182669496151]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        java.util.Locale locale3 = new java.util.Locale("und", "\u82f1\u6587\u7f8e\u56fd)", "English");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587\u7f8e\u56fd)_English");
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("de-DE");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("Etats-Unis");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("FR", strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList19);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = locale22.getDisplayScript();
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        java.lang.String str26 = locale22.getISO3Language();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.toLanguageTag();
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = locale28.getISO3Language();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.toLanguageTag();
        boolean boolean39 = locale37.hasExtensions();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = locale40.getDisplayScript();
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleKeys();
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getDisplayCountry();
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = locale49.getDisplayScript();
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleKeys();
        java.lang.String str53 = locale49.getISO3Language();
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale22, locale27, locale28, locale32, locale33, locale36, locale37, locale40, locale44, locale45, locale47, locale48, locale49 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.Locale locale57 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale locale59 = java.util.Locale.lookup(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter(languageRangeList3, (java.util.Collection<java.util.Locale>) localeList55);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fr" + "'", str29, "fr");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fra" + "'", str31, "fra");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ja" + "'", str34, "ja");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fr" + "'", str38, "fr");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fra" + "'", str53, "fra");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNull(locale59);
        org.junit.Assert.assertNotNull(localeList60);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setScript("");
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale.Builder builder12 = builder10.setRegion("en");
        java.util.Locale locale13 = builder10.build();
        java.util.Locale.Builder builder15 = builder10.setVariant("");
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = locale16.getScript();
        java.io.PrintStream printStream19 = new java.io.PrintStream("allemand (Allemagne)");
        boolean boolean20 = printStream19.checkError();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, true);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        boolean boolean25 = locale16.equals((java.lang.Object) printWriter24);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "_EN");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "_EN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getLanguage();
        printWriter1.print((java.lang.Object) str10);
        printWriter1.print(true);
        printWriter1.write((-1));
        printWriter1.println(0);
        boolean boolean18 = printWriter1.checkError();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.mathexception: fr");
        java.io.PrintStream printStream5 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: English (United Kingdom)", 1, (int) '4');
        org.junit.Assert.assertNotNull(printStream5);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.getVariant();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = locale18.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale18.getDisplayLanguage(locale22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(0.0f);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        java.io.PrintStream printStream44 = printStream31.format(locale34, "japonais", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        printStream44.print((java.lang.Object) doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer25.transform2(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer25.inversetransform(complexArray57);
        java.io.PrintWriter printWriter59 = printWriter1.format(locale18, "de", (java.lang.Object[]) complexArray58);
        printWriter1.flush();
        printWriter1.flush();
        printWriter1.print(100.0f);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanese" + "'", str23, "Japanese");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder12.setUnicodeLocaleKeyword("Chinese (China)", "jp");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "_FR");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream11.println(true);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.format("", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.write((int) 'a');
        printStream25.print(0.0f);
        java.io.PrintStream printStream31 = printStream25.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.getISO3Language();
        printStream25.println((java.lang.Object) locale32);
        java.util.Locale locale38 = new java.util.Locale("fra");
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.lang.String str42 = locale32.getDisplayScript(locale38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer44.inversetransform(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, (double) (-1));
        java.io.PrintStream printStream64 = printStream23.format(locale32, "allemand", (java.lang.Object[]) complexArray63);
        java.util.Locale locale66 = new java.util.Locale("de-DE");
        java.lang.String str67 = locale32.getDisplayScript(locale66);
        java.lang.String str68 = locale66.getDisplayName();
        java.lang.String str69 = locale66.getScript();
        java.util.Set<java.lang.String> strSet70 = locale66.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals(locale38.toString(), "fra");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertEquals(locale66.toString(), "de-de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "de-de" + "'", str68, "de-de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.write((int) '#');
        printWriter1.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        printWriter1.close();
        java.util.Locale locale18 = new java.util.Locale("ja", "");
        java.lang.String str19 = locale18.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println(false);
        java.io.PrintStream printStream29 = new java.io.PrintStream("japonais");
        printStream29.print(true);
        boolean boolean32 = printStream29.checkError();
        printStream29.println();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer37.inversetransform(complexArray53);
        java.io.PrintStream printStream55 = printStream29.printf(locale34, "de", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer57.inversetransform(complexArray73);
        java.io.PrintWriter printWriter75 = printWriter23.format(locale34, "GB", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer21.inversetransform2(complexArray74);
        java.io.PrintWriter printWriter77 = printWriter1.format(locale18, "chinois", (java.lang.Object[]) complexArray74);
        java.util.Locale locale78 = locale18.stripExtensions();
        java.lang.String str79 = locale78.getDisplayName();
        java.lang.String str80 = locale78.getScript();
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ja" + "'", str19, "ja");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ja" + "'", str35, "ja");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Japanese" + "'", str79, "Japanese");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.FunctionEvaluationException: fr");
        printWriter1.println((long) (byte) 1);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println(' ');
        printWriter5.println((long) (-1));
        printWriter5.println((java.lang.Object) "");
        printWriter5.println();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println((java.lang.Object) printWriter14);
        printWriter14.print((float) (-1));
        printWriter14.println('4');
        java.io.PrintWriter printWriter21 = printWriter14.append('4');
        printWriter14.write((int) (byte) 10);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getISO3Country();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale27.getDisplayName(locale29);
        java.lang.String str32 = locale27.getLanguage();
        java.lang.String str33 = locale24.getDisplayName(locale27);
        java.lang.String str34 = locale27.getDisplayName();
        java.lang.String str35 = locale27.getVariant();
        java.io.PrintStream printStream38 = new java.io.PrintStream("japonais");
        printStream38.print(0.0f);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        java.io.PrintStream printStream51 = printStream38.format(locale41, "japonais", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        printStream51.print((java.lang.Object) doubleArray55);
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale59.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        java.io.PrintStream printStream70 = printStream51.printf(locale59, "GB", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray69, (double) 0.0f);
        java.io.PrintWriter printWriter73 = printWriter14.format(locale27, "ja", (java.lang.Object[]) complexArray72);
        printWriter73.println(100);
        printWriter1.print((java.lang.Object) printWriter73);
        printWriter73.print("");
        printWriter73.print(false);
        printWriter73.write("org.apache.commons.math.functionevaluationexception: fr (ANGLAIS,Chine)");
        printWriter73.print((long) (short) -1);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ja" + "'", str30, "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str31, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr" + "'", str32, "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "chinois" + "'", str33, "chinois");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "French" + "'", str34, "French");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh" + "'", str61, "zh");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printWriter73);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer3.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer8.transform2(complexArray24);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter27.println(' ');
        printWriter27.print((float) 10L);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.println((long) (-1));
        printWriter34.println((java.lang.Object) "");
        printWriter34.println();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getScript();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = locale42.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        java.io.PrintWriter printWriter52 = printWriter34.printf(locale42, "ja", (java.lang.Object[]) complexArray51);
        java.io.PrintWriter printWriter53 = printWriter27.format("", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer8.inversetransform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer3.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, (double) (byte) 100);
        java.io.PrintStream printStream62 = new java.io.PrintStream("japonais");
        printStream62.print(true);
        boolean boolean65 = printStream62.checkError();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream62, true);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform(doubleArray80);
        double[] doubleArray83 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer75.inversetransform2(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer70.transform(complexArray84);
        java.io.PrintStream printStream86 = printStream62.format(locale68, "fr", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("en", (java.lang.Object[]) complexArray55, (java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(141.4213562373095d, "org.apache.commons.math.FunctionEvaluationException: fran\347ais", (java.lang.Throwable) mathException89);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(printStream86);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale9 = builder7.build();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = locale9.getDisplayName(locale11);
        java.util.Locale locale16 = locale9.stripExtensions();
        java.lang.String str17 = locale9.getDisplayCountry();
        java.util.Locale.Builder builder18 = builder1.setLocale(locale9);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex9.multiply(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex11.atan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.acos();
        org.apache.commons.math.complex.Complex complex19 = complex11.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex4.divide(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex21.cos();
        org.apache.commons.math.complex.Complex complex23 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.atan();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.getImaginary();
        org.apache.commons.math.complex.Complex complex28 = complex25.sinh();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex30 = complex28.divide(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex32 = complex29.cos();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cos();
        org.apache.commons.math.complex.Complex complex35 = complex33.cos();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex29.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math.complex.Complex complex44 = complex43.negate();
        org.apache.commons.math.complex.Complex complex45 = complex41.multiply(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = complex37.subtract(complex46);
        double double48 = complex46.abs();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex50 = complex49.acos();
        org.apache.commons.math.complex.Complex complex51 = complex50.negate();
        org.apache.commons.math.complex.Complex complex52 = complex46.multiply(complex50);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = complex53.acos();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt1z();
        org.apache.commons.math.complex.Complex complex59 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex53.multiply(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex50.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.getImaginary();
        org.apache.commons.math.complex.Complex complex66 = complex63.sinh();
        org.apache.commons.math.complex.Complex complex67 = complex63.sinh();
        org.apache.commons.math.complex.Complex complex68 = complex67.negate();
        org.apache.commons.math.complex.Complex complex69 = complex68.negate();
        org.apache.commons.math.complex.Complex complex70 = complex62.subtract(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex24.pow(complex69);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex11 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.inversetransform(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer29.transform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray35);
        double[] doubleArray42 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray35, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.inversetransform2(doubleArray35);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform2(univariateRealFunction44, 35.0d, 1.5707963267948966d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex0.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex7.sin();
        org.apache.commons.math.complex.Complex complex10 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex16 = complex15.acos();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math.complex.Complex complex18 = complex14.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex14.exp();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex23 = complex19.add(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex7.add(complex25);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter28.println(' ');
        printWriter28.println((long) (-1));
        printWriter28.println((java.lang.Object) "");
        printWriter28.println();
        printWriter28.print(false);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt1z();
        org.apache.commons.math.complex.Complex complex40 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex38.divide(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = complex47.sinh();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex52 = complex50.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex46.divide(complex53);
        printWriter28.print((java.lang.Object) complex53);
        org.apache.commons.math.complex.Complex complex57 = complex7.multiply(complex53);
        boolean boolean58 = complex7.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = complex5.asin();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        double double13 = complex10.abs();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex10.add(complex14);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex21 = complex14.subtract(complex18);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = complex22.acos();
        org.apache.commons.math.complex.Complex complex26 = complex18.add(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex9.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex9.asin();
        org.apache.commons.math.complex.Complex complex29 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex30 = complex9.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }
}

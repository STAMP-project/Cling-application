import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale6);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("GB");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder15.setExtension(' ', "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setVariant("\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ????? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        printStream14.write((int) (byte) 1);
        printStream14.println();
        printStream14.println((float) (byte) 0);
        printStream14.println('4');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print((long) (short) 1);
        printWriter4.flush();
        printWriter4.println();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale15.getISO3Country();
        java.lang.String str18 = locale15.getDisplayScript();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale20.getDisplayCountry();
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Locale locale25 = java.util.Locale.getDefault(category19);
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale15.getDisplayCountry(locale25);
        boolean boolean28 = locale25.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getISO3Country();
        java.lang.String str31 = locale29.getDisplayScript();
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleKeys();
        java.lang.String str33 = locale29.getISO3Language();
        java.lang.String str34 = locale29.getISO3Language();
        java.lang.String str35 = locale29.getVariant();
        java.lang.String str36 = locale25.getDisplayVariant(locale29);
        java.lang.String str37 = locale13.getDisplayCountry(locale25);
        java.io.PrintStream printStream40 = new java.io.PrintStream("japonais");
        printStream40.write((int) 'a');
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.println(' ');
        printWriter45.print((float) 10L);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter52.println(' ');
        printWriter52.println((long) (-1));
        printWriter52.println((java.lang.Object) "");
        printWriter52.println();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getScript();
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleKeys();
        java.lang.String str63 = locale60.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        java.io.PrintWriter printWriter70 = printWriter52.printf(locale60, "ja", (java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter71 = printWriter45.format("", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream72 = printStream40.format("de", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter75 = printWriter4.printf(locale25, "zh", (java.lang.Object[]) complexArray69);
        printWriter75.print((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fra" + "'", str33, "fra");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printWriter75);
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u5fb7\u56fd", (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        printStream1.print(false);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.print(0.0f);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        java.io.PrintStream printStream25 = printStream12.format(locale15, "japonais", (java.lang.Object[]) complexArray24);
        printStream25.print((int) '4');
        java.io.PrintStream printStream29 = printStream25.append('u');
        printStream1.println((java.lang.Object) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream34 = printStream1.append((java.lang.CharSequence) "\u82f1\u6587", (int) 'u', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -116");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex5.negate();
        org.apache.commons.math.complex.Complex complex14 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex5.acos();
        org.apache.commons.math.complex.Complex complex17 = complex5.asin();
        org.apache.commons.math.complex.Complex complex18 = complex5.exp();
        org.apache.commons.math.complex.Complex complex19 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder1.setUnicodeLocaleKeyword("English (United Kingdom)", "francese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray0, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter6.println(' ');
        printWriter6.print((float) 10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter13.println(' ');
        printWriter13.println((long) (-1));
        printWriter13.println((java.lang.Object) "");
        printWriter13.println();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getScript();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        java.io.PrintWriter printWriter31 = printWriter13.printf(locale21, "ja", (java.lang.Object[]) complexArray30);
        java.io.PrintWriter printWriter32 = printWriter6.format("", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream33 = printStream1.format("de", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream33);
        printStream34.println(0.0d);
        printStream34.print((int) (short) 100);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.lang.String str5 = locale4.getVariant();
        java.util.Locale.setDefault(locale4);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        java.io.PrintStream printStream4 = new java.io.PrintStream("japonais");
        printStream4.print(true);
        boolean boolean7 = printStream4.checkError();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream4, true);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer12.inversetransform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        double[] doubleArray25 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer17.inversetransform2(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer12.transform(complexArray26);
        java.io.PrintStream printStream28 = printStream4.format(locale10, "fr", (java.lang.Object[]) complexArray27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Throwable) mathException29);
        java.lang.Throwable[] throwableArray31 = functionEvaluationException30.getSuppressed();
        java.lang.Class<?> wildcardClass32 = functionEvaluationException30.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh");
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.lang.String str5 = locale1.getDisplayVariant(locale4);
        java.lang.String str6 = locale4.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter1.println(0.8414709848078965d);
        printWriter1.print(true);
        printWriter1.println(false);
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.print(0);
        printStream5.println("");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        printWriter18.print(0L);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setExtension('a', "org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: org.apache.commons.math.MathException: ja [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        printStream1.print(false);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.print(0.0f);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        java.io.PrintStream printStream25 = printStream12.format(locale15, "japonais", (java.lang.Object[]) complexArray24);
        printStream25.print((int) '4');
        java.io.PrintStream printStream29 = printStream25.append('u');
        printStream1.println((java.lang.Object) 'u');
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.toLanguageTag();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getLanguage();
        java.lang.String str35 = locale31.toLanguageTag();
        java.util.Locale locale38 = new java.util.Locale("ja", "");
        java.lang.String str39 = locale38.getScript();
        java.util.Locale locale41 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale44 = new java.util.Locale("zho", "fran\347ais");
        java.lang.String str45 = locale41.getDisplayCountry(locale44);
        java.lang.String str46 = locale38.getDisplayLanguage(locale41);
        java.lang.String str47 = locale31.getDisplayScript(locale41);
        java.lang.String str49 = locale41.getExtension('x');
        printStream1.println((java.lang.Object) locale41);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream53 = new java.io.PrintStream("japonais");
        printStream53.print(true);
        printStream53.println((float) (short) 10);
        printStream53.print((long) (short) 10);
        printStream53.println(0.0d);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream53, false);
        printStream53.println((float) 0);
        printStream53.println((long) (short) 10);
        printStream1.print((java.lang.Object) (short) 10);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr" + "'", str32, "fr");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr" + "'", str34, "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale41.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals(locale44.toString(), "zho_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Japanese" + "'", str46, "Japanese");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.lang.String str5 = locale3.getLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ja" + "'", str5, "ja");
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10", 0.9888977057628651d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception: evaluation failed for argument = 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = complex0.cosh();
        boolean boolean3 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter5.write("\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) 'x', (int) (byte) -1);
        printWriter5.print((double) 100.0f);
        java.lang.Object[] objArray13 = null;
        java.io.PrintWriter printWriter14 = printWriter5.format("GB", objArray13);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException(throwable20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException22);
        java.lang.Throwable[] throwableArray24 = functionEvaluationException22.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) functionEvaluationException22);
        printWriter5.println((java.lang.Object) mathException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "German (Germany)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: German (Germany)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "ja", (java.lang.Object[]) complexArray18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.write((int) 'a');
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter27.println(' ');
        printWriter27.print((float) 10L);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.println((long) (-1));
        printWriter34.println((java.lang.Object) "");
        printWriter34.println();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getScript();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = locale42.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        java.io.PrintWriter printWriter52 = printWriter34.printf(locale42, "ja", (java.lang.Object[]) complexArray51);
        java.io.PrintWriter printWriter53 = printWriter27.format("", (java.lang.Object[]) complexArray51);
        java.io.PrintStream printStream54 = printStream22.format("de", (java.lang.Object[]) complexArray51);
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream54);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, (double) (byte) 10);
        java.io.PrintStream printStream68 = printStream55.printf(locale57, "Franz\366sisch", (java.lang.Object[]) complexArray67);
        java.io.PrintWriter printWriter69 = printWriter19.printf("ja_JP", (java.lang.Object[]) complexArray67);
        char[] charArray75 = new char[] { '#', ' ', '4', ' ', 'u' };
        printWriter19.write(charArray75);
        java.io.PrintWriter printWriter80 = printWriter19.append((java.lang.CharSequence) "org.apache.commons.math.functionevaluationexception: fr", (int) ' ', (int) '4');
        printWriter19.print('x');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "# 4 u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "# 4 u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#,  , 4,  , u]");
        org.junit.Assert.assertNotNull(printWriter80);
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer0.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.transform(complexArray70);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.inversetransform(univariateRealFunction72, (double) 100L, 0.9888977057628651d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 0.9888977057628651]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale.Builder builder9 = builder7.setLanguage("deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguage("German (Germany)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: German (Germany) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getVariant();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = locale1.stripExtensions();
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.write((int) 'a');
        printStream6.print(0.0f);
        java.io.PrintStream printStream12 = printStream6.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getCountry();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale locale18 = java.util.Locale.getDefault(category13);
        java.util.Locale locale19 = java.util.Locale.getDefault(category13);
        printStream12.print((java.lang.Object) locale19);
        java.lang.String str21 = locale1.getDisplayName(locale19);
        java.lang.String str22 = locale1.getISO3Country();
        java.lang.String str23 = locale0.getDisplayCountry(locale1);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex33 = complex31.divide(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.asin();
        boolean boolean37 = complex35.equals((java.lang.Object) "zho");
        boolean boolean38 = complex27.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex39 = complex27.atan();
        boolean boolean40 = locale0.equals((java.lang.Object) complex39);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "japonais" + "'", str21, "japonais");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30ab\u30ca\u30c0" + "'", str23, "\u30ab\u30ca\u30c0");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        java.io.PrintStream printStream16 = printStream3.format(locale6, "japonais", (java.lang.Object[]) complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray20);
        printStream16.print((java.lang.Object) doubleArray20);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream16.write(byteArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        java.io.PrintStream printStream37 = printStream16.printf("de", (java.lang.Object[]) complexArray36);
        printStream16.println(true);
        printStream16.println("allemand");
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream16, true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer46.inversetransform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, (double) (byte) 10);
        java.lang.Throwable throwable61 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException62);
        double double64 = functionEvaluationException62.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "japonais", (java.lang.Object[]) complexArray56, (java.lang.Throwable) functionEvaluationException62);
        printWriter43.println((java.lang.Object) functionEvaluationException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(0.9888977057628651d, "Chinese (China)", (java.lang.Throwable) functionEvaluationException62);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter10.flush();
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.print(true);
        boolean boolean17 = printStream14.checkError();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream14, true);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform(doubleArray32);
        double[] doubleArray35 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.inversetransform2(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer22.transform(complexArray36);
        java.io.PrintStream printStream38 = printStream14.format(locale20, "fr", (java.lang.Object[]) complexArray37);
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable40);
        printStream14.print((java.lang.Object) throwable40);
        java.io.PrintStream printStream44 = new java.io.PrintStream("japonais");
        printStream44.print(true);
        printStream44.println((float) (short) 10);
        printStream44.print((long) (short) 10);
        java.io.PrintStream printStream52 = printStream44.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream54 = new java.io.PrintStream("japonais");
        printStream54.print(0.0f);
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet58 = locale57.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer60.transform(doubleArray65);
        java.io.PrintStream printStream67 = printStream54.format(locale57, "japonais", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray71);
        printStream67.print((java.lang.Object) doubleArray71);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter76.print(0);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter80.println(' ');
        printWriter80.println((long) (-1));
        printWriter80.println((java.lang.Object) "");
        char[] charArray93 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter80.println(charArray93);
        printWriter76.println(charArray93);
        printStream67.print(charArray93);
        printStream44.print(charArray93);
        printStream14.print(charArray93);
        printWriter10.write(charArray93);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter3.println(' ');
        printWriter3.println((long) (-1));
        printWriter3.println((java.lang.Object) "");
        printWriter3.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.transform(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer12.inversetransform(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray22 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray20, (double) (byte) 10);
        java.io.PrintWriter printWriter23 = printWriter3.printf("ja", (java.lang.Object[]) complexArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "United States", (java.lang.Object[]) complexArray22);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter1.printf("fra", (java.lang.Object[]) strArray7);
        boolean boolean9 = printWriter1.checkError();
        printWriter1.print(0.0d);
        char[] charArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.println(charArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.Class<?> wildcardClass4 = locale0.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "de-x-lvariant-zh");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: de-x-lvariant-zh");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getCountry();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale4.getDisplayName(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale7);
        java.util.Set<java.lang.Character> charSet11 = locale7.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charSet11);
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder6 = builder2.removeUnicodeLocaleAttribute("chinois");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("allemand");
        java.io.PrintStream printStream10 = new java.io.PrintStream("japonais");
        printStream10.print(0.0f);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        java.io.PrintStream printStream23 = printStream10.format(locale13, "japonais", (java.lang.Object[]) complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray27);
        printStream23.print((java.lang.Object) doubleArray27);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream23.write(byteArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        java.io.PrintStream printStream44 = printStream23.printf("de", (java.lang.Object[]) complexArray43);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream44, true);
        java.io.PrintStream printStream48 = printStream44.append((java.lang.CharSequence) "allemand");
        java.io.PrintStream printStream50 = printStream48.append('a');
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getVariant();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleAttributes();
        java.util.Locale locale54 = locale51.stripExtensions();
        java.lang.Object[] objArray56 = null;
        java.io.PrintStream printStream57 = printStream50.printf(locale54, "Etats-Unis", objArray56);
        java.util.Locale.Builder builder58 = builder6.setLocale(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder58.removeUnicodeLocaleAttribute("GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((double) (short) 1, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(true);
        boolean boolean14 = printStream11.checkError();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream11, true);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        java.io.PrintStream printStream35 = printStream11.format(locale17, "fr", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer37.transform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform(complexArray52);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter55.println(' ');
        printWriter55.println((long) (-1));
        printWriter55.println((java.lang.Object) "");
        printWriter55.println();
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter55.println((java.lang.Object) printWriter64);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.Writer) printWriter55, true);
        printWriter67.println((java.lang.Object) true);
        printWriter67.print("org.apache.commons.math.MathException");
        printWriter67.println((float) (byte) 0);
        printWriter67.print((double) 1);
        java.util.Locale locale77 = new java.util.Locale("hi!");
        java.lang.String str78 = locale77.getLanguage();
        java.io.PrintStream printStream81 = new java.io.PrintStream("japonais");
        printStream81.print(0.0f);
        java.util.Locale locale84 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet85 = locale84.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray92 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer87.transform(doubleArray92);
        java.io.PrintStream printStream94 = printStream81.format(locale84, "japonais", (java.lang.Object[]) complexArray93);
        java.io.PrintWriter printWriter95 = printWriter67.format(locale77, "ja", (java.lang.Object[]) complexArray93);
        org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer0.transform(complexArray93);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertEquals(locale77.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet85);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(printStream94);
        org.junit.Assert.assertNotNull(printWriter95);
        org.junit.Assert.assertNotNull(complexArray96);
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.0d, 97.0d, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray29 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap33);
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        boolean boolean36 = locale35.hasExtensions();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strSet37);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strList38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream14.print(false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter22 = printWriter18.append((java.lang.CharSequence) "Vereinigte Staaten von Amerika", (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("org.apache.commons.math.MathException: japonais", "\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setLanguageTag("gb");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder6.setLanguage("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getCountry();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale4.getDisplayName(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder2.setLanguageTag("Japanese");
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale17.getDisplayName(locale20);
        java.util.Locale.Builder builder23 = builder15.setLocale(locale20);
        java.util.Locale.Builder builder25 = builder15.setLanguageTag("Japanese");
        java.util.Locale locale26 = builder25.build();
        java.util.Locale.Builder builder27 = builder2.setLocale(locale26);
        java.util.Locale locale28 = builder27.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder27.setVariant("\u30d5\u30e9\u30f3\u30b9\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais" + "'", str22, "fran\347ais");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "japanese");
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.flush();
        printWriter1.println(false);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer16.transform2(complexArray32);
        java.io.PrintWriter printWriter34 = printWriter1.printf("French", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray32);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printWriter34);
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(0.0f);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        java.io.PrintStream printStream21 = printStream8.format(locale11, "japonais", (java.lang.Object[]) complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        printStream21.print((java.lang.Object) doubleArray25);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream21.write(byteArray32);
        printStream1.write(byteArray32);
        printStream1.print('x');
        printStream1.print('4');
        printStream1.print((long) (byte) 100);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println('#');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, -1]");
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("japonais");
        printStream24.print(0.0f);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        java.io.PrintStream printStream37 = printStream24.format(locale27, "japonais", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        printStream37.print((java.lang.Object) doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer18.transform2(doubleArray41);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter47.println(' ');
        printWriter47.print((float) 10L);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter54.println(' ');
        printWriter54.println((long) (-1));
        printWriter54.println((java.lang.Object) "");
        printWriter54.println();
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getScript();
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleKeys();
        java.lang.String str65 = locale62.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer67.inversetransform2(doubleArray70);
        java.io.PrintWriter printWriter72 = printWriter54.printf(locale62, "ja", (java.lang.Object[]) complexArray71);
        java.io.PrintWriter printWriter73 = printWriter47.format("", (java.lang.Object[]) complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer18.inversetransform(complexArray71);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException(throwable78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException80);
        java.lang.Object[] objArray82 = functionEvaluationException81.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray71, (java.lang.Throwable) functionEvaluationException81);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.inversetransform(complexArray71);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer0.transform(univariateRealFunction85, (double) 100, 74.68593339875962d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(complexArray84);
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex8.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex16.subtract(complex25);
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex25.multiply(complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex38 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex32.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex29.subtract(complex39);
        double double41 = complex40.getReal();
        org.apache.commons.math.complex.Complex complex42 = complex0.pow(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex0.exp();
        org.apache.commons.math.complex.Complex complex44 = complex43.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.println();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println(' ');
        printWriter9.println((long) (-1));
        printWriter9.println((java.lang.Object) "");
        printWriter9.println();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getScript();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.lang.String str20 = locale17.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        java.io.PrintWriter printWriter27 = printWriter9.printf(locale17, "ja", (java.lang.Object[]) complexArray26);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.write((int) 'a');
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.println(' ');
        printWriter35.print((float) 10L);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println((long) (-1));
        printWriter42.println((java.lang.Object) "");
        printWriter42.println();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = locale50.getScript();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale50.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        java.io.PrintWriter printWriter60 = printWriter42.printf(locale50, "ja", (java.lang.Object[]) complexArray59);
        java.io.PrintWriter printWriter61 = printWriter35.format("", (java.lang.Object[]) complexArray59);
        java.io.PrintStream printStream62 = printStream30.format("de", (java.lang.Object[]) complexArray59);
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream62);
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer68.inversetransform2(doubleArray71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray72, (double) (byte) 10);
        java.io.PrintStream printStream76 = printStream63.printf(locale65, "Franz\366sisch", (java.lang.Object[]) complexArray75);
        java.io.PrintWriter printWriter77 = printWriter27.printf("ja_JP", (java.lang.Object[]) complexArray75);
        char[] charArray83 = new char[] { '#', ' ', '4', ' ', 'u' };
        printWriter27.write(charArray83);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray83, (int) 'x', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "# 4 u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "# 4 u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[#,  , 4,  , u]");
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("China");
        java.lang.String str2 = locale1.getScript();
        java.lang.String str3 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "china");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "china" + "'", str3, "china");
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("allemand");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(0.0f);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        java.io.PrintStream printStream18 = printStream5.format(locale8, "japonais", (java.lang.Object[]) complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray22);
        printStream18.print((java.lang.Object) doubleArray22);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        java.io.PrintStream printStream37 = printStream18.printf(locale26, "GB", (java.lang.Object[]) complexArray36);
        printStream37.println((float) 100);
        printStream37.println((long) (byte) 10);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream37, false);
        printStream43.println("org.apache.commons.math.FunctionEvaluationException");
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream43);
        printWriter46.println(true);
        boolean boolean49 = languageRange1.equals((java.lang.Object) printWriter46);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "allemand" + "'", str2, "allemand");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "allemand" + "'", str3, "allemand");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh" + "'", str28, "zh");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "org.apache.commons.math.functionevaluationexception: hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.functionevaluationexception: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "\u82f1\u6587");
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList25);
        printWriter1.print((java.lang.Object) strList28);
        printWriter1.flush();
        java.util.Locale locale33 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        boolean boolean35 = locale33.hasExtensions();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter38.println(' ');
        printWriter38.print((double) (short) 100);
        boolean boolean43 = printWriter38.checkError();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter38, false);
        printWriter38.print((float) (-1L));
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getCountry();
        java.lang.String str51 = locale48.getDisplayCountry(locale49);
        boolean boolean52 = locale49.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer60.transform(doubleArray65);
        double[] doubleArray68 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer55.transform(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer71.inversetransform2(doubleArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer55.inversetransform(complexArray75);
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException(throwable80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException82);
        java.lang.Throwable[] throwableArray84 = functionEvaluationException82.getSuppressed();
        java.lang.Throwable[] throwableArray85 = functionEvaluationException82.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException82.addSuppressed((java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray76, (java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.complex.Complex[] complexArray92 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray76, 100.0d);
        java.io.PrintWriter printWriter93 = printWriter38.format(locale49, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray76);
        java.io.PrintWriter printWriter94 = printWriter1.format(locale33, "Evaluation failed for argument = {0}", (java.lang.Object[]) complexArray76);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter98 = printWriter94.append((java.lang.CharSequence) "de-DE", (int) (short) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer6.transform(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer15.transform(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer5.transform2(complexArray21);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.print((float) 10L);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.println((long) (-1));
        printWriter31.println((java.lang.Object) "");
        printWriter31.println();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getScript();
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleKeys();
        java.lang.String str42 = locale39.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        java.io.PrintWriter printWriter49 = printWriter31.printf(locale39, "ja", (java.lang.Object[]) complexArray48);
        java.io.PrintWriter printWriter50 = printWriter24.format("", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer5.inversetransform(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.transform2(complexArray48);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.transform(univariateRealFunction53, (double) 0.0f, 74.68593339875962d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) 100, (double) (byte) 1);
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter10.print((float) (-1));
        printWriter10.println('4');
        java.io.PrintWriter printWriter17 = printWriter10.append('4');
        printWriter10.write((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = locale23.getLanguage();
        java.lang.String str29 = locale20.getDisplayName(locale23);
        java.lang.String str30 = locale23.getDisplayName();
        java.lang.String str31 = locale23.getVariant();
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale55.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        java.io.PrintStream printStream66 = printStream47.printf(locale55, "GB", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, (double) 0.0f);
        java.io.PrintWriter printWriter69 = printWriter10.format(locale23, "ja", (java.lang.Object[]) complexArray68);
        printWriter10.println(100.0f);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ja" + "'", str26, "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str27, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "chinois" + "'", str29, "chinois");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fran\347ais" + "'", str30, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh" + "'", str57, "zh");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("Englisch");
        java.util.Locale.Builder builder6 = builder4.setLanguage("en");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("fr_FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: fr_FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        java.lang.String[] strArray6 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray6);
        double double8 = functionEvaluationException7.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, "und", (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', (java.lang.Throwable) functionEvaluationException7);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException(throwable15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException17);
        java.lang.Throwable[] throwableArray19 = functionEvaluationException17.getSuppressed();
        java.lang.Throwable[] throwableArray20 = functionEvaluationException17.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException17.addSuppressed((java.lang.Throwable) functionEvaluationException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, (java.lang.Throwable) functionEvaluationException17);
        functionEvaluationException10.addSuppressed((java.lang.Throwable) functionEvaluationException25);
        double double27 = functionEvaluationException10.getArgument();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException10);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("German (FRA,fr)", (java.lang.Throwable) mathException28);
        java.lang.String str30 = mathException29.toString();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 32.0d + "'", double27 == 32.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.math.MathException: German (FRA,fr)" + "'", str30, "org.apache.commons.math.MathException: German (FRA,fr)");
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((double) (short) 100);
        printWriter1.print((-1));
        printWriter1.close();
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        java.io.PrintStream printStream29 = printStream16.format(locale19, "japonais", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        printStream29.print((java.lang.Object) doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer10.transform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer10.transform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer46.transform(doubleArray51);
        double[] doubleArray54 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.inversetransform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer46.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform(complexArray65);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform2(univariateRealFunction68, 0.7456241416655579d, (double) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.7456241416655579, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print(0);
        printWriter1.print('u');
        printWriter1.println(true);
        java.io.PrintWriter printWriter9 = printWriter1.append((java.lang.CharSequence) "anglais");
        printWriter1.println((-1L));
        org.junit.Assert.assertNotNull(printWriter9);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer0.transform2(doubleArray31);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer0.transform(univariateRealFunction35, (double) 'x', (double) (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [120.0, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "Evaluation failed for argument = {0}");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "italien");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: italien");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream7);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter6.println(' ');
        printWriter6.print((float) 10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter13.println(' ');
        printWriter13.println((long) (-1));
        printWriter13.println((java.lang.Object) "");
        printWriter13.println();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getScript();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        java.io.PrintWriter printWriter31 = printWriter13.printf(locale21, "ja", (java.lang.Object[]) complexArray30);
        java.io.PrintWriter printWriter32 = printWriter6.format("", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream33 = printStream1.format("de", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream33);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        char[] charArray49 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter36.println(charArray49);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter36, true);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter54.print(0);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter58.println(' ');
        printWriter58.println((long) (-1));
        printWriter58.println((java.lang.Object) "");
        char[] charArray71 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter58.println(charArray71);
        printWriter54.println(charArray71);
        printWriter52.write(charArray71);
        printStream34.println(charArray71);
        java.io.PrintStream printStream77 = printStream34.append(' ');
        printStream77.close();
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printStream77);
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        printStream14.println(true);
        printStream14.println("allemand");
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream14, true);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt1z();
        org.apache.commons.math.complex.Complex complex44 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex46 = complex45.acos();
        org.apache.commons.math.complex.Complex complex47 = complex46.negate();
        boolean boolean48 = complex44.equals((java.lang.Object) complex46);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt1z();
        org.apache.commons.math.complex.Complex complex51 = complex46.add(complex49);
        printWriter41.println((java.lang.Object) complex51);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.getImaginary();
        org.apache.commons.math.complex.Complex complex56 = complex53.sinh();
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex58 = complex57.acos();
        org.apache.commons.math.complex.Complex complex59 = complex58.negate();
        org.apache.commons.math.complex.Complex complex60 = complex56.multiply(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex56.exp();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex63.sinh();
        org.apache.commons.math.complex.Complex complex65 = complex61.add(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex51.divide(complex64);
        boolean boolean67 = complex66.isNaN();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.print((float) (short) -1);
        printWriter1.println((double) (byte) 10);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter14 = printWriter1.append((java.lang.CharSequence) "tedesco", (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer21.inversetransform(doubleArray27);
        double[] doubleArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray27, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.transform(doubleArray27);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.inversetransform(univariateRealFunction33, 0.9888977057628651d, (double) 10.0f, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println(' ');
        printWriter2.println((long) (-1));
        printWriter2.println((java.lang.Object) "");
        char[] charArray15 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter2.println(charArray15);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter2, true);
        printWriter18.write("Chinesisch", 0, (int) (byte) 10);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.println((long) (-1));
        printWriter24.println((java.lang.Object) "");
        printWriter24.println();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println((java.lang.Object) printWriter33);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter24, true);
        printWriter36.println((java.lang.Object) true);
        printWriter36.print("org.apache.commons.math.MathException");
        printWriter36.println((float) (byte) 0);
        printWriter36.print((double) 1);
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getLanguage();
        java.io.PrintStream printStream50 = new java.io.PrintStream("japonais");
        printStream50.print(0.0f);
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.transform(doubleArray61);
        java.io.PrintStream printStream63 = printStream50.format(locale53, "japonais", (java.lang.Object[]) complexArray62);
        java.io.PrintWriter printWriter64 = printWriter36.format(locale46, "ja", (java.lang.Object[]) complexArray62);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.print((float) 10L);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter74.println(' ');
        printWriter74.println((long) (-1));
        printWriter74.println((java.lang.Object) "");
        printWriter74.println();
        java.util.Locale locale82 = java.util.Locale.JAPANESE;
        java.lang.String str83 = locale82.getScript();
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleKeys();
        java.lang.String str85 = locale82.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray90 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer87.inversetransform2(doubleArray90);
        java.io.PrintWriter printWriter92 = printWriter74.printf(locale82, "ja", (java.lang.Object[]) complexArray91);
        java.io.PrintWriter printWriter93 = printWriter67.format("", (java.lang.Object[]) complexArray91);
        java.io.PrintWriter printWriter94 = printWriter18.format(locale46, "en", (java.lang.Object[]) complexArray91);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) complexArray91);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray91);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #,  , a, a, a]");
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(printWriter92);
        org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        java.io.PrintStream printStream29 = printStream16.format(locale19, "japonais", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        printStream29.print((java.lang.Object) doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer10.transform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer10.transform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.inversetransform2(complexArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\u5fb7\u56fd", "Japanisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Japanisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        double[] doubleArray58 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform(doubleArray66);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer50.transform(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray77 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer71.inversetransform(doubleArray77);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer50.transform(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(doubleArray77);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.inversetransform2(univariateRealFunction84, 0.7350525871447157d, (double) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer7.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer7.transform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer7.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.transform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray49, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(doubleArray49);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.inversetransform2(univariateRealFunction58, 0.0d, 1.3043045862358962d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(true);
        boolean boolean6 = printStream3.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        boolean boolean9 = printStream3.checkError();
        java.io.PrintStream printStream11 = printStream3.append((java.lang.CharSequence) "zh");
        printStream3.println((long) (-1));
        printStream3.print((int) (byte) 100);
        printStream3.print("org.apache.commons.math.MathException");
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream20 = printStream3.format("de_ALLEMAND_zh", (java.lang.Object[]) strArray19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, "Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)", (java.lang.Object[]) strArray19);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream35, true);
        boolean boolean38 = printStream37.checkError();
        printStream37.print((double) '#');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(true);
        boolean boolean14 = printStream11.checkError();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream11, true);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        java.io.PrintStream printStream35 = printStream11.format(locale17, "fr", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(complexArray34);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer0.transform2(univariateRealFunction37, (double) (-1L), (double) 1, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(complexArray36);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.9888977057628651d, (double) 0.0f, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.9888977057628651, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer0.inversetransform2(doubleArray62);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.inversetransform2(univariateRealFunction66, (double) 0, (double) 10.0f, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException(throwable4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException6);
        double double8 = functionEvaluationException7.getArgument();
        double double9 = functionEvaluationException7.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) '#', (java.lang.Throwable) functionEvaluationException7);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        boolean boolean14 = printWriter1.checkError();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("fran\347ais");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: franc?ais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DEU");
        java.util.Locale locale3 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale6 = new java.util.Locale("zho", "fran\347ais");
        java.lang.String str7 = locale3.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet8 = locale3.getUnicodeLocaleKeys();
        boolean boolean9 = languageRange1.equals((java.lang.Object) locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals(locale6.toString(), "zho_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println(' ');
        printWriter9.println((long) (-1));
        printWriter9.println((java.lang.Object) "");
        printWriter9.println();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println((java.lang.Object) printWriter18);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        printWriter21.println((java.lang.Object) true);
        printWriter21.print("org.apache.commons.math.MathException");
        printWriter21.println((float) (byte) 0);
        printWriter21.print((double) 1);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getLanguage();
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(0.0f);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer41.transform(doubleArray46);
        java.io.PrintStream printStream48 = printStream35.format(locale38, "japonais", (java.lang.Object[]) complexArray47);
        java.io.PrintWriter printWriter49 = printWriter21.format(locale31, "ja", (java.lang.Object[]) complexArray47);
        java.io.PrintStream printStream50 = printStream1.format("und", (java.lang.Object[]) complexArray47);
        printStream50.print("japonais");
        java.io.PrintStream printStream55 = new java.io.PrintStream("japonais");
        printStream55.print(true);
        boolean boolean58 = printStream55.checkError();
        printStream55.println();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.transform2(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer73.transform(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer63.inversetransform(complexArray79);
        java.io.PrintStream printStream81 = printStream55.printf(locale60, "de", (java.lang.Object[]) complexArray80);
        java.io.PrintStream printStream82 = printStream50.printf("zho", (java.lang.Object[]) complexArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream86 = printStream82.append((java.lang.CharSequence) "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (int) 'x', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ja" + "'", str61, "ja");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(printStream82);
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getCountry();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = locale9.getDisplayName(locale12);
        java.util.Locale.Builder builder15 = builder7.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale.Builder builder17 = builder1.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder1.setLanguageTag("Japanese");
        java.util.Locale.Builder builder20 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder1.setLanguage("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FR" + "'", str13, "FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fran\347ais" + "'", str14, "fran\347ais");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter1.printf("fra", (java.lang.Object[]) strArray7);
        boolean boolean9 = printWriter1.checkError();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter1.println((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter17 = printWriter1.append((java.lang.CharSequence) "\u65e5\u6587", (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.Object obj3 = locale1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italian" + "'", str2, "Italian");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "it");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "it");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "it");
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "French" + "'", str3, "French");
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder0.setLanguageTag("\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.FunctionEvaluationException: FR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception: fr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print(0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("FR");
        double double7 = languageRange6.getWeight();
        java.lang.String str8 = languageRange6.getRange();
        double double9 = languageRange6.getWeight();
        java.lang.String str10 = languageRange6.getRange();
        printWriter1.print((java.lang.Object) languageRange6);
        double double12 = languageRange6.getWeight();
        java.lang.String str13 = languageRange6.getRange();
        java.lang.String str14 = languageRange6.getRange();
        java.lang.String str15 = languageRange6.getRange();
        java.lang.String str16 = languageRange6.getRange();
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException(throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException24);
        double double26 = functionEvaluationException25.getArgument();
        double double27 = functionEvaluationException25.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) '#', (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) functionEvaluationException25);
        boolean boolean30 = languageRange6.equals((java.lang.Object) functionEvaluationException29);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.print(true);
        java.lang.Object obj15 = null;
        printStream5.print(obj15);
        printStream5.println((int) 'x');
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = complex1.sinh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex6 = complex4.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex5.acos();
        org.apache.commons.math.complex.Complex complex8 = complex5.cos();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex0.add(complex8);
        double double11 = complex8.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.println("zh");
        printWriter1.println((float) (short) 10);
        java.io.PrintWriter printWriter23 = printWriter1.append((java.lang.CharSequence) "FR");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter27 = printWriter25.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter29 = printWriter27.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean34 = printWriter33.checkError();
        java.io.PrintWriter printWriter36 = printWriter33.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter39.println(' ');
        printWriter39.println((long) (-1));
        printWriter39.println((java.lang.Object) "");
        char[] charArray52 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter39.println(charArray52);
        printWriter33.write(charArray52);
        printWriter31.write(charArray52);
        printWriter29.write(charArray52);
        printWriter23.write(charArray52);
        printWriter23.println('#');
        printWriter23.write("en-US", (int) (short) 0, (int) (short) -1);
        printWriter23.print('x');
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((double) 1.0f, (-1.833789474235432d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0, -1.833789474235432]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        printWriter13.println((float) (byte) 0);
        printWriter13.print((double) 1);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getLanguage();
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(0.0f);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        java.io.PrintStream printStream40 = printStream27.format(locale30, "japonais", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter41 = printWriter13.format(locale23, "ja", (java.lang.Object[]) complexArray39);
        printWriter13.close();
        printWriter13.print(0.0f);
        printWriter13.println("anglais");
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        printWriter14.print((float) (short) 10);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter18.println(' ');
        printWriter18.println((long) (-1));
        printWriter18.println((java.lang.Object) "");
        char[] charArray31 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter18.println(charArray31);
        printWriter18.println(10);
        printWriter18.print('a');
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter38.println(' ');
        printWriter38.println((long) (-1));
        printWriter38.println((java.lang.Object) "");
        char[] charArray51 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter38.println(charArray51);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter38, true);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter56.print(0);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter60.println(' ');
        printWriter60.println((long) (-1));
        printWriter60.println((java.lang.Object) "");
        char[] charArray73 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter60.println(charArray73);
        printWriter56.println(charArray73);
        printWriter54.write(charArray73);
        printWriter18.write(charArray73, (int) (short) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            printWriter14.write(charArray73, (int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter22.println(' ');
        printWriter22.println((long) (-1));
        printWriter22.println((java.lang.Object) "");
        char[] charArray35 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter22.println(charArray35);
        printWriter22.println(10);
        printWriter22.print('a');
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println((long) (-1));
        printWriter42.println((java.lang.Object) "");
        char[] charArray55 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter42.println(charArray55);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter42, true);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter60.print(0);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter64.println(' ');
        printWriter64.println((long) (-1));
        printWriter64.println((java.lang.Object) "");
        char[] charArray77 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter64.println(charArray77);
        printWriter60.println(charArray77);
        printWriter58.write(charArray77);
        printWriter22.write(charArray77, (int) (short) 0, 1);
        printStream20.println(charArray77);
        printStream5.println(charArray77);
        boolean boolean86 = printStream5.checkError();
        printStream5.print((double) '#');
        printStream5.flush();
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.transform(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray7);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform2(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer1.inversetransform(complexArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray17, (double) (-1));
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray17);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.setExtension('a', "China");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder4.setUnicodeLocaleKeyword("fran\347ais", "org.apache.commons.math.MathException: de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: franc?ais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.FunctionEvaluationException: ja_JP", (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception: ja_jp");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.lang.Class<?> wildcardClass13 = printWriter12.getClass();
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        java.util.Locale locale1 = new java.util.Locale("jpn");
        org.junit.Assert.assertEquals(locale1.toString(), "jpn");
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.multiply(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex6.exp();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex11.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex2.pow(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex2.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer10.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, (double) (byte) 10);
        java.io.PrintWriter printWriter21 = printWriter1.printf("ja", (java.lang.Object[]) complexArray20);
        printWriter21.flush();
        java.lang.Class<?> wildcardClass23 = printWriter21.getClass();
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.print((long) (short) 10);
        printStream1.println(0.0d);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.print(0.0f);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform(doubleArray25);
        java.io.PrintStream printStream27 = printStream14.format(locale17, "japonais", (java.lang.Object[]) complexArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream("japonais");
        printStream29.print(true);
        printStream29.println((-1));
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(0.0f);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer41.transform(doubleArray46);
        java.io.PrintStream printStream48 = printStream35.format(locale38, "japonais", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        printStream48.print((java.lang.Object) doubleArray52);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream48.write(byteArray59);
        printStream29.write(byteArray59);
        printStream14.write(byteArray59);
        printStream1.write(byteArray59);
        printStream1.print('4');
        printStream1.println("ja_JP");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream70 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "zh");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10, -1]");
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer6.inversetransform2(doubleArray9);
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.print(0.0f);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        java.io.PrintStream printStream25 = printStream12.format(locale15, "japonais", (java.lang.Object[]) complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray29);
        printStream25.print((java.lang.Object) doubleArray29);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer6.transform2(doubleArray29);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.println(' ');
        printWriter35.print((float) 10L);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println((long) (-1));
        printWriter42.println((java.lang.Object) "");
        printWriter42.println();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = locale50.getScript();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.lang.String str53 = locale50.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        java.io.PrintWriter printWriter60 = printWriter42.printf(locale50, "ja", (java.lang.Object[]) complexArray59);
        java.io.PrintWriter printWriter61 = printWriter35.format("", (java.lang.Object[]) complexArray59);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer6.inversetransform(complexArray59);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException68);
        java.lang.Object[] objArray70 = functionEvaluationException69.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray59, (java.lang.Throwable) functionEvaluationException69);
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException(throwable75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException77);
        java.lang.Throwable[] throwableArray79 = functionEvaluationException77.getSuppressed();
        java.lang.Throwable[] throwableArray80 = functionEvaluationException77.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException77.addSuppressed((java.lang.Throwable) functionEvaluationException83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "zh", (java.lang.Object[]) complexArray59, (java.lang.Throwable) functionEvaluationException77);
        java.lang.Object[] objArray86 = functionEvaluationException77.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(0.5403023058681398d, "zho", (java.lang.Throwable) functionEvaluationException77);
        java.lang.String str88 = functionEvaluationException77.getPattern();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale8.toLanguageTag();
        java.lang.String str11 = locale8.getISO3Language();
        printStream1.println((java.lang.Object) locale8);
        java.util.Locale locale14 = new java.util.Locale("fra");
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale14.getDisplayScript(locale16);
        java.lang.String str18 = locale8.getDisplayScript(locale14);
        java.lang.String str19 = locale14.getDisplayLanguage();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zho" + "'", str11, "zho");
        org.junit.Assert.assertEquals(locale14.toString(), "fra");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex7.multiply(complex9);
        printWriter1.println((java.lang.Object) complex7);
        double double13 = complex7.getReal();
        boolean boolean14 = complex7.isInfinite();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        java.io.PrintStream printStream1 = new java.io.PrintStream("allemand (Allemagne)");
        printStream1.print(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.0d, (double) 1L);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        java.util.Locale locale3 = new java.util.Locale("Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)", "deu", "Chinese");
        java.lang.String str4 = locale3.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "ind\351termin\351 (org.apache.commons.math.functionevaluationexception)_DEU_Chinese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ind\351termin\351 (org.apache.commons.math.functionevaluationexception)_DEU_Chinese" + "'", str4, "ind\351termin\351 (org.apache.commons.math.functionevaluationexception)_DEU_Chinese");
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "DEU");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: DEU");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(0.0f);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        java.io.PrintStream printStream21 = printStream8.format(locale11, "japonais", (java.lang.Object[]) complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        printStream21.print((java.lang.Object) doubleArray25);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream21.write(byteArray32);
        printStream1.write(byteArray32);
        printStream1.print('x');
        printStream1.print('4');
        printStream1.print((long) (byte) 100);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream42.println('a');
        printStream42.println(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream50 = printStream42.append((java.lang.CharSequence) "org.apache.commons.math.MathException: hi!", (int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, -1]");
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.negate();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        double double13 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex20.asin();
        boolean boolean23 = complex21.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex27 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex27.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.sinh();
        org.apache.commons.math.complex.Complex complex31 = complex21.subtract(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex10.add(complex21);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex32.multiply(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex8.divide(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex38.sinh();
        boolean boolean41 = complex39.equals((java.lang.Object) 52.0d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        java.io.PrintStream printStream1 = new java.io.PrintStream("chinois (Chine)");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "Chine");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chine");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        boolean boolean1 = org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2((long) '4');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream11.println(true);
        printStream11.print('x');
        printStream11.println(true);
        printStream11.write(10);
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex8.divide(complex13);
        boolean boolean15 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex16 = complex6.add(complex13);
        org.apache.commons.math.complex.Complex complex17 = complex6.conjugate();
        double double18 = complex6.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.7350525871447157d, 0.7350525871447157d, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.7350525871447157, 0.7350525871447157]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = complex0.exp();
        org.apache.commons.math.complex.Complex complex4 = complex0.asin();
        org.apache.commons.math.complex.Complex complex5 = complex0.sinh();
        double double6 = complex5.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.8414709848078965d + "'", double6 == 0.8414709848078965d);
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex0.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex7.sin();
        double double10 = complex7.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        java.io.PrintStream printStream29 = printStream16.format(locale19, "japonais", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        printStream29.print((java.lang.Object) doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer10.transform2(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform2(doubleArray33);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.inversetransform2(univariateRealFunction39, 1.557407724654902d, (double) 1L, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.557407724654902, 1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getDisplayScript();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale1.getDisplayCountry(locale11);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setRegion("");
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getCountry();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.util.Locale.setDefault(category18, locale19);
        java.util.Locale locale23 = java.util.Locale.getDefault(category18);
        java.util.Locale locale24 = java.util.Locale.getDefault(category18);
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder26 = builder14.setLocale(locale24);
        java.util.Locale locale27 = builder14.build();
        java.lang.String str28 = locale1.getDisplayName(locale27);
        java.lang.String str30 = locale27.getExtension('a');
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.getDefault(category4);
        java.lang.String str11 = locale3.getDisplayVariant(locale10);
        java.lang.String str13 = locale10.getExtension('u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.write((int) '#');
        printWriter1.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter16.println(' ');
        printWriter16.println((long) (-1));
        printWriter16.println((java.lang.Object) "");
        char[] charArray29 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter16.println(charArray29);
        printWriter1.print(charArray29);
        printWriter1.print((double) '#');
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.print(0);
        printWriter35.print('u');
        java.io.PrintStream printStream43 = new java.io.PrintStream("japonais");
        printStream43.print(true);
        boolean boolean46 = printStream43.checkError();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream43, true);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.transform(doubleArray61);
        double[] doubleArray64 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer51.transform(complexArray65);
        java.io.PrintStream printStream67 = printStream43.format(locale49, "fr", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray66);
        java.io.PrintWriter printWriter69 = printWriter35.printf("", (java.lang.Object[]) complexArray66);
        printWriter35.print((-1L));
        char[] charArray75 = new char[] { '#', 'a', '4' };
        printWriter35.print(charArray75);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray75, (int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "#a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "#a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#, a, 4]");
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print("FR");
        printWriter1.write("und");
        printWriter1.println((long) (byte) 100);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("GB", (double) 0);
        java.lang.String str3 = languageRange2.getRange();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.print(0);
        boolean boolean8 = languageRange2.equals((java.lang.Object) printWriter5);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gb" + "'", str3, "gb");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.inversetransform(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer28.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer18.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform2(complexArray56);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(univariateRealFunction58, (double) 'u', (double) 10.0f, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [117.0, 10.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.FunctionEvaluationException: zh");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception: zh");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println(' ');
        printWriter2.println(false);
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(true);
        boolean boolean11 = printStream8.checkError();
        printStream8.println();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale13.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.transform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer16.inversetransform(complexArray32);
        java.io.PrintStream printStream34 = printStream8.printf(locale13, "de", (java.lang.Object[]) complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer36.transform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer46.transform(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer36.inversetransform(complexArray52);
        java.io.PrintWriter printWriter54 = printWriter2.format(locale13, "GB", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer0.inversetransform2(complexArray53);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer0.transform2(univariateRealFunction56, (double) (-1L), (double) 10.0f, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ja" + "'", str14, "ja");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(complexArray55);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de-DE");
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer7.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer7.transform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer7.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.transform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray49, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        double[] doubleArray66 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.inversetransform2(doubleArray66);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray66, (double) 1);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.transform(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.write("", 1, 0);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter13 = printWriter11.append((java.lang.CharSequence) "");
        printWriter13.println('a');
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = locale16.getISO3Language();
        printWriter13.print((java.lang.Object) locale16);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getISO3Country();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale20.getDisplayName(locale22);
        java.lang.String str25 = locale16.getDisplayLanguage(locale20);
        java.io.PrintStream printStream28 = new java.io.PrintStream("japonais");
        printStream28.print(0.0f);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream28, true);
        printStream32.print((float) (short) -1);
        printStream32.print('a');
        printStream32.println();
        printStream32.print("hi!");
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getVariant();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.util.Locale locale43 = locale40.stripExtensions();
        boolean boolean44 = locale43.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        double[] doubleArray61 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer53.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer48.transform(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer48.inversetransform(complexArray68);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException(throwable73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException75);
        java.lang.Throwable[] throwableArray77 = functionEvaluationException75.getSuppressed();
        java.lang.Throwable[] throwableArray78 = functionEvaluationException75.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException75.addSuppressed((java.lang.Throwable) functionEvaluationException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray69, (java.lang.Throwable) functionEvaluationException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream85 = printStream32.printf(locale43, "Franz\366sisch", (java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter86 = printWriter1.printf(locale20, "\u4e2d\u56fd\u8a9e", (java.lang.Object[]) complexArray69);
        printWriter1.print(true);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ja" + "'", str23, "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str24, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fran\347ais" + "'", str25, "fran\347ais");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printWriter86);
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        boolean boolean1 = org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2((long) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        boolean boolean1 = org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2((long) (-1));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale.Builder builder7 = builder3.setLanguage("");
        java.util.Locale.Builder builder9 = builder3.setLanguage("francese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder3.setVariant("German (ALLEMAND,zh)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: German (ALLEMAND,zh) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.abs();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.acos();
        org.apache.commons.math.complex.Complex complex16 = complex8.add(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex16 = complex5.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex16.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: ja", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:ja");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.close();
        printStream1.println(74.68593339875962d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        double[] doubleArray26 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.transform2(doubleArray26);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.print(0.0f);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        java.io.PrintStream printStream43 = printStream30.format(locale33, "japonais", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        printStream43.print((java.lang.Object) doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer0.transform(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        java.io.PrintStream printStream63 = new java.io.PrintStream("japonais");
        printStream63.print(0.0f);
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet67 = locale66.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform(doubleArray74);
        java.io.PrintStream printStream76 = printStream63.format(locale66, "japonais", (java.lang.Object[]) complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        printStream76.print((java.lang.Object) doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer57.transform2(doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer52.transform(complexArray84);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer0.inversetransform(complexArray84);
        org.apache.commons.math.complex.Complex[] complexArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray84, 35.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray88);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.transform2(doubleArray14);
        java.io.PrintStream printStream18 = printStream1.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray17);
        printStream18.close();
        printStream18.print(false);
        java.io.PrintStream printStream24 = new java.io.PrintStream("japonais");
        printStream24.write((int) 'a');
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        java.io.PrintStream printStream56 = printStream24.format("de", (java.lang.Object[]) complexArray53);
        java.io.PrintStream printStream57 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, (double) (byte) 10);
        java.io.PrintStream printStream70 = printStream57.printf(locale59, "Franz\366sisch", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream71 = printStream18.format("Canada", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream73 = printStream71.append((java.lang.CharSequence) "Japanese");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream76 = new java.io.PrintStream((java.io.OutputStream) printStream71, false, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(printStream73);
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex0.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.exp();
        double double8 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        double double11 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex12 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = complex14.negate();
        org.apache.commons.math.complex.Complex complex16 = complex12.multiply(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex14.atan();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = complex18.acos();
        org.apache.commons.math.complex.Complex complex22 = complex14.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex7.divide(complex21);
        boolean boolean24 = complex7.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e", "org.apache.commons.math.MathException: japonais");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: japonais");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder7 = builder5.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "ja");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ja");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream33.print((int) (short) 10);
        printStream33.println();
        java.util.Locale locale46 = new java.util.Locale("de", "fr", "japonais");
        java.io.PrintStream printStream49 = new java.io.PrintStream("japonais");
        printStream49.print(true);
        printStream49.println("Chinesisch");
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException60);
        java.lang.Throwable[] throwableArray62 = functionEvaluationException60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = functionEvaluationException60.getSuppressed();
        java.io.PrintStream printStream64 = printStream49.format("hi!", (java.lang.Object[]) throwableArray63);
        java.io.PrintStream printStream65 = printStream33.format(locale46, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", (java.lang.Object[]) throwableArray63);
        printStream33.println((-1.0f));
        boolean boolean68 = printStream33.checkError();
        printStream33.print(100.0f);
        printStream33.println(1L);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertEquals(locale46.toString(), "de_FR_japonais");
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter1.printf("fra", (java.lang.Object[]) strArray7);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter9.println((float) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        printStream14.write((int) '#');
        boolean boolean24 = printStream14.checkError();
        java.io.PrintStream printStream26 = printStream14.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream30 = printStream14.append((java.lang.CharSequence) "org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", (int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 97");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        java.lang.String[] strArray3 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray3);
        double double5 = functionEvaluationException4.getArgument();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException4);
        java.lang.Object[] objArray7 = mathException6.getArguments();
        java.lang.String str8 = mathException6.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.MathException: fra" + "'", str8, "org.apache.commons.math.MathException: fra");
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.print((long) (short) 10);
        printStream1.println(0.0d);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println((float) 0);
        printStream1.close();
        printStream1.print(false);
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer21.inversetransform(doubleArray27);
        double[] doubleArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray27, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.transform(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray32);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, (double) (-1L));
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        double[] doubleArray65 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform2(doubleArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer68.transform(doubleArray73);
        double[] doubleArray76 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer68.inversetransform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.transform(complexArray77);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(univariateRealFunction79, 120.0d, 10.0d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer5.transform(doubleArray10);
        double[] doubleArray13 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.inversetransform(complexArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform2(complexArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = complex5.cos();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.multiply(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex15.atan();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex19.acos();
        org.apache.commons.math.complex.Complex complex23 = complex15.add(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex8.divide(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex0.multiply(complex23);
        double double27 = complex23.abs();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        double double32 = complex29.getReal();
        org.apache.commons.math.complex.Complex complex33 = complex29.asin();
        org.apache.commons.math.complex.Complex complex34 = complex28.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex23.divide(complex28);
        double double36 = complex28.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex5.negate();
        org.apache.commons.math.complex.Complex complex14 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex5.acos();
        org.apache.commons.math.complex.Complex complex17 = complex5.asin();
        org.apache.commons.math.complex.Complex complex18 = complex5.exp();
        org.apache.commons.math.complex.Complex complex19 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex5.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter12 = printWriter10.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        double[] doubleArray27 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer14.transform(complexArray28);
        java.io.PrintWriter printWriter30 = printWriter10.format("ja", (java.lang.Object[]) complexArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("japonais");
        printStream32.print(0.0f);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        java.io.PrintStream printStream45 = printStream32.format(locale35, "japonais", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        printStream45.print((java.lang.Object) doubleArray49);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter54.print(0);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter58.println(' ');
        printWriter58.println((long) (-1));
        printWriter58.println((java.lang.Object) "");
        char[] charArray71 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter58.println(charArray71);
        printWriter54.println(charArray71);
        printStream45.print(charArray71);
        printWriter30.print(charArray71);
        printStream8.println(charArray71);
        printStream8.println((int) 'u');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer81.transform(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer80.inversetransform(doubleArray86);
        java.io.PrintStream printStream89 = printStream8.format("deu", (java.lang.Object[]) complexArray88);
        printStream89.print('a');
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(printStream89);
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Koreanisch", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=koreanisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer7.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer7.transform2(doubleArray30);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.print((float) 10L);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter43.println(' ');
        printWriter43.println((long) (-1));
        printWriter43.println((java.lang.Object) "");
        printWriter43.println();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getScript();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.lang.String str54 = locale51.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        java.io.PrintWriter printWriter61 = printWriter43.printf(locale51, "ja", (java.lang.Object[]) complexArray60);
        java.io.PrintWriter printWriter62 = printWriter36.format("", (java.lang.Object[]) complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer7.inversetransform(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        double[] doubleArray72 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer64.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer7.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer77.transform(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer76.transform2(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform(doubleArray89);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform(univariateRealFunction91, (double) 100L, (double) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 10.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        java.lang.String[] strArray3 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) strArray3);
        java.lang.String str6 = mathException5.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.MathException: GB" + "'", str6, "org.apache.commons.math.MathException: GB");
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((double) (short) 100);
        boolean boolean6 = printWriter1.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter1.print((float) (-1L));
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = locale11.getDisplayCountry(locale12);
        boolean boolean15 = locale12.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        double[] doubleArray31 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer23.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer18.transform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer18.inversetransform(complexArray38);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException(throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException45);
        java.lang.Throwable[] throwableArray47 = functionEvaluationException45.getSuppressed();
        java.lang.Throwable[] throwableArray48 = functionEvaluationException45.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException45.addSuppressed((java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray39, (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 100.0d);
        java.io.PrintWriter printWriter56 = printWriter1.format(locale12, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray39);
        printWriter1.println(true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(printWriter56);
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getLanguage();
        java.lang.String str4 = locale0.toLanguageTag();
        java.util.Locale locale7 = new java.util.Locale("ja", "");
        java.lang.String str8 = locale7.getScript();
        java.util.Locale locale10 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale13 = new java.util.Locale("zho", "fran\347ais");
        java.lang.String str14 = locale10.getDisplayCountry(locale13);
        java.lang.String str15 = locale7.getDisplayLanguage(locale10);
        java.lang.String str16 = locale0.getDisplayScript(locale10);
        java.lang.String str18 = locale10.getExtension('x');
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = locale21.getDisplayScript();
        java.lang.String str25 = locale10.getDisplayVariant(locale21);
        java.lang.String str26 = locale10.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr" + "'", str1, "fr");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals(locale13.toString(), "zho_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese" + "'", str15, "Japanese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ja" + "'", str22, "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str23, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str26, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream("\u4e2d\u6587");
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ?? (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(0.0f);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer15.transform(doubleArray20);
        java.io.PrintStream printStream22 = printStream9.format(locale12, "japonais", (java.lang.Object[]) complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray26);
        printStream22.print((java.lang.Object) doubleArray26);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        java.io.PrintStream printStream41 = printStream22.printf(locale30, "GB", (java.lang.Object[]) complexArray40);
        printStream41.println((float) 100);
        printStream41.println((long) (byte) 10);
        java.io.PrintStream printStream47 = new java.io.PrintStream("japonais");
        printStream47.print(0.0f);
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        java.io.PrintStream printStream60 = printStream47.format(locale50, "japonais", (java.lang.Object[]) complexArray59);
        java.io.PrintStream printStream62 = new java.io.PrintStream("japonais");
        printStream62.print(true);
        printStream62.println((-1));
        java.io.PrintStream printStream68 = new java.io.PrintStream("japonais");
        printStream68.print(0.0f);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform(doubleArray79);
        java.io.PrintStream printStream81 = printStream68.format(locale71, "japonais", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer82 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer82.inversetransform2(doubleArray85);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray85);
        printStream81.print((java.lang.Object) doubleArray85);
        byte[] byteArray92 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream81.write(byteArray92);
        printStream62.write(byteArray92);
        printStream47.write(byteArray92);
        printStream41.write(byteArray92);
        printStream1.print((java.lang.Object) printStream41);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 10, -1]");
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream53 = printStream1.append((java.lang.CharSequence) "chinois");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "org.apache.commons.math.MathException: de");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: de");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.print(true);
        boolean boolean10 = printStream7.checkError();
        printStream7.println();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer15.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer15.inversetransform(complexArray31);
        java.io.PrintStream printStream33 = printStream7.printf(locale12, "de", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer35.inversetransform(complexArray51);
        java.io.PrintWriter printWriter53 = printWriter1.format(locale12, "GB", (java.lang.Object[]) complexArray52);
        printWriter1.print((long) (short) 100);
        java.util.Locale locale56 = null;
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter61.println(' ');
        printWriter61.print((float) 10L);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter68.println(' ');
        printWriter68.println((long) (-1));
        printWriter68.println((java.lang.Object) "");
        printWriter68.println();
        java.util.Locale locale76 = java.util.Locale.JAPANESE;
        java.lang.String str77 = locale76.getScript();
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        java.lang.String str79 = locale76.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer81.inversetransform2(doubleArray84);
        java.io.PrintWriter printWriter86 = printWriter68.printf(locale76, "ja", (java.lang.Object[]) complexArray85);
        java.io.PrintWriter printWriter87 = printWriter61.format("", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray85, (java.lang.Throwable) mathException89);
        java.io.PrintWriter printWriter91 = printWriter1.printf(locale56, "zh-CN", (java.lang.Object[]) complexArray85);
        java.io.PrintWriter printWriter93 = printWriter91.append('4');
        printWriter93.println();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printWriter93);
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((-1));
        printStream1.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer28.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer18.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer8.transform(doubleArray51);
        java.io.PrintStream printStream58 = printStream1.printf("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray57);
        boolean boolean59 = printStream1.checkError();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream62 = new java.io.PrintStream("japonais");
        printStream62.print(true);
        boolean boolean65 = printStream62.checkError();
        printStream62.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer70.transform(doubleArray75);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray75);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.transform2(doubleArray75);
        java.io.PrintStream printStream79 = printStream62.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray78);
        java.io.PrintStream printStream81 = printStream79.append('4');
        printWriter60.println((java.lang.Object) printStream81);
        printWriter60.print(false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(1.3043045862358962d, (double) 100L);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("GB", (double) 0);
        java.util.Locale locale5 = new java.util.Locale("de", "fra");
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        boolean boolean7 = languageRange2.equals((java.lang.Object) locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_FRA");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.lang.Object obj3 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "fr_FR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "fr_FR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "fr_FR");
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.println("zh");
        printWriter1.println((float) (short) 10);
        java.io.PrintWriter printWriter23 = printWriter1.append((java.lang.CharSequence) "FR");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter27 = printWriter25.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter29 = printWriter27.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean34 = printWriter33.checkError();
        java.io.PrintWriter printWriter36 = printWriter33.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter39.println(' ');
        printWriter39.println((long) (-1));
        printWriter39.println((java.lang.Object) "");
        char[] charArray52 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter39.println(charArray52);
        printWriter33.write(charArray52);
        printWriter31.write(charArray52);
        printWriter29.write(charArray52);
        printWriter23.write(charArray52);
        printWriter23.println('#');
        printWriter23.println(' ');
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getCountry();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = locale9.getDisplayName(locale12);
        java.util.Locale.Builder builder15 = builder7.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale.Builder builder17 = builder1.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("Japanese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.setVariant("fr-FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: fr-FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FR" + "'", str13, "FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fran\347ais" + "'", str14, "fran\347ais");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 1L);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("Chine", (java.lang.Throwable) mathException3);
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        boolean boolean1 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex3 = complex0.subtract(complex2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print('a');
        printWriter1.print(Double.NaN);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder5 = builder1.setLanguage("zho");
        java.util.Locale.Builder builder6 = builder1.clear();
        java.util.Locale.Builder builder7 = builder1.clear();
        java.util.Locale.Builder builder8 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguageTag("org.apache.commons.math.FunctionEvaluationException: Chinesisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.FunctionEvaluationException: Chinesisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("allemand");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        java.io.PrintStream printStream16 = printStream3.format(locale6, "japonais", (java.lang.Object[]) complexArray15);
        boolean boolean17 = printStream16.checkError();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        boolean boolean19 = languageRange1.equals((java.lang.Object) printStream16);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.flush();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter3);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.print(0.0f);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.transform(doubleArray18);
        java.io.PrintStream printStream20 = printStream7.format(locale10, "japonais", (java.lang.Object[]) complexArray19);
        printStream20.print((int) '4');
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.println((long) (-1));
        printWriter24.println((java.lang.Object) "");
        char[] charArray37 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter24.println(charArray37);
        printWriter24.println(10);
        printWriter24.print('a');
        char[] charArray43 = new char[] {};
        printWriter24.println(charArray43);
        printStream20.println(charArray43);
        printWriter3.print(charArray43);
        printWriter3.println('#');
        printWriter3.print(100);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setExtension('4', "chinois (Chine)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        java.lang.Object[] objArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        java.util.Locale locale2 = new java.util.Locale("ja_JP", "und");
        java.util.Locale.setDefault(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for UND");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "ja_jp_UND");
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream3 = new java.io.PrintStream(outputStream0, false, "\u30ab\u30ca\u30c0");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        java.util.Locale locale2 = new java.util.Locale("ja", "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "ind\351termin\351 (org.apache.commons.math.functionevaluationexception)_DEU_Chinese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: inde?termine? (org.apache.commons.math.functionevaluationexception)_DEU_Chinese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setRegion("\u4e2d\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.7456241416655579d, (double) 10.0f);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print((float) (byte) -1);
        printStream1.write(100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream15 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "fr");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: fr");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        java.util.Locale locale2 = new java.util.Locale("fran\347ais", "Japanese");
        java.util.Locale locale4 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for franc?ais");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "fran\347ais_JAPANESE");
        org.junit.Assert.assertEquals(locale4.toString(), "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category7);
        java.util.Locale locale13 = java.util.Locale.getDefault(category7);
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale.Builder builder15 = builder6.setLocale(locale13);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        boolean boolean20 = printStream17.checkError();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        double[] doubleArray38 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer25.transform(complexArray39);
        java.io.PrintStream printStream41 = printStream17.format(locale23, "fr", (java.lang.Object[]) complexArray40);
        printStream17.print((double) 100);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str47 = locale44.getDisplayVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer49.inversetransform(complexArray65);
        java.io.PrintStream printStream67 = printStream17.printf(locale44, "\u65e5\u6587", (java.lang.Object[]) complexArray65);
        java.lang.String str68 = locale13.getDisplayName(locale44);
        java.util.Set<java.lang.String> strSet69 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getDisplayVariant();
        java.lang.String str72 = locale70.getDisplayVariant();
        java.util.Locale locale73 = java.util.Locale.CHINA;
        java.lang.String str74 = locale73.getVariant();
        java.util.Locale locale75 = java.util.Locale.GERMANY;
        java.lang.String str76 = locale73.getDisplayLanguage(locale75);
        java.lang.String str77 = locale70.getDisplayScript(locale75);
        java.lang.String str78 = locale75.toLanguageTag();
        java.lang.String str79 = locale13.getDisplayCountry(locale75);
        java.lang.String str80 = locale13.getISO3Country();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u6587" + "'", str46, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str68, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Chinesisch" + "'", str76, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "de-DE" + "'", str78, "de-DE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("en-CA", "de-DE");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: de-DE");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream11.println(true);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.format("", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.write((int) 'a');
        printStream25.print(0.0f);
        java.io.PrintStream printStream31 = printStream25.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.getISO3Language();
        printStream25.println((java.lang.Object) locale32);
        java.util.Locale locale38 = new java.util.Locale("fra");
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.lang.String str42 = locale32.getDisplayScript(locale38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer44.inversetransform(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, (double) (-1));
        java.io.PrintStream printStream64 = printStream23.format(locale32, "allemand", (java.lang.Object[]) complexArray63);
        java.util.Locale locale66 = new java.util.Locale("de-DE");
        java.lang.String str67 = locale32.getDisplayScript(locale66);
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals(locale38.toString(), "fra");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertEquals(locale66.toString(), "de-de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet68);
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        printWriter1.print(10.0f);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println((double) (-1));
        printStream1.print('u');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.transform2(doubleArray14);
        java.io.PrintStream printStream18 = printStream1.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray17);
        java.io.PrintStream printStream20 = printStream18.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException");
        boolean boolean21 = printStream20.checkError();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("FR", strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale34.getDisplayScript();
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        java.lang.String str38 = locale34.getISO3Language();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.toLanguageTag();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getLanguage();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.toLanguageTag();
        boolean boolean51 = locale49.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = locale52.getDisplayScript();
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getDisplayCountry();
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = locale61.getISO3Country();
        java.lang.String str63 = locale61.getDisplayScript();
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleKeys();
        java.lang.String str65 = locale61.getISO3Language();
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale34, locale39, locale40, locale44, locale45, locale48, locale49, locale52, locale56, locale57, locale59, locale60, locale61 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter(languageRangeList24, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale72 = new java.util.Locale("ja");
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        boolean boolean74 = locale73.hasExtensions();
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = locale76.getISO3Country();
        java.util.Locale locale78 = java.util.Locale.JAPANESE;
        java.lang.String str79 = locale78.getLanguage();
        java.lang.String str80 = locale76.getDisplayName(locale78);
        java.lang.String str81 = locale76.getLanguage();
        java.lang.String str82 = locale73.getDisplayName(locale76);
        java.lang.String str83 = locale73.getDisplayLanguage();
        java.lang.String str84 = locale72.getDisplayName(locale73);
        java.util.Set<java.lang.String> strSet85 = locale72.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList24, (java.util.Collection<java.lang.String>) strSet85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap87 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList88 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap87);
        printStream20.print((java.lang.Object) languageRangeList88);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr" + "'", str41, "fr");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fra" + "'", str43, "fra");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ja" + "'", str46, "ja");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fra" + "'", str65, "fra");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ja" + "'", str79, "ja");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str80, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fr" + "'", str81, "fr");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "chinois" + "'", str82, "chinois");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Chinese" + "'", str83, "Chinese");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u65e5\u6587" + "'", str84, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(languageRangeList88);
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("allemand");
        java.util.Locale locale5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setLocale(locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setLanguageTag("gb");
        java.util.Locale.Builder builder11 = builder6.setScript("");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getISO3Language();
        java.util.Locale.Builder builder15 = builder6.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setLanguageTag("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        double double6 = complex5.getReal();
        double double7 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = complex5.asin();
        org.apache.commons.math.complex.Complex complex9 = complex5.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        java.util.Locale locale2 = new java.util.Locale("ja", "");
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str4 = locale2.toLanguageTag();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("FR");
        java.util.Locale.Builder builder11 = builder7.removeUnicodeLocaleAttribute("chinois");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        boolean boolean13 = locale2.equals((java.lang.Object) builder12);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japanese" + "'", str3, "Japanese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ja" + "'", str4, "ja");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "Evaluation failed for argument = {0}");
        printStream7.println(true);
        org.junit.Assert.assertNotNull(printStream7);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("japonais");
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex3.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex8.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex18.acos();
        org.apache.commons.math.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math.complex.Complex complex21 = complex17.multiply(complex19);
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex25 = complex19.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex19.negate();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = complex28.cos();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex28.cosh();
        double double33 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex19.add(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex8.subtract(complex32);
        org.apache.commons.math.complex.Complex complex36 = complex8.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getVariant();
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getDisplayCountry();
        java.lang.String str6 = locale4.getISO3Language();
        java.lang.String str7 = locale4.getDisplayVariant();
        java.util.Locale locale8 = locale4.stripExtensions();
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale0.getDisplayVariant(locale8);
        java.lang.String str11 = locale0.getISO3Language();
        java.lang.String str12 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fra" + "'", str6, "fra");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "jpn" + "'", str11, "jpn");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer0.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.transform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        java.io.PrintStream printStream38 = new java.io.PrintStream("japonais");
        printStream38.print(0.0f);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        java.io.PrintStream printStream51 = printStream38.format(locale41, "japonais", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        printStream51.print((java.lang.Object) doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer32.transform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer22.inversetransform2(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform2(doubleArray55);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.inversetransform(univariateRealFunction62, 100.0d, (double) 10.0f, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 10.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("org.apache.commons.math.MathException: ja", "org.apache.commons.math.MathException: hi!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: hi!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(100.0d, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 52.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream14.print(false);
        java.io.PrintStream printStream18 = new java.io.PrintStream("japonais");
        printStream18.print(0.0f);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        java.io.PrintStream printStream31 = printStream18.format(locale21, "japonais", (java.lang.Object[]) complexArray30);
        printStream31.print((int) '4');
        printStream31.println((int) (short) 100);
        printStream31.close();
        java.io.PrintStream printStream38 = new java.io.PrintStream("japonais");
        printStream38.print(true);
        boolean boolean41 = printStream38.checkError();
        printStream38.println();
        printStream38.print((-1));
        printStream38.println(false);
        printStream38.println("japonais");
        printStream38.println((float) (-1L));
        java.io.PrintStream printStream52 = new java.io.PrintStream("japonais");
        printStream52.print(true);
        boolean boolean55 = printStream52.checkError();
        printStream52.println('#');
        java.io.PrintStream printStream59 = new java.io.PrintStream("japonais");
        printStream59.print(0.0f);
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform(doubleArray70);
        java.io.PrintStream printStream72 = printStream59.format(locale62, "japonais", (java.lang.Object[]) complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray76);
        printStream72.print((java.lang.Object) doubleArray76);
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream72.write(byteArray83);
        printStream52.write(byteArray83);
        printStream38.write(byteArray83);
        printStream31.write(byteArray83);
        printStream14.write(byteArray83);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 10, -1]");
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.lang.CharSequence charSequence13 = null;
        java.io.PrintWriter printWriter14 = printWriter1.append(charSequence13);
        printWriter1.write((int) '#');
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex20.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.acos();
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.sin();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        printWriter1.print((java.lang.Object) complex25);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("Korean", (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 135");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getLanguage();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.lang.String str7 = locale5.getLanguage();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale0.getDisplayName(locale5);
        java.util.Set<java.lang.Character> charSet10 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr" + "'", str1, "fr");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en" + "'", str7, "en");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "French" + "'", str9, "French");
        org.junit.Assert.assertNotNull(charSet10);
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale6);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("GB");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = locale19.getLanguage();
        java.lang.String str25 = locale16.getDisplayName(locale19);
        java.lang.String str26 = locale19.getDisplayName();
        java.lang.String str27 = locale19.getVariant();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getScript();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet31 = locale28.getExtensionKeys();
        java.lang.String str32 = locale19.getDisplayVariant(locale28);
        java.lang.String str33 = locale28.getISO3Country();
        java.util.Set<java.lang.Character> charSet34 = locale28.getExtensionKeys();
        java.util.Locale.setDefault(locale28);
        java.util.Locale.Builder builder36 = builder0.setLocale(locale28);
        java.util.Locale.Builder builder37 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder0.setUnicodeLocaleKeyword("German (ALLEMAND,zh)", "Italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: German (ALLEMAND,zh) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ja" + "'", str22, "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str23, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "chinois" + "'", str25, "chinois");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "French" + "'", str26, "French");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ?????");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder7 = builder5.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('4', "\u30d5\u30e9\u30f3\u30b9\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setUnicodeLocaleKeyword("Canada", "\u65e5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Canada [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter5.write("\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) 'x', (int) (byte) -1);
        printWriter5.print((double) 100.0f);
        java.lang.Object[] objArray13 = null;
        java.io.PrintWriter printWriter14 = printWriter5.format("GB", objArray13);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException(throwable20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException22);
        java.lang.Throwable[] throwableArray24 = functionEvaluationException22.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) functionEvaluationException22);
        printWriter5.println((java.lang.Object) mathException26);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = locale31.getLanguage();
        java.lang.String str37 = locale28.getDisplayName(locale31);
        java.lang.String str38 = locale31.getDisplayName();
        java.lang.String str39 = locale31.getVariant();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getScript();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet43 = locale40.getExtensionKeys();
        java.lang.String str44 = locale31.getDisplayVariant(locale40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.transform(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer46.transform2(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        double[] doubleArray72 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer64.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer46.transform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray74, (double) 1);
        java.io.PrintWriter printWriter77 = printWriter5.format(locale40, "japonais", (java.lang.Object[]) complexArray74);
        printWriter77.print(100L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ja" + "'", str34, "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str35, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr" + "'", str36, "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "chinois" + "'", str37, "chinois");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str38, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setVariant("GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println(' ');
        printWriter2.println((long) (-1));
        printWriter2.println((java.lang.Object) "");
        printWriter2.println();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getScript();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        java.lang.String str13 = locale10.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        java.io.PrintWriter printWriter20 = printWriter2.printf(locale10, "ja", (java.lang.Object[]) complexArray19);
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.write((int) 'a');
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter28.println(' ');
        printWriter28.print((float) 10L);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.println(' ');
        printWriter35.println((long) (-1));
        printWriter35.println((java.lang.Object) "");
        printWriter35.println();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getScript();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.lang.String str46 = locale43.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        java.io.PrintWriter printWriter53 = printWriter35.printf(locale43, "ja", (java.lang.Object[]) complexArray52);
        java.io.PrintWriter printWriter54 = printWriter28.format("", (java.lang.Object[]) complexArray52);
        java.io.PrintStream printStream55 = printStream23.format("de", (java.lang.Object[]) complexArray52);
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream55);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, (double) (byte) 10);
        java.io.PrintStream printStream69 = printStream56.printf(locale58, "Franz\366sisch", (java.lang.Object[]) complexArray68);
        java.io.PrintWriter printWriter70 = printWriter20.printf("ja_JP", (java.lang.Object[]) complexArray68);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.Writer) printWriter20, false);
        java.io.PrintWriter printWriter74 = printWriter20.append(' ');
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException(throwable79);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable79);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException81);
        java.lang.Throwable[] throwableArray83 = functionEvaluationException81.getSuppressed();
        java.io.PrintWriter printWriter84 = printWriter20.format("org.apache.commons.math.functionevaluationexception: fr", (java.lang.Object[]) throwableArray83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ja_JP", (java.lang.Object[]) throwableArray83);
        java.lang.String str86 = mathException85.getPattern();
        java.lang.String str87 = mathException85.getPattern();
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ja_JP" + "'", str86, "ja_JP");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ja_JP" + "'", str87, "ja_JP");
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u4e2d\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) '4', 0.5669767943827975d, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale.Builder builder8 = builder2.clear();
        java.util.Locale.Builder builder11 = builder2.setExtension('u', "en-CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguage("org.apache.commons.math.MathException");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.MathException [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u6cd5\u6587", "DEU");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: DEU");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getDisplayScript();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale1.getDisplayCountry(locale11);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.toLanguageTag();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getLanguage();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = locale14.getDisplayName(locale19);
        java.lang.String str22 = locale1.getDisplayScript(locale19);
        java.lang.String str23 = locale19.getDisplayCountry();
        java.util.Set<java.lang.String> strSet24 = locale19.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fr" + "'", str17, "fr");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "French" + "'", str21, "French");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "ja", (java.lang.Object[]) complexArray18);
        printWriter19.print((float) 10L);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("FR", strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale34.getDisplayScript();
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        java.lang.String str38 = locale34.getISO3Language();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.toLanguageTag();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getLanguage();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.toLanguageTag();
        boolean boolean51 = locale49.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = locale52.getDisplayScript();
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getDisplayCountry();
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = locale61.getISO3Country();
        java.lang.String str63 = locale61.getDisplayScript();
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleKeys();
        java.lang.String str65 = locale61.getISO3Language();
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale34, locale39, locale40, locale44, locale45, locale48, locale49, locale52, locale56, locale57, locale59, locale60, locale61 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter(languageRangeList24, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale72 = new java.util.Locale("ja");
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        boolean boolean74 = locale73.hasExtensions();
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = locale76.getISO3Country();
        java.util.Locale locale78 = java.util.Locale.JAPANESE;
        java.lang.String str79 = locale78.getLanguage();
        java.lang.String str80 = locale76.getDisplayName(locale78);
        java.lang.String str81 = locale76.getLanguage();
        java.lang.String str82 = locale73.getDisplayName(locale76);
        java.lang.String str83 = locale73.getDisplayLanguage();
        java.lang.String str84 = locale72.getDisplayName(locale73);
        java.util.Set<java.lang.String> strSet85 = locale72.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList24, (java.util.Collection<java.lang.String>) strSet85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap87 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList88 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap87);
        printWriter19.println((java.lang.Object) languageRangeList24);
        printWriter19.println((double) ' ');
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr" + "'", str41, "fr");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fra" + "'", str43, "fra");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ja" + "'", str46, "ja");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fra" + "'", str65, "fra");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ja" + "'", str79, "ja");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str80, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fr" + "'", str81, "fr");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "chinois" + "'", str82, "chinois");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str83, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u65e5\u6587" + "'", str84, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(languageRangeList88);
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        boolean boolean9 = printStream7.checkError();
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        double[] doubleArray39 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer31.inversetransform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer26.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer26.inversetransform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer49.transform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer48.inversetransform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer26.inversetransform2(complexArray56);
        java.io.PrintStream printStream60 = printStream7.printf(locale14, "German (FRA,fr)", (java.lang.Object[]) complexArray56);
        printStream60.println();
        printStream60.print('a');
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream60);
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.print((float) (-1L));
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(true);
        boolean boolean16 = printStream13.checkError();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream13, true);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        double[] doubleArray34 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer21.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream13.format(locale19, "fr", (java.lang.Object[]) complexArray36);
        printStream37.print((float) 'u');
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter43 = printWriter41.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter45 = printWriter43.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean50 = printWriter49.checkError();
        java.io.PrintWriter printWriter52 = printWriter49.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.Writer) printWriter49);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter55.println(' ');
        printWriter55.println((long) (-1));
        printWriter55.println((java.lang.Object) "");
        char[] charArray68 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter55.println(charArray68);
        printWriter49.write(charArray68);
        printWriter47.write(charArray68);
        printWriter45.write(charArray68);
        printStream37.println(charArray68);
        printStream5.println(charArray68);
        printStream5.print((float) '#');
        printStream5.println(0.0f);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getDisplayScript();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale1.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        java.lang.String str19 = locale15.getISO3Language();
        java.lang.String str20 = locale15.getISO3Language();
        java.lang.String str21 = locale15.getVariant();
        java.lang.String str22 = locale11.getDisplayVariant(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = locale15.getUnicodeLocaleType("org.apache.commons.math.MathException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print(0);
        printWriter1.print('u');
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(true);
        boolean boolean12 = printStream9.checkError();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream9, true);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        double[] doubleArray30 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.inversetransform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer17.transform(complexArray31);
        java.io.PrintStream printStream33 = printStream9.format(locale15, "fr", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter35 = printWriter1.printf("", (java.lang.Object[]) complexArray32);
        printWriter1.print((-1L));
        char[] charArray41 = new char[] { '#', 'a', '4' };
        printWriter1.print(charArray41);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintStream printStream45 = new java.io.PrintStream("japonais");
        printStream45.write((int) 'a');
        printStream45.print(0.0f);
        java.io.PrintStream printStream51 = printStream45.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream51);
        boolean boolean53 = printStream51.checkError();
        java.util.Locale locale55 = new java.util.Locale("fra");
        java.util.Locale locale57 = new java.util.Locale("hi!");
        java.lang.String str58 = locale55.getDisplayScript(locale57);
        java.io.PrintStream printStream61 = new java.io.PrintStream("japonais");
        printStream61.print(true);
        boolean boolean64 = printStream61.checkError();
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.OutputStream) printStream61, true);
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform(doubleArray79);
        double[] doubleArray82 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer74.inversetransform2(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer69.transform(complexArray83);
        java.io.PrintStream printStream85 = printStream61.format(locale67, "fr", (java.lang.Object[]) complexArray84);
        java.io.PrintStream printStream86 = printStream51.format(locale57, "French", (java.lang.Object[]) complexArray84);
        printStream51.close();
        java.io.PrintStream printStream89 = printStream51.append((java.lang.CharSequence) "German (FRA,fr)");
        printWriter43.println((java.lang.Object) "German (FRA,fr)");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, a, 4]");
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals(locale55.toString(), "fra");
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertNotNull(printStream89);
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setScript("");
        java.util.Locale.Builder builder11 = builder6.removeUnicodeLocaleAttribute("fra");
        java.util.Locale locale12 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder6.removeUnicodeLocaleAttribute("German (ALLEMAND,zh)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: German (ALLEMAND,zh) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "_FR");
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Etats-Unis", 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.println('#');
        printStream1.print("japonais");
        printStream1.println("Franz\366sisch");
        java.io.PrintStream printStream11 = printStream1.append('a');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream11, true, "org.apache.commons.math.FunctionEvaluationException: ja_JP");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.FunctionEvaluationException: ja_JP");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.FunctionEvaluationException: fr", 97.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: German (FRA,fr)", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter7.println(' ');
        printWriter7.println((long) (-1));
        printWriter7.println((java.lang.Object) "");
        printWriter7.println();
        printWriter7.write((int) '#');
        printWriter7.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        printWriter7.close();
        java.util.Locale locale24 = new java.util.Locale("ja", "");
        java.lang.String str25 = locale24.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.println(false);
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(true);
        boolean boolean38 = printStream35.checkError();
        printStream35.println();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.transform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer43.inversetransform(complexArray59);
        java.io.PrintStream printStream61 = printStream35.printf(locale40, "de", (java.lang.Object[]) complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.transform2(doubleArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer73.transform(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer63.inversetransform(complexArray79);
        java.io.PrintWriter printWriter81 = printWriter29.format(locale40, "GB", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer27.inversetransform2(complexArray80);
        java.io.PrintWriter printWriter83 = printWriter7.format(locale24, "chinois", (java.lang.Object[]) complexArray80);
        java.util.Locale locale84 = locale24.stripExtensions();
        java.util.Locale.Builder builder85 = builder2.setLocale(locale24);
        java.util.Locale.Builder builder86 = builder85.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder89 = builder86.setUnicodeLocaleKeyword("kor", "japonais");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: kor [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ja" + "'", str25, "ja");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ja" + "'", str41, "ja");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.print((float) (short) -1);
        printWriter1.println("ja_JP");
        printWriter1.println(false);
        printWriter1.println((int) 'a');
        java.io.PrintWriter printWriter15 = printWriter1.append((java.lang.CharSequence) "Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)");
        printWriter1.print((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.acos();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex0.multiply(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = complex7.pow(complex8);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.write((int) '#');
        printWriter1.println(true);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter14.println(' ');
        printWriter14.flush();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter14, false);
        java.io.PrintWriter printWriter21 = printWriter14.append((java.lang.CharSequence) "Japanese");
        printWriter21.println((double) 'x');
        java.io.PrintWriter printWriter25 = printWriter21.append('a');
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter28.println(' ');
        printWriter28.println((long) (-1));
        printWriter28.println((java.lang.Object) "");
        boolean boolean35 = printWriter28.checkError();
        java.util.Locale locale36 = null;
        java.lang.String[] strArray40 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray40);
        java.io.PrintWriter printWriter42 = printWriter28.format(locale36, "zho", (java.lang.Object[]) strArray40);
        java.io.PrintWriter printWriter43 = printWriter21.format("allemand (Allemagne)", (java.lang.Object[]) strArray40);
        printWriter21.print((int) (short) 1);
        java.io.PrintWriter printWriter47 = printWriter21.append('u');
        printWriter1.println((java.lang.Object) 'u');
        printWriter1.print(false);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        java.lang.Object[] objArray2 = null;
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean10 = printWriter9.checkError();
        java.util.Locale locale11 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray18);
        java.lang.Object[] objArray20 = mathException19.getArguments();
        java.io.PrintWriter printWriter21 = printWriter9.printf(locale11, "zho", objArray20);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException27);
        double double29 = functionEvaluationException27.getArgument();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", objArray20, (java.lang.Throwable) functionEvaluationException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(0.7350525871447157d, "fr-FR", (java.lang.Throwable) functionEvaluationException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "Japanese", (java.lang.Throwable) functionEvaluationException31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(0.9888977057628651d, "fr_FR", objArray2, (java.lang.Throwable) functionEvaluationException32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) 0.0f, 100.0d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale.Builder builder8 = builder2.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setUnicodeLocaleKeyword("fr-FR", "CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: fr-FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.write((int) '#');
        printWriter1.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        printWriter1.println(1L);
        printWriter1.println('a');
        printWriter1.println((float) 'a');
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("japonais");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer4.inversetransform2(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.inversetransform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.transform2(complexArray25);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter28.println(' ');
        printWriter28.print((float) 10L);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.println(' ');
        printWriter35.println((long) (-1));
        printWriter35.println((java.lang.Object) "");
        printWriter35.println();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getScript();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.lang.String str46 = locale43.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        java.io.PrintWriter printWriter53 = printWriter35.printf(locale43, "ja", (java.lang.Object[]) complexArray52);
        java.io.PrintWriter printWriter54 = printWriter28.format("", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer9.inversetransform(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer4.transform2(complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, Double.NaN);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "\u4e2d\u6587", (java.lang.Object[]) complexArray58);
        boolean boolean60 = languageRange1.equals((java.lang.Object) functionEvaluationException59);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        printWriter13.println((float) (byte) 0);
        printWriter13.print((double) 1);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getLanguage();
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(0.0f);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        java.io.PrintStream printStream40 = printStream27.format(locale30, "japonais", (java.lang.Object[]) complexArray39);
        java.io.PrintWriter printWriter41 = printWriter13.format(locale23, "ja", (java.lang.Object[]) complexArray39);
        printWriter13.close();
        printWriter13.print(0.0f);
        boolean boolean45 = printWriter13.checkError();
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale3.getDisplayName(locale5);
        java.lang.String str8 = locale3.getLanguage();
        java.lang.String str9 = locale0.getDisplayName(locale3);
        java.util.Locale locale10 = locale0.stripExtensions();
        java.lang.String str11 = locale10.getISO3Country();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("FR", strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale19.getDisplayScript();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode24 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags(languageRangeList16, (java.util.Collection<java.lang.String>) strSet23, filteringMode24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap26);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("Etats-Unis");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList29, strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.parse("FR", strMap33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray40 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = locale44.getISO3Country();
        java.lang.String str46 = locale44.getDisplayScript();
        java.util.Set<java.lang.String> strSet47 = locale44.getUnicodeLocaleKeys();
        java.lang.String str48 = locale44.getISO3Language();
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.toLanguageTag();
        boolean boolean52 = locale50.hasExtensions();
        java.lang.String str53 = locale50.getISO3Language();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getLanguage();
        java.util.Set<java.lang.String> strSet57 = locale55.getUnicodeLocaleKeys();
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.toLanguageTag();
        boolean boolean61 = locale59.hasExtensions();
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = locale62.getISO3Country();
        java.lang.String str64 = locale62.getDisplayScript();
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleKeys();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = locale67.getDisplayCountry();
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Locale locale70 = java.util.Locale.KOREA;
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.getISO3Country();
        java.lang.String str73 = locale71.getDisplayScript();
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleKeys();
        java.lang.String str75 = locale71.getISO3Language();
        java.util.Locale[] localeArray76 = new java.util.Locale[] { locale44, locale49, locale50, locale54, locale55, locale58, locale59, locale62, locale66, locale67, locale69, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList77 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList77, localeArray76);
        java.util.Locale locale79 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter(languageRangeList34, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale82 = java.util.Locale.lookup(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList80);
        java.lang.String str83 = locale10.getDisplayLanguage(locale82);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ja" + "'", str6, "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str7, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois" + "'", str9, "chinois");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ja" + "'", str20, "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str21, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + filteringMode24 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode24.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fra" + "'", str48, "fra");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fr" + "'", str51, "fr");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fra" + "'", str53, "fra");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ja" + "'", str56, "ja");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fr" + "'", str60, "fr");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fra" + "'", str75, "fra");
        org.junit.Assert.assertNotNull(localeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(locale79);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "chinois" + "'", str83, "chinois");
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print('a');
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.print((float) (byte) -1);
        printWriter1.close();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter14 = printWriter1.append((java.lang.CharSequence) "kor", (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 32");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer5.transform(doubleArray10);
        double[] doubleArray13 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        double[] doubleArray37 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer29.inversetransform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer24.transform(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform2(complexArray39);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform(univariateRealFunction41, (double) 10.0f, 1.5430806348152437d, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.0, 1.5430806348152437]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setScript("");
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "zho");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder10.setLanguageTag("Japanisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Japanisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder5 = builder1.setLanguage("zho");
        java.util.Locale.Builder builder6 = builder1.clear();
        java.util.Locale.Builder builder7 = builder1.clear();
        java.util.Locale locale10 = new java.util.Locale("und", "org.apache.commons.math.FunctionEvaluationException");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.toLanguageTag();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getISO3Language();
        java.lang.String str15 = locale11.getISO3Country();
        java.lang.String str16 = locale10.getDisplayVariant(locale11);
        boolean boolean17 = locale11.hasExtensions();
        java.util.Locale.Builder builder18 = builder7.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.setVariant("zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zh_TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals(locale10.toString(), "und_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr" + "'", str12, "fr");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fra" + "'", str14, "fra");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("GB");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.toLanguageTag();
        boolean boolean4 = locale2.hasExtensions();
        java.lang.String str5 = locale2.getLanguage();
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale2.getDisplayName(locale7);
        java.util.Set<java.lang.String> strSet10 = locale2.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet11 = locale2.getExtensionKeys();
        java.util.Locale.setDefault(locale2);
        java.lang.String str13 = locale2.getLanguage();
        java.lang.String str15 = locale2.getExtension('x');
        boolean boolean16 = languageRange1.equals((java.lang.Object) str15);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "French" + "'", str9, "French");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.util.Locale locale3 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer6.inversetransform2(doubleArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray10);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        java.io.PrintWriter printWriter13 = printWriter1.printf(locale3, "zho", objArray12);
        printWriter1.println((-1.0f));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getDisplayScript();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale1.getDisplayCountry(locale11);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.toLanguageTag();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getLanguage();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = locale14.getDisplayName(locale19);
        java.lang.String str22 = locale1.getDisplayScript(locale19);
        java.lang.Object obj23 = locale1.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fr" + "'", str17, "fr");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "French" + "'", str21, "French");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "hi!");
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        boolean boolean8 = printWriter1.checkError();
        java.util.Locale locale9 = null;
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray13);
        java.io.PrintWriter printWriter15 = printWriter1.format(locale9, "zho", (java.lang.Object[]) strArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter17.println(' ');
        printWriter17.println(false);
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.print(0.0f);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        java.io.PrintStream printStream36 = printStream23.format(locale26, "japonais", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray40);
        printStream36.print((java.lang.Object) doubleArray40);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.print(0);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.println(' ');
        printWriter49.println((long) (-1));
        printWriter49.println((java.lang.Object) "");
        char[] charArray62 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter49.println(charArray62);
        printWriter45.println(charArray62);
        printStream36.print(charArray62);
        printWriter17.println(charArray62);
        printWriter17.close();
        printWriter1.print((java.lang.Object) printWriter17);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter((java.io.Writer) printWriter17, true);
        printWriter70.println(false);
        printWriter70.println();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("org.apache.commons.math.FunctionEvaluationException: zh", "German (FRA,fr)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: German (FRA,fr)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.print(0.0f);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        java.io.PrintStream printStream43 = printStream30.format(locale33, "japonais", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        printStream43.print((java.lang.Object) doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer24.transform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer19.transform(complexArray51);
        java.io.PrintWriter printWriter53 = printWriter13.format("en", (java.lang.Object[]) complexArray52);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter55.print(0);
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter59.println(' ');
        printWriter59.println((long) (-1));
        printWriter59.println((java.lang.Object) "");
        char[] charArray72 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter59.println(charArray72);
        printWriter55.println(charArray72);
        // The following exception was thrown during execution in test generation
        try {
            printWriter13.write(charArray72, (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter5.println(false);
        printWriter5.print("chine");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter13 = printWriter11.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter15 = printWriter13.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean18 = printWriter17.checkError();
        java.io.PrintWriter printWriter20 = printWriter17.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println((long) (-1));
        printWriter23.println((java.lang.Object) "");
        char[] charArray36 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter23.println(charArray36);
        printWriter17.write(charArray36);
        printWriter15.write(charArray36);
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(0.0f);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        java.io.PrintStream printStream54 = printStream41.format(locale44, "japonais", (java.lang.Object[]) complexArray53);
        printStream54.print((int) '4');
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter58.println(' ');
        printWriter58.println((long) (-1));
        printWriter58.println((java.lang.Object) "");
        char[] charArray71 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter58.println(charArray71);
        printWriter58.println(10);
        printWriter58.print('a');
        char[] charArray77 = new char[] {};
        printWriter58.println(charArray77);
        printStream54.println(charArray77);
        printWriter15.print(charArray77);
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.write(charArray77, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale.Builder builder9 = builder7.setLanguage("deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setRegion("deu");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: deu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("", "francese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: francese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) 'u', 100.0d, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(0.0f);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        java.io.PrintStream printStream21 = printStream8.format(locale11, "japonais", (java.lang.Object[]) complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        printStream21.print((java.lang.Object) doubleArray25);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream21.write(byteArray32);
        printStream1.write(byteArray32);
        printStream1.print('x');
        java.lang.Throwable throwable41 = null;
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException(throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException43);
        java.lang.Throwable[] throwableArray45 = functionEvaluationException43.getSuppressed();
        java.io.PrintStream printStream46 = printStream1.printf("", (java.lang.Object[]) throwableArray45);
        printStream1.write((int) (byte) 100);
        char[] charArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream1.print(charArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printStream46);
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print('a');
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter21.println(' ');
        printWriter21.println((long) (-1));
        printWriter21.println((java.lang.Object) "");
        char[] charArray34 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter21.println(charArray34);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter21, true);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter39.print(0);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter43.println(' ');
        printWriter43.println((long) (-1));
        printWriter43.println((java.lang.Object) "");
        char[] charArray56 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter43.println(charArray56);
        printWriter39.println(charArray56);
        printWriter37.write(charArray56);
        printWriter1.write(charArray56, (int) (short) 0, 1);
        java.util.Locale locale64 = new java.util.Locale("zh");
        printWriter1.println((java.lang.Object) "zh");
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder67 = builder66.clear();
        java.util.Locale.Builder builder68 = builder67.clearExtensions();
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.lang.String str71 = locale70.getCountry();
        java.lang.String str72 = locale69.getDisplayCountry(locale70);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.lang.String str74 = locale73.getCountry();
        java.lang.String str75 = locale70.getDisplayName(locale73);
        java.util.Locale.Builder builder76 = builder68.setLocale(locale73);
        java.util.Locale.Builder builder78 = builder68.setLanguageTag("Japanese");
        java.util.Locale locale79 = builder78.build();
        java.util.Locale.Builder builder82 = builder78.setExtension('a', "ja");
        printWriter1.println((java.lang.Object) 'a');
        java.lang.Object obj84 = null;
        printWriter1.print(obj84);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a, #,  , a, a, a]");
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "FR" + "'", str74, "FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fran\347ais" + "'", str75, "fran\347ais");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println(' ');
        printWriter5.print((double) (short) 100);
        boolean boolean10 = printWriter5.checkError();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        printWriter5.print((float) (-1L));
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getCountry();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        boolean boolean19 = locale16.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform(doubleArray32);
        double[] doubleArray35 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer27.inversetransform2(doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer22.transform(complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer22.inversetransform(complexArray42);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException(throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException49);
        java.lang.Throwable[] throwableArray51 = functionEvaluationException49.getSuppressed();
        java.lang.Throwable[] throwableArray52 = functionEvaluationException49.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException49.addSuppressed((java.lang.Throwable) functionEvaluationException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray43, (java.lang.Throwable) functionEvaluationException55);
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray43, 100.0d);
        java.io.PrintWriter printWriter60 = printWriter5.format(locale16, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "org.apache.commons.math.FunctionEvaluationException: Chinesisch", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "org.apache.commons.math.functionevaluationexception: fr", (java.lang.Throwable) functionEvaluationException61);
        java.lang.String str63 = functionEvaluationException62.toString();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr" + "'", str63, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.addUnicodeLocaleAttribute("United Kingdom");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: United Kingdom [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("de-DE", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("FR", strMap15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray22 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList23);
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getISO3Country();
        java.lang.String str28 = locale26.getDisplayScript();
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleKeys();
        java.lang.String str30 = locale26.getISO3Language();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.toLanguageTag();
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale32.getISO3Language();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getLanguage();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.toLanguageTag();
        boolean boolean43 = locale41.hasExtensions();
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = locale44.getISO3Country();
        java.lang.String str46 = locale44.getDisplayScript();
        java.util.Set<java.lang.String> strSet47 = locale44.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getDisplayCountry();
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale53.getDisplayScript();
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleKeys();
        java.lang.String str57 = locale53.getISO3Language();
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale26, locale31, locale32, locale36, locale37, locale40, locale41, locale44, locale48, locale49, locale51, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale locale61 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.Locale locale64 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList59);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fra" + "'", str30, "fra");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr" + "'", str33, "fr");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fra" + "'", str35, "fra");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ja" + "'", str38, "ja");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fra" + "'", str57, "fra");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(locale61);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNull(locale64);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.println((float) (byte) 100);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = locale30.getDisplayCountry(locale31);
        java.lang.String str34 = locale30.getDisplayCountry();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.Throwable[] throwableArray40 = functionEvaluationException39.getSuppressed();
        java.lang.String[] strArray44 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray44);
        double double46 = functionEvaluationException45.getArgument();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\u65e5\u6587", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) mathException48);
        java.io.PrintStream printStream50 = printStream1.format(locale30, "en", (java.lang.Object[]) throwableArray40);
        java.io.PrintStream printStream52 = printStream50.append((java.lang.CharSequence) "org.apache.commons.math.MathException: ja");
        boolean boolean53 = printStream52.checkError();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setLanguageTag("gb");
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale11.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder6.setLocale(locale11);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\u975e\u78ba\u5b9a (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en-us_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: ?????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter12.println((long) ' ');
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.flush();
        java.io.PrintWriter printWriter14 = printWriter1.append((java.lang.CharSequence) "de");
        printWriter1.println();
        org.junit.Assert.assertNotNull(printWriter14);
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.println((float) (byte) 100);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = locale30.getDisplayCountry(locale31);
        java.lang.String str34 = locale30.getDisplayCountry();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.Throwable[] throwableArray40 = functionEvaluationException39.getSuppressed();
        java.lang.String[] strArray44 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray44);
        double double46 = functionEvaluationException45.getArgument();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\u65e5\u6587", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) mathException48);
        java.io.PrintStream printStream50 = printStream1.format(locale30, "en", (java.lang.Object[]) throwableArray40);
        printStream1.print(true);
        java.io.PrintStream printStream54 = printStream1.append((java.lang.CharSequence) "German (ALLEMAND,zh)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.sinh();
        org.apache.commons.math.complex.Complex complex3 = complex1.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15, filteringMode18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap22);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode18.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(0.0f);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        java.io.PrintStream printStream30 = printStream17.format(locale20, "japonais", (java.lang.Object[]) complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray34);
        printStream30.print((java.lang.Object) doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer11.transform2(doubleArray34);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.println(' ');
        printWriter40.print((float) 10L);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter47.println(' ');
        printWriter47.println((long) (-1));
        printWriter47.println((java.lang.Object) "");
        printWriter47.println();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getScript();
        java.util.Set<java.lang.String> strSet57 = locale55.getUnicodeLocaleKeys();
        java.lang.String str58 = locale55.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        java.io.PrintWriter printWriter65 = printWriter47.printf(locale55, "ja", (java.lang.Object[]) complexArray64);
        java.io.PrintWriter printWriter66 = printWriter40.format("", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer11.inversetransform(complexArray64);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException(throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException73);
        java.lang.Object[] objArray75 = functionEvaluationException74.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray64, (java.lang.Throwable) functionEvaluationException74);
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException(throwable80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException82);
        java.lang.Throwable[] throwableArray84 = functionEvaluationException82.getSuppressed();
        java.lang.Throwable[] throwableArray85 = functionEvaluationException82.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException82.addSuppressed((java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "zh", (java.lang.Object[]) complexArray64, (java.lang.Throwable) functionEvaluationException82);
        functionEvaluationException6.addSuppressed((java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "zho", (java.lang.Throwable) functionEvaluationException90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "German (FRA,fr)", (java.lang.Throwable) functionEvaluationException92);
        java.lang.String str94 = functionEvaluationException92.toString();
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: zho" + "'", str94, "org.apache.commons.math.FunctionEvaluationException: zho");
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguage("Franz\366sisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Franzo?sisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.print((float) (-1L));
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(true);
        boolean boolean16 = printStream13.checkError();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream13, true);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        double[] doubleArray34 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer21.transform(complexArray35);
        java.io.PrintStream printStream37 = printStream13.format(locale19, "fr", (java.lang.Object[]) complexArray36);
        printStream37.print((float) 'u');
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter43 = printWriter41.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter45 = printWriter43.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean50 = printWriter49.checkError();
        java.io.PrintWriter printWriter52 = printWriter49.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.Writer) printWriter49);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter55.println(' ');
        printWriter55.println((long) (-1));
        printWriter55.println((java.lang.Object) "");
        char[] charArray68 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter55.println(charArray68);
        printWriter49.write(charArray68);
        printWriter47.write(charArray68);
        printWriter45.write(charArray68);
        printStream37.println(charArray68);
        printStream5.println(charArray68);
        java.io.PrintStream printStream76 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer78.transform(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer77.inversetransform2(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer88 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray93 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer88.transform(doubleArray93);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray93);
        org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer87.transform2(doubleArray93);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray93);
        org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer77.transform(doubleArray93);
        printStream76.println((java.lang.Object) doubleArray93);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(complexArray98);
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex3.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex10.divide(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.asin();
        boolean boolean16 = complex14.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex20.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex14.subtract(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex24.sin();
        org.apache.commons.math.complex.Complex complex26 = complex6.add(complex24);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.util.Locale locale4 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "japonais");
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale4.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for org.apache.commons.math.functionevaluationexception: hi!");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale4.toString(), "org.apache.commons.math.functionevaluationexception: hi!_JAPONAIS");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray17 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.lang.String[] strArray26 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList27);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strList27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.addUnicodeLocaleAttribute("\u30c9\u30a4\u30c4\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("Vereinigte Staaten von Amerika");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Vereinigte Staaten von Amerika [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        java.util.Locale locale2 = new java.util.Locale("ja", "");
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str4 = locale2.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getVariant();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = locale5.stripExtensions();
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale8.getISO3Language();
        java.util.Locale locale11 = locale8.stripExtensions();
        java.lang.String str12 = locale2.getDisplayLanguage(locale8);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "japonais" + "'", str3, "japonais");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ja" + "'", str4, "ja");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jpn" + "'", str10, "jpn");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str12, "\u65e5\u672c\u8a9e");
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        printStream1.print((double) 100);
        printStream1.print((int) (short) 0);
        printStream1.println((int) (byte) 1);
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream35.println(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex16.divide(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex17.acos();
        double double20 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex21 = complex11.add(complex17);
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder7 = builder4.setExtension('a', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("Etats-Unis");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Etats-Unis [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale.Builder builder9 = builder7.setLanguage("deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguage("org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.functionevaluationexception: fr [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.8414709848078965d, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.8414709848078965, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.removeUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder10 = builder6.setExtension('u', "de_FR_japonais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setExtension('4', "en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        java.util.Locale locale3 = new java.util.Locale("Chine", "", "org.apache.commons.math.MathException: japonais");
        org.junit.Assert.assertEquals(locale3.toString(), "chine__org.apache.commons.math.MathException: japonais");
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = locale0.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale0.getUnicodeLocaleType("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(2.319776824715853d, (double) (short) 100);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.flush();
        printStream1.println('a');
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter9 = printWriter5.append((java.lang.CharSequence) "\u30ab\u30ca\u30c0", 1, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println((long) (-1));
        printStream1.print((int) (byte) 100);
        printStream1.print((int) (short) -1);
        printStream1.println(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer5.transform(doubleArray10);
        double[] doubleArray13 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer24.transform2(complexArray40);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter43.println(' ');
        printWriter43.print((float) 10L);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter50.println(' ');
        printWriter50.println((long) (-1));
        printWriter50.println((java.lang.Object) "");
        printWriter50.println();
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getScript();
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleKeys();
        java.lang.String str61 = locale58.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        java.io.PrintWriter printWriter68 = printWriter50.printf(locale58, "ja", (java.lang.Object[]) complexArray67);
        java.io.PrintWriter printWriter69 = printWriter43.format("", (java.lang.Object[]) complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer24.inversetransform(complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer0.inversetransform(complexArray67);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform(univariateRealFunction72, (double) 'a', 1.3043045862358962d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        boolean boolean1 = org.apache.commons.math.transform.FastFourierTransformer.isPowerOf2((long) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        boolean boolean8 = complex6.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(0.0f);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        java.io.PrintStream printStream21 = printStream8.format(locale11, "japonais", (java.lang.Object[]) complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        printStream21.print((java.lang.Object) doubleArray25);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream21.write(byteArray32);
        printStream1.write(byteArray32);
        printStream1.print('x');
        printStream1.print('4');
        printStream1.println('a');
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, -1]");
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((double) '4');
        java.lang.Object[] objArray2 = functionEvaluationException1.getArguments();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[52.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[52.0]");
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("japonais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setVariant("\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println(' ');
        printWriter2.println((long) (-1));
        printWriter2.println((java.lang.Object) "");
        printWriter2.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer11.inversetransform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray21 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray19, (double) (byte) 10);
        java.io.PrintWriter printWriter22 = printWriter2.printf("ja", (java.lang.Object[]) complexArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("de_FR_japonais", (java.lang.Object[]) complexArray21);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fra");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getExtension('a');
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fra");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setUnicodeLocaleKeyword("\u975e\u78ba\u5b9a (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)", "jpn");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ??? (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        java.util.Locale locale1 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale4 = new java.util.Locale("zho", "fran\347ais");
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale4.getDisplayLanguage(locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals(locale4.toString(), "zho_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder2.setUnicodeLocaleKeyword("chinois (Chine)", "en_CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: chinois (Chine) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Japanese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Japanese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_TW");
        printStream1.println("org.apache.commons.math.FunctionEvaluationException: ja_JP");
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setVariant("zho");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zho [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.lang.String str4 = locale0.getDisplayCountry();
        java.lang.String str5 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u97d3\u56fd\u8a9e", "Evaluation failed for argument = {0}");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Evaluation failed for argument = {0}");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.inversetransform(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer28.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer18.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform2(complexArray56);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.inversetransform(univariateRealFunction58, (double) 10L, (double) 0L, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.0, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println("Chinesisch");
        java.lang.Throwable throwable10 = null;
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException(throwable10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException12);
        java.lang.Throwable[] throwableArray14 = functionEvaluationException12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = functionEvaluationException12.getSuppressed();
        java.io.PrintStream printStream16 = printStream1.format("hi!", (java.lang.Object[]) throwableArray15);
        printStream16.print((double) (short) 1);
        printStream16.println(0L);
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.write((int) 'a');
        printStream22.print(0.0f);
        java.io.PrintStream printStream28 = printStream22.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream22.println((float) (short) 1);
        java.io.PrintStream printStream32 = new java.io.PrintStream("japonais");
        printStream32.print(0.0f);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        java.io.PrintStream printStream45 = printStream32.format(locale35, "japonais", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        printStream45.print((java.lang.Object) doubleArray49);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream45.write(byteArray56);
        printStream22.write(byteArray56, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            printStream16.write(byteArray56, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 10, -1]");
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter5.write("\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) 'x', (int) (byte) -1);
        printWriter5.print((double) 100.0f);
        java.lang.Object[] objArray13 = null;
        java.io.PrintWriter printWriter14 = printWriter5.format("GB", objArray13);
        printWriter5.print(100.0f);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter14);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) (short) 0, (double) (-1L), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray5);
        org.apache.commons.math.complex.Complex[] complexArray8 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray5, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray10 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray5, 35.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.4412118677491172d, (double) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("Japanese");
        boolean boolean2 = printWriter1.checkError();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter22.println(' ');
        printWriter22.println((long) (-1));
        printWriter22.println((java.lang.Object) "");
        char[] charArray35 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter22.println(charArray35);
        printWriter22.println(10);
        printWriter22.print('a');
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println((long) (-1));
        printWriter42.println((java.lang.Object) "");
        char[] charArray55 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter42.println(charArray55);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter42, true);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter60.print(0);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter64.println(' ');
        printWriter64.println((long) (-1));
        printWriter64.println((java.lang.Object) "");
        char[] charArray77 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter64.println(charArray77);
        printWriter60.println(charArray77);
        printWriter58.write(charArray77);
        printWriter22.write(charArray77, (int) (short) 0, 1);
        printStream20.println(charArray77);
        printStream5.println(charArray77);
        boolean boolean86 = printStream5.checkError();
        printStream5.println((-1L));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setUnicodeLocaleKeyword("de-de", "\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: de-de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        double[] doubleArray18 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer5.transform(complexArray19);
        java.io.PrintWriter printWriter21 = printWriter1.format("ja", (java.lang.Object[]) complexArray19);
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.print(0.0f);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        java.io.PrintStream printStream36 = printStream23.format(locale26, "japonais", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray40);
        printStream36.print((java.lang.Object) doubleArray40);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.print(0);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.println(' ');
        printWriter49.println((long) (-1));
        printWriter49.println((java.lang.Object) "");
        char[] charArray62 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter49.println(charArray62);
        printWriter45.println(charArray62);
        printStream36.print(charArray62);
        printWriter21.print(charArray62);
        printWriter21.print((int) (short) 10);
        printWriter21.println(0.0d);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.functionevaluationexception: fr", "allemand (Allemagne)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: allemand (Allemagne)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("China", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        java.util.Locale.Category category0 = null;
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println(' ');
        printWriter2.println((long) (-1));
        printWriter2.println((java.lang.Object) "");
        printWriter2.println();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter2.println((java.lang.Object) printWriter11);
        printWriter11.print((float) (-1));
        printWriter11.println('4');
        java.io.PrintWriter printWriter18 = printWriter11.append('4');
        printWriter11.write((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getISO3Country();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.lang.String str29 = locale24.getLanguage();
        java.lang.String str30 = locale21.getDisplayName(locale24);
        java.lang.String str31 = locale24.getDisplayName();
        java.lang.String str32 = locale24.getVariant();
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(0.0f);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer41.transform(doubleArray46);
        java.io.PrintStream printStream48 = printStream35.format(locale38, "japonais", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        printStream48.print((java.lang.Object) doubleArray52);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        boolean boolean57 = locale56.hasExtensions();
        java.lang.String str58 = locale56.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer60.transform(doubleArray65);
        java.io.PrintStream printStream67 = printStream48.printf(locale56, "GB", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray66, (double) 0.0f);
        java.io.PrintWriter printWriter70 = printWriter11.format(locale24, "ja", (java.lang.Object[]) complexArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ja" + "'", str27, "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str28, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fr" + "'", str29, "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "chinois" + "'", str30, "chinois");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French" + "'", str31, "French");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "zh" + "'", str58, "zh");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printWriter70);
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print('a');
        java.lang.Object[] objArray21 = null;
        java.io.PrintWriter printWriter22 = printWriter1.format("und", objArray21);
        printWriter22.println((float) 100);
        printWriter22.flush();
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer5.transform(doubleArray10);
        double[] doubleArray13 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        double[] doubleArray37 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer29.inversetransform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer24.transform(complexArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer0.transform2(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer41.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer0.transform(doubleArray47);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.transform(univariateRealFunction52, 32.0d, (-1.833789474235432d), (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [32.0, -1.833789474235432]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex3.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex8.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex8.atan();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cos();
        org.apache.commons.math.complex.Complex complex24 = complex22.cos();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex18.multiply(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex32 = complex31.acos();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        org.apache.commons.math.complex.Complex complex34 = complex30.multiply(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex34.log();
        org.apache.commons.math.complex.Complex complex36 = complex26.subtract(complex35);
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math.complex.Complex complex40 = complex39.negate();
        org.apache.commons.math.complex.Complex complex41 = complex35.multiply(complex39);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.getImaginary();
        org.apache.commons.math.complex.Complex complex45 = complex42.acos();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt1z();
        org.apache.commons.math.complex.Complex complex48 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex42.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex39.subtract(complex49);
        double double51 = complex50.getReal();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = complex52.cos();
        org.apache.commons.math.complex.Complex complex56 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex52.acos();
        org.apache.commons.math.complex.Complex complex58 = complex50.divide(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex13.divide(complex50);
        double double60 = complex59.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex0.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream35, true);
        java.io.PrintStream printStream41 = printStream37.append((java.lang.CharSequence) "de", (int) (short) 0, (int) (byte) 1);
        printStream37.print((float) 'x');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream41);
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("chinois", "DEU");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: DEU");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.print(true);
        boolean boolean10 = printStream7.checkError();
        printStream7.println();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer15.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer15.inversetransform(complexArray31);
        java.io.PrintStream printStream33 = printStream7.printf(locale12, "de", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer35.inversetransform(complexArray51);
        java.io.PrintWriter printWriter53 = printWriter1.format(locale12, "GB", (java.lang.Object[]) complexArray52);
        printWriter1.println((long) (byte) 100);
        boolean boolean56 = printWriter1.checkError();
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter58.println(' ');
        printWriter58.println((long) (-1));
        printWriter58.println((java.lang.Object) "");
        char[] charArray71 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter58.println(charArray71);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter((java.io.Writer) printWriter58, true);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter76.print(0);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter80.println(' ');
        printWriter80.println((long) (-1));
        printWriter80.println((java.lang.Object) "");
        char[] charArray93 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter80.println(charArray93);
        printWriter76.println(charArray93);
        printWriter74.write(charArray93);
        printWriter1.println(charArray93);
        boolean boolean98 = printWriter1.checkError();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.print(0);
        printStream5.println("");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        printWriter18.println();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getCountry();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str25 = locale21.getDisplayLanguage();
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.String str34 = functionEvaluationException32.getPattern();
        java.lang.Object[] objArray35 = functionEvaluationException32.getArguments();
        java.io.PrintWriter printWriter36 = printWriter18.format(locale21, "\u30c9\u30a4\u30c4\u8a9e", objArray35);
        printWriter36.print("\u30c9\u30a4\u30c4\u8a9e");
        printWriter36.println('a');
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "French" + "'", str25, "French");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter36);
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u30c9\u30a4\u30c4\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(100.0d, 32.0d);
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayVariant();
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.getDefault(category6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer10.transform(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer28.transform2(doubleArray51);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter57.println(' ');
        printWriter57.print((float) 10L);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter64.println(' ');
        printWriter64.println((long) (-1));
        printWriter64.println((java.lang.Object) "");
        printWriter64.println();
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str73 = locale72.getScript();
        java.util.Set<java.lang.String> strSet74 = locale72.getUnicodeLocaleKeys();
        java.lang.String str75 = locale72.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        java.io.PrintWriter printWriter82 = printWriter64.printf(locale72, "ja", (java.lang.Object[]) complexArray81);
        java.io.PrintWriter printWriter83 = printWriter57.format("", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer28.inversetransform(complexArray81);
        java.lang.Throwable throwable88 = null;
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException(throwable88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException90);
        java.lang.Object[] objArray92 = functionEvaluationException91.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray81, (java.lang.Throwable) functionEvaluationException91);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer10.inversetransform(complexArray81);
        java.io.PrintStream printStream95 = printStream5.format(locale8, "allemand", (java.lang.Object[]) complexArray81);
        java.lang.String str96 = locale0.getDisplayName(locale8);
        java.lang.String str97 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet98 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(printStream95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "fran\347ais" + "'", str96, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "fra" + "'", str97, "fra");
        org.junit.Assert.assertNotNull(charSet98);
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.getDisplayCountry();
        java.lang.String str4 = locale2.getCountry();
        java.lang.String str5 = locale2.getDisplayVariant();
        java.lang.String str6 = locale2.getCountry();
        boolean boolean7 = locale0.equals((java.lang.Object) str6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.io.PrintStream printStream4 = new java.io.PrintStream("japonais");
        printStream4.print(0.0f);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        java.io.PrintStream printStream17 = printStream4.format(locale7, "japonais", (java.lang.Object[]) complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray21);
        printStream17.print((java.lang.Object) doubleArray21);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream17.write(byteArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        java.io.PrintStream printStream38 = printStream17.printf("de", (java.lang.Object[]) complexArray37);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream38, true);
        java.io.PrintStream printStream44 = printStream40.append((java.lang.CharSequence) "de", (int) (short) 0, (int) (byte) 1);
        java.io.PrintStream printStream46 = printStream40.append((java.lang.CharSequence) "ja");
        java.io.PrintStream printStream50 = printStream46.append((java.lang.CharSequence) "Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)", (int) (short) 0, (int) (short) 10);
        boolean boolean51 = locale0.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer4.transform(doubleArray9);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray9);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform2(doubleArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.transform(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer3.inversetransform(complexArray19);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException(throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException26);
        java.lang.String str28 = functionEvaluationException26.getPattern();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("japonais", (java.lang.Object[]) complexArray20, (java.lang.Throwable) functionEvaluationException26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", objArray1, (java.lang.Throwable) mathException29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex7.multiply(complex9);
        printWriter1.println((java.lang.Object) complex7);
        printWriter1.print((float) (byte) 0);
        printWriter1.println(0.0d);
        boolean boolean17 = printWriter1.checkError();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "Franz\366sisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Franzo?sisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex6 = complex5.asin();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        double double8 = complex6.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.5707963267948966d + "'", double8 == 1.5707963267948966d);
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setScript("");
        java.util.Locale.Builder builder11 = builder6.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setRegion("");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.lang.String str19 = locale17.getDisplayCountry();
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale locale21 = java.util.Locale.getDefault(category16);
        java.util.Locale locale22 = java.util.Locale.getDefault(category16);
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder24 = builder12.setLocale(locale22);
        java.util.Locale locale25 = builder12.build();
        java.util.Locale.Builder builder26 = builder11.setLocale(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder26.addUnicodeLocaleAttribute("org.apache.commons.math.FunctionEvaluationException: zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.FunctionEvaluationException: zh [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.FunctionEvaluationException: hi!");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale1.getUnicodeLocaleType("org.apache.commons.math.FunctionEvaluationException: zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.FunctionEvaluationException: zho");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getCountry();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = locale9.getDisplayName(locale12);
        java.util.Locale.Builder builder15 = builder7.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale.Builder builder17 = builder1.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder17.setLanguage("chine");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder17.setExtension('4', "German (Germany)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FR" + "'", str13, "FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fran\347ais" + "'", str14, "fran\347ais");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        boolean boolean13 = complex11.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex0.add(complex11);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.getImaginary();
        org.apache.commons.math.complex.Complex complex33 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex35 = complex33.divide(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex34.cos();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cos();
        org.apache.commons.math.complex.Complex complex40 = complex38.cos();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex34.multiply(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex46 = complex43.sinh();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex48 = complex46.divide(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex47.acos();
        double double50 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex51 = complex41.add(complex47);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex53 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex52.cos();
        org.apache.commons.math.complex.Complex complex55 = complex51.add(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex29.divide(complex51);
        org.apache.commons.math.complex.Complex complex57 = complex27.multiply(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex27.atan();
        boolean boolean59 = complex58.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer7.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer7.transform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer7.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.transform2(doubleArray38);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.inversetransform2(univariateRealFunction43, 1.557407724654902d, (-1.0d), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "anglais");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: anglais");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("German (Germany)", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        java.io.PrintStream printStream2 = new java.io.PrintStream("japonais");
        printStream2.print(true);
        printStream2.println((float) (short) 10);
        printStream2.println((long) (byte) 0);
        printStream2.print(false);
        java.util.Locale locale11 = null;
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter14.println(' ');
        printWriter14.println((long) (-1));
        printWriter14.println((java.lang.Object) "");
        char[] charArray27 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter14.println(charArray27);
        printWriter14.println(10);
        printWriter14.println("zh");
        printWriter14.println((float) (short) 10);
        java.io.PrintWriter printWriter36 = printWriter14.append((java.lang.CharSequence) "FR");
        java.util.Locale locale37 = null;
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.println(' ');
        printWriter40.println((long) (-1));
        printWriter40.println((java.lang.Object) "");
        printWriter40.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer49.inversetransform(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray57, (double) (byte) 10);
        java.io.PrintWriter printWriter60 = printWriter40.printf("ja", (java.lang.Object[]) complexArray59);
        java.io.PrintWriter printWriter61 = printWriter36.format(locale37, "de_ALLEMAND_zh", (java.lang.Object[]) complexArray59);
        java.io.PrintStream printStream62 = printStream2.format(locale11, "", (java.lang.Object[]) complexArray59);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10", (java.lang.Object[]) complexArray59);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printStream62);
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter12 = printWriter4.append((java.lang.CharSequence) "German (ALLEMAND,zh)", 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale.setDefault(category8, locale13);
        java.util.Locale.Builder builder16 = builder4.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setRegion("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList20, filteringMode23);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray31 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList32);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = locale35.getDisplayScript();
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleKeys();
        java.lang.String str39 = locale35.getISO3Language();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.toLanguageTag();
        boolean boolean43 = locale41.hasExtensions();
        java.lang.String str44 = locale41.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getLanguage();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.toLanguageTag();
        boolean boolean52 = locale50.hasExtensions();
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale53.getDisplayScript();
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleKeys();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getDisplayCountry();
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = locale62.getISO3Country();
        java.lang.String str64 = locale62.getDisplayScript();
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleKeys();
        java.lang.String str66 = locale62.getISO3Language();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale35, locale40, locale41, locale45, locale46, locale49, locale50, locale53, locale57, locale58, locale60, locale61, locale62 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale locale70 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList68);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter75 = printWriter73.append((java.lang.CharSequence) "");
        printWriter75.println('a');
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getISO3Country();
        java.lang.String str80 = locale78.getISO3Language();
        printWriter75.print((java.lang.Object) locale78);
        java.lang.String str82 = locale78.getScript();
        java.lang.String str83 = locale71.getDisplayLanguage(locale78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = locale71.getUnicodeLocaleType("\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ???");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fra" + "'", str39, "fra");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ja" + "'", str47, "ja");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fr" + "'", str51, "fr");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fra" + "'", str66, "fra");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fra" + "'", str80, "fra");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "fran\347ais" + "'", str83, "fran\347ais");
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex16 = complex6.multiply(complex15);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("org.apache.commons.math.FunctionEvaluationException: Chinesisch", "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer0.inversetransform2(doubleArray62);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.inversetransform(univariateRealFunction66, (double) (byte) 10, Double.NaN, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.sin();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.write((int) '#');
        printWriter1.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter16.println(' ');
        printWriter16.println((long) (-1));
        printWriter16.println((java.lang.Object) "");
        char[] charArray29 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter16.println(charArray29);
        printWriter1.print(charArray29);
        printWriter1.print("hi!");
        printWriter1.print((float) (short) -1);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category7);
        java.util.Locale locale13 = java.util.Locale.getDefault(category7);
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale.Builder builder15 = builder6.setLocale(locale13);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        boolean boolean20 = printStream17.checkError();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        double[] doubleArray38 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer25.transform(complexArray39);
        java.io.PrintStream printStream41 = printStream17.format(locale23, "fr", (java.lang.Object[]) complexArray40);
        printStream17.print((double) 100);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str47 = locale44.getDisplayVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer49.inversetransform(complexArray65);
        java.io.PrintStream printStream67 = printStream17.printf(locale44, "\u65e5\u6587", (java.lang.Object[]) complexArray65);
        java.lang.String str68 = locale13.getDisplayName(locale44);
        java.util.Set<java.lang.String> strSet69 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getDisplayVariant();
        java.lang.String str72 = locale70.getDisplayVariant();
        java.util.Locale locale73 = java.util.Locale.CHINA;
        java.lang.String str74 = locale73.getVariant();
        java.util.Locale locale75 = java.util.Locale.GERMANY;
        java.lang.String str76 = locale73.getDisplayLanguage(locale75);
        java.lang.String str77 = locale70.getDisplayScript(locale75);
        java.lang.String str78 = locale75.toLanguageTag();
        java.lang.String str79 = locale13.getDisplayCountry(locale75);
        java.lang.String str80 = locale13.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u6587" + "'", str46, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str68, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Chinesisch" + "'", str76, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "de-DE" + "'", str78, "de-DE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fr" + "'", str80, "fr");
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        java.util.Locale locale1 = new java.util.Locale("de_ALLEMAND_zh");
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_allemand_zh");
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setScript("org.apache.commons.math.FunctionEvaluationException: zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: org.apache.commons.math.FunctionEvaluationException: zh [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(true);
        boolean boolean6 = printStream3.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        double[] doubleArray24 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer11.transform(complexArray25);
        java.io.PrintStream printStream27 = printStream3.format(locale9, "fr", (java.lang.Object[]) complexArray26);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable29);
        printStream3.print((java.lang.Object) throwable29);
        java.io.PrintStream printStream33 = new java.io.PrintStream("japonais");
        printStream33.print(true);
        printStream33.println((float) (short) 10);
        printStream33.print((long) (short) 10);
        java.io.PrintStream printStream41 = printStream33.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream43 = new java.io.PrintStream("japonais");
        printStream43.print(0.0f);
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer49.transform(doubleArray54);
        java.io.PrintStream printStream56 = printStream43.format(locale46, "japonais", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        printStream56.print((java.lang.Object) doubleArray60);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter65.print(0);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter69.println(' ');
        printWriter69.println((long) (-1));
        printWriter69.println((java.lang.Object) "");
        char[] charArray82 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter69.println(charArray82);
        printWriter65.println(charArray82);
        printStream56.print(charArray82);
        printStream33.print(charArray82);
        printStream3.print(charArray82);
        java.lang.Throwable throwable92 = null;
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException(throwable92);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable92);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException95 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException94);
        java.lang.Throwable[] throwableArray96 = functionEvaluationException94.getSuppressed();
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException94);
        printStream3.print((java.lang.Object) functionEvaluationException94);
        boolean boolean99 = complex0.equals((java.lang.Object) functionEvaluationException94);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream14.print((int) '4');
        printStream14.println((int) (short) 100);
        printStream14.close();
        printStream14.print(0.0f);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.tanh();
        double double7 = complex5.abs();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.println(' ');
        printWriter35.println((long) (-1));
        printWriter35.println((java.lang.Object) "");
        char[] charArray48 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter35.println(charArray48);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter35, true);
        printWriter35.println(10.0f);
        java.io.PrintWriter printWriter55 = printWriter35.append((java.lang.CharSequence) "Chinese");
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean60 = printWriter59.checkError();
        java.io.PrintWriter printWriter62 = printWriter59.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.Writer) printWriter59);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter65.println(' ');
        printWriter65.println((long) (-1));
        printWriter65.println((java.lang.Object) "");
        char[] charArray78 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter65.println(charArray78);
        printWriter59.write(charArray78);
        printWriter57.write(charArray78);
        printWriter35.write(charArray78);
        printStream14.println(charArray78);
        java.lang.Class<?> wildcardClass84 = charArray78.getClass();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream8.println(0.7350525871447157d);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream14 = printStream8.append((java.lang.CharSequence) "Vereinigte Staaten von Amerika", (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder5.setExtension('4', "ja_JP");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getLanguage();
        printWriter1.print((java.lang.Object) str10);
        printWriter1.write("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print("");
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter17.print(0);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter21.println(' ');
        printWriter21.println((long) (-1));
        printWriter21.println((java.lang.Object) "");
        char[] charArray34 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter21.println(charArray34);
        printWriter17.println(charArray34);
        printWriter1.print(charArray34);
        char[] charArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.print(charArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja" + "'", str10, "ja");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.7456241416655579d, (double) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.7456241416655579, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setVariant("ja");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ja [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u30d5\u30e9\u30f3\u30b9\u8a9e", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception:org.apache.commons.math.functionevaluationexception:?????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        printStream1.print((double) 100);
        printStream1.print((int) (short) 0);
        printStream1.println(0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream35 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) (short) 100, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        java.io.PrintStream printStream19 = new java.io.PrintStream("japonais");
        printStream19.print(true);
        printStream19.println((float) (short) 10);
        printStream19.print((long) (short) 10);
        java.io.PrintStream printStream27 = printStream19.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream29 = new java.io.PrintStream("japonais");
        printStream29.print(0.0f);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        java.io.PrintStream printStream42 = printStream29.format(locale32, "japonais", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray46);
        printStream42.print((java.lang.Object) doubleArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter51.print(0);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter55.println(' ');
        printWriter55.println((long) (-1));
        printWriter55.println((java.lang.Object) "");
        char[] charArray68 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter55.println(charArray68);
        printWriter51.println(charArray68);
        printStream42.print(charArray68);
        printStream19.print(charArray68);
        printWriter17.write(charArray68);
        printWriter17.print((long) (short) -1);
        printWriter17.write("GERMAN (FRA,FR)");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream("japonais");
        printStream29.print(0.0f);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        java.io.PrintStream printStream42 = printStream29.format(locale32, "japonais", (java.lang.Object[]) complexArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray46);
        printStream42.print((java.lang.Object) doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer23.transform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer23.transform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer16.transform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.inversetransform(complexArray58);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.inversetransform2(univariateRealFunction60, 1.557407724654902d, 0.7350525871447157d, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.557407724654902, 0.7350525871447157]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        java.io.PrintStream printStream1 = new java.io.PrintStream("fr-FR");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "chinois");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chinois");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter17.print("zh_TW");
        java.lang.Throwable throwable23 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException(throwable23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException25);
        java.lang.Throwable[] throwableArray27 = functionEvaluationException25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = functionEvaluationException25.getSuppressed();
        java.lang.Object[] objArray29 = functionEvaluationException25.getArguments();
        printWriter17.println((java.lang.Object) functionEvaluationException25);
        printWriter17.write("JAPANISCH");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer0.inversetransform2(univariateRealFunction7, 100.0d, 120.0d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.removeUnicodeLocaleAttribute("de-de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: de-de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("Englisch");
        java.util.Locale.Builder builder6 = builder4.setLanguage("en");
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("allemand");
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.lang.String str15 = locale12.getDisplayCountry(locale13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getCountry();
        java.lang.String str18 = locale13.getDisplayName(locale16);
        java.util.Locale.Builder builder19 = builder11.setLocale(locale16);
        java.util.Locale.Builder builder21 = builder11.setLanguageTag("Japanese");
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = locale29.getCountry();
        java.lang.String str31 = locale26.getDisplayName(locale29);
        java.util.Locale.Builder builder32 = builder24.setLocale(locale29);
        java.util.Locale.Builder builder34 = builder24.setLanguageTag("Japanese");
        java.util.Locale locale35 = builder34.build();
        java.util.Locale.Builder builder36 = builder11.setLocale(locale35);
        java.util.Locale locale37 = builder36.build();
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale37.getDisplayLanguage();
        java.util.Locale locale40 = locale37.stripExtensions();
        java.util.Locale.Builder builder41 = builder8.setLocale(locale40);
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder42.setScript("chine");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: chine [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FR" + "'", str17, "FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fran\347ais" + "'", str18, "fran\347ais");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FR" + "'", str30, "FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fran\347ais" + "'", str31, "fran\347ais");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "japanese");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "japanese" + "'", str39, "japanese");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale6.toLanguageTag();
        java.lang.Object obj9 = locale6.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "fr");
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder7 = builder5.setRegion("");
        java.util.Locale.Builder builder8 = builder5.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setUnicodeLocaleKeyword("", "zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        boolean boolean8 = printWriter1.checkError();
        java.util.Locale locale9 = null;
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray13);
        java.io.PrintWriter printWriter15 = printWriter1.format(locale9, "zho", (java.lang.Object[]) strArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter17.println(' ');
        printWriter17.println(false);
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.print(0.0f);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        java.io.PrintStream printStream36 = printStream23.format(locale26, "japonais", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray40);
        printStream36.print((java.lang.Object) doubleArray40);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.print(0);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.println(' ');
        printWriter49.println((long) (-1));
        printWriter49.println((java.lang.Object) "");
        char[] charArray62 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter49.println(charArray62);
        printWriter45.println(charArray62);
        printStream36.print(charArray62);
        printWriter17.println(charArray62);
        printWriter17.close();
        printWriter1.print((java.lang.Object) printWriter17);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter((java.io.Writer) printWriter17, true);
        printWriter70.close();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.print((long) (short) 10);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr");
        printStream9.flush();
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.write((int) 'a');
        printStream12.print(0.0f);
        java.io.PrintStream printStream18 = printStream12.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream12.println((float) (short) 1);
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream12.write(byteArray46, 0, 0);
        printStream9.write(byteArray46);
        printStream9.println(' ');
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zh_TW");
        printStream1.print((long) 100);
        printStream1.println();
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.print(0);
        printStream5.println("");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        printWriter18.println();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getCountry();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str25 = locale21.getDisplayLanguage();
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.String str34 = functionEvaluationException32.getPattern();
        java.lang.Object[] objArray35 = functionEvaluationException32.getArguments();
        java.io.PrintWriter printWriter36 = printWriter18.format(locale21, "\u30c9\u30a4\u30c4\u8a9e", objArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fran\347ais" + "'", str25, "fran\347ais");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter36);
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: fr", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:fr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter5.write("\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) 'x', (int) (byte) -1);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "Chine");
        java.io.PrintWriter printWriter13 = printWriter11.append('4');
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex20.divide(complex25);
        double double27 = complex25.getReal();
        org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex25);
        printWriter11.print((java.lang.Object) complex18);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(true);
        boolean boolean34 = printStream31.checkError();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream31, true);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        double[] doubleArray52 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.inversetransform2(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer39.transform(complexArray53);
        java.io.PrintStream printStream55 = printStream31.format(locale37, "fr", (java.lang.Object[]) complexArray54);
        printStream55.print((float) 'u');
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter62 = printWriter60.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform(doubleArray74);
        double[] doubleArray77 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.inversetransform2(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer64.transform(complexArray78);
        java.io.PrintWriter printWriter80 = printWriter60.format("ja", (java.lang.Object[]) complexArray78);
        java.io.PrintStream printStream81 = printStream55.printf("", (java.lang.Object[]) complexArray78);
        java.io.PrintStream printStream83 = printStream55.append((java.lang.CharSequence) "Franz\366sisch");
        printStream55.write((int) (byte) -1);
        printStream55.println();
        boolean boolean87 = complex18.equals((java.lang.Object) printStream55);
        printStream55.close();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.7350525871447157d + "'", double27 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.exp();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        double double8 = complex7.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("JAPANISCH");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: JAPANISCH [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fra");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getExtension('a');
        java.lang.String str5 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fra");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        java.util.Locale locale3 = new java.util.Locale("kor", "org.apache.commons.math.FunctionEvaluationException: zh", "de_ALLEMAND_zh");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: ZH");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "kor_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: ZH_de_ALLEMAND_zh");
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) 'x', (double) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [120.0, 1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((float) 10L);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter8.println(' ');
        printWriter8.println((long) (-1));
        printWriter8.println((java.lang.Object) "");
        printWriter8.println();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        java.io.PrintWriter printWriter26 = printWriter8.printf(locale16, "ja", (java.lang.Object[]) complexArray25);
        java.io.PrintWriter printWriter27 = printWriter1.format("", (java.lang.Object[]) complexArray25);
        printWriter27.print((-1));
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.println((long) (-1));
        printWriter31.println((java.lang.Object) "");
        char[] charArray44 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter31.println(charArray44);
        printWriter31.println(10);
        printWriter31.println("zh");
        printWriter31.println((float) (short) 10);
        java.io.PrintWriter printWriter53 = printWriter31.append((java.lang.CharSequence) "FR");
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter57 = printWriter55.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter59 = printWriter57.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean64 = printWriter63.checkError();
        java.io.PrintWriter printWriter66 = printWriter63.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.Writer) printWriter63);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter69.println(' ');
        printWriter69.println((long) (-1));
        printWriter69.println((java.lang.Object) "");
        char[] charArray82 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter69.println(charArray82);
        printWriter63.write(charArray82);
        printWriter61.write(charArray82);
        printWriter59.write(charArray82);
        printWriter53.write(charArray82);
        // The following exception was thrown during execution in test generation
        try {
            printWriter27.write(charArray82, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1L, Double.NaN);
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.cosh();
        boolean boolean3 = complex2.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.println('a');
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Language();
        printWriter3.print((java.lang.Object) locale6);
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = locale6.stripExtensions();
        java.util.Locale locale12 = locale11.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale11.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer6.transform(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer15.transform(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer5.transform2(complexArray21);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.print((float) 10L);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.println((long) (-1));
        printWriter31.println((java.lang.Object) "");
        printWriter31.println();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getScript();
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleKeys();
        java.lang.String str42 = locale39.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        java.io.PrintWriter printWriter49 = printWriter31.printf(locale39, "ja", (java.lang.Object[]) complexArray48);
        java.io.PrintWriter printWriter50 = printWriter24.format("", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer5.inversetransform(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        double[] doubleArray66 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer53.transform(complexArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer69.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer53.inversetransform(complexArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray81 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer76.transform(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer75.inversetransform(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer53.inversetransform2(complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform(complexArray83);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.transform(univariateRealFunction88, (double) 1, Double.POSITIVE_INFINITY, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.print(0);
        printStream5.println("");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        printWriter20.print('x');
        printWriter20.println("org.apache.commons.math.MathException: GB");
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print((int) (short) 1);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter12.println(' ');
        printWriter12.print((float) 10L);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter19.println(' ');
        printWriter19.println((long) (-1));
        printWriter19.println((java.lang.Object) "");
        printWriter19.println();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getScript();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = locale27.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        java.io.PrintWriter printWriter37 = printWriter19.printf(locale27, "ja", (java.lang.Object[]) complexArray36);
        java.io.PrintWriter printWriter38 = printWriter12.format("", (java.lang.Object[]) complexArray36);
        java.io.PrintWriter printWriter39 = printWriter1.printf(locale8, "org.apache.commons.math.MathException: japonais", (java.lang.Object[]) complexArray36);
        printWriter1.println((double) '4');
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder4.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder4.clearExtensions();
        java.util.Locale.Builder builder14 = builder4.setLanguageTag("japonais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setRegion("chinois");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: chinois [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Evaluation failed for argument = {0}");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Evaluation failed for argument = {0}");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        java.util.Locale locale1 = new java.util.Locale("Chinesisch");
        java.util.Locale.setDefault(locale1);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer3.inversetransform2(doubleArray6);
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(0.0f);
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer15.transform(doubleArray20);
        java.io.PrintStream printStream22 = printStream9.format(locale12, "japonais", (java.lang.Object[]) complexArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray26);
        printStream22.print((java.lang.Object) doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer3.transform2(doubleArray26);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter32.println(' ');
        printWriter32.print((float) 10L);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter39.println(' ');
        printWriter39.println((long) (-1));
        printWriter39.println((java.lang.Object) "");
        printWriter39.println();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getScript();
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = locale47.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        java.io.PrintWriter printWriter57 = printWriter39.printf(locale47, "ja", (java.lang.Object[]) complexArray56);
        java.io.PrintWriter printWriter58 = printWriter32.format("", (java.lang.Object[]) complexArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer3.inversetransform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer60.transform(doubleArray65);
        double[] doubleArray68 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.inversetransform2(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer3.inversetransform2(doubleArray68);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer71.transform(doubleArray76);
        double[] doubleArray79 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer71.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer3.transform(complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray83 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray81, 97.0d);
        boolean boolean84 = locale1.equals((java.lang.Object) 97.0d);
        org.junit.Assert.assertEquals(locale1.toString(), "chinesisch");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale2 = new java.util.Locale("hi!");
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getISO3Country();
        java.lang.String str5 = locale2.getDisplayScript();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category6);
        java.util.Locale locale12 = java.util.Locale.getDefault(category6);
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = locale2.getDisplayCountry(locale12);
        boolean boolean15 = locale12.hasExtensions();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.lang.String str20 = locale16.getISO3Language();
        java.lang.String str21 = locale16.getISO3Language();
        java.lang.String str22 = locale16.getVariant();
        java.lang.String str23 = locale12.getDisplayVariant(locale16);
        java.util.Locale.Builder builder24 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder25.setExtension(' ', "allemand (Allemagne)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print("FR");
        printWriter1.write("und");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean19 = printWriter18.checkError();
        java.util.Locale locale20 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.io.PrintWriter printWriter30 = printWriter18.printf(locale20, "zho", objArray29);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException36);
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) functionEvaluationException36);
        java.io.PrintWriter printWriter40 = printWriter1.format(locale11, "fra", objArray29);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println(false);
        printWriter42.print((int) (short) 1);
        printWriter1.println((java.lang.Object) printWriter42);
        printWriter42.print((int) (short) 0);
        printWriter42.print((float) 'x');
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream35, true);
        java.io.PrintStream printStream39 = printStream35.append((java.lang.CharSequence) "allemand");
        printStream39.print((int) ' ');
        printStream39.flush();
        java.lang.Class<?> wildcardClass43 = printStream39.getClass();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale.setDefault(locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str9 = locale5.getVariant();
        java.lang.String str10 = locale1.getDisplayVariant(locale5);
        java.lang.Object obj11 = locale5.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "fr");
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.cosh();
        printStream1.println((java.lang.Object) complex6);
        org.apache.commons.math.complex.Complex complex10 = complex6.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("FR");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String str29 = locale27.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        java.io.PrintStream printStream38 = printStream19.printf(locale27, "GB", (java.lang.Object[]) complexArray37);
        printStream38.println((float) 100);
        printStream38.println((long) (byte) 10);
        java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream38, false);
        boolean boolean45 = languageRange1.equals((java.lang.Object) false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr" + "'", str2, "fr");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.cos();
        org.apache.commons.math.complex.Complex complex27 = complex22.pow(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex23.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale.setDefault(locale0);
        java.lang.Object obj4 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en-US" + "'", str2, "en-US");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "en_US");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "en_US");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "en_US");
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter5.write("\u30d5\u30e9\u30f3\u30b9\u8a9e", (int) 'x', (int) (byte) -1);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "Chine");
        java.io.PrintWriter printWriter13 = printWriter11.append('4');
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex20.divide(complex25);
        double double27 = complex25.getReal();
        org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex25);
        printWriter11.print((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex30 = complex18.acos();
        org.apache.commons.math.complex.Complex complex31 = complex18.acos();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.7350525871447157d + "'", double27 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter12 = printWriter10.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        double[] doubleArray27 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer14.transform(complexArray28);
        java.io.PrintWriter printWriter30 = printWriter10.format("ja", (java.lang.Object[]) complexArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("japonais");
        printStream32.print(0.0f);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        java.io.PrintStream printStream45 = printStream32.format(locale35, "japonais", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        printStream45.print((java.lang.Object) doubleArray49);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter54.print(0);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter58.println(' ');
        printWriter58.println((long) (-1));
        printWriter58.println((java.lang.Object) "");
        char[] charArray71 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter58.println(charArray71);
        printWriter54.println(charArray71);
        printStream45.print(charArray71);
        printWriter30.print(charArray71);
        printStream8.println(charArray71);
        printStream8.println((int) 'u');
        printStream8.println(false);
        printStream8.print((float) 'x');
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.lang.String str6 = locale5.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fr" + "'", str6, "fr");
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex16 = complex5.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("GERMAN (FRA,FR)", (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println((double) (-1));
        printStream1.print(0L);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer66.transform(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer56.transform2(complexArray72);
        printStream1.print((java.lang.Object) fastFourierTransformer56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer75.inversetransform2(doubleArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer80.transform(doubleArray85);
        double[] doubleArray88 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer80.inversetransform2(doubleArray88);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer75.transform(complexArray89);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer91 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray96 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer91.transform(doubleArray96);
        org.apache.commons.math.complex.Complex[] complexArray98 = fastFourierTransformer75.inversetransform2(doubleArray96);
        org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer56.transform(doubleArray96);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray97);
        org.junit.Assert.assertNotNull(complexArray98);
        org.junit.Assert.assertNotNull(complexArray99);
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0, (double) (byte) 0);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.exp();
        org.apache.commons.math.complex.Complex complex11 = complex5.subtract(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex14 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex16 = complex15.acos();
        org.apache.commons.math.complex.Complex complex17 = complex16.negate();
        boolean boolean18 = complex14.equals((java.lang.Object) complex16);
        org.apache.commons.math.complex.Complex complex19 = complex10.subtract(complex16);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        double double23 = complex20.abs();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.getImaginary();
        org.apache.commons.math.complex.Complex complex27 = complex20.add(complex24);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex28.tanh();
        org.apache.commons.math.complex.Complex complex31 = complex24.subtract(complex28);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = complex28.add(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex16.add(complex28);
        boolean boolean38 = complex2.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = complex39.sinh();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex44 = complex42.divide(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex43.acos();
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        org.apache.commons.math.complex.Complex complex47 = complex2.pow(complex46);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "zh_TW");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh_TW");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder12 = builder7.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder7.setVariant("TWN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: TWN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "_FR");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("japonais");
        printStream26.print(0.0f);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        java.io.PrintStream printStream39 = printStream26.format(locale29, "japonais", (java.lang.Object[]) complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        printStream39.print((java.lang.Object) doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer20.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer10.inversetransform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.transform(doubleArray43);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.transform(univariateRealFunction50, 1.0d, 1.557407724654902d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter10.print((float) (-1));
        printWriter10.println('4');
        java.io.PrintWriter printWriter17 = printWriter10.append('4');
        printWriter10.write((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = locale23.getLanguage();
        java.lang.String str29 = locale20.getDisplayName(locale23);
        java.lang.String str30 = locale23.getDisplayName();
        java.lang.String str31 = locale23.getVariant();
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale55.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        java.io.PrintStream printStream66 = printStream47.printf(locale55, "GB", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, (double) 0.0f);
        java.io.PrintWriter printWriter69 = printWriter10.format(locale23, "ja", (java.lang.Object[]) complexArray68);
        printWriter69.print(false);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter74.println(' ');
        printWriter74.println((long) (-1));
        printWriter74.println((java.lang.Object) "");
        printWriter74.println();
        java.util.Locale locale82 = java.util.Locale.JAPANESE;
        java.lang.String str83 = locale82.getScript();
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleKeys();
        java.lang.String str85 = locale82.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer87 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray90 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer87.inversetransform2(doubleArray90);
        java.io.PrintWriter printWriter92 = printWriter74.printf(locale82, "ja", (java.lang.Object[]) complexArray91);
        java.io.PrintWriter printWriter93 = printWriter69.printf("allemand (Allemagne)", (java.lang.Object[]) complexArray91);
        printWriter69.println(1.4412118677491172d);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ja" + "'", str26, "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str27, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "chinois" + "'", str29, "chinois");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fran\347ais" + "'", str30, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh" + "'", str57, "zh");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(printWriter92);
        org.junit.Assert.assertNotNull(printWriter93);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("allemand");
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList25, filteringMode28);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray36 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList37);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = locale40.getDisplayScript();
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleKeys();
        java.lang.String str44 = locale40.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.toLanguageTag();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getISO3Language();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.toLanguageTag();
        boolean boolean57 = locale55.hasExtensions();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.getDisplayScript();
        java.util.Set<java.lang.String> strSet61 = locale58.getUnicodeLocaleKeys();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale63.getDisplayCountry();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = locale67.getISO3Country();
        java.lang.String str69 = locale67.getDisplayScript();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleKeys();
        java.lang.String str71 = locale67.getISO3Language();
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale40, locale45, locale46, locale50, locale51, locale54, locale55, locale58, locale62, locale63, locale65, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale locale75 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Locale locale76 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getCountry();
        java.lang.String str80 = locale77.getDisplayCountry(locale78);
        java.lang.String str81 = locale76.getDisplayLanguage(locale78);
        java.util.Locale.Builder builder82 = builder4.setLocale(locale76);
        java.util.Set<java.lang.Character> charSet83 = locale76.getExtensionKeys();
        java.lang.String str84 = locale76.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode28.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr" + "'", str30, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fr" + "'", str47, "fr");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fra" + "'", str49, "fra");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr" + "'", str56, "fr");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fran\347ais" + "'", str81, "fran\347ais");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "fran\347ais" + "'", str84, "fran\347ais");
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "DEU");
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        java.util.Locale locale2 = new java.util.Locale("\u30c9\u30a4\u30c4\u8a9e", "Korean");
        org.junit.Assert.assertEquals(locale2.toString(), "\u30c9\u30a4\u30c4\u8a9e_KOREAN");
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.getDefault(category4);
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder14 = builder0.clear();
        java.util.Locale.Builder builder16 = builder0.removeUnicodeLocaleAttribute("Chinese");
        java.util.Locale.Builder builder18 = builder16.setLanguage("zho");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder16.removeUnicodeLocaleAttribute("de-de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: de-de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Vereinigte Staaten von Amerika", "chine");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chine");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "ja", (java.lang.Object[]) complexArray18);
        java.util.Set<java.lang.String> strSet20 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale9.toLanguageTag();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale.setDefault(category22, locale23);
        java.lang.String str27 = locale23.getVariant();
        java.lang.String str28 = locale9.getDisplayScript(locale23);
        java.lang.String str29 = locale9.getLanguage();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayLanguage(locale32);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale31.getDisplayLanguage(locale34);
        java.lang.String str37 = locale9.getDisplayScript(locale31);
        java.lang.String str38 = locale31.getVariant();
        java.lang.String str39 = locale31.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = locale31.getUnicodeLocaleType("org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.functionevaluationexception: fr");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ja" + "'", str21, "ja");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fra" + "'", str25, "fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ja" + "'", str29, "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ja" + "'", str35, "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "_FR");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print((long) (short) 1);
        printWriter4.flush();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        printWriter11.println(0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("jpn");
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.print(0.0f);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getDisplayCountry();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale17.getDisplayVariant();
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleKeys();
        java.lang.String str22 = locale17.getCountry();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.print(0.0f);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        java.io.PrintStream printStream43 = printStream30.format(locale33, "japonais", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        printStream43.print((java.lang.Object) doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer24.transform2(doubleArray47);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter53.println(' ');
        printWriter53.print((float) 10L);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter60.println(' ');
        printWriter60.println((long) (-1));
        printWriter60.println((java.lang.Object) "");
        printWriter60.println();
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale68.getScript();
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleKeys();
        java.lang.String str71 = locale68.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        java.io.PrintWriter printWriter78 = printWriter60.printf(locale68, "ja", (java.lang.Object[]) complexArray77);
        java.io.PrintWriter printWriter79 = printWriter53.format("", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer24.inversetransform(complexArray77);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer81.transform(doubleArray86);
        double[] doubleArray89 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer81.inversetransform2(doubleArray89);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer24.inversetransform2(doubleArray89);
        java.io.PrintStream printStream92 = printStream14.format(locale17, "Chinesisch", (java.lang.Object[]) complexArray91);
        java.lang.String str93 = locale17.getDisplayVariant();
        java.lang.String str94 = locale17.getDisplayName();
        java.util.Locale.Builder builder95 = builder10.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder97 = builder10.setVariant("GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(printStream92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "fran\347ais" + "'", str94, "fran\347ais");
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException(throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException5);
        java.lang.String str7 = functionEvaluationException5.getPattern();
        java.lang.String str8 = functionEvaluationException5.toString();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.FunctionEvaluationException" + "'", str8, "org.apache.commons.math.FunctionEvaluationException");
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print('a');
        char[] charArray20 = new char[] {};
        printWriter1.println(charArray20);
        printWriter1.print((int) (short) -1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.print('#');
        printWriter1.println(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter32 = printWriter1.append((java.lang.CharSequence) "Korean", (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(4.1132503787829275d, (double) 'x');
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter6.print((float) 0L);
        printWriter6.print(10);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        java.util.Locale locale1 = new java.util.Locale("Japanese");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "japanese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "japanese" + "'", str2, "japanese");
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.println((long) 10);
        printStream1.println((double) (short) 0);
        printStream1.print(0);
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.println((float) (byte) 100);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = locale30.getDisplayCountry(locale31);
        java.lang.String str34 = locale30.getDisplayCountry();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.Throwable[] throwableArray40 = functionEvaluationException39.getSuppressed();
        java.lang.String[] strArray44 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray44);
        double double46 = functionEvaluationException45.getArgument();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\u65e5\u6587", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) mathException48);
        java.io.PrintStream printStream50 = printStream1.format(locale30, "en", (java.lang.Object[]) throwableArray40);
        boolean boolean51 = locale30.hasExtensions();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale.Builder builder8 = builder2.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setExtension('a', "org.apache.commons.math.MathException");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: org.apache.commons.math.MathException [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print("FR");
        printWriter1.write("und");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean19 = printWriter18.checkError();
        java.util.Locale locale20 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.io.PrintWriter printWriter30 = printWriter18.printf(locale20, "zho", objArray29);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException36);
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) functionEvaluationException36);
        java.io.PrintWriter printWriter40 = printWriter1.format(locale11, "fra", objArray29);
        boolean boolean41 = locale11.hasExtensions();
        java.lang.String str42 = locale11.getCountry();
        java.lang.String str43 = locale11.getCountry();
        java.lang.String str44 = locale11.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        java.util.Locale locale2 = new java.util.Locale("tedesco", "jpn");
        org.junit.Assert.assertEquals(locale2.toString(), "tedesco_JPN");
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", 52.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("Chinesisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinesisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("", "Koreanisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Koreanisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap11);
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] { languageRange14 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList24);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.lang.String[] strArray32 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList33, filteringMode36);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale.FilteringMode filteringMode39 = null;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strList33, filteringMode39);
        java.util.Locale.LanguageRange languageRange42 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] { languageRange42 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.lang.String[] strArray51 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.lang.String[] strArray60 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList61);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList61, filteringMode64);
        java.lang.String str66 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.parse("FR", strMap68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList69, strMap70);
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = locale72.getISO3Country();
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.lang.String str75 = locale74.getLanguage();
        java.lang.String str76 = locale72.getDisplayName(locale74);
        java.lang.String str77 = locale74.getDisplayScript();
        java.util.Set<java.lang.String> strSet78 = locale74.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList71, (java.util.Collection<java.lang.String>) strSet78, filteringMode79);
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList80);
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strList81);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode36.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fr" + "'", str38, "fr");
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode64.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fr" + "'", str66, "fr");
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(languageRangeList71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ja" + "'", str75, "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str76, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode79.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strList82);
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "English (United Kingdom)");
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("\u30d5\u30e9\u30f3\u30b9\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: en-us_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "ja", (java.lang.Object[]) complexArray18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.write((int) 'a');
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter27.println(' ');
        printWriter27.print((float) 10L);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.println((long) (-1));
        printWriter34.println((java.lang.Object) "");
        printWriter34.println();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getScript();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = locale42.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        java.io.PrintWriter printWriter52 = printWriter34.printf(locale42, "ja", (java.lang.Object[]) complexArray51);
        java.io.PrintWriter printWriter53 = printWriter27.format("", (java.lang.Object[]) complexArray51);
        java.io.PrintStream printStream54 = printStream22.format("de", (java.lang.Object[]) complexArray51);
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream54);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray64, (double) (byte) 10);
        java.io.PrintStream printStream68 = printStream55.printf(locale57, "Franz\366sisch", (java.lang.Object[]) complexArray67);
        java.io.PrintWriter printWriter69 = printWriter19.printf("ja_JP", (java.lang.Object[]) complexArray67);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.Writer) printWriter19, false);
        printWriter71.print(52.0d);
        printWriter71.flush();
        printWriter71.close();
        printWriter71.flush();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "french");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("French", "en_CA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en_CA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Canada");
        java.lang.Class<?> wildcardClass2 = locale1.getClass();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "canada");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)", (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter6.print((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "fr_FR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: fr_FR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable27);
        printStream1.print((java.lang.Object) throwable27);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(true);
        printStream31.println((float) (short) 10);
        printStream31.print((long) (short) 10);
        java.io.PrintStream printStream39 = printStream31.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(0.0f);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        java.io.PrintStream printStream54 = printStream41.format(locale44, "japonais", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray58);
        printStream54.print((java.lang.Object) doubleArray58);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.print(0);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.println((long) (-1));
        printWriter67.println((java.lang.Object) "");
        char[] charArray80 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter67.println(charArray80);
        printWriter63.println(charArray80);
        printStream54.print(charArray80);
        printStream31.print(charArray80);
        printStream1.print(charArray80);
        printStream1.print((double) (byte) 0);
        java.io.PrintWriter printWriter88 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap90 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList91 = java.util.Locale.LanguageRange.parse("fr", strMap90);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap92 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList93 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList91, strMap92);
        printWriter88.print((java.lang.Object) languageRangeList91);
        printWriter88.print(1.3043045862358962d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(languageRangeList91);
        org.junit.Assert.assertNotNull(languageRangeList93);
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.getDefault(category4);
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder14 = builder0.clear();
        java.util.Locale.Builder builder16 = builder0.removeUnicodeLocaleAttribute("Chinese");
        java.util.Locale.Builder builder18 = builder16.setLanguage("zho");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder16.setLanguageTag("org.apache.commons.math.MathException: fr");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.MathException: fr [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getLanguage();
        java.lang.String str4 = locale0.toLanguageTag();
        java.util.Locale locale7 = new java.util.Locale("ja", "");
        java.lang.String str8 = locale7.getScript();
        java.util.Locale locale10 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale13 = new java.util.Locale("zho", "fran\347ais");
        java.lang.String str14 = locale10.getDisplayCountry(locale13);
        java.lang.String str15 = locale7.getDisplayLanguage(locale10);
        java.lang.String str16 = locale0.getDisplayScript(locale10);
        java.lang.String str18 = locale10.getExtension('x');
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = locale21.getDisplayScript();
        java.lang.String str25 = locale10.getDisplayVariant(locale21);
        java.util.Locale locale28 = new java.util.Locale("zho", "fran\347ais");
        java.lang.String str29 = locale21.getDisplayLanguage(locale28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr" + "'", str1, "fr");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals(locale13.toString(), "zho_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese" + "'", str15, "Japanese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ja" + "'", str22, "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str23, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale28.toString(), "zho_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanese" + "'", str29, "Japanese");
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) 0.0f, (double) (-1L), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0, -1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((double) (byte) 100, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 100.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        java.io.PrintStream printStream63 = new java.io.PrintStream("japonais");
        printStream63.print(0.0f);
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet67 = locale66.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform(doubleArray74);
        java.io.PrintStream printStream76 = printStream63.format(locale66, "japonais", (java.lang.Object[]) complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        printStream76.print((java.lang.Object) doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer57.transform2(doubleArray80);
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform(doubleArray86);
        double[] doubleArray89 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray86, (double) (short) 1);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[NaN, NaN]");
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream33);
        printStream33.println("org.apache.commons.math.functionevaluationexception: hi!");
        java.util.Locale locale42 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale locale44 = locale42.stripExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        java.io.PrintStream printStream59 = new java.io.PrintStream("japonais");
        printStream59.print(0.0f);
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform(doubleArray70);
        java.io.PrintStream printStream72 = printStream59.format(locale62, "japonais", (java.lang.Object[]) complexArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray76);
        printStream72.print((java.lang.Object) doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer53.transform2(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer48.transform(complexArray80);
        java.lang.Throwable throwable87 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable87);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, (java.lang.Throwable) functionEvaluationException89);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "chinois", (java.lang.Object[]) complexArray81, (java.lang.Throwable) functionEvaluationException90);
        java.io.PrintStream printStream92 = printStream33.format(locale42, "Chinesisch", (java.lang.Object[]) complexArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = locale42.getUnicodeLocaleType("jpn");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: jpn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertEquals(locale42.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(printStream92);
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en-US" + "'", str2, "en-US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "anglais (Etats-Unis)" + "'", str3, "anglais (Etats-Unis)");
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print((double) 'u');
        printWriter1.print("");
        printWriter1.println((long) (byte) 100);
        printWriter1.print(35.0d);
        java.lang.Class<?> wildcardClass26 = printWriter1.getClass();
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "org.apache.commons.math.FunctionEvaluationException: ja_JP");
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: JA_JP");
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.flush();
        printStream5.println((long) (short) 100);
        printStream5.print("org.apache.commons.math.FunctionEvaluationException: Chinesisch");
        printStream5.print((float) 'u');
        printStream5.flush();
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u6cd5\u6587");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.toLanguageTag();
        boolean boolean4 = locale2.hasExtensions();
        boolean boolean5 = locale2.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale2.getDisplayVariant(locale7);
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale1.getDisplayScript(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale1.getUnicodeLocaleType("org.apache.commons.math.functionevaluationexception_DEU_zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.functionevaluationexception_DEU_zho");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder6 = builder4.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setLanguageTag("\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ??????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\u4e2d\u6587", "German (France,japonais)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: German (France,japonais)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.lang.String str4 = locale0.getISO3Language();
        java.lang.String str5 = locale0.getISO3Language();
        java.lang.String str6 = locale0.getLanguage();
        java.lang.String str7 = locale0.getISO3Country();
        java.lang.String str8 = locale0.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = locale0.getUnicodeLocaleType("\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ???");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fra" + "'", str4, "fra");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fr" + "'", str6, "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = printWriter1.append((java.lang.CharSequence) "Japanese");
        printWriter1.print((double) (-1L));
        org.junit.Assert.assertNotNull(printWriter8);
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.println("zh");
        printWriter1.flush();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter16.println(' ');
        printWriter16.println((long) (-1));
        printWriter16.println((java.lang.Object) "");
        boolean boolean23 = printWriter16.checkError();
        java.util.Locale locale24 = null;
        java.lang.String[] strArray28 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray28);
        java.io.PrintWriter printWriter30 = printWriter16.format(locale24, "zho", (java.lang.Object[]) strArray28);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter32.println(' ');
        printWriter32.println((long) (-1));
        printWriter32.println((java.lang.Object) "");
        char[] charArray45 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter32.println(charArray45);
        printWriter32.println(10);
        printWriter32.print('a');
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter52.println(' ');
        printWriter52.println((long) (-1));
        printWriter52.println((java.lang.Object) "");
        char[] charArray65 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter52.println(charArray65);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.Writer) printWriter52, true);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter70.print(0);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter74.println(' ');
        printWriter74.println((long) (-1));
        printWriter74.println((java.lang.Object) "");
        char[] charArray87 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter74.println(charArray87);
        printWriter70.println(charArray87);
        printWriter68.write(charArray87);
        printWriter32.write(charArray87, (int) (short) 0, 1);
        printWriter30.write(charArray87, 0, (int) (short) 0);
        printWriter1.print(charArray87);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(complexArray32);
        java.io.PrintStream printStream37 = new java.io.PrintStream("japonais");
        printStream37.print(0.0f);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform(doubleArray48);
        java.io.PrintStream printStream50 = printStream37.format(locale40, "japonais", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        printStream50.print((java.lang.Object) doubleArray54);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        boolean boolean59 = locale58.hasExtensions();
        java.lang.String str60 = locale58.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer62.transform(doubleArray67);
        java.io.PrintStream printStream69 = printStream50.printf(locale58, "GB", (java.lang.Object[]) complexArray68);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, (double) 0.0f);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException(throwable73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "FR", (java.lang.Object[]) complexArray71, throwable73);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform2(complexArray71);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform(univariateRealFunction78, 97.0d, 0.5403023058681398d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh" + "'", str60, "zh");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter22.println(' ');
        printWriter22.println((long) (-1));
        printWriter22.println((java.lang.Object) "");
        char[] charArray35 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter22.println(charArray35);
        printWriter22.println(10);
        printWriter22.print('a');
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println((long) (-1));
        printWriter42.println((java.lang.Object) "");
        char[] charArray55 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter42.println(charArray55);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter42, true);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter60.print(0);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter64.println(' ');
        printWriter64.println((long) (-1));
        printWriter64.println((java.lang.Object) "");
        char[] charArray77 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter64.println(charArray77);
        printWriter60.println(charArray77);
        printWriter58.write(charArray77);
        printWriter22.write(charArray77, (int) (short) 0, 1);
        printStream20.println(charArray77);
        printStream5.println(charArray77);
        boolean boolean86 = printStream5.checkError();
        printStream5.print((double) '#');
        printStream5.println(true);
        java.io.PrintWriter printWriter92 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable27);
        printStream1.print((java.lang.Object) throwable27);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(true);
        printStream31.println((float) (short) 10);
        printStream31.print((long) (short) 10);
        java.io.PrintStream printStream39 = printStream31.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(0.0f);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        java.io.PrintStream printStream54 = printStream41.format(locale44, "japonais", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray58);
        printStream54.print((java.lang.Object) doubleArray58);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.print(0);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.println((long) (-1));
        printWriter67.println((java.lang.Object) "");
        char[] charArray80 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter67.println(charArray80);
        printWriter63.println(charArray80);
        printStream54.print(charArray80);
        printStream31.print(charArray80);
        printStream1.print(charArray80);
        printStream1.print((double) (byte) 0);
        java.io.PrintWriter printWriter88 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) 100L, (double) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [100.0, 100.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayVariant();
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.getDefault(category6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer10.transform(complexArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer28.transform2(doubleArray51);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter57.println(' ');
        printWriter57.print((float) 10L);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter64.println(' ');
        printWriter64.println((long) (-1));
        printWriter64.println((java.lang.Object) "");
        printWriter64.println();
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str73 = locale72.getScript();
        java.util.Set<java.lang.String> strSet74 = locale72.getUnicodeLocaleKeys();
        java.lang.String str75 = locale72.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        java.io.PrintWriter printWriter82 = printWriter64.printf(locale72, "ja", (java.lang.Object[]) complexArray81);
        java.io.PrintWriter printWriter83 = printWriter57.format("", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer28.inversetransform(complexArray81);
        java.lang.Throwable throwable88 = null;
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException(throwable88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException90);
        java.lang.Object[] objArray92 = functionEvaluationException91.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray81, (java.lang.Throwable) functionEvaluationException91);
        org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer10.inversetransform(complexArray81);
        java.io.PrintStream printStream95 = printStream5.format(locale8, "allemand", (java.lang.Object[]) complexArray81);
        java.lang.String str96 = locale0.getDisplayName(locale8);
        java.lang.String str97 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertNotNull(complexArray94);
        org.junit.Assert.assertNotNull(printStream95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "fran\347ais" + "'", str96, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "fr" + "'", str97, "fr");
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream7.println("hi!");
        printStream7.println((int) '#');
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale12.getDisplayVariant();
        java.lang.String str14 = locale12.getDisplayVariant();
        printStream7.print((java.lang.Object) locale12);
        java.lang.String str16 = locale12.toString();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en_CA" + "'", str16, "en_CA");
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.println("zh");
        printWriter1.println((float) (short) 10);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter22.print((int) (short) -1);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("japonais");
        printStream20.print(0.0f);
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream20.format(locale23, "japonais", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray37);
        printStream33.print((java.lang.Object) doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer14.transform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer14.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer7.transform2(doubleArray45);
        double[] doubleArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray45, (double) 'u');
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.transform(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer54.inversetransform(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.transform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform(doubleArray74);
        double[] doubleArray77 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer69.inversetransform2(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer64.transform(complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer80.transform(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer64.inversetransform2(doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer0.transform2(doubleArray85);
        double[] doubleArray91 = new double[] { '#', (-1) };
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.inversetransform(doubleArray91);
        org.apache.commons.math.complex.Complex[] complexArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray94 = fastFourierTransformer0.transform2(complexArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 117.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 117.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray92);
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream(outputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.getDefault(category4);
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder0.removeUnicodeLocaleAttribute("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.MathException: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException(throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException5);
        java.lang.Throwable[] throwableArray7 = functionEvaluationException5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = functionEvaluationException5.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException5.addSuppressed((java.lang.Throwable) functionEvaluationException11);
        double double13 = functionEvaluationException5.getArgument();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        java.lang.Object[] objArray1 = null;
        java.lang.Throwable throwable7 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable7);
        java.lang.Object[] objArray9 = functionEvaluationException8.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("en-CA", (java.lang.Throwable) functionEvaluationException8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("Japanisch", objArray1, (java.lang.Throwable) functionEvaluationException8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale0.getDisplayScript(locale5);
        java.util.Locale.setDefault(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinois" + "'", str3, "chinois");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u6587" + "'", str6, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Franz\366sisch", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.4412118677491172d, 2.319776824715853d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd", "org.apache.commons.math.MathException: fr");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: fr");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        java.lang.String[] strArray11 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray11);
        double double13 = functionEvaluationException12.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, "und", (java.lang.Throwable) functionEvaluationException12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray6, (java.lang.Throwable) functionEvaluationException12);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray6);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("francese", "GB");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: GB");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer10.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, (double) (byte) 10);
        java.io.PrintWriter printWriter21 = printWriter1.printf("ja", (java.lang.Object[]) complexArray20);
        printWriter21.flush();
        printWriter21.write((int) 'u');
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.transform(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray7);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.transform2(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer1.transform(complexArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        double[] doubleArray25 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer17.inversetransform2(doubleArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream("japonais");
        printStream28.print(0.0f);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        java.io.PrintStream printStream41 = printStream28.format(locale31, "japonais", (java.lang.Object[]) complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        printStream41.print((java.lang.Object) doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer17.inversetransform(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray53 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, (double) 10.0f);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer1.inversetransform(complexArray49);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.functionevaluationexception_DEU_zho", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray54, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        java.util.Locale locale3 = new java.util.Locale("ja_JP", "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)", "fr-fr");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)_fr-fr");
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((double) (short) 100);
        boolean boolean6 = printWriter1.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter1.print((float) (-1L));
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = locale11.getDisplayCountry(locale12);
        boolean boolean15 = locale12.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        double[] doubleArray31 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer23.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer18.transform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer18.inversetransform(complexArray38);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException(throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException45);
        java.lang.Throwable[] throwableArray47 = functionEvaluationException45.getSuppressed();
        java.lang.Throwable[] throwableArray48 = functionEvaluationException45.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException45.addSuppressed((java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray39, (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.complex.Complex[] complexArray55 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray39, 100.0d);
        java.io.PrintWriter printWriter56 = printWriter1.format(locale12, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray39);
        java.lang.CharSequence charSequence57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter60 = printWriter56.append(charSequence57, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 97");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(printWriter56);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale.setDefault(category8, locale13);
        java.util.Locale.Builder builder16 = builder4.setLocale(locale13);
        java.util.Locale locale17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder16.setExtension(' ', "\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("und");
        printWriter1.println((long) 'a');
        printWriter1.println((float) '#');
        printWriter1.close();
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("anglais", (double) 1L);
        double double3 = languageRange2.getWeight();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(0.0f);
        printStream8.println((java.lang.Object) "\u30c9\u30a4\u30c4\u8a9e");
        printStream8.println((float) (-1L));
        boolean boolean15 = languageRange2.equals((java.lang.Object) printStream8);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.asin();
        boolean boolean9 = complex7.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex13.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex17 = complex7.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        double double21 = complex20.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex5.negate();
        org.apache.commons.math.complex.Complex complex14 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex5.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex5.acos();
        org.apache.commons.math.complex.Complex complex17 = complex5.asin();
        org.apache.commons.math.complex.Complex complex18 = complex5.exp();
        org.apache.commons.math.complex.Complex complex19 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        double[] doubleArray65 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.inversetransform2(doubleArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform2(doubleArray65);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, (double) (-1L));
        double[] doubleArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, 4.1132503787829275d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[4.1132503787829275]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[4.1132503787829275]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[4.1132503787829275]");
    }
}

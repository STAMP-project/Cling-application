import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test06001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06001");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("englisch");
    }

    @Test
    public void test06002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06002");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        printStream25.print((float) 'u');
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter32 = printWriter30.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer39.transform(doubleArray44);
        double[] doubleArray47 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.inversetransform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer34.transform(complexArray48);
        java.io.PrintWriter printWriter50 = printWriter30.format("ja", (java.lang.Object[]) complexArray48);
        java.io.PrintStream printStream51 = printStream25.printf("", (java.lang.Object[]) complexArray48);
        java.io.PrintStream printStream53 = printStream25.append((java.lang.CharSequence) "Franz\366sisch");
        printStream25.print((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test06003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06003");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.println(' ');
        printWriter35.println((long) (-1));
        printWriter35.println((java.lang.Object) "");
        char[] charArray48 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter35.println(charArray48);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter35, true);
        printWriter35.println(10.0f);
        java.io.PrintWriter printWriter55 = printWriter35.append((java.lang.CharSequence) "Chinese");
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean60 = printWriter59.checkError();
        java.io.PrintWriter printWriter62 = printWriter59.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.Writer) printWriter59);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter65.println(' ');
        printWriter65.println((long) (-1));
        printWriter65.println((java.lang.Object) "");
        char[] charArray78 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter65.println(charArray78);
        printWriter59.write(charArray78);
        printWriter57.write(charArray78);
        printWriter35.write(charArray78);
        printStream14.println(charArray78);
        boolean boolean84 = printStream14.checkError();
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.OutputStream) printStream14);
        java.io.PrintWriter printWriter87 = new java.io.PrintWriter((java.io.Writer) printWriter85, false);
        char[] charArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter85.print(charArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test06004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06004");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex5.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex14.cosh();
        double double19 = complex18.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex5.add(complex18);
        double double21 = complex18.abs();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex27 = complex25.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex28.divide(complex33);
        double double35 = complex33.getReal();
        org.apache.commons.math.complex.Complex complex36 = complex26.divide(complex33);
        org.apache.commons.math.complex.Complex complex37 = complex18.add(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.asin();
        org.apache.commons.math.complex.Complex complex39 = complex37.acos();
        double double40 = complex39.abs();
        org.apache.commons.math.complex.Complex complex41 = complex39.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5403023058681398d + "'", double21 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.7350525871447157d + "'", double35 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test06005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06005");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale locale13 = new java.util.Locale("ja", "");
        java.lang.String str14 = locale10.getDisplayLanguage(locale13);
        java.lang.String str15 = locale8.getDisplayLanguage(locale10);
        java.lang.String str16 = locale5.getDisplayLanguage(locale8);
        java.util.Locale locale20 = new java.util.Locale("org.apache.commons.math.MathException: hi!", "United States", "jpn");
        java.lang.String str21 = locale5.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str14, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Franz\366sisch" + "'", str15, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertEquals(locale20.toString(), "org.apache.commons.math.mathexception: hi!_UNITED STATES_jpn");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "French" + "'", str21, "French");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UNITED STATES" + "'", str22, "UNITED STATES");
    }

    @Test
    public void test06006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06006");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print('a');
        java.lang.Object[] objArray21 = null;
        java.io.PrintWriter printWriter22 = printWriter1.format("und", objArray21);
        printWriter22.println("org.apache.commons.math.FunctionEvaluationException");
        printWriter22.print((float) (-1L));
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test06007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06007");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(true);
        boolean boolean6 = printStream3.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        boolean boolean9 = printStream3.checkError();
        java.io.PrintStream printStream11 = printStream3.append((java.lang.CharSequence) "zh");
        printStream3.println((long) (-1));
        printStream3.print((int) (byte) 100);
        printStream3.print("org.apache.commons.math.MathException");
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream20 = printStream3.format("de_ALLEMAND_zh", (java.lang.Object[]) strArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray29);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer23.transform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer23.inversetransform(complexArray39);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException(throwable44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException46);
        java.lang.String str48 = functionEvaluationException46.getPattern();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("japonais", (java.lang.Object[]) complexArray40, (java.lang.Throwable) functionEvaluationException46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, (java.lang.Throwable) functionEvaluationException46);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fr", (java.lang.Object[]) strArray19, (java.lang.Throwable) functionEvaluationException46);
        java.lang.Object[] objArray52 = functionEvaluationException46.getArguments();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", objArray52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
    }

    @Test
    public void test06008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06008");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Canada");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter3.write((int) 'u');
    }

    @Test
    public void test06009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06009");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        double double29 = complex27.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test06010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06010");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex9.multiply(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex11.atan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.acos();
        org.apache.commons.math.complex.Complex complex19 = complex11.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex4.divide(complex19);
        org.apache.commons.math.complex.Complex complex24 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean25 = complex24.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex26.exp();
        org.apache.commons.math.complex.Complex complex30 = complex24.subtract(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex30.exp();
        org.apache.commons.math.complex.Complex complex32 = complex21.multiply(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex21.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.atan();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = complex35.sinh();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex40 = complex38.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex33.add(complex39);
        boolean boolean42 = complex39.isNaN();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex44 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex46 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex43.multiply(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex50 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex52.sinh();
        org.apache.commons.math.complex.Complex complex54 = complex50.multiply(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex53.log();
        org.apache.commons.math.complex.Complex complex56 = complex43.divide(complex53);
        org.apache.commons.math.complex.Complex complex57 = complex43.cos();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.getImaginary();
        double double61 = complex58.abs();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.getImaginary();
        org.apache.commons.math.complex.Complex complex65 = complex58.add(complex62);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex67 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex66.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex62.subtract(complex66);
        org.apache.commons.math.complex.Complex complex70 = complex43.pow(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex39.multiply(complex43);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test06011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06011");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("kor", throwable1);
    }

    @Test
    public void test06012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06012");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category0, locale3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getDisplayCountry();
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale9.getDisplayVariant();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getCountry();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer16.transform2(doubleArray39);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.println(' ');
        printWriter45.print((float) 10L);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter52.println(' ');
        printWriter52.println((long) (-1));
        printWriter52.println((java.lang.Object) "");
        printWriter52.println();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getScript();
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleKeys();
        java.lang.String str63 = locale60.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        java.io.PrintWriter printWriter70 = printWriter52.printf(locale60, "ja", (java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter71 = printWriter45.format("", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer16.inversetransform(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer73.transform(doubleArray78);
        double[] doubleArray81 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer73.inversetransform2(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer16.inversetransform2(doubleArray81);
        java.io.PrintStream printStream84 = printStream6.format(locale9, "Chinesisch", (java.lang.Object[]) complexArray83);
        java.lang.String str85 = locale9.getDisplayVariant();
        java.lang.String str87 = locale9.getExtension('x');
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale89 = java.util.Locale.getDefault(category0);
        java.util.Locale locale90 = java.util.Locale.getDefault(category0);
        java.util.Locale locale91 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder92 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder93 = builder92.clearExtensions();
        java.util.Locale.Builder builder95 = builder93.setScript("");
        java.util.Locale.Builder builder96 = builder93.clearExtensions();
        java.util.Locale locale97 = builder93.build();
        java.util.Locale.setDefault(category0, locale97);
        java.lang.String str99 = locale97.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "fr");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(locale97);
        org.junit.Assert.assertEquals(locale97.toString(), "");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test06013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06013");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("United Kingdom");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test06014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06014");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter4 = printWriter2.append((java.lang.CharSequence) "");
        printWriter2.println(false);
        printWriter2.print((float) (byte) 1);
        printWriter2.print((long) (byte) 0);
        java.util.Locale locale11 = null;
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter14.println(' ');
        printWriter14.println((long) (-1));
        printWriter14.println((java.lang.Object) "");
        char[] charArray27 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter14.println(charArray27);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter14, true);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getVariant();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleAttributes();
        java.util.Locale locale34 = locale31.stripExtensions();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale31.getDisplayLanguage(locale35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        java.io.PrintStream printStream44 = new java.io.PrintStream("japonais");
        printStream44.print(0.0f);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        java.io.PrintStream printStream57 = printStream44.format(locale47, "japonais", (java.lang.Object[]) complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray61);
        printStream57.print((java.lang.Object) doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer38.transform2(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer66.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer38.inversetransform(complexArray70);
        java.io.PrintWriter printWriter72 = printWriter14.format(locale31, "de", (java.lang.Object[]) complexArray71);
        java.io.PrintWriter printWriter73 = printWriter2.printf(locale11, "", (java.lang.Object[]) complexArray71);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray71);
        java.lang.Object[] objArray75 = mathException74.getArguments();
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japanese" + "'", str36, "Japanese");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(objArray75);
    }

    @Test
    public void test06015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06015");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale13.getVariant();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = locale13.stripExtensions();
        boolean boolean17 = locale16.hasExtensions();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        double[] doubleArray34 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer21.transform(complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer21.inversetransform(complexArray41);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException(throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException48);
        java.lang.Throwable[] throwableArray50 = functionEvaluationException48.getSuppressed();
        java.lang.Throwable[] throwableArray51 = functionEvaluationException48.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException48.addSuppressed((java.lang.Throwable) functionEvaluationException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray42, (java.lang.Throwable) functionEvaluationException54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray42);
        java.io.PrintStream printStream58 = printStream5.printf(locale16, "Franz\366sisch", (java.lang.Object[]) complexArray42);
        printStream58.println(true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printStream58);
    }

    @Test
    public void test06016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06016");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        printStream14.write((int) '#');
        boolean boolean24 = printStream14.checkError();
        java.io.PrintStream printStream26 = printStream14.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: hi!");
        printStream14.write((int) (byte) 1);
        printStream14.print((double) (short) 1);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream14, true);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.println((long) (-1));
        printWriter34.println((java.lang.Object) "");
        printWriter34.println(10L);
        printWriter34.println(true);
        printWriter34.write((int) (short) -1);
        printStream14.print((java.lang.Object) printWriter34);
        printStream14.println();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test06017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06017");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.util.Locale locale5 = new java.util.Locale("ja", "");
        java.lang.String str6 = locale2.getDisplayLanguage(locale5);
        java.lang.String str7 = locale0.getDisplayLanguage(locale2);
        java.lang.String str8 = locale2.getDisplayName();
        java.io.PrintStream printStream10 = new java.io.PrintStream("japonais");
        printStream10.print(true);
        boolean boolean13 = printStream10.checkError();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream10, true);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        double[] doubleArray31 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer23.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer18.transform(complexArray32);
        java.io.PrintStream printStream34 = printStream10.format(locale16, "fr", (java.lang.Object[]) complexArray33);
        java.util.Set<java.lang.String> strSet35 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale2.getDisplayCountry(locale16);
        java.util.Locale locale38 = new java.util.Locale("hi!");
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = locale38.getDisplayScript();
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getCountry();
        java.lang.String str45 = locale43.getDisplayCountry();
        java.util.Locale.setDefault(category42, locale43);
        java.util.Locale locale47 = java.util.Locale.getDefault(category42);
        java.util.Locale locale48 = java.util.Locale.getDefault(category42);
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleKeys();
        java.lang.String str50 = locale38.getDisplayCountry(locale48);
        boolean boolean51 = locale48.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = locale52.getDisplayScript();
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleKeys();
        java.lang.String str56 = locale52.getISO3Language();
        java.lang.String str57 = locale52.getISO3Language();
        java.lang.String str58 = locale52.getVariant();
        java.lang.String str59 = locale48.getDisplayVariant(locale52);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter63 = printWriter61.append((java.lang.CharSequence) "");
        printWriter63.println('a');
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = locale66.getISO3Language();
        printWriter63.print((java.lang.Object) locale66);
        java.lang.String str70 = locale66.getScript();
        java.lang.String str71 = locale66.toLanguageTag();
        java.util.Locale locale72 = locale66.stripExtensions();
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale73.getISO3Country();
        java.lang.String str75 = locale73.getDisplayScript();
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleKeys();
        java.lang.String str77 = locale73.getISO3Language();
        java.lang.String str78 = locale73.getISO3Language();
        java.lang.String str79 = locale73.getLanguage();
        java.lang.String str80 = locale66.getDisplayScript(locale73);
        java.lang.String str81 = locale52.getDisplayScript(locale66);
        java.lang.String str82 = locale16.getDisplayLanguage(locale66);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str6, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Franz\366sisch" + "'", str7, "Franz\366sisch");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "allemand (Allemagne)" + "'", str8, "allemand (Allemagne)");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Germany" + "'", str36, "Germany");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.FORMAT + "'", category42.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fra" + "'", str56, "fra");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fra" + "'", str57, "fra");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fra" + "'", str68, "fra");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fr" + "'", str71, "fr");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fra" + "'", str77, "fra");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fra" + "'", str78, "fra");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "fr" + "'", str79, "fr");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "anglais" + "'", str82, "anglais");
    }

    @Test
    public void test06018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder8 = builder4.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("japonais");
        java.util.Locale locale13 = new java.util.Locale("fran\347ais", "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: franc?ais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale13.toString(), "fran\347ais");
    }

    @Test
    public void test06019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06019");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setRegion("\u30d5\u30e9\u30f3\u30b9");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test06020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06020");
        java.util.Locale locale2 = new java.util.Locale("zh", "japonais");
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "zh_JAPONAIS");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinois (JAPONAIS)" + "'", str3, "chinois (JAPONAIS)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JAPONAIS" + "'", str4, "JAPONAIS");
    }

    @Test
    public void test06021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06021");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German (France,japonais)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=german (france,japonais)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06022");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.println((long) (byte) 0);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print((double) (short) 1);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform(doubleArray25);
        double[] doubleArray28 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer20.inversetransform2(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer15.transform(complexArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer31.inversetransform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer15.inversetransform(complexArray35);
        java.lang.Throwable throwable40 = null;
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException(throwable40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException42);
        java.lang.Throwable[] throwableArray44 = functionEvaluationException42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = functionEvaluationException42.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException42.addSuppressed((java.lang.Throwable) functionEvaluationException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray36, (java.lang.Throwable) functionEvaluationException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray36);
        java.io.PrintStream printStream52 = printStream1.printf("fran\347ais", (java.lang.Object[]) complexArray36);
        java.io.PrintStream printStream54 = printStream1.append((java.lang.CharSequence) "de_DE");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test06023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06023");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException(throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException14);
        java.lang.Object[] objArray16 = functionEvaluationException15.getArguments();
        java.io.PrintStream printStream17 = printStream1.printf("org.apache.commons.math.FunctionEvaluationException: hi!", objArray16);
        printStream1.print((float) (byte) 0);
        printStream1.print((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test06024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06024");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u30d5\u30e9\u30f3\u30b9");
    }

    @Test
    public void test06025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06025");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print('a');
        char[] charArray20 = new char[] {};
        printWriter1.println(charArray20);
        printWriter1.print((int) (short) -1);
        printWriter1.println((long) '#');
        java.io.PrintWriter printWriter27 = printWriter1.append('a');
        printWriter27.write("deu", 10, (int) (short) 0);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(printWriter27);
    }

    @Test
    public void test06026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06026");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr-FR");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale15 = java.util.Locale.getDefault(category10);
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = locale15.getDisplayScript(locale17);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.println(false);
        printWriter24.print("FR");
        printWriter24.write("und");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean42 = printWriter41.checkError();
        java.util.Locale locale43 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray50);
        java.lang.Object[] objArray52 = mathException51.getArguments();
        java.io.PrintWriter printWriter53 = printWriter41.printf(locale43, "zho", objArray52);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException59);
        double double61 = functionEvaluationException59.getArgument();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray52, (java.lang.Throwable) functionEvaluationException59);
        java.io.PrintWriter printWriter63 = printWriter24.format(locale34, "fra", objArray52);
        java.io.PrintStream printStream64 = printStream9.format(locale15, "\u30d5\u30e9\u30f3\u30b9\u8a9e", objArray52);
        printStream64.println('4');
        printStream64.close();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer71.transform(doubleArray76);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray76);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer70.transform2(doubleArray76);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer80.inversetransform2(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer70.transform(complexArray84);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer86 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray91 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer86.transform(doubleArray91);
        double[] doubleArray94 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer86.inversetransform2(doubleArray94);
        org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer70.transform2(doubleArray94);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fr", (java.lang.Object[]) complexArray96);
        java.io.PrintStream printStream98 = printStream64.printf("", (java.lang.Object[]) complexArray96);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(printStream98);
    }

    @Test
    public void test06027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06027");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray0, 0.7071067811865475d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06028");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.print(0);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter39.println(' ');
        printWriter39.println((long) (-1));
        printWriter39.println((java.lang.Object) "");
        char[] charArray52 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter39.println(charArray52);
        printWriter35.println(charArray52);
        // The following exception was thrown during execution in test generation
        try {
            printWriter33.write(charArray52, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06029");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder6 = builder2.removeUnicodeLocaleAttribute("chinois");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter8.println(' ');
        printWriter8.println((long) (-1));
        printWriter8.println((java.lang.Object) "");
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream20.print((float) (short) -1);
        printStream20.print('a');
        printStream20.println();
        printStream20.print("hi!");
        printStream20.println((-1L));
        printStream20.println((double) 0.0f);
        printStream20.close();
        printWriter8.print((java.lang.Object) printStream20);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getVariant();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = locale34.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale34.getDisplayLanguage(locale38);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter46 = printWriter44.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        double[] doubleArray61 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer53.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer48.transform(complexArray62);
        java.io.PrintWriter printWriter64 = printWriter44.format("ja", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable[] throwableArray72 = functionEvaluationException70.getSuppressed();
        java.lang.Throwable[] throwableArray73 = functionEvaluationException70.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException70.addSuppressed((java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException76);
        java.io.PrintStream printStream79 = printStream20.printf(locale38, "org.apache.commons.math.FunctionEvaluationException: FR", (java.lang.Object[]) complexArray62);
        java.util.Locale.Builder builder80 = builder2.setLocale(locale38);
        java.util.Locale.Builder builder81 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder84 = builder2.setUnicodeLocaleKeyword("org.apache.commons.math.MathException: de", "United States");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: org.apache.commons.math.MathException: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanese" + "'", str39, "Japanese");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test06030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06030");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println();
        java.io.PrintStream printStream57 = new java.io.PrintStream("japonais");
        printStream57.print(0.0f);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        java.io.PrintStream printStream70 = printStream57.format(locale60, "japonais", (java.lang.Object[]) complexArray69);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray69, throwable71);
        java.io.PrintStream printStream73 = printStream1.format("ja", (java.lang.Object[]) complexArray69);
        printStream73.print(true);
        printStream73.print(false);
        printStream73.print('4');
        printStream73.print(false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printStream73);
    }

    @Test
    public void test06031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06031");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter10.flush();
        printWriter10.print((float) (byte) 10);
        printWriter10.print((float) 0L);
        printWriter10.print((float) 0L);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter22 = printWriter10.append((java.lang.CharSequence) "org.apache.commons.math.MathException: Evaluation failed for argument = -1", (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06032");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex8.acos();
        org.apache.commons.math.complex.Complex complex14 = complex8.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex0.pow(complex15);
        org.apache.commons.math.complex.Complex complex21 = complex15.sqrt1z();
        org.apache.commons.math.complex.Complex complex22 = complex21.negate();
        boolean boolean23 = complex22.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06033");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("und");
        printWriter1.println((float) (short) 0);
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(0.0f);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = complex10.cosh();
        printStream5.println((java.lang.Object) complex10);
        java.io.PrintStream printStream15 = new java.io.PrintStream("japonais");
        printStream15.print(true);
        printStream15.println((float) (short) 10);
        printStream15.print((long) (short) 10);
        java.io.PrintStream printStream23 = printStream15.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.print(0.0f);
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        java.io.PrintStream printStream38 = printStream25.format(locale28, "japonais", (java.lang.Object[]) complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray42);
        printStream38.print((java.lang.Object) doubleArray42);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter47.print(0);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter51.println(' ');
        printWriter51.println((long) (-1));
        printWriter51.println((java.lang.Object) "");
        char[] charArray64 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter51.println(charArray64);
        printWriter47.println(charArray64);
        printStream38.print(charArray64);
        printStream15.print(charArray64);
        printStream5.print(charArray64);
        printWriter1.write(charArray64);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06034");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (-1.0d), (double) 'x', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06035");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex3.exp();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex8.add(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        boolean boolean16 = complex14.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06036");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer21.inversetransform(doubleArray27);
        double[] doubleArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray27, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.transform(doubleArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer33.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer33.transform2(complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        double[] doubleArray59 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer51.inversetransform2(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer33.transform2(doubleArray59);
        double[] doubleArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray59, (-1.0d));
        double[] doubleArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray59, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.transform(doubleArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform(doubleArray72);
        double[] doubleArray75 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer67.inversetransform2(doubleArray75);
        double[] doubleArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray75, (double) 1);
        double[] doubleArray80 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray78, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.inversetransform2(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[97.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[97.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[97.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-0.0]");
        org.junit.Assert.assertNotNull(complexArray81);
    }

    @Test
    public void test06037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06037");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setLanguageTag("gb");
        java.util.Locale.Builder builder11 = builder6.setScript("");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getISO3Language();
        java.util.Locale.Builder builder15 = builder6.setLocale(locale12);
        java.lang.String str16 = locale12.getVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06038");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex5.acos();
        org.apache.commons.math.complex.Complex complex8 = complex5.acos();
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test06039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06039");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale6 = new java.util.Locale("org.apache.commons.math.functionevaluationexception_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FR");
        java.lang.String str7 = locale0.getDisplayCountry(locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertEquals(locale6.toString(), "org.apache.commons.math.functionevaluationexception_org.apache.commons.math.functionevaluationexception: org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test06040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06040");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex5.negate();
        org.apache.commons.math.complex.Complex complex14 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex5.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test06041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06041");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "chine");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chine");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06042");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print((double) 'u');
        printWriter1.print("");
        printWriter1.println("\u65e5\u672c\u8a9e");
        printWriter1.print((double) '#');
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06043");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println('#');
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream12.println(10.0d);
        printStream12.print(97.0d);
        java.io.PrintStream printStream18 = new java.io.PrintStream("japonais");
        printStream18.print(0.0f);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream18, true);
        printStream22.print((float) (short) -1);
        printStream22.print('a');
        printStream22.println();
        printStream22.println((float) 1);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean32 = printWriter31.checkError();
        java.io.PrintWriter printWriter34 = printWriter31.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        printWriter31.print((float) (short) -1);
        printWriter31.println("ja_JP");
        printWriter31.println(false);
        java.io.PrintStream printStream43 = new java.io.PrintStream("japonais");
        printStream43.println((long) 10);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter47.println(' ');
        printWriter47.close();
        printWriter47.print((double) 1L);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter54.println(' ');
        printWriter54.println((long) (-1));
        printWriter54.println((java.lang.Object) "");
        char[] charArray67 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter54.println(charArray67);
        printWriter54.println(10);
        printWriter54.print('a');
        char[] charArray73 = new char[] {};
        printWriter54.println(charArray73);
        printWriter47.write(charArray73);
        printStream43.println(charArray73);
        printWriter31.println(charArray73);
        printStream22.print(charArray73);
        printStream12.print(charArray73);
        printStream12.println((long) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[]");
    }

    @Test
    public void test06044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06044");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "FR");
    }

    @Test
    public void test06045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06045");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform2(complexArray16);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter19.println(' ');
        printWriter19.print((float) 10L);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter26.println(' ');
        printWriter26.println((long) (-1));
        printWriter26.println((java.lang.Object) "");
        printWriter26.println();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleKeys();
        java.lang.String str37 = locale34.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        java.io.PrintWriter printWriter44 = printWriter26.printf(locale34, "ja", (java.lang.Object[]) complexArray43);
        java.io.PrintWriter printWriter45 = printWriter19.format("", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer0.inversetransform(complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.inversetransform2(complexArray52);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.inversetransform2(univariateRealFunction55, 4.1132503787829275d, (-1.833789474235432d), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [4.1132503787829275, -1.833789474235432]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
    }

    @Test
    public void test06046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06046");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        java.io.PrintStream printStream29 = printStream16.format(locale19, "japonais", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        printStream29.print((java.lang.Object) doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer10.transform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer10.transform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer0.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer46.transform(doubleArray51);
        double[] doubleArray54 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.inversetransform2(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer46.transform(complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer0.inversetransform(complexArray65);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer0.transform(univariateRealFunction68, 117.0d, 0.49536728921867335d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
    }

    @Test
    public void test06047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06047");
        java.util.Locale locale3 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e", "org.apache.commons.math.MathException: hi!", "\u975e\u78ba\u5b9a (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)");
        java.lang.String str4 = locale3.getCountry();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e\u975e\u78ba\u5b9a (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: HI!" + "'", str4, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: HI!");
    }

    @Test
    public void test06048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06048");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex12.log();
        org.apache.commons.math.complex.Complex complex16 = complex9.subtract(complex15);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test06049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06049");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u4e2d\u6587", (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06050");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer10.inversetransform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray18, (double) (byte) 10);
        java.io.PrintWriter printWriter21 = printWriter1.printf("ja", (java.lang.Object[]) complexArray20);
        printWriter1.print(0.0f);
        boolean boolean24 = printWriter1.checkError();
        boolean boolean25 = printWriter1.checkError();
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06051");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println((long) (-1));
        boolean boolean12 = printStream1.checkError();
        printStream1.flush();
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        java.io.PrintStream printStream17 = printStream15.append('u');
        printStream17.print((double) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test06052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06052");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale11 = new java.util.Locale("ja", "");
        java.lang.String str12 = locale11.getScript();
        java.util.Locale.Builder builder13 = builder8.setLocale(locale11);
        java.lang.String str14 = locale1.getDisplayName(locale11);
        java.util.Locale locale15 = locale11.stripExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str14, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
    }

    @Test
    public void test06053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06053");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getDisplayScript();
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.lang.String str13 = locale9.getISO3Language();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.toLanguageTag();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getISO3Language();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.toLanguageTag();
        boolean boolean26 = locale24.hasExtensions();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getISO3Country();
        java.lang.String str29 = locale27.getDisplayScript();
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayCountry();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = locale36.getDisplayScript();
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        java.lang.String str40 = locale36.getISO3Language();
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale9, locale14, locale15, locale19, locale20, locale23, locale24, locale27, locale31, locale32, locale34, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale locale44 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList46, strMap47);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getCountry();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.lang.String str52 = locale49.getISO3Language();
        java.util.Locale.setDefault(locale49);
        java.lang.String str54 = locale49.getScript();
        java.util.Set<java.lang.String> strSet55 = locale49.getUnicodeLocaleAttributes();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.parse("de", strMap57);
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder59.clear();
        java.util.Locale locale61 = builder60.build();
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList58, (java.util.Collection<java.lang.String>) strSet62, filteringMode63);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strSet55, filteringMode63);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ja" + "'", str21, "ja");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fra" + "'", str52, "fra");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode63.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList65);
    }

    @Test
    public void test06054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06054");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.MathException: fr", "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", "CA");
        org.junit.Assert.assertEquals(locale3.toString(), "org.apache.commons.math.mathexception: fr_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION: FR_CA");
    }

    @Test
    public void test06055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06055");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Japanese");
    }

    @Test
    public void test06056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06056");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = -1", "\u30ab\u30ca\u30c0");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30ab\u30ca\u30c0");
    }

    @Test
    public void test06057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06057");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.inversetransform(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        double[] doubleArray41 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer33.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.inversetransform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer54.transform2(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer44.transform(doubleArray60);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray60, 74.68593339875962d);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.transform2(doubleArray67);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform2(univariateRealFunction69, (double) 10, (double) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2614.0076689565867, 7468.593339875962, 0.0, 3883.6685367355]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[2614.0076689565867, 7468.593339875962, 0.0, 3883.6685367355]");
        org.junit.Assert.assertNotNull(complexArray68);
    }

    @Test
    public void test06058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06058");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer3.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer8.transform2(complexArray24);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter27.println(' ');
        printWriter27.print((float) 10L);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.println((long) (-1));
        printWriter34.println((java.lang.Object) "");
        printWriter34.println();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getScript();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = locale42.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        java.io.PrintWriter printWriter52 = printWriter34.printf(locale42, "ja", (java.lang.Object[]) complexArray51);
        java.io.PrintWriter printWriter53 = printWriter27.format("", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer8.inversetransform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer3.transform2(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray57 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray55, (double) (byte) 100);
        java.io.PrintStream printStream62 = new java.io.PrintStream("japonais");
        printStream62.print(true);
        boolean boolean65 = printStream62.checkError();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream62, true);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer70.inversetransform2(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform(doubleArray80);
        double[] doubleArray83 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer75.inversetransform2(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer70.transform(complexArray84);
        java.io.PrintStream printStream86 = printStream62.format(locale68, "fr", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "\u30c9\u30a4\u30c4\u8a9e", (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("en", (java.lang.Object[]) complexArray55, (java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(1.8011719796199461d, (java.lang.Throwable) mathException89);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("German (ALLEMAND,zh)", (java.lang.Throwable) functionEvaluationException90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(printStream86);
    }

    @Test
    public void test06059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06059");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("japonais", "etats-unis");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: japonais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test06060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06060");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("deu", "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06061");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter17 = printWriter15.append('x');
        printWriter17.println((double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        printWriter17.print((java.lang.Object) fastFourierTransformer20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        double[] doubleArray34 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.inversetransform2(doubleArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream("japonais");
        printStream37.print(0.0f);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform(doubleArray48);
        java.io.PrintStream printStream50 = printStream37.format(locale40, "japonais", (java.lang.Object[]) complexArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray54);
        printStream50.print((java.lang.Object) doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer26.inversetransform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray60 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray58, (double) (byte) -1);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer20.transform2(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        double[] doubleArray71 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.inversetransform2(doubleArray71);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform(doubleArray79);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer73.inversetransform2(doubleArray79);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer63.transform(complexArray82);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer85 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray90 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer85.transform(doubleArray90);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer84.inversetransform(doubleArray90);
        double[] doubleArray94 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray90, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer63.transform(doubleArray90);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray90);
        org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer20.inversetransform2(doubleArray90);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray95);
        org.junit.Assert.assertNotNull(complexArray97);
    }

    @Test
    public void test06062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06062");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder3.setVariant("");
        java.util.Locale locale13 = builder3.build();
        java.lang.String str14 = locale13.getDisplayName();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fran\347ais" + "'", str14, "fran\347ais");
    }

    @Test
    public void test06063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06063");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean3 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex4.exp();
        org.apache.commons.math.complex.Complex complex8 = complex2.subtract(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.negate();
        boolean boolean15 = complex11.equals((java.lang.Object) complex13);
        org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex13);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        double double20 = complex17.abs();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex17.add(complex21);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = complex29.acos();
        org.apache.commons.math.complex.Complex complex33 = complex25.add(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex13.add(complex25);
        org.apache.commons.math.complex.Complex complex35 = complex13.cosh();
        double double36 = complex13.abs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test06064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06064");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getCountry();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale4.getDisplayName(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder2.setLanguageTag("Japanese");
        java.util.Locale.Builder builder13 = builder2.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.removeUnicodeLocaleAttribute("org.apache.commons.math.functionevaluationexception_DEU_zho");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.functionevaluationexception_DEU_zho [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06065");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        printStream1.print((double) 100);
        printStream1.print((int) (short) 0);
        printStream1.println((int) (byte) 1);
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream35.write(0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test06066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06066");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.inversetransform(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("japonais");
        printStream24.print(0.0f);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        java.io.PrintStream printStream37 = printStream24.format(locale27, "japonais", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        printStream37.print((java.lang.Object) doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer18.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer18.inversetransform(complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer52.transform2(doubleArray58);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer18.transform(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        double[] doubleArray71 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer18.inversetransform2(doubleArray71);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray71);
        double[] doubleArray76 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, (double) 1L);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer0.transform2(doubleArray71);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer0.transform2(univariateRealFunction78, 0.18781088919991634d, 0.0d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray77);
    }

    @Test
    public void test06067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06067");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.parse("FR", strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.parse("FR", strMap21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap23);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str30 = locale27.getDisplayScript();
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList24, (java.util.Collection<java.lang.String>) strSet31, filteringMode32);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList33, filteringMode34);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray41 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, strMap45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, strMap56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.parse("FR", strMap59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strList67);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strList67);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags(languageRangeList57, (java.util.Collection<java.lang.String>) strList67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.parse("FR", strMap73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList74, strMap75);
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.lang.String str78 = locale77.getISO3Country();
        java.util.Locale locale79 = java.util.Locale.JAPANESE;
        java.lang.String str80 = locale79.getLanguage();
        java.lang.String str81 = locale77.getDisplayName(locale79);
        java.lang.String str82 = locale79.getDisplayScript();
        java.util.Set<java.lang.String> strSet83 = locale79.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags(languageRangeList76, (java.util.Collection<java.lang.String>) strSet83, filteringMode84);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList71, filteringMode84);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strList35, filteringMode84);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.lang.String str89 = locale88.toLanguageTag();
        java.util.Set<java.lang.String> strSet90 = locale88.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet90, filteringMode91);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ja" + "'", str28, "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str29, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode34.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(languageRangeList74);
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ja" + "'", str80, "ja");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str81, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ko" + "'", str89, "ko");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode91.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList92);
    }

    @Test
    public void test06068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06068");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex5.atan();
        org.apache.commons.math.complex.Complex complex9 = complex8.exp();
        org.apache.commons.math.complex.Complex complex10 = complex8.sin();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex16 = complex14.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex15.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.log();
        org.apache.commons.math.complex.Complex complex19 = complex17.sin();
        org.apache.commons.math.complex.Complex complex20 = complex17.sin();
        org.apache.commons.math.complex.Complex complex21 = complex10.add(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex23 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex22.exp();
        org.apache.commons.math.complex.Complex complex25 = complex22.atan();
        org.apache.commons.math.complex.Complex complex26 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex26.asin();
        org.apache.commons.math.complex.Complex complex28 = complex26.exp();
        org.apache.commons.math.complex.Complex complex29 = complex21.add(complex26);
        org.apache.commons.math.complex.Complex complex30 = complex26.cosh();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(32.0d, "DEU");
        boolean boolean34 = complex30.equals((java.lang.Object) "DEU");
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06069");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.removeUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder10 = builder6.setExtension('u', "de_FR_japonais");
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.setScript("");
        java.util.Locale locale15 = builder12.build();
        java.util.Locale.Builder builder16 = builder6.setLocale(locale15);
        java.util.Locale.Builder builder17 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setScript("de-DE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: de-DE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test06070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06070");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        printStream5.write((int) (short) 10);
        printStream5.println();
    }

    @Test
    public void test06071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06071");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        java.io.PrintStream printStream15 = new java.io.PrintStream("japonais");
        printStream15.print(0.0f);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer21.transform(doubleArray26);
        java.io.PrintStream printStream28 = printStream15.format(locale18, "japonais", (java.lang.Object[]) complexArray27);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray32);
        printStream28.print((java.lang.Object) doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer9.transform2(doubleArray32);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter38.println(' ');
        printWriter38.print((float) 10L);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.println(' ');
        printWriter45.println((long) (-1));
        printWriter45.println((java.lang.Object) "");
        printWriter45.println();
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = locale53.getScript();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.lang.String str56 = locale53.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        java.io.PrintWriter printWriter63 = printWriter45.printf(locale53, "ja", (java.lang.Object[]) complexArray62);
        java.io.PrintWriter printWriter64 = printWriter38.format("", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer9.inversetransform(complexArray62);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException(throwable69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException71);
        java.lang.Object[] objArray73 = functionEvaluationException72.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException72);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException(throwable78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException80);
        java.lang.Throwable[] throwableArray82 = functionEvaluationException80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = functionEvaluationException80.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException80.addSuppressed((java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "zh", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException80);
        functionEvaluationException4.addSuppressed((java.lang.Throwable) functionEvaluationException88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "zho", (java.lang.Throwable) functionEvaluationException88);
        java.lang.String str91 = functionEvaluationException90.getPattern();
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException90);
        java.lang.Throwable[] throwableArray93 = functionEvaluationException90.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "zho" + "'", str91, "zho");
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test06072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06072");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((double) (short) 100);
        printWriter1.print((-1));
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println(' ');
        printWriter9.println((long) (-1));
        printWriter9.println((java.lang.Object) "");
        char[] charArray22 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter9.println(charArray22);
        printWriter9.println();
        java.io.PrintStream printStream26 = new java.io.PrintStream("japonais");
        printStream26.print(0.0f);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream26, true);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt1z();
        org.apache.commons.math.complex.Complex complex33 = complex31.cosh();
        printStream26.println((java.lang.Object) complex31);
        java.io.PrintStream printStream36 = new java.io.PrintStream("japonais");
        printStream36.print(true);
        printStream36.println((float) (short) 10);
        printStream36.print((long) (short) 10);
        java.io.PrintStream printStream44 = printStream36.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream46 = new java.io.PrintStream("japonais");
        printStream46.print(0.0f);
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer52.transform(doubleArray57);
        java.io.PrintStream printStream59 = printStream46.format(locale49, "japonais", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        printStream59.print((java.lang.Object) doubleArray63);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter68.print(0);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter72.println(' ');
        printWriter72.println((long) (-1));
        printWriter72.println((java.lang.Object) "");
        char[] charArray85 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter72.println(charArray85);
        printWriter68.println(charArray85);
        printStream59.print(charArray85);
        printStream36.print(charArray85);
        printStream26.print(charArray85);
        printWriter9.println(charArray85);
        printWriter1.println(charArray85);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06073");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getCountry();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale4.getDisplayName(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder2.setLanguageTag("Japanese");
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder16 = builder12.setExtension('a', "ja");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder12.setRegion("\u7f8e\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06074");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale4 = new java.util.Locale("und", "org.apache.commons.math.FunctionEvaluationException");
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.toLanguageTag();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getISO3Country();
        java.lang.String str10 = locale4.getDisplayVariant(locale5);
        java.lang.String str11 = locale0.getDisplayVariant(locale4);
        java.util.Set<java.lang.String> strSet12 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale0.toLanguageTag();
        java.lang.Object obj14 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals(locale4.toString(), "und_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fr" + "'", str6, "fr");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ko" + "'", str13, "ko");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "ko");
    }

    @Test
    public void test06075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06075");
        java.io.PrintStream printStream1 = new java.io.PrintStream("italien");
        printStream1.println((float) '4');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer5.transform2(doubleArray28);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.print((float) 10L);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter41.println(' ');
        printWriter41.println((long) (-1));
        printWriter41.println((java.lang.Object) "");
        printWriter41.println();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.getScript();
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        java.io.PrintWriter printWriter59 = printWriter41.printf(locale49, "ja", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter60 = printWriter34.format("", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer5.inversetransform(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        java.io.PrintStream printStream68 = new java.io.PrintStream("japonais");
        printStream68.print(0.0f);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer74.transform(doubleArray79);
        java.io.PrintStream printStream81 = printStream68.format(locale71, "japonais", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer82 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray85 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer82.inversetransform2(doubleArray85);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray85);
        printStream81.print((java.lang.Object) doubleArray85);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer62.transform2(doubleArray85);
        double[] doubleArray91 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray85, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer5.inversetransform(doubleArray91);
        java.io.PrintStream printStream93 = printStream1.printf("", (java.lang.Object[]) complexArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream96 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "org.apache.commons.math.FunctionEvaluationException: ja_JP");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.FunctionEvaluationException: ja_JP");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test06076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06076");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale6);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("GB");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale19.getDisplayName(locale21);
        java.lang.String str24 = locale19.getLanguage();
        java.lang.String str25 = locale16.getDisplayName(locale19);
        java.lang.String str26 = locale19.getDisplayName();
        java.lang.String str27 = locale19.getVariant();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getScript();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet31 = locale28.getExtensionKeys();
        java.lang.String str32 = locale19.getDisplayVariant(locale28);
        java.lang.String str33 = locale28.getISO3Country();
        java.util.Set<java.lang.Character> charSet34 = locale28.getExtensionKeys();
        java.util.Locale.setDefault(locale28);
        java.util.Locale.Builder builder36 = builder0.setLocale(locale28);
        java.util.Locale.Builder builder37 = builder0.clearExtensions();
        java.util.Locale locale38 = builder37.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder37.setVariant("org.apache.commons.math.MathException: fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ja" + "'", str22, "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str23, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "chinois" + "'", str25, "chinois");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "French" + "'", str26, "French");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
    }

    @Test
    public void test06077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06077");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println((double) 10.0f);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        boolean boolean19 = printStream16.checkError();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream16, true);
        boolean boolean22 = printStream16.checkError();
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream16);
        printWriter1.print((java.lang.Object) printStream16);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter28 = printWriter26.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter30 = printWriter28.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean33 = printWriter32.checkError();
        java.io.PrintWriter printWriter35 = printWriter32.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter38.println(' ');
        printWriter38.println((long) (-1));
        printWriter38.println((java.lang.Object) "");
        char[] charArray51 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter38.println(charArray51);
        printWriter32.write(charArray51);
        printWriter30.write(charArray51);
        printStream16.println(charArray51);
        printStream16.print((float) 0);
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter59.println(' ');
        printWriter59.close();
        printWriter59.print((double) 1L);
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter66.println(' ');
        printWriter66.println((long) (-1));
        printWriter66.println((java.lang.Object) "");
        char[] charArray79 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter66.println(charArray79);
        printWriter66.println(10);
        printWriter66.print('a');
        char[] charArray85 = new char[] {};
        printWriter66.println(charArray85);
        printWriter59.write(charArray85);
        printStream16.println(charArray85);
        printStream16.print((long) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
    }

    @Test
    public void test06078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06078");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((double) (short) 100);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter10 = printWriter8.append((java.lang.CharSequence) "");
        java.util.Locale locale11 = null;
        java.lang.String[] strArray16 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) strArray16);
        java.io.PrintWriter printWriter19 = printWriter10.printf(locale11, "fr-fr", (java.lang.Object[]) strArray16);
        java.io.PrintWriter printWriter20 = printWriter1.format("ja", (java.lang.Object[]) strArray16);
        printWriter20.print('x');
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test06079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06079");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.FunctionEvaluationException: kor", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception:kor");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06080");
        java.io.PrintStream printStream1 = new java.io.PrintStream("allemand (Allemagne)");
        printStream1.print(true);
        java.lang.CharSequence charSequence4 = null;
        java.io.PrintStream printStream5 = printStream1.append(charSequence4);
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        org.junit.Assert.assertNotNull(printStream5);
    }

    @Test
    public void test06081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06081");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print(100L);
        printStream5.println((float) (short) 1);
        printStream5.println(0.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream5, true, "ALLEMAND");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ALLEMAND");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06082");
        java.io.PrintStream printStream1 = new java.io.PrintStream("kor");
    }

    @Test
    public void test06083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06083");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex13);
        boolean boolean15 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex16 = complex13.atan();
        org.apache.commons.math.complex.Complex complex17 = complex13.cos();
        org.apache.commons.math.complex.Complex complex18 = complex8.divide(complex13);
        org.apache.commons.math.complex.Complex complex19 = complex13.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test06084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06084");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.toLanguageTag();
        boolean boolean4 = locale1.hasExtensions();
        java.lang.String str5 = locale1.toLanguageTag();
        java.lang.String str6 = locale1.toLanguageTag();
        java.util.Locale locale8 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale11 = locale8.stripExtensions();
        java.lang.String str12 = locale1.getDisplayScript(locale8);
        java.util.Set<java.lang.String> strSet13 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale8.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "und" + "'", str6, "und");
        org.junit.Assert.assertEquals(locale8.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
    }

    @Test
    public void test06085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06085");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("de-FR-japonais", 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06086");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale4.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fra" + "'", str6, "fra");
    }

    @Test
    public void test06087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06087");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer7.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer7.transform2(doubleArray30);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.print((float) 10L);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter43.println(' ');
        printWriter43.println((long) (-1));
        printWriter43.println((java.lang.Object) "");
        printWriter43.println();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getScript();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.lang.String str54 = locale51.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        java.io.PrintWriter printWriter61 = printWriter43.printf(locale51, "ja", (java.lang.Object[]) complexArray60);
        java.io.PrintWriter printWriter62 = printWriter36.format("", (java.lang.Object[]) complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer7.inversetransform(complexArray60);
        java.lang.Throwable throwable67 = null;
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException(throwable67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException69);
        java.lang.Object[] objArray71 = functionEvaluationException70.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray60, (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException(throwable76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException78);
        java.lang.Throwable[] throwableArray80 = functionEvaluationException78.getSuppressed();
        java.lang.Throwable[] throwableArray81 = functionEvaluationException78.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException78.addSuppressed((java.lang.Throwable) functionEvaluationException84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "zh", (java.lang.Object[]) complexArray60, (java.lang.Throwable) functionEvaluationException78);
        double double87 = functionEvaluationException86.getArgument();
        java.lang.String str88 = functionEvaluationException86.getPattern();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("GB", (java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "zh", (java.lang.Throwable) mathException89);
        java.lang.String str91 = mathException89.getPattern();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 52.0d + "'", double87 == 52.0d);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "zh" + "'", str88, "zh");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "GB" + "'", str91, "GB");
    }

    @Test
    public void test06088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06088");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        printStream1.println((java.lang.Object) "\u30c9\u30a4\u30c4\u8a9e");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter7.print((int) '4');
    }

    @Test
    public void test06089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06089");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder6 = builder2.removeUnicodeLocaleAttribute("chinois");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter8.println(' ');
        printWriter8.println((long) (-1));
        printWriter8.println((java.lang.Object) "");
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream20.print((float) (short) -1);
        printStream20.print('a');
        printStream20.println();
        printStream20.print("hi!");
        printStream20.println((-1L));
        printStream20.println((double) 0.0f);
        printStream20.close();
        printWriter8.print((java.lang.Object) printStream20);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getVariant();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = locale34.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale34.getDisplayLanguage(locale38);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter46 = printWriter44.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        double[] doubleArray61 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer53.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer48.transform(complexArray62);
        java.io.PrintWriter printWriter64 = printWriter44.format("ja", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable[] throwableArray72 = functionEvaluationException70.getSuppressed();
        java.lang.Throwable[] throwableArray73 = functionEvaluationException70.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException70.addSuppressed((java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException76);
        java.io.PrintStream printStream79 = printStream20.printf(locale38, "org.apache.commons.math.FunctionEvaluationException: FR", (java.lang.Object[]) complexArray62);
        java.util.Locale.Builder builder80 = builder2.setLocale(locale38);
        java.util.Locale.Builder builder81 = builder2.clearExtensions();
        java.util.Locale locale82 = java.util.Locale.JAPANESE;
        java.lang.String str83 = locale82.getVariant();
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleAttributes();
        java.util.Locale locale85 = locale82.stripExtensions();
        java.lang.String str86 = locale82.getDisplayLanguage();
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        java.lang.String str88 = locale87.getDisplayCountry();
        java.lang.String str89 = locale87.getISO3Language();
        java.lang.String str90 = locale87.getDisplayVariant();
        java.util.Set<java.lang.String> strSet91 = locale87.getUnicodeLocaleKeys();
        java.util.Locale locale93 = new java.util.Locale("hi!");
        java.lang.String str94 = locale93.getDisplayScript();
        java.lang.String str95 = locale93.toLanguageTag();
        java.lang.String str96 = locale87.getDisplayName(locale93);
        java.lang.String str97 = locale82.getDisplayVariant(locale93);
        java.util.Locale locale98 = locale82.stripExtensions();
        java.util.Locale.Builder builder99 = builder2.setLocale(locale82);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanese" + "'", str39, "Japanese");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str86, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "fra" + "'", str89, "fra");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertEquals(locale93.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "und" + "'", str95, "und");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "French" + "'", str96, "French");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(locale98);
        org.junit.Assert.assertEquals(locale98.toString(), "ja");
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test06090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06090");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream14.print((int) '4');
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter18.println(' ');
        printWriter18.println((long) (-1));
        printWriter18.println((java.lang.Object) "");
        char[] charArray31 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter18.println(charArray31);
        printWriter18.println(10);
        printWriter18.print('a');
        char[] charArray37 = new char[] {};
        printWriter18.println(charArray37);
        printStream14.println(charArray37);
        printStream14.print((float) (-1L));
        boolean boolean42 = printStream14.checkError();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream14);
        java.io.PrintStream printStream45 = printStream14.append((java.lang.CharSequence) "\u65e5\u6587");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test06091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06091");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print(0);
        printWriter1.print('u');
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(true);
        boolean boolean12 = printStream9.checkError();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream9, true);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer17.inversetransform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        double[] doubleArray30 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer22.inversetransform2(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer17.transform(complexArray31);
        java.io.PrintStream printStream33 = printStream9.format(locale15, "fr", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray32);
        java.io.PrintWriter printWriter35 = printWriter1.printf("", (java.lang.Object[]) complexArray32);
        printWriter35.println(false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printWriter35);
    }

    @Test
    public void test06092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06092");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("Vereinigte Staaten von Amerika");
        java.lang.String str2 = mathException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.MathException: Vereinigte Staaten von Amerika" + "'", str2, "org.apache.commons.math.MathException: Vereinigte Staaten von Amerika");
    }

    @Test
    public void test06093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06093");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("\u65e5\u672c\u8a9e)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: fra (???) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test06094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06094");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.flush();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter3);
        java.io.PrintWriter printWriter7 = printWriter5.append((java.lang.CharSequence) "italien");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("French");
        printWriter5.println((java.lang.Object) "French");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter15 = printWriter5.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION", 0, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 117");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printWriter7);
    }

    @Test
    public void test06095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06095");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setLanguage("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test06096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06096");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print("FR");
        printWriter1.write("und");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean19 = printWriter18.checkError();
        java.util.Locale locale20 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.io.PrintWriter printWriter30 = printWriter18.printf(locale20, "zho", objArray29);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException36);
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) functionEvaluationException36);
        java.io.PrintWriter printWriter40 = printWriter1.format(locale11, "fra", objArray29);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println(false);
        printWriter42.print((int) (short) 1);
        printWriter1.println((java.lang.Object) printWriter42);
        java.io.PrintWriter printWriter51 = printWriter1.append('4');
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException(throwable56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException58);
        java.lang.Throwable[] throwableArray60 = functionEvaluationException59.getSuppressed();
        java.io.PrintWriter printWriter61 = printWriter51.printf("fran\347ais", (java.lang.Object[]) throwableArray60);
        boolean boolean62 = printWriter51.checkError();
        printWriter51.println('u');
        printWriter51.println();
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06097");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.println("zh");
        printWriter1.println((float) (short) 10);
        java.io.PrintWriter printWriter23 = printWriter1.append((java.lang.CharSequence) "FR");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        java.io.PrintStream printStream38 = new java.io.PrintStream("japonais");
        printStream38.print(0.0f);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        java.io.PrintStream printStream51 = printStream38.format(locale41, "japonais", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        printStream51.print((java.lang.Object) doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer32.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer60.inversetransform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer32.transform2(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer25.transform2(doubleArray63);
        java.io.PrintWriter printWriter68 = printWriter23.printf("fran\347ais", (java.lang.Object[]) complexArray67);
        java.lang.CharSequence charSequence69 = null;
        java.io.PrintWriter printWriter70 = printWriter68.append(charSequence69);
        printWriter70.println("\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(printWriter70);
    }

    @Test
    public void test06098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06098");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        boolean boolean10 = complex8.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex8.exp();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cos();
        org.apache.commons.math.complex.Complex complex15 = complex13.cos();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex20.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        boolean boolean24 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex25 = complex16.subtract(complex23);
        boolean boolean26 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex27.tanh();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.getImaginary();
        org.apache.commons.math.complex.Complex complex33 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex35 = complex34.acos();
        org.apache.commons.math.complex.Complex complex36 = complex35.negate();
        org.apache.commons.math.complex.Complex complex37 = complex33.multiply(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex33.exp();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex38.add(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex29.pow(complex43);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.getImaginary();
        org.apache.commons.math.complex.Complex complex48 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex50 = complex48.divide(complex49);
        double double51 = complex50.getReal();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt1z();
        org.apache.commons.math.complex.Complex complex54 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex52.divide(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex52.sqrt();
        org.apache.commons.math.complex.Complex complex60 = complex59.log();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex64 = complex61.sinh();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex66 = complex64.divide(complex65);
        org.apache.commons.math.complex.Complex complex67 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex60.divide(complex67);
        boolean boolean70 = complex67.isInfinite();
        boolean boolean71 = complex50.equals((java.lang.Object) boolean70);
        org.apache.commons.math.complex.Complex complex72 = complex43.add(complex50);
        org.apache.commons.math.complex.Complex complex73 = complex23.multiply(complex50);
        org.apache.commons.math.complex.Complex complex74 = complex11.subtract(complex23);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
    }

    @Test
    public void test06099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06099");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str5 = locale1.getDisplayLanguage();
        java.lang.String str6 = locale1.toLanguageTag();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category7, locale10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale14.getDisplayScript();
        java.util.Locale.setDefault(category7, locale14);
        java.lang.String str19 = locale1.getDisplayName(locale14);
        java.util.Locale locale20 = locale1.stripExtensions();
        java.util.Set<java.lang.String> strSet21 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fran\347ais" + "'", str5, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fr" + "'", str6, "fr");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ja" + "'", str15, "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str16, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str19, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test06100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06100");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.println('a');
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Language();
        printWriter3.print((java.lang.Object) locale6);
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = locale6.stripExtensions();
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale11.getLanguage();
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = locale14.getScript();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale14.getDisplayVariant();
        java.lang.String str18 = locale14.getDisplayCountry();
        java.lang.String str19 = locale11.getDisplayLanguage(locale14);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter23 = printWriter21.append((java.lang.CharSequence) "");
        printWriter23.println('a');
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getISO3Country();
        java.lang.String str28 = locale26.getISO3Language();
        printWriter23.print((java.lang.Object) locale26);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = locale26.getDisplayLanguage(locale30);
        java.lang.String str36 = locale14.getDisplayLanguage(locale30);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chine" + "'", str18, "Chine");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u6cd5\u6587" + "'", str19, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fra" + "'", str28, "fra");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ja" + "'", str33, "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str34, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fran\347ais" + "'", str35, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "chinois" + "'", str36, "chinois");
    }

    @Test
    public void test06101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06101");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder6 = builder2.removeUnicodeLocaleAttribute("chinois");
        java.util.Locale.Builder builder8 = builder2.removeUnicodeLocaleAttribute("Taiwan");
        java.util.Locale locale9 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setLanguage("\u82f1\u8a9e\u30ab\u30ca\u30c0)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
    }

    @Test
    public void test06102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06102");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.println('#');
        printStream1.print("japonais");
        printStream1.println("Franz\366sisch");
        printStream1.println((float) (short) -1);
        java.io.PrintStream printStream13 = printStream1.append('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer15.transform(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.transform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer14.transform(doubleArray30);
        printStream13.print((java.lang.Object) fastFourierTransformer14);
        printStream13.write((int) (short) 100);
        printStream13.print("DE");
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
    }

    @Test
    public void test06103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06103");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        org.apache.commons.math.complex.Complex complex10 = complex9.negate();
        org.apache.commons.math.complex.Complex complex11 = complex7.multiply(complex9);
        printWriter1.println((java.lang.Object) complex7);
        double double13 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.sinh();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex17.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex7.add(complex18);
        double double22 = complex18.getReal();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        org.apache.commons.math.complex.Complex complex27 = complex18.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.8414709848078965d + "'", double13 == 0.8414709848078965d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test06104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06104");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr-FR");
        printStream1.write((int) '#');
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException(throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException21);
        java.lang.Throwable[] throwableArray23 = functionEvaluationException21.getSuppressed();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "zh", (java.lang.Throwable) functionEvaluationException25);
        printStream1.print((java.lang.Object) functionEvaluationException26);
        printStream1.flush();
        printStream1.println(false);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test06105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06105");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream33);
        java.lang.Object[] objArray40 = null;
        java.io.PrintStream printStream41 = printStream33.format("Italian", objArray40);
        java.io.PrintStream printStream43 = printStream33.append(' ');
        printStream43.print(1.367947197099293d);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream43);
    }

    @Test
    public void test06106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06106");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("FR");
        java.lang.String str2 = locale1.getVariant();
        java.lang.String str3 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test06107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06107");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getVariant();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.util.Locale locale4 = locale0.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale4.getUnicodeLocaleType("fr_FR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: fr_FR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chine" + "'", str3, "Chine");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
    }

    @Test
    public void test06108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06108");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder5 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder5.setVariant("Chinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setRegion("\u671d\u9c9c\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06109");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.inversetransform2(doubleArray45);
        java.io.PrintStream printStream51 = new java.io.PrintStream("japonais");
        printStream51.print(0.0f);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        java.io.PrintStream printStream64 = printStream51.format(locale54, "japonais", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray68);
        printStream64.print((java.lang.Object) doubleArray68);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray68);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer0.inversetransform2(doubleArray68);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.transform(univariateRealFunction74, 0.0d, 0.0d, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray73);
    }

    @Test
    public void test06110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06110");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getDisplayScript();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale1.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        java.lang.String str19 = locale15.getISO3Language();
        java.lang.String str20 = locale15.getISO3Language();
        java.lang.String str21 = locale15.getVariant();
        java.lang.String str22 = locale11.getDisplayVariant(locale15);
        java.lang.String str23 = locale15.toLanguageTag();
        java.lang.String str24 = locale15.toLanguageTag();
        java.lang.String str25 = locale15.getCountry();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getISO3Country();
        java.lang.String str30 = locale27.getDisplayScript();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale locale36 = java.util.Locale.getDefault(category31);
        java.util.Locale locale37 = java.util.Locale.getDefault(category31);
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.lang.String str39 = locale27.getDisplayCountry(locale37);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.toLanguageTag();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getLanguage();
        java.util.Locale locale45 = new java.util.Locale("hi!");
        java.lang.String str46 = locale45.getISO3Country();
        java.lang.String str47 = locale40.getDisplayName(locale45);
        java.lang.String str48 = locale27.getDisplayScript(locale45);
        java.lang.String str49 = locale15.getDisplayCountry(locale45);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale50.getDisplayName();
        java.lang.String str54 = locale15.getDisplayLanguage(locale50);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr" + "'", str41, "fr");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr" + "'", str43, "fr");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "French" + "'", str47, "French");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "chinois" + "'", str53, "chinois");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u6cd5\u6587" + "'", str54, "\u6cd5\u6587");
    }

    @Test
    public void test06111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06111");
        java.util.Locale locale2 = new java.util.Locale("fr_FR", "\u65e5\u6587");
        java.lang.String str3 = locale2.toLanguageTag();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
    }

    @Test
    public void test06112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06112");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.util.Collection<java.lang.String> strCollection19 = null;
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("FR", strMap22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray29 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strList30);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter37 = printWriter35.append((java.lang.CharSequence) "");
        printWriter37.println('a');
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = locale40.getISO3Language();
        printWriter37.print((java.lang.Object) locale40);
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strSet44);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.parse("FR", strMap50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList51, strMap52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.parse("FR", strMap55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList56, strMap57);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getISO3Country();
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale59.getDisplayName(locale61);
        java.lang.String str64 = locale61.getDisplayScript();
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList58, (java.util.Collection<java.lang.String>) strSet65, filteringMode66);
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList53, (java.util.Collection<java.lang.String>) strList67, filteringMode68);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList67);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fra" + "'", str42, "fra");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ja" + "'", str62, "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str63, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode66.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode68.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList70);
    }

    @Test
    public void test06113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06113");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer5.transform2(doubleArray28);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.print((float) 10L);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter41.println(' ');
        printWriter41.println((long) (-1));
        printWriter41.println((java.lang.Object) "");
        printWriter41.println();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.getScript();
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        java.io.PrintWriter printWriter59 = printWriter41.printf(locale49, "ja", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter60 = printWriter34.format("", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer5.inversetransform(complexArray58);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException(throwable65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException67);
        java.lang.Object[] objArray69 = functionEvaluationException68.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray58, (java.lang.Throwable) functionEvaluationException68);
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException(throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException76);
        java.lang.Throwable[] throwableArray78 = functionEvaluationException76.getSuppressed();
        java.lang.Throwable[] throwableArray79 = functionEvaluationException76.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException76.addSuppressed((java.lang.Throwable) functionEvaluationException82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "zh", (java.lang.Object[]) complexArray58, (java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test06114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06114");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category0, locale3);
        java.lang.String str5 = locale3.getDisplayLanguage();
        java.util.Locale locale7 = new java.util.Locale("fra");
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale3.getDisplayName(locale11);
        java.lang.String str15 = locale3.getISO3Country();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "anglais" + "'", str5, "anglais");
        org.junit.Assert.assertEquals(locale7.toString(), "fra");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English" + "'", str14, "English");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06115");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer0.inversetransform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer9.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        double[] doubleArray46 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer38.inversetransform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer33.transform(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer9.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer9.transform(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform(doubleArray56);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.transform(univariateRealFunction62, 0.7071067811865475d, (double) 10.0f, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
    }

    @Test
    public void test06116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06116");
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException(throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException5);
        double double7 = functionEvaluationException6.getArgument();
        double double8 = functionEvaluationException6.getArgument();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
    }

    @Test
    public void test06117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06117");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "it");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: it");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06118");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer3.transform(doubleArray8);
        double[] doubleArray11 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.inversetransform2(doubleArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.print(0.0f);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform(doubleArray25);
        java.io.PrintStream printStream27 = printStream14.format(locale17, "japonais", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        printStream27.print((java.lang.Object) doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer3.inversetransform(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray37 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray35, (double) (byte) -1);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "Chinesisch");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "allemand (Allemagne)", (java.lang.Object[]) complexArray37, (java.lang.Throwable) functionEvaluationException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) complexArray37);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
    }

    @Test
    public void test06119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06119");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), throwable1);
        java.lang.Throwable[] throwableArray3 = functionEvaluationException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test06120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06120");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getDisplayCountry();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale6.getDisplayVariant();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.getCountry();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer13.inversetransform2(doubleArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("japonais");
        printStream19.print(0.0f);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        java.io.PrintStream printStream32 = printStream19.format(locale22, "japonais", (java.lang.Object[]) complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray36);
        printStream32.print((java.lang.Object) doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer13.transform2(doubleArray36);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.print((float) 10L);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.println(' ');
        printWriter49.println((long) (-1));
        printWriter49.println((java.lang.Object) "");
        printWriter49.println();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getScript();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = locale57.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        java.io.PrintWriter printWriter67 = printWriter49.printf(locale57, "ja", (java.lang.Object[]) complexArray66);
        java.io.PrintWriter printWriter68 = printWriter42.format("", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer13.inversetransform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer70.transform(doubleArray75);
        double[] doubleArray78 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer70.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer13.inversetransform2(doubleArray78);
        java.io.PrintStream printStream81 = printStream3.format(locale6, "Chinesisch", (java.lang.Object[]) complexArray80);
        java.lang.String str82 = locale6.toLanguageTag();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale84 = java.util.Locale.getDefault(category0);
        java.util.Locale locale85 = java.util.Locale.getDefault(category0);
        java.util.Locale locale86 = java.util.Locale.JAPANESE;
        java.lang.String str87 = locale86.getVariant();
        java.util.Set<java.lang.String> strSet88 = locale86.getUnicodeLocaleAttributes();
        java.util.Locale locale89 = locale86.stripExtensions();
        java.util.Locale locale90 = java.util.Locale.ENGLISH;
        java.lang.String str91 = locale86.getDisplayLanguage(locale90);
        java.lang.String str92 = locale90.getCountry();
        java.util.Locale.setDefault(category0, locale90);
        java.lang.String str94 = locale90.getVariant();
        java.lang.String str95 = locale90.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "fr" + "'", str82, "fr");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Japanese" + "'", str91, "Japanese");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test06121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06121");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double double3 = complex1.getImaginary();
        double double4 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex5 = complex1.asin();
        org.apache.commons.math.complex.Complex complex6 = complex0.add(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex6.acos();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        double double11 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex12 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex12.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex13.acos();
        org.apache.commons.math.complex.Complex complex16 = complex13.cos();
        org.apache.commons.math.complex.Complex complex17 = complex8.add(complex13);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex18.multiply(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex25.multiply(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex18.cos();
        double double33 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex34 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex35 = complex8.add(complex34);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test06122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06122");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        double[] doubleArray15 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer7.inversetransform2(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer2.transform(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer2.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer27.transform(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer26.inversetransform2(doubleArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer26.transform2(complexArray42);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.println(' ');
        printWriter45.print((float) 10L);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter52.println(' ');
        printWriter52.println((long) (-1));
        printWriter52.println((java.lang.Object) "");
        printWriter52.println();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getScript();
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleKeys();
        java.lang.String str63 = locale60.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        java.io.PrintWriter printWriter70 = printWriter52.printf(locale60, "ja", (java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter71 = printWriter45.format("", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer26.inversetransform(complexArray69);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer2.inversetransform(complexArray69);
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException(throwable79);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable79);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException81);
        double double83 = functionEvaluationException82.getArgument();
        double double84 = functionEvaluationException82.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) '#', (java.lang.Throwable) functionEvaluationException82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) functionEvaluationException82);
        java.lang.String str87 = functionEvaluationException82.getPattern();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: zho", (java.lang.Object[]) complexArray73, (java.lang.Throwable) functionEvaluationException82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, (java.lang.Throwable) functionEvaluationException82);
        java.lang.Object[] objArray90 = functionEvaluationException89.getArguments();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1.0d) + "'", double83 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-1.0d) + "'", double84 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
    }

    @Test
    public void test06123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06123");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex7.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.sinh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test06124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06124");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder12 = builder10.setLanguage("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setLanguage("org.apache.commons.math.FunctionEvaluationException: English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.FunctionEvaluationException: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "_FR");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06125");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getLanguage();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = java.util.Locale.lookupTag(languageRangeList22, (java.util.Collection<java.lang.String>) strSet25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.parse("FR", strMap32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList33, strMap34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.parse("FR", strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList38, strMap39);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getISO3Country();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = locale41.getDisplayName(locale43);
        java.lang.String str46 = locale43.getDisplayScript();
        java.util.Set<java.lang.String> strSet47 = locale43.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList40, (java.util.Collection<java.lang.String>) strSet47, filteringMode48);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList35, (java.util.Collection<java.lang.String>) strList49, filteringMode50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.parse("anglais", strMap53);
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.getCountry();
        java.lang.String str58 = locale56.getDisplayCountry();
        java.util.Locale.setDefault(category55, locale56);
        java.lang.String str60 = locale56.getScript();
        java.util.Set<java.lang.String> strSet61 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.lang.String[] strArray67 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList68);
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.lang.String[] strArray76 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.lang.String>) strList77);
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList77, filteringMode80);
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags(languageRangeList54, (java.util.Collection<java.lang.String>) strSet61, filteringMode80);
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags(languageRangeList28, (java.util.Collection<java.lang.String>) strList51, filteringMode80);
        java.util.Collection<java.lang.String> strCollection84 = null;
        java.lang.String str85 = java.util.Locale.lookupTag(languageRangeList28, strCollection84);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "de" + "'", str24, "de");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ja" + "'", str44, "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str45, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode50.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode80.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test06126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06126");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter19.println(' ');
        printWriter19.println((long) (-1));
        printWriter19.println((java.lang.Object) "");
        char[] charArray32 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter19.println(charArray32);
        printWriter19.println(10);
        printWriter19.print('a');
        char[] charArray38 = new char[] {};
        printWriter19.println(charArray38);
        printWriter15.print(charArray38);
        printWriter15.write(10);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
    }

    @Test
    public void test06127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06127");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer2.inversetransform2(doubleArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(0.0f);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        java.io.PrintStream printStream21 = printStream8.format(locale11, "japonais", (java.lang.Object[]) complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        printStream21.print((java.lang.Object) doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer2.transform2(doubleArray25);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.print((float) 10L);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter38.println(' ');
        printWriter38.println((long) (-1));
        printWriter38.println((java.lang.Object) "");
        printWriter38.println();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getScript();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.lang.String str49 = locale46.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        java.io.PrintWriter printWriter56 = printWriter38.printf(locale46, "ja", (java.lang.Object[]) complexArray55);
        java.io.PrintWriter printWriter57 = printWriter31.format("", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer2.inversetransform(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        double[] doubleArray67 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer59.inversetransform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer2.inversetransform2(doubleArray67);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer70.transform(doubleArray75);
        double[] doubleArray78 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer70.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer2.transform(complexArray79);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer81.transform(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer2.transform(doubleArray86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "Etats-Unis", (java.lang.Object[]) complexArray88);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test06128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06128");
        java.util.Locale locale3 = new java.util.Locale("Chine", "\u82f1\u6587", "\u4e2d\u56fd\u8a9e");
        java.lang.String str4 = locale3.getScript();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test06129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06129");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.lang.String str3 = locale2.toLanguageTag();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale locale9 = builder6.build();
        java.lang.String str10 = locale2.getDisplayLanguage(locale9);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test06130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06130");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.println("zh");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter15.println(100L);
        printWriter15.print((double) 1.0f);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter15);
    }

    @Test
    public void test06131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06131");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex8.acos();
        org.apache.commons.math.complex.Complex complex14 = complex8.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math.complex.Complex complex17 = complex15.cos();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex14.multiply(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex0.pow(complex15);
        double double21 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test06132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06132");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((double) (short) 100);
        printWriter1.print((-1));
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("de");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer12.inversetransform2(doubleArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("japonais");
        printStream18.print(0.0f);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        java.io.PrintStream printStream31 = printStream18.format(locale21, "japonais", (java.lang.Object[]) complexArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer32.inversetransform2(doubleArray35);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray35);
        printStream31.print((java.lang.Object) doubleArray35);
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer12.transform2(doubleArray35);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter41.println(' ');
        printWriter41.print((float) 10L);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter48.println(' ');
        printWriter48.println((long) (-1));
        printWriter48.println((java.lang.Object) "");
        printWriter48.println();
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getScript();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        java.lang.String str59 = locale56.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer61.inversetransform2(doubleArray64);
        java.io.PrintWriter printWriter66 = printWriter48.printf(locale56, "ja", (java.lang.Object[]) complexArray65);
        java.io.PrintWriter printWriter67 = printWriter41.format("", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer12.inversetransform(complexArray65);
        java.io.PrintWriter printWriter69 = printWriter10.printf("\u65e5\u6587", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray65);
        printWriter1.print((java.lang.Object) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("\u82f1\u6587", 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 101");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test06133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06133");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("German (ALLEMAND,zh)", "francese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: francese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06134");
        java.util.Locale locale1 = new java.util.Locale("CN");
        org.junit.Assert.assertEquals(locale1.toString(), "cn");
    }

    @Test
    public void test06135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06135");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter10.print((float) (-1));
        printWriter10.println('4');
        java.io.PrintWriter printWriter17 = printWriter10.append('4');
        printWriter10.write((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = locale23.getLanguage();
        java.lang.String str29 = locale20.getDisplayName(locale23);
        java.lang.String str30 = locale23.getDisplayName();
        java.lang.String str31 = locale23.getVariant();
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale55.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        java.io.PrintStream printStream66 = printStream47.printf(locale55, "GB", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.complex.Complex[] complexArray68 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray65, (double) 0.0f);
        java.io.PrintWriter printWriter69 = printWriter10.format(locale23, "ja", (java.lang.Object[]) complexArray68);
        printWriter69.println(100);
        printWriter69.write((int) (byte) 100);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ja" + "'", str26, "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str27, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "chinois" + "'", str29, "chinois");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fran\347ais" + "'", str30, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh" + "'", str57, "zh");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test06136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06136");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("Englisch");
        java.util.Locale.Builder builder6 = builder4.setLanguage("en");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.addUnicodeLocaleAttribute("org.apache.commons.math.functionevaluationexception: evaluation failed for argument = 1.571");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.functionevaluationexception: evaluation failed for argument = 1.571 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06137");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.getVariant();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = locale18.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale18.getDisplayLanguage(locale22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(0.0f);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        java.io.PrintStream printStream44 = printStream31.format(locale34, "japonais", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        printStream44.print((java.lang.Object) doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer25.transform2(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer25.inversetransform(complexArray57);
        java.io.PrintWriter printWriter59 = printWriter1.format(locale18, "de", (java.lang.Object[]) complexArray58);
        java.util.Set<java.lang.String> strSet60 = locale18.getUnicodeLocaleKeys();
        java.lang.String str61 = locale18.getDisplayVariant();
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanese" + "'", str23, "Japanese");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test06138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06138");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.println('a');
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Language();
        printWriter3.print((java.lang.Object) locale6);
        java.lang.String str10 = locale6.getScript();
        java.lang.String str11 = locale6.getISO3Country();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06139");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex8.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex20 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = complex22.negate();
        org.apache.commons.math.complex.Complex complex24 = complex20.multiply(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex16.subtract(complex25);
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.negate();
        org.apache.commons.math.complex.Complex complex31 = complex25.multiply(complex29);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = complex32.acos();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex38 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex32.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex29.subtract(complex39);
        double double41 = complex40.getReal();
        org.apache.commons.math.complex.Complex complex42 = complex0.pow(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex0.exp();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex45.acos();
        org.apache.commons.math.complex.Complex complex48 = complex47.tanh();
        org.apache.commons.math.complex.Complex complex49 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex43.pow(complex48);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.getImaginary();
        org.apache.commons.math.complex.Complex complex54 = complex51.cos();
        org.apache.commons.math.complex.Complex complex55 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex51.acos();
        org.apache.commons.math.complex.Complex complex57 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex43.subtract(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex56.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test06140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06140");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer34.inversetransform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray40);
        double[] doubleArray45 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray40, Double.NaN);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray45, (double) (byte) 10);
        double[] doubleArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray48, 0.9999999999999999d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN, NaN, NaN, NaN]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN, NaN, NaN, NaN]");
    }

    @Test
    public void test06141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06141");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print('a');
        printWriter1.print(1.3043045862358962d);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cos();
        org.apache.commons.math.complex.Complex complex11 = complex9.cos();
        org.apache.commons.math.complex.Complex complex12 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex8.add(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex8.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex15.sinh();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        printWriter1.print((java.lang.Object) complex18);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test06142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06142");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: HI!");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: HI!");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06143");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("anglais (Etats-Unis)");
        printWriter1.write((int) (byte) 100);
    }

    @Test
    public void test06144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06144");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: Franz\366sisch", (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06145");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((double) 1, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06146");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(true);
        boolean boolean14 = printStream11.checkError();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream11, true);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        java.io.PrintStream printStream35 = printStream11.format(locale17, "fr", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(complexArray34);
        java.io.PrintStream printStream38 = new java.io.PrintStream("japonais");
        printStream38.print(0.0f);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        java.io.PrintStream printStream51 = printStream38.format(locale41, "japonais", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer52 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer52.inversetransform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        printStream51.print((java.lang.Object) doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.inversetransform2(doubleArray55);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.transform(univariateRealFunction60, 1.3043045862358962d, (double) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray59);
    }

    @Test
    public void test06147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06147");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder5 = builder1.setLanguage("zho");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.removeUnicodeLocaleAttribute("org.apache.commons.math.FunctionEvaluationException: fran\347ais");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.FunctionEvaluationException: franc?ais [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06148");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test06149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06149");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.lang.String str4 = locale3.getVariant();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.lang.String str7 = locale0.getDisplayScript(locale5);
        java.lang.String str8 = locale5.toLanguageTag();
        java.lang.String str9 = locale5.getDisplayLanguage();
        java.lang.String str10 = locale5.getDisplayLanguage();
        java.lang.Object obj11 = locale5.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de-DE" + "'", str8, "de-DE");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "allemand" + "'", str9, "allemand");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "allemand" + "'", str10, "allemand");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "de_DE");
    }

    @Test
    public void test06150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06150");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter17 = printWriter15.append('x');
        printWriter17.println((double) (byte) 0);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        printWriter17.print((java.lang.Object) fastFourierTransformer20);
        java.io.PrintWriter printWriter27 = printWriter17.append((java.lang.CharSequence) "Franz\366sisch");
        printWriter17.println((-2.2370357592874117d));
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printWriter27);
    }

    @Test
    public void test06151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06151");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(0.9999999999999999d, "\u5fb7\u56fd");
        java.lang.Throwable[] throwableArray5 = functionEvaluationException4.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "englisch", (java.lang.Object[]) throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test06152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06152");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print(0);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println(' ');
        printWriter5.println((long) (-1));
        printWriter5.println((java.lang.Object) "");
        char[] charArray18 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter5.println(charArray18);
        printWriter1.println(charArray18);
        java.util.Locale locale21 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray28);
        java.io.PrintWriter printWriter30 = printWriter1.format(locale21, "und", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer32.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer32.transform(complexArray46);
        java.io.PrintWriter printWriter48 = printWriter1.format("japonais", (java.lang.Object[]) complexArray46);
        printWriter1.print("Chinesisch");
        printWriter1.println((int) (byte) -1);
        printWriter1.println("de");
        printWriter1.write("org.apache.commons.math.FunctionEvaluationException: Chinesisch");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printWriter48);
    }

    @Test
    public void test06153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06153");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        double double11 = complex9.getImaginary();
        org.apache.commons.math.complex.Complex complex12 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex14 = complex12.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex8.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex19 = complex18.acos();
        org.apache.commons.math.complex.Complex complex20 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex19.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test06154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06154");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        double[] doubleArray26 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.transform2(doubleArray26);
        double[] doubleArray30 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (-1.0d));
        double[] doubleArray32 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray26, (double) (short) 0);
        double[] doubleArray34 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray32, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test06155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06155");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.setExtension('a', "China");
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.toLanguageTag();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale8.getLanguage();
        java.util.Locale.Builder builder12 = builder4.setLocale(locale8);
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("chinois");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder12.removeUnicodeLocaleAttribute("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: German (FRA,fr)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: German (FRA,fr) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fr" + "'", str11, "fr");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06156");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale5 = new java.util.Locale("de", "fra", "fr");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale5.getDisplayName(locale6);
        java.lang.String str9 = locale1.getDisplayName(locale6);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale5.toString(), "de_FRA_fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German (FRA,fr)" + "'", str8, "German (FRA,fr)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06157");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print((long) (short) 1);
        printWriter4.flush();
        printWriter4.println();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale15.getISO3Country();
        java.lang.String str18 = locale15.getDisplayScript();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale20.getDisplayCountry();
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Locale locale25 = java.util.Locale.getDefault(category19);
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale15.getDisplayCountry(locale25);
        boolean boolean28 = locale25.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getISO3Country();
        java.lang.String str31 = locale29.getDisplayScript();
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleKeys();
        java.lang.String str33 = locale29.getISO3Language();
        java.lang.String str34 = locale29.getISO3Language();
        java.lang.String str35 = locale29.getVariant();
        java.lang.String str36 = locale25.getDisplayVariant(locale29);
        java.lang.String str37 = locale13.getDisplayCountry(locale25);
        java.io.PrintStream printStream40 = new java.io.PrintStream("japonais");
        printStream40.write((int) 'a');
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.println(' ');
        printWriter45.print((float) 10L);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter52.println(' ');
        printWriter52.println((long) (-1));
        printWriter52.println((java.lang.Object) "");
        printWriter52.println();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getScript();
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleKeys();
        java.lang.String str63 = locale60.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        java.io.PrintWriter printWriter70 = printWriter52.printf(locale60, "ja", (java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter71 = printWriter45.format("", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream72 = printStream40.format("de", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter75 = printWriter4.printf(locale25, "zh", (java.lang.Object[]) complexArray69);
        java.lang.Object[] objArray77 = null;
        java.io.PrintWriter printWriter78 = printWriter75.format("org.apache.commons.math.MathException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray77);
        printWriter75.println("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        printWriter75.print(100.0d);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fra" + "'", str33, "fra");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter78);
    }

    @Test
    public void test06158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06158");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(0.9888977057628651d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
        java.lang.String str3 = functionEvaluationException2.getPattern();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException2);
        java.lang.String str5 = functionEvaluationException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr" + "'", str3, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr" + "'", str5, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
    }

    @Test
    public void test06159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06159");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.functionevaluationexception: chinesisch (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION,United States)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.functionevaluationexception:chinesisch(org.apache.commons.math.mathexception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06160");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category7);
        java.util.Locale locale13 = java.util.Locale.getDefault(category7);
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale.Builder builder15 = builder6.setLocale(locale13);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        boolean boolean20 = printStream17.checkError();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        double[] doubleArray38 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer25.transform(complexArray39);
        java.io.PrintStream printStream41 = printStream17.format(locale23, "fr", (java.lang.Object[]) complexArray40);
        printStream17.print((double) 100);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str47 = locale44.getDisplayVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer49.inversetransform(complexArray65);
        java.io.PrintStream printStream67 = printStream17.printf(locale44, "\u65e5\u6587", (java.lang.Object[]) complexArray65);
        java.lang.String str68 = locale13.getDisplayName(locale44);
        boolean boolean69 = locale13.hasExtensions();
        java.lang.String str70 = locale13.getCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u6587" + "'", str46, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str68, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test06161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06161");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("GERMAN (FRA,FR)", 0.40523798948758216d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=german (fra,fr)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06162");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale0.getDisplayScript(locale5);
        boolean boolean9 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet10 = locale5.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinois" + "'", str3, "chinois");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u6587" + "'", str6, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test06163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06163");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.inversetransform(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.transform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray51);
        printStream47.print((java.lang.Object) doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer28.transform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer18.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform2(complexArray56);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.transform(univariateRealFunction58, (double) (-1), 10.024906793143211d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test06164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06164");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex11);
        double double13 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex4.divide(complex11);
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.tan();
        org.apache.commons.math.complex.Complex complex18 = complex14.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.7350525871447157d + "'", double13 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test06165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06165");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.close();
        printWriter1.print((double) 1L);
        printWriter1.print((double) (short) 100);
        printWriter1.flush();
    }

    @Test
    public void test06166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06166");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer4.transform(doubleArray9);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray9);
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer3.transform2(doubleArray9);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer13.inversetransform2(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer3.transform(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        double[] doubleArray27 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer3.transform2(doubleArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: fr", (java.lang.Object[]) complexArray29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(3.9044258434917195E-17d, "org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray29);
        java.lang.Object[] objArray32 = functionEvaluationException31.getArguments();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(objArray32);
    }

    @Test
    public void test06167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06167");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Korean");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Korean");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06168");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        printStream1.print(10.0f);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.print(true);
        boolean boolean33 = printStream30.checkError();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream30, true);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform(doubleArray48);
        double[] doubleArray51 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.inversetransform2(doubleArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer38.transform(complexArray52);
        java.io.PrintStream printStream54 = printStream30.format(locale36, "fr", (java.lang.Object[]) complexArray53);
        java.io.PrintStream printStream55 = printStream1.format("org.apache.commons.math.FunctionEvaluationException: fr", (java.lang.Object[]) complexArray53);
        printStream1.flush();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(printStream55);
    }

    @Test
    public void test06169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06169");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getLanguage();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.lang.String str5 = locale1.getVariant();
        java.lang.String str6 = locale0.getDisplayScript(locale1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test06170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06170");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale1.getDisplayLanguage(locale4);
        java.lang.String str7 = locale1.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale1.getDisplayVariant(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ja" + "'", str5, "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test06171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06171");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex9.multiply(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex11.atan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.acos();
        org.apache.commons.math.complex.Complex complex19 = complex11.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex4.divide(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex21.cos();
        org.apache.commons.math.complex.Complex complex23 = complex22.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test06172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06172");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("zh");
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale7.getDisplayVariant(locale11);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet18 = locale15.getExtensionKeys();
        java.lang.String str19 = locale15.getDisplayLanguage();
        java.util.Locale locale20 = locale15.stripExtensions();
        java.lang.String str21 = locale7.getDisplayName(locale20);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanese" + "'", str19, "Japanese");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test06173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06173");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "\u4e2d\u56fd\u8a9e");
    }

    @Test
    public void test06174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06174");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.write((int) '#');
        printWriter1.write("\u30c9\u30a4\u30c4\u8a9e", 1, (int) (short) 1);
        printWriter1.close();
        java.util.Locale locale18 = new java.util.Locale("ja", "");
        java.lang.String str19 = locale18.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter23.println(' ');
        printWriter23.println(false);
        java.io.PrintStream printStream29 = new java.io.PrintStream("japonais");
        printStream29.print(true);
        boolean boolean32 = printStream29.checkError();
        printStream29.println();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer37.inversetransform(complexArray53);
        java.io.PrintStream printStream55 = printStream29.printf(locale34, "de", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer57.transform2(doubleArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer57.inversetransform(complexArray73);
        java.io.PrintWriter printWriter75 = printWriter23.format(locale34, "GB", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer21.inversetransform2(complexArray74);
        java.io.PrintWriter printWriter77 = printWriter1.format(locale18, "chinois", (java.lang.Object[]) complexArray74);
        java.io.PrintWriter printWriter79 = printWriter77.append('a');
        printWriter77.print("CHN");
        printWriter77.print(false);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ja" + "'", str19, "ja");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ja" + "'", str35, "ja");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test06175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06175");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setScript("");
        java.util.Locale.Builder builder11 = builder6.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setRegion("");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.lang.String str19 = locale17.getDisplayCountry();
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale locale21 = java.util.Locale.getDefault(category16);
        java.util.Locale locale22 = java.util.Locale.getDefault(category16);
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder24 = builder12.setLocale(locale22);
        java.util.Locale locale25 = builder12.build();
        java.util.Locale.Builder builder26 = builder11.setLocale(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("org.apache.commons.math.FunctionEvaluationException: Chinesisch");
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        boolean boolean30 = locale29.hasExtensions();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale29.getDisplayName();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale29.getDisplayScript(locale34);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getISO3Country();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = locale40.getDisplayScript();
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleKeys();
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = locale40.getDisplayName(locale45);
        java.lang.String str47 = locale34.getDisplayCountry(locale45);
        java.lang.String str48 = locale28.getDisplayCountry(locale34);
        java.util.Locale.Builder builder49 = builder26.setLocale(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder26.setUnicodeLocaleKeyword("de-DE", "allemand (Allemagne)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: de-DE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese" + "'", str32, "Chinese");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u6587" + "'", str35, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ja" + "'", str41, "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str42, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str46, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test06176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06176");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.inversetransform2(doubleArray45);
        java.io.PrintStream printStream51 = new java.io.PrintStream("japonais");
        printStream51.write((int) 'a');
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter56.println(' ');
        printWriter56.print((float) 10L);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.println(' ');
        printWriter63.println((long) (-1));
        printWriter63.println((java.lang.Object) "");
        printWriter63.println();
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.lang.String str72 = locale71.getScript();
        java.util.Set<java.lang.String> strSet73 = locale71.getUnicodeLocaleKeys();
        java.lang.String str74 = locale71.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        java.io.PrintWriter printWriter81 = printWriter63.printf(locale71, "ja", (java.lang.Object[]) complexArray80);
        java.io.PrintWriter printWriter82 = printWriter56.format("", (java.lang.Object[]) complexArray80);
        java.io.PrintStream printStream83 = printStream51.format("de", (java.lang.Object[]) complexArray80);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray80);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.transform2(complexArray80);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform(univariateRealFunction86, (double) (byte) 10, (-0.7350525871447157d), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test06177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06177");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.flush();
        printWriter1.println(false);
        printWriter1.print("");
    }

    @Test
    public void test06178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06178");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.print((float) (short) -1);
        printWriter1.println("ja_JP");
        printWriter1.println(false);
        printWriter1.println((int) 'a');
        printWriter1.println('a');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test06179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06179");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean8 = printWriter7.checkError();
        java.util.Locale locale9 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer12.inversetransform2(doubleArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray16);
        java.lang.Object[] objArray18 = mathException17.getArguments();
        java.io.PrintWriter printWriter19 = printWriter7.printf(locale9, "zho", objArray18);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException25);
        double double27 = functionEvaluationException25.getArgument();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray18, (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException(0.7350525871447157d, "fr-FR", (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "Japanese", (java.lang.Throwable) functionEvaluationException29);
        java.lang.String str31 = functionEvaluationException29.getPattern();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: fr", (java.lang.Throwable) functionEvaluationException29);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fr-FR" + "'", str31, "fr-FR");
    }

    @Test
    public void test06180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06180");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter12.println((float) (byte) 0);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter12);
        java.io.PrintWriter printWriter17 = printWriter12.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException");
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter19.print(0);
        printWriter19.print('u');
        java.io.PrintStream printStream27 = new java.io.PrintStream("japonais");
        printStream27.print(true);
        boolean boolean30 = printStream27.checkError();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream27, true);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        double[] doubleArray48 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer40.inversetransform2(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer35.transform(complexArray49);
        java.io.PrintStream printStream51 = printStream27.format(locale33, "fr", (java.lang.Object[]) complexArray50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("GB", (java.lang.Object[]) complexArray50);
        java.io.PrintWriter printWriter53 = printWriter19.printf("", (java.lang.Object[]) complexArray50);
        printWriter19.print((-1L));
        char[] charArray59 = new char[] { '#', 'a', '4' };
        printWriter19.print(charArray59);
        printWriter17.println(charArray59);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter17.write((int) 'u');
        printWriter17.print(0.0f);
        printWriter17.println((int) 'u');
        printWriter17.println((long) 'u');
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "#a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "#a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, a, 4]");
    }

    @Test
    public void test06181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06181");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream8.println(0.7350525871447157d);
        printStream8.print((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06182");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\u30c9\u30a4\u30c4\u8a9e\u30d5\u30e9\u30f3\u30b9,japonais)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ????? (????,japonais)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06183");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println((int) 'a');
        java.io.PrintWriter printWriter8 = printWriter4.append('a');
        printWriter8.write((int) (short) 100);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder11.setLanguage("de");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder14.build();
        java.util.Locale.Builder builder18 = builder14.setLanguage("");
        java.util.Locale.Builder builder20 = builder14.setLanguage("francese");
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder24 = builder21.setLanguage("de");
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str30 = locale27.getDisplayScript();
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleKeys();
        java.lang.String str32 = locale27.toLanguageTag();
        java.util.Locale.Builder builder33 = builder21.setLocale(locale27);
        java.util.Locale locale34 = builder21.build();
        java.util.Locale.Builder builder36 = builder21.setLanguageTag("GB");
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        boolean boolean38 = locale37.hasExtensions();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleAttributes();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = locale40.getLanguage();
        java.lang.String str46 = locale37.getDisplayName(locale40);
        java.lang.String str47 = locale40.getDisplayName();
        java.lang.String str48 = locale40.getVariant();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.getScript();
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet52 = locale49.getExtensionKeys();
        java.lang.String str53 = locale40.getDisplayVariant(locale49);
        java.lang.String str54 = locale49.getISO3Country();
        java.util.Set<java.lang.Character> charSet55 = locale49.getExtensionKeys();
        java.util.Locale.setDefault(locale49);
        java.util.Locale.Builder builder57 = builder21.setLocale(locale49);
        java.util.Locale.Builder builder58 = builder20.setLocale(locale49);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException(throwable63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException65);
        java.lang.Throwable[] throwableArray67 = functionEvaluationException65.getSuppressed();
        java.io.PrintWriter printWriter68 = printWriter8.printf(locale49, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", (java.lang.Object[]) throwableArray67);
        java.io.PrintWriter printWriter70 = printWriter68.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ja" + "'", str28, "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str29, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ja" + "'", str32, "ja");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ja" + "'", str43, "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str44, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fr" + "'", str45, "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "chinois" + "'", str46, "chinois");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "French" + "'", str47, "French");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(printWriter70);
    }

    @Test
    public void test06184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06184");
        java.util.Locale locale2 = new java.util.Locale("Englisch", "\u82f1\u6587 (UNITED KINGDOM)");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u82f1\u6587 (UNITED KINGDOM)");
    }

    @Test
    public void test06185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06185");
        java.util.Locale locale1 = new java.util.Locale("English (United Kingdom)");
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale1.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "english (united kingdom)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "english (united kingdom)" + "'", str2, "english (united kingdom)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "english (united kingdom)" + "'", str3, "english (united kingdom)");
    }

    @Test
    public void test06186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06186");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable27);
        printStream1.print((java.lang.Object) throwable27);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(true);
        printStream31.println((float) (short) 10);
        printStream31.print((long) (short) 10);
        java.io.PrintStream printStream39 = printStream31.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(0.0f);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        java.io.PrintStream printStream54 = printStream41.format(locale44, "japonais", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray58);
        printStream54.print((java.lang.Object) doubleArray58);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.print(0);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.println((long) (-1));
        printWriter67.println((java.lang.Object) "");
        char[] charArray80 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter67.println(charArray80);
        printWriter63.println(charArray80);
        printStream54.print(charArray80);
        printStream31.print(charArray80);
        printStream1.print(charArray80);
        printStream1.print((int) '#');
        printStream1.println((float) ' ');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06187");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setExtension(' ', "china");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test06188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06188");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale locale8 = new java.util.Locale("fran\347ais", "Japanese");
        java.util.Locale locale10 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream26.write(byteArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream26.printf("de", (java.lang.Object[]) complexArray46);
        java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream47, true);
        java.io.PrintStream printStream53 = printStream49.append((java.lang.CharSequence) "de", (int) (short) 0, (int) (byte) 1);
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale54.getLanguage();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer63.transform(doubleArray68);
        double[] doubleArray71 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer63.inversetransform2(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer58.transform(complexArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer74 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray77 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer74.inversetransform2(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer58.inversetransform(complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer81.transform(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer80.inversetransform(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray90 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray88, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer58.inversetransform2(complexArray88);
        java.io.PrintStream printStream92 = printStream49.format(locale54, "japonais", (java.lang.Object[]) complexArray88);
        java.lang.String str93 = locale54.getVariant();
        java.lang.String str94 = locale10.getDisplayLanguage(locale54);
        java.util.Locale locale95 = locale10.stripExtensions();
        java.util.Set<java.lang.Character> charSet96 = locale95.getExtensionKeys();
        java.lang.String str97 = locale2.getDisplayScript(locale95);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ja" + "'", str3, "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str4, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale8.toString(), "fran\347ais_JAPANESE");
        org.junit.Assert.assertEquals(locale10.toString(), "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ja" + "'", str55, "ja");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(printStream92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.apache.commons.math.functionevaluationexception: fr" + "'", str94, "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertNotNull(charSet96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test06189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06189");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print("FR");
        printWriter1.write("und");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean19 = printWriter18.checkError();
        java.util.Locale locale20 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.io.PrintWriter printWriter30 = printWriter18.printf(locale20, "zho", objArray29);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException36);
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) functionEvaluationException36);
        java.io.PrintWriter printWriter40 = printWriter1.format(locale11, "fra", objArray29);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println(false);
        printWriter42.print((int) (short) 1);
        printWriter1.println((java.lang.Object) printWriter42);
        java.io.PrintWriter printWriter51 = printWriter1.append('4');
        printWriter51.print((float) (byte) 0);
        printWriter51.println(false);
        printWriter51.print(true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test06190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06190");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer21.inversetransform(doubleArray27);
        double[] doubleArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray27, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.transform(doubleArray27);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer0.transform(univariateRealFunction33, 0.8813735870195428d, 0.18781088919991634d, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.8813735870195428, 0.18781088919991634]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
    }

    @Test
    public void test06191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06191");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale6);
        java.lang.String str13 = locale6.getDisplayScript();
        java.lang.String str15 = locale6.getExtension('a');
        java.lang.String str16 = locale6.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
    }

    @Test
    public void test06192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06192");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.8813735870195428d, Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.8813735870195428, -Infinity]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06193");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.setLanguageTag("und");
        java.util.Locale.Builder builder9 = builder4.addUnicodeLocaleAttribute("Korean");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder4.removeUnicodeLocaleAttribute("\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ??????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06194");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream14.print((int) '4');
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter18.println(' ');
        printWriter18.println((long) (-1));
        printWriter18.println((java.lang.Object) "");
        char[] charArray31 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter18.println(charArray31);
        printWriter18.println(10);
        printWriter18.print('a');
        char[] charArray37 = new char[] {};
        printWriter18.println(charArray37);
        printStream14.println(charArray37);
        printStream14.print((float) (-1L));
        boolean boolean42 = printStream14.checkError();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream14);
        printStream14.flush();
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.util.Locale locale47 = java.util.Locale.getDefault(category45);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category45, locale48);
        java.util.Locale locale50 = java.util.Locale.getDefault(category45);
        java.util.Locale locale51 = locale50.stripExtensions();
        printStream14.print((java.lang.Object) locale50);
        java.lang.String str53 = locale50.getDisplayScript();
        java.lang.String str54 = locale50.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u82f1\u8a9e" + "'", str54, "\u82f1\u8a9e");
    }

    @Test
    public void test06195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06195");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.lang.String str7 = locale0.getDisplayVariant(locale5);
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale9.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr" + "'", str1, "fr");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u30c9\u30a4\u30c4" + "'", str10, "\u30c9\u30a4\u30c4");
    }

    @Test
    public void test06196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06196");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer7.inversetransform2(doubleArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer7.transform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer7.transform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer0.transform2(doubleArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer43.transform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        double[] doubleArray56 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray49, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.inversetransform(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        double[] doubleArray66 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.inversetransform2(doubleArray66);
        double[] doubleArray69 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray66, (double) 1);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.transform(doubleArray69);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer0.transform(univariateRealFunction71, 74.68593339875962d, (double) ' ', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray70);
    }

    @Test
    public void test06197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06197");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.transform2(doubleArray14);
        java.io.PrintStream printStream18 = printStream1.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray17);
        printStream18.flush();
        printStream18.println((float) (short) 0);
        printStream18.println("zh");
        printStream18.print((float) 'x');
        printStream18.println((long) (byte) 100);
        char[] charArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            printStream18.println(charArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(printStream18);
    }

    @Test
    public void test06198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06198");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean9 = printStream8.checkError();
        java.io.PrintStream printStream11 = printStream8.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        printStream11.println("");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test06199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06199");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("fr-FR", "\u30c9\u30a4\u30c4\u8a9e\u30d5\u30e9\u30f3\u30b9,japonais)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ????? (????,japonais)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06200");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0L, Double.POSITIVE_INFINITY);
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.sqrt();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test06201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06201");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream7.flush();
        java.io.PrintStream printStream10 = new java.io.PrintStream("japonais");
        printStream10.print(true);
        printStream10.println((float) (short) 10);
        printStream10.println((long) (byte) 0);
        printStream10.print(false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(true);
        boolean boolean25 = printStream22.checkError();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream22, true);
        boolean boolean28 = printStream22.checkError();
        printStream22.print("fr-FR");
        java.io.PrintStream printStream32 = new java.io.PrintStream("japonais");
        printStream32.print(true);
        printStream32.println((float) (short) 10);
        printStream32.print((long) (short) 10);
        java.io.PrintStream printStream40 = printStream32.append((java.lang.CharSequence) "fr");
        printStream40.flush();
        java.io.PrintStream printStream43 = new java.io.PrintStream("japonais");
        printStream43.write((int) 'a');
        printStream43.print(0.0f);
        java.io.PrintStream printStream49 = printStream43.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream43.println((float) (short) 1);
        java.io.PrintStream printStream53 = new java.io.PrintStream("japonais");
        printStream53.print(0.0f);
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet57 = locale56.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        java.io.PrintStream printStream66 = printStream53.format(locale56, "japonais", (java.lang.Object[]) complexArray65);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer67.inversetransform2(doubleArray70);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray70);
        printStream66.print((java.lang.Object) doubleArray70);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream66.write(byteArray77);
        printStream43.write(byteArray77, 0, 0);
        printStream40.write(byteArray77);
        printStream22.write(byteArray77);
        printStream10.write(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            printStream7.write(byteArray77, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 10, -1]");
    }

    @Test
    public void test06202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06202");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.transform(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray7);
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer1.inversetransform2(doubleArray7);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer1.transform2(complexArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.print(0.0f);
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        java.io.PrintStream printStream38 = printStream25.format(locale28, "japonais", (java.lang.Object[]) complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray42);
        printStream38.print((java.lang.Object) doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer19.transform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer47.transform2(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer19.inversetransform(complexArray56);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.transform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer19.inversetransform2(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer1.transform(doubleArray64);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray69);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray69);
    }

    @Test
    public void test06203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06203");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer0.transform2(doubleArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray41, (double) (-1.0f));
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.transform(doubleArray48);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer0.inversetransform(univariateRealFunction50, (-0.7350525871447157d), (double) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
    }

    @Test
    public void test06204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06204");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("de_ALLEMAND_zh", "CA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: CA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06205");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream1.println((float) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream24.write(byteArray35);
        printStream1.write(byteArray35, 0, 0);
        printStream1.print(1.557407724654902d);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10, -1]");
    }

    @Test
    public void test06206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06206");
        java.io.PrintStream printStream4 = new java.io.PrintStream("japonais");
        printStream4.print(0.0f);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        java.io.PrintStream printStream17 = printStream4.format(locale7, "japonais", (java.lang.Object[]) complexArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("japonais");
        printStream19.print(true);
        printStream19.println((-1));
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.print(0.0f);
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        java.io.PrintStream printStream38 = printStream25.format(locale28, "japonais", (java.lang.Object[]) complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray42);
        printStream38.print((java.lang.Object) doubleArray42);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream38.write(byteArray49);
        printStream19.write(byteArray49);
        printStream4.write(byteArray49);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        printStream4.println();
        java.io.PrintStream printStream60 = new java.io.PrintStream("japonais");
        printStream60.print(0.0f);
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet64 = locale63.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer66.transform(doubleArray71);
        java.io.PrintStream printStream73 = printStream60.format(locale63, "japonais", (java.lang.Object[]) complexArray72);
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray72, throwable74);
        java.io.PrintStream printStream76 = printStream4.format("ja", (java.lang.Object[]) complexArray72);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter79.println(' ');
        printWriter79.println((long) (-1));
        printWriter79.println((java.lang.Object) "");
        boolean boolean86 = printWriter79.checkError();
        java.util.Locale locale87 = null;
        java.lang.String[] strArray91 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray91);
        java.io.PrintWriter printWriter93 = printWriter79.format(locale87, "zho", (java.lang.Object[]) strArray91);
        java.lang.Throwable throwable94 = null;
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("japonais", (java.lang.Object[]) strArray91, throwable94);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray72, (java.lang.Throwable) mathException95);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException97 = new org.apache.commons.math.FunctionEvaluationException((double) 0L, (java.lang.Throwable) mathException95);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException98 = new org.apache.commons.math.FunctionEvaluationException(0.6074753677218339d, (java.lang.Throwable) functionEvaluationException97);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(printWriter93);
    }

    @Test
    public void test06207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06207");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream11.println(true);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.format("", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.write((int) 'a');
        printStream25.print(0.0f);
        java.io.PrintStream printStream31 = printStream25.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.getISO3Language();
        printStream25.println((java.lang.Object) locale32);
        java.util.Locale locale38 = new java.util.Locale("fra");
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.lang.String str42 = locale32.getDisplayScript(locale38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer44.inversetransform(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, (double) (-1));
        java.io.PrintStream printStream64 = printStream23.format(locale32, "allemand", (java.lang.Object[]) complexArray63);
        printStream64.print((int) (short) 0);
        printStream64.print((float) (short) -1);
        printStream64.print((float) 'u');
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals(locale38.toString(), "fra");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
    }

    @Test
    public void test06208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06208");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale6);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("GB");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setRegion("\u30ab\u30ca\u30c0");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ???? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test06209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06209");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.transform2(doubleArray14);
        java.io.PrintStream printStream18 = printStream1.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray17);
        printStream18.flush();
        printStream18.println((float) (short) 0);
        java.io.PrintStream printStream23 = printStream18.append('x');
        printStream23.print(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test06210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06210");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((double) (short) 100);
        boolean boolean6 = printWriter1.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintStream printStream10 = new java.io.PrintStream("japonais");
        printStream10.print(true);
        boolean boolean13 = printStream10.checkError();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream10, true);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer23.transform(doubleArray28);
        double[] doubleArray31 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer23.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer18.transform(complexArray32);
        java.io.PrintStream printStream34 = printStream10.format(locale16, "fr", (java.lang.Object[]) complexArray33);
        java.lang.String str35 = locale16.getDisplayLanguage();
        java.lang.String str36 = locale16.getScript();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.print(0);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter44.println(' ');
        printWriter44.println((long) (-1));
        printWriter44.println((java.lang.Object) "");
        char[] charArray57 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter44.println(charArray57);
        printWriter40.println(charArray57);
        java.util.Locale locale60 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray67);
        java.io.PrintWriter printWriter69 = printWriter40.format(locale60, "und", (java.lang.Object[]) complexArray67);
        org.apache.commons.math.complex.Complex[] complexArray71 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray67, (double) 'u');
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray71);
        java.io.PrintWriter printWriter73 = printWriter1.printf(locale16, "fr-fr", (java.lang.Object[]) complexArray71);
        java.util.Set<java.lang.String> strSet74 = locale16.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(printStream34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "inglese" + "'", str35, "inglese");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(strSet74);
    }

    @Test
    public void test06211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06211");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.asin();
        double double4 = complex0.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test06212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06212");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u4e2d\u56fd\u8a9e");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        java.io.PrintStream printStream16 = printStream3.format(locale6, "japonais", (java.lang.Object[]) complexArray15);
        boolean boolean17 = printStream16.checkError();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        printWriter1.println((java.lang.Object) printWriter18);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter21.println(' ');
        printWriter21.flush();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter21, false);
        java.io.PrintWriter printWriter28 = printWriter21.append((java.lang.CharSequence) "Japanese");
        printWriter28.println((double) 'x');
        java.io.PrintWriter printWriter32 = printWriter28.append('a');
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.println(' ');
        printWriter35.println((long) (-1));
        printWriter35.println((java.lang.Object) "");
        boolean boolean42 = printWriter35.checkError();
        java.util.Locale locale43 = null;
        java.lang.String[] strArray47 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray47);
        java.io.PrintWriter printWriter49 = printWriter35.format(locale43, "zho", (java.lang.Object[]) strArray47);
        java.io.PrintWriter printWriter50 = printWriter28.format("allemand (Allemagne)", (java.lang.Object[]) strArray47);
        printWriter28.print((int) (short) 1);
        java.io.PrintWriter printWriter54 = printWriter28.append('u');
        printWriter18.print((java.lang.Object) 'u');
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter54);
    }

    @Test
    public void test06213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06213");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.print(true);
        boolean boolean10 = printStream7.checkError();
        printStream7.println();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer15.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer15.inversetransform(complexArray31);
        java.io.PrintStream printStream33 = printStream7.printf(locale12, "de", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer35.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer35.inversetransform(complexArray51);
        java.io.PrintWriter printWriter53 = printWriter1.format(locale12, "GB", (java.lang.Object[]) complexArray52);
        printWriter1.print((long) (short) 100);
        java.util.Locale locale56 = null;
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter61.println(' ');
        printWriter61.print((float) 10L);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter68.println(' ');
        printWriter68.println((long) (-1));
        printWriter68.println((java.lang.Object) "");
        printWriter68.println();
        java.util.Locale locale76 = java.util.Locale.JAPANESE;
        java.lang.String str77 = locale76.getScript();
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        java.lang.String str79 = locale76.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer81.inversetransform2(doubleArray84);
        java.io.PrintWriter printWriter86 = printWriter68.printf(locale76, "ja", (java.lang.Object[]) complexArray85);
        java.io.PrintWriter printWriter87 = printWriter61.format("", (java.lang.Object[]) complexArray85);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException((double) 100.0f, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray85, (java.lang.Throwable) mathException89);
        java.io.PrintWriter printWriter91 = printWriter1.printf(locale56, "zh-CN", (java.lang.Object[]) complexArray85);
        java.io.PrintWriter printWriter93 = printWriter91.append('4');
        java.lang.String[] strArray95 = java.util.Locale.getISOLanguages();
        java.io.PrintWriter printWriter96 = printWriter91.printf("de_ALLEMAND_zh", (java.lang.Object[]) strArray95);
        printWriter91.println();
        printWriter91.print(1.8011719796199461d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printWriter91);
        org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(printWriter96);
    }

    @Test
    public void test06214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06214");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print('a');
        char[] charArray20 = new char[] {};
        printWriter1.println(charArray20);
        printWriter1.print((int) (short) -1);
        printWriter1.println((long) '#');
        java.io.PrintWriter printWriter27 = printWriter1.append('a');
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)", 0, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 117");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(printWriter27);
    }

    @Test
    public void test06215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06215");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(true);
        boolean boolean14 = printStream11.checkError();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream11, true);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        java.io.PrintStream printStream35 = printStream11.format(locale17, "fr", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer37.transform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer54.transform2(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer64.inversetransform2(doubleArray67);
        java.io.PrintStream printStream70 = new java.io.PrintStream("japonais");
        printStream70.print(0.0f);
        java.util.Locale locale73 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet74 = locale73.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray81 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer76.transform(doubleArray81);
        java.io.PrintStream printStream83 = printStream70.format(locale73, "japonais", (java.lang.Object[]) complexArray82);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer84 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray87 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer84.inversetransform2(doubleArray87);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray87);
        printStream83.print((java.lang.Object) doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer64.transform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer54.inversetransform2(doubleArray87);
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer0.inversetransform(doubleArray87);
        double[] doubleArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.transform(doubleArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet74);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(complexArray93);
    }

    @Test
    public void test06216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06216");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray10 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer5.transform(doubleArray10);
        double[] doubleArray13 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer0.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer0.transform2(complexArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
    }

    @Test
    public void test06217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06217");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter6.println(' ');
        printWriter6.print((float) 10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter13.println(' ');
        printWriter13.println((long) (-1));
        printWriter13.println((java.lang.Object) "");
        printWriter13.println();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getScript();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        java.io.PrintWriter printWriter31 = printWriter13.printf(locale21, "ja", (java.lang.Object[]) complexArray30);
        java.io.PrintWriter printWriter32 = printWriter6.format("", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream33 = printStream1.format("de", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream33);
        printStream33.println(false);
        printStream33.println("Deutsch (FRA)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test06218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06218");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getDisplayCountry();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale6.getDisplayVariant();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.getCountry();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer13.inversetransform2(doubleArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("japonais");
        printStream19.print(0.0f);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        java.io.PrintStream printStream32 = printStream19.format(locale22, "japonais", (java.lang.Object[]) complexArray31);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray36);
        printStream32.print((java.lang.Object) doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer13.transform2(doubleArray36);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.print((float) 10L);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.println(' ');
        printWriter49.println((long) (-1));
        printWriter49.println((java.lang.Object) "");
        printWriter49.println();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getScript();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = locale57.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray65 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer62.inversetransform2(doubleArray65);
        java.io.PrintWriter printWriter67 = printWriter49.printf(locale57, "ja", (java.lang.Object[]) complexArray66);
        java.io.PrintWriter printWriter68 = printWriter42.format("", (java.lang.Object[]) complexArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer13.inversetransform(complexArray66);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer70 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray75 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer70.transform(doubleArray75);
        double[] doubleArray78 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer70.inversetransform2(doubleArray78);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer13.inversetransform2(doubleArray78);
        java.io.PrintStream printStream81 = printStream3.format(locale6, "Chinesisch", (java.lang.Object[]) complexArray80);
        java.lang.String str82 = locale6.toLanguageTag();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale84 = java.util.Locale.getDefault(category0);
        java.util.Locale locale85 = java.util.Locale.getDefault(category0);
        java.lang.String str86 = locale85.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "fr" + "'", str82, "fr");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test06219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06219");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream33);
        printStream33.write(10);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test06220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06220");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException: fr");
        printStream1.println(true);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter6.println(' ');
        printWriter6.println((long) (-1));
        printWriter6.println((java.lang.Object) "");
        printWriter6.println();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter6.println((java.lang.Object) printWriter15);
        printWriter15.print((float) (-1));
        printWriter15.println('4');
        java.io.PrintWriter printWriter22 = printWriter15.append('4');
        printWriter15.write((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleAttributes();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = locale28.getLanguage();
        java.lang.String str34 = locale25.getDisplayName(locale28);
        java.lang.String str35 = locale28.getDisplayName();
        java.lang.String str36 = locale28.getVariant();
        java.io.PrintStream printStream39 = new java.io.PrintStream("japonais");
        printStream39.print(0.0f);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        java.io.PrintStream printStream52 = printStream39.format(locale42, "japonais", (java.lang.Object[]) complexArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        printStream52.print((java.lang.Object) doubleArray56);
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        boolean boolean61 = locale60.hasExtensions();
        java.lang.String str62 = locale60.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        java.io.PrintStream printStream71 = printStream52.printf(locale60, "GB", (java.lang.Object[]) complexArray70);
        org.apache.commons.math.complex.Complex[] complexArray73 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray70, (double) 0.0f);
        java.io.PrintWriter printWriter74 = printWriter15.format(locale28, "ja", (java.lang.Object[]) complexArray73);
        java.io.PrintStream printStream75 = printStream1.printf("Deutsch (FRA)", (java.lang.Object[]) complexArray73);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ja" + "'", str31, "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str32, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr" + "'", str33, "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "chinois" + "'", str34, "chinois");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "francese" + "'", str35, "francese");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(printStream75);
    }

    @Test
    public void test06221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06221");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream1.println((float) (short) 1);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream24.write(byteArray35);
        printStream1.write(byteArray35, 0, 0);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean41 = printStream1.checkError();
        printStream1.print((float) 100);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test06222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06222");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale0.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr" + "'", str1, "fr");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
    }

    @Test
    public void test06223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06223");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("FR", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("Chine", strMap14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("fr", strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getISO3Country();
        java.lang.String str30 = locale28.getDisplayScript();
        java.util.Set<java.lang.String> strSet31 = locale28.getUnicodeLocaleKeys();
        java.lang.String str32 = locale28.getISO3Language();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.toLanguageTag();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale34.getISO3Language();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleKeys();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.toLanguageTag();
        boolean boolean45 = locale43.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.getISO3Country();
        java.lang.String str48 = locale46.getDisplayScript();
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleKeys();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.lang.String str52 = locale51.getDisplayCountry();
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleKeys();
        java.lang.String str59 = locale55.getISO3Language();
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale28, locale33, locale34, locale38, locale39, locale42, locale43, locale46, locale50, locale51, locale53, locale54, locale55 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale locale64 = java.util.Locale.lookup(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale.LanguageRange languageRange66 = new java.util.Locale.LanguageRange("FR");
        double double67 = languageRange66.getWeight();
        java.lang.String str68 = languageRange66.getRange();
        java.util.Locale.LanguageRange languageRange70 = new java.util.Locale.LanguageRange("FR");
        double double71 = languageRange70.getWeight();
        java.lang.String str72 = languageRange70.getRange();
        double double73 = languageRange70.getWeight();
        java.util.Locale.LanguageRange languageRange75 = new java.util.Locale.LanguageRange("FR");
        double double76 = languageRange75.getWeight();
        java.lang.String str77 = languageRange75.getRange();
        java.lang.String str78 = languageRange75.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] { languageRange66, languageRange70, languageRange75 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        java.lang.String str83 = locale82.getISO3Country();
        java.util.Locale locale84 = java.util.Locale.JAPANESE;
        java.lang.String str85 = locale84.getLanguage();
        java.lang.String str86 = locale82.getDisplayName(locale84);
        java.lang.String str87 = locale82.getLanguage();
        java.util.Set<java.lang.String> strSet88 = locale82.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet88, filteringMode89);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList15, (java.util.Collection<java.util.Locale>) localeList61, filteringMode89);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap93 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList94 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap93);
        java.util.Locale locale96 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: fr");
        java.util.Set<java.lang.String> strSet97 = locale96.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList98 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet97);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fra" + "'", str37, "fra");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ja" + "'", str40, "ja");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fra" + "'", str59, "fra");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fr" + "'", str68, "fr");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fr" + "'", str72, "fr");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fr" + "'", str77, "fr");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fr" + "'", str78, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ja" + "'", str85, "ja");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str86, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "fr" + "'", str87, "fr");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode89.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(languageRangeList94);
        org.junit.Assert.assertEquals(locale96.toString(), "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertNotNull(strList98);
    }

    @Test
    public void test06224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06224");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.8734582355173112d, (-1.163916074336452d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.8734582355173112, -1.163916074336452]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06225");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer6.transform(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer15.transform2(doubleArray21);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer5.transform(doubleArray21);
        double[] doubleArray28 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray21, 74.68593339875962d);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer0.transform(doubleArray28);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer0.transform(univariateRealFunction30, 117.0d, 74.68593339875962d, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [117.0, 74.68593339875962]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[2614.0076689565867, 7468.593339875962, 0.0, 3883.6685367355]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[2614.0076689565867, 7468.593339875962, 0.0, 3883.6685367355]");
        org.junit.Assert.assertNotNull(complexArray29);
    }

    @Test
    public void test06226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06226");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer0.inversetransform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.inversetransform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer20.transform(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.transform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer9.transform(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer9.inversetransform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer39.inversetransform2(doubleArray42);
        java.io.PrintStream printStream45 = new java.io.PrintStream("japonais");
        printStream45.print(0.0f);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        java.io.PrintStream printStream58 = printStream45.format(locale48, "japonais", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        printStream58.print((java.lang.Object) doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer39.transform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer68.transform(doubleArray73);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer67.transform2(doubleArray73);
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer39.inversetransform(complexArray76);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray84 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer79.transform(doubleArray84);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer78.transform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer39.inversetransform2(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray89 = fastFourierTransformer9.inversetransform(doubleArray84);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform2(doubleArray84);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray95 = fastFourierTransformer0.inversetransform(univariateRealFunction91, (double) (-1L), 1.5707963267948966d, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray85);
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray89);
        org.junit.Assert.assertNotNull(complexArray90);
    }

    @Test
    public void test06227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06227");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer34.inversetransform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        double[] doubleArray52 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer54.inversetransform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer44.transform(complexArray63);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer66.transform(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer65.inversetransform(doubleArray71);
        double[] doubleArray75 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer44.transform(doubleArray71);
        double[] doubleArray78 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray71, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer0.transform(doubleArray71);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer0.transform(univariateRealFunction80, 0.7456241416655579d, 0.5403023058681398d, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.7456241416655579, 0.5403023058681398]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-0.0, -0.0, -0.0, -0.0]");
        org.junit.Assert.assertNotNull(complexArray79);
    }

    @Test
    public void test06228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06228");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale10 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean11 = locale10.hasExtensions();
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.print(true);
        boolean boolean17 = printStream14.checkError();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream14, true);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter22.println(' ');
        printWriter22.println((long) (-1));
        printWriter22.println((java.lang.Object) "");
        printWriter22.println();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter22.println((java.lang.Object) printWriter31);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        printWriter34.println((java.lang.Object) true);
        printWriter34.print("org.apache.commons.math.MathException");
        printWriter34.println((float) (byte) 0);
        printWriter34.print((double) 1);
        java.util.Locale locale44 = new java.util.Locale("hi!");
        java.lang.String str45 = locale44.getLanguage();
        java.io.PrintStream printStream48 = new java.io.PrintStream("japonais");
        printStream48.print(0.0f);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform(doubleArray59);
        java.io.PrintStream printStream61 = printStream48.format(locale51, "japonais", (java.lang.Object[]) complexArray60);
        java.io.PrintWriter printWriter62 = printWriter34.format(locale44, "ja", (java.lang.Object[]) complexArray60);
        java.io.PrintStream printStream63 = printStream14.format("und", (java.lang.Object[]) complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray60);
        java.io.PrintStream printStream65 = printStream1.format(locale10, "Englisch", (java.lang.Object[]) complexArray60);
        java.io.PrintStream printStream67 = new java.io.PrintStream("japonais");
        printStream67.print(true);
        printStream67.println((float) (short) 10);
        printStream67.print((long) (short) 10);
        java.io.PrintStream printStream75 = printStream67.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream77 = new java.io.PrintStream((java.io.OutputStream) printStream75, true);
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.OutputStream) printStream75);
        printWriter78.print((double) 10L);
        printStream65.print((java.lang.Object) 10L);
        org.junit.Assert.assertNotNull(printStream7);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(printStream75);
    }

    @Test
    public void test06229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06229");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream1.print(true);
        java.io.PrintStream printStream11 = printStream1.append('x');
        java.io.PrintStream printStream13 = new java.io.PrintStream("japonais");
        printStream13.print(0.0f);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        java.io.PrintStream printStream26 = printStream13.format(locale16, "japonais", (java.lang.Object[]) complexArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray30);
        printStream26.print((java.lang.Object) doubleArray30);
        printStream26.println((long) (-1));
        printStream26.close();
        printStream11.print((java.lang.Object) printStream26);
        printStream11.print(' ');
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
    }

    @Test
    public void test06230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06230");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zh");
        printWriter1.flush();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer4 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray9 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray10 = fastFourierTransformer4.transform(doubleArray9);
        double[] doubleArray12 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer4.inversetransform2(doubleArray12);
        java.io.PrintWriter printWriter14 = printWriter1.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray13);
        printWriter1.print((-1.0f));
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter17.write("kor");
        java.io.PrintStream printStream21 = new java.io.PrintStream("japonais");
        printStream21.print(true);
        printStream21.println((float) (short) 10);
        printStream21.print((long) (short) 10);
        java.io.PrintStream printStream29 = printStream21.append((java.lang.CharSequence) "fr");
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        printStream32.write(0);
        printStream32.println((float) (short) -1);
        printWriter17.print((java.lang.Object) printStream32);
        printWriter17.print((int) 'a');
        java.io.PrintWriter printWriter41 = printWriter17.append('u');
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printWriter41);
    }

    @Test
    public void test06231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06231");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.println((java.lang.Object) true);
        printWriter13.print("org.apache.commons.math.MathException");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.print(0.0f);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        java.io.PrintStream printStream43 = printStream30.format(locale33, "japonais", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        printStream43.print((java.lang.Object) doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer24.transform2(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer19.transform(complexArray51);
        java.io.PrintWriter printWriter53 = printWriter13.format("en", (java.lang.Object[]) complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray52);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
    }

    @Test
    public void test06232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06232");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: chinois (Chine)", 0.9888977057628651d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: chinois (chine)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06233");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println('#');
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream12.println(10.0d);
        printStream12.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test06234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06234");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale3.getDisplayName(locale5);
        java.lang.String str8 = locale3.getLanguage();
        java.lang.String str9 = locale0.getDisplayName(locale3);
        java.lang.String str10 = locale3.getDisplayName();
        java.lang.String str11 = locale3.getVariant();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getScript();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.lang.String str16 = locale3.getDisplayVariant(locale12);
        java.lang.String str17 = locale12.getISO3Country();
        java.util.Set<java.lang.Character> charSet18 = locale12.getExtensionKeys();
        java.lang.String str19 = locale12.getScript();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayScript();
        java.lang.String str23 = locale21.getISO3Country();
        java.lang.String str24 = locale21.getDisplayScript();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.util.Locale.setDefault(category25, locale26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category25);
        java.util.Locale locale31 = java.util.Locale.getDefault(category25);
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.lang.String str33 = locale21.getDisplayCountry(locale31);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.toLanguageTag();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale34.getLanguage();
        java.util.Locale locale39 = new java.util.Locale("hi!");
        java.lang.String str40 = locale39.getISO3Country();
        java.lang.String str41 = locale34.getDisplayName(locale39);
        java.lang.String str42 = locale21.getDisplayScript(locale39);
        java.util.Locale locale44 = new java.util.Locale("hi!");
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale44.getISO3Country();
        java.lang.String str47 = locale44.getDisplayScript();
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getCountry();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale locale53 = java.util.Locale.getDefault(category48);
        java.util.Locale locale54 = java.util.Locale.getDefault(category48);
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        java.lang.String str56 = locale44.getDisplayCountry(locale54);
        java.lang.String str57 = locale44.getDisplayLanguage();
        java.lang.String str58 = locale21.getDisplayScript(locale44);
        java.lang.String str59 = locale12.getDisplayScript(locale21);
        java.util.Set<java.lang.String> strSet60 = locale12.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ja" + "'", str6, "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str7, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois" + "'", str9, "chinois");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "francese" + "'", str10, "francese");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fr" + "'", str37, "fr");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "French" + "'", str41, "French");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale44.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
    }

    @Test
    public void test06235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06235");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("japonais");
        printStream20.print(0.0f);
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream20.format(locale23, "japonais", (java.lang.Object[]) complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer34.inversetransform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray37);
        printStream33.print((java.lang.Object) doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer14.transform2(doubleArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer14.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer7.transform2(doubleArray45);
        double[] doubleArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray45, (double) 'u');
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.transform(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer54.inversetransform(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.transform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer67.inversetransform2(doubleArray70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray71);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("FR");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "zh", (java.lang.Object[]) complexArray71, (java.lang.Throwable) mathException74);
        org.apache.commons.math.complex.Complex[] complexArray76 = fastFourierTransformer0.transform(complexArray71);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer0.transform(univariateRealFunction77, (double) (byte) 0, (double) 100.0f, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 117.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 117.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray76);
    }

    @Test
    public void test06236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06236");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        java.io.PrintWriter printWriter17 = printWriter1.append('#');
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter17);
    }

    @Test
    public void test06237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06237");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setLanguage("org.apache.commons.math.functionevaluationexception: chinesisch (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION,United States)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.functionevaluationexception: chinesisch (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION,United States) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
    }

    @Test
    public void test06238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06238");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.sinh();
        org.apache.commons.math.complex.Complex complex3 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex2.acos();
        org.apache.commons.math.complex.Complex complex5 = complex2.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test06239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06239");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        java.io.PrintStream printStream29 = printStream16.format(locale19, "japonais", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        printStream29.print((java.lang.Object) doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer10.transform2(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer41.inversetransform2(doubleArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer46.transform(doubleArray51);
        double[] doubleArray54 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.inversetransform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer41.transform(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer41.inversetransform(complexArray61);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException68);
        java.lang.Throwable[] throwableArray70 = functionEvaluationException68.getSuppressed();
        java.lang.Throwable[] throwableArray71 = functionEvaluationException68.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException68.addSuppressed((java.lang.Throwable) functionEvaluationException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException74);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform(complexArray62);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform(univariateRealFunction79, 0.7071067811865475d, 0.0d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(complexArray78);
    }

    @Test
    public void test06240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06240");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math.complex.Complex complex3 = complex1.cos();
        org.apache.commons.math.complex.Complex complex4 = complex1.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex10.acos();
        org.apache.commons.math.complex.Complex complex12 = complex11.negate();
        org.apache.commons.math.complex.Complex complex13 = complex9.multiply(complex11);
        org.apache.commons.math.complex.Complex complex14 = complex11.atan();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.acos();
        org.apache.commons.math.complex.Complex complex19 = complex11.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex21 = complex4.divide(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex21.cos();
        boolean boolean23 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex24 = complex21.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test06241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06241");
        java.util.Locale locale1 = new java.util.Locale("fra");
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.lang.String str5 = locale1.getDisplayScript();
        java.util.Locale locale8 = new java.util.Locale("Franz\366sisch", "zh");
        java.lang.String str9 = locale1.getDisplayLanguage(locale8);
        java.lang.String str10 = locale1.getDisplayScript();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex11.acos();
        org.apache.commons.math.complex.Complex complex17 = complex11.tan();
        org.apache.commons.math.complex.Complex complex18 = complex11.atan();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex19.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.getImaginary();
        org.apache.commons.math.complex.Complex complex30 = complex27.cos();
        org.apache.commons.math.complex.Complex complex31 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex27.acos();
        org.apache.commons.math.complex.Complex complex33 = complex27.cos();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cos();
        org.apache.commons.math.complex.Complex complex36 = complex34.cos();
        org.apache.commons.math.complex.Complex complex37 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex34);
        org.apache.commons.math.complex.Complex complex39 = complex19.pow(complex34);
        org.apache.commons.math.complex.Complex complex40 = complex39.sin();
        boolean boolean41 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex40.atan();
        org.apache.commons.math.complex.Complex complex43 = complex40.asin();
        org.apache.commons.math.complex.Complex complex44 = complex11.add(complex43);
        boolean boolean45 = locale1.equals((java.lang.Object) complex44);
        org.junit.Assert.assertEquals(locale1.toString(), "fra");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale8.toString(), "franz\366sisch_ZH");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fra" + "'", str9, "fra");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test06242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06242");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex1.negate();
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.getImaginary();
        org.apache.commons.math.complex.Complex complex9 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex11 = complex9.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex10.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex22.multiply(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex26.log();
        org.apache.commons.math.complex.Complex complex28 = complex18.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex18.atan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z();
        org.apache.commons.math.complex.Complex complex32 = complex31.tan();
        org.apache.commons.math.complex.Complex complex33 = complex18.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex4.pow(complex32);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test06243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06243");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("allemand");
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] { languageRange6 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList25, filteringMode28);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray36 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList37);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = locale40.getDisplayScript();
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleKeys();
        java.lang.String str44 = locale40.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.toLanguageTag();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getISO3Language();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.toLanguageTag();
        boolean boolean57 = locale55.hasExtensions();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.getDisplayScript();
        java.util.Set<java.lang.String> strSet61 = locale58.getUnicodeLocaleKeys();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale63.getDisplayCountry();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = locale67.getISO3Country();
        java.lang.String str69 = locale67.getDisplayScript();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleKeys();
        java.lang.String str71 = locale67.getISO3Language();
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale40, locale45, locale46, locale50, locale51, locale54, locale55, locale58, locale62, locale63, locale65, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale locale75 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Locale locale76 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getCountry();
        java.lang.String str80 = locale77.getDisplayCountry(locale78);
        java.lang.String str81 = locale76.getDisplayLanguage(locale78);
        java.util.Locale.Builder builder82 = builder4.setLocale(locale76);
        java.lang.String str83 = locale76.getDisplayName();
        java.lang.Class<?> wildcardClass84 = locale76.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode28.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr" + "'", str30, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fr" + "'", str47, "fr");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fra" + "'", str49, "fra");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ja" + "'", str52, "ja");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr" + "'", str56, "fr");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fran\347ais" + "'", str81, "fran\347ais");
        org.junit.Assert.assertNotNull(builder82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "fran\347ais" + "'", str83, "fran\347ais");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test06244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06244");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale9);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category11, locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale14);
        java.lang.String str17 = locale14.getDisplayCountry();
        java.lang.String str18 = locale14.getISO3Language();
        java.lang.String str19 = locale14.toLanguageTag();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eng" + "'", str18, "eng");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
    }

    @Test
    public void test06245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06245");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter5.println(false);
        printWriter5.write(0);
        printWriter5.println((float) '#');
        java.lang.Object obj12 = null;
        printWriter5.println(obj12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test06246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06246");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream9.println();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test06247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06247");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex7.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex16.cosh();
        boolean boolean20 = complex5.equals((java.lang.Object) complex19);
        org.apache.commons.math.complex.Complex complex21 = complex5.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test06248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06248");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        boolean boolean11 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex12 = complex3.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex18 = complex10.subtract(complex13);
        double double19 = complex18.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test06249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06249");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(true);
        boolean boolean14 = printStream11.checkError();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream11, true);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        java.io.PrintStream printStream35 = printStream11.format(locale17, "fr", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.transform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer47.inversetransform2(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer37.transform(complexArray51);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.inversetransform(complexArray52);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("und", (java.lang.Object[]) complexArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.transform(complexArray61);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.transform2(univariateRealFunction64, (double) (byte) 0, 0.8414709848078965d, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
    }

    @Test
    public void test06250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06250");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter17.flush();
        java.io.PrintWriter printWriter20 = printWriter17.append(' ');
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test06251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06251");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr-FR");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale15 = java.util.Locale.getDefault(category10);
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = locale15.getDisplayScript(locale17);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.println(false);
        printWriter24.print("FR");
        printWriter24.write("und");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean42 = printWriter41.checkError();
        java.util.Locale locale43 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray50);
        java.lang.Object[] objArray52 = mathException51.getArguments();
        java.io.PrintWriter printWriter53 = printWriter41.printf(locale43, "zho", objArray52);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException59);
        double double61 = functionEvaluationException59.getArgument();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray52, (java.lang.Throwable) functionEvaluationException59);
        java.io.PrintWriter printWriter63 = printWriter24.format(locale34, "fra", objArray52);
        java.io.PrintStream printStream64 = printStream9.format(locale15, "\u30d5\u30e9\u30f3\u30b9\u8a9e", objArray52);
        java.io.PrintStream printStream66 = new java.io.PrintStream("japonais");
        printStream66.print(0.0f);
        java.util.Locale locale69 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray77 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform(doubleArray77);
        java.io.PrintStream printStream79 = printStream66.format(locale69, "japonais", (java.lang.Object[]) complexArray78);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer80 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer80.inversetransform2(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray83);
        printStream79.print((java.lang.Object) doubleArray83);
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream79.write(byteArray90);
        printStream64.write(byteArray90);
        printStream64.print(1L);
        printStream64.println();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 10, -1]");
    }

    @Test
    public void test06252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06252");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        printWriter1.print(false);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex11.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex23.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex19.divide(complex26);
        printWriter1.print((java.lang.Object) complex26);
        org.apache.commons.math.complex.Complex complex30 = complex26.cosh();
        boolean boolean31 = complex26.isNaN();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test06253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06253");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer3.transform(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray8);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.transform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer12.inversetransform2(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer2.transform(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(0.0f);
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray42 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer37.transform(doubleArray42);
        java.io.PrintStream printStream44 = printStream31.format(locale34, "japonais", (java.lang.Object[]) complexArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer45.inversetransform2(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray48);
        printStream44.print((java.lang.Object) doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer25.transform2(doubleArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer53.inversetransform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer25.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer18.transform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer2.inversetransform(complexArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray61);
        java.lang.String[] strArray68 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray68);
        double double70 = functionEvaluationException69.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, "und", (java.lang.Throwable) functionEvaluationException69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', (java.lang.Throwable) functionEvaluationException69);
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException(throwable77);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable77);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException79);
        java.lang.Throwable[] throwableArray81 = functionEvaluationException79.getSuppressed();
        java.lang.Throwable[] throwableArray82 = functionEvaluationException79.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException79.addSuppressed((java.lang.Throwable) functionEvaluationException85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, (java.lang.Throwable) functionEvaluationException79);
        functionEvaluationException72.addSuppressed((java.lang.Throwable) functionEvaluationException87);
        double double89 = functionEvaluationException72.getArgument();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("giapponese", (java.lang.Object[]) complexArray61, (java.lang.Throwable) functionEvaluationException72);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("Germany", (java.lang.Throwable) functionEvaluationException72);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 100.0d + "'", double70 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 32.0d + "'", double89 == 32.0d);
    }

    @Test
    public void test06254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06254");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        printStream14.write((int) '#');
        boolean boolean24 = printStream14.checkError();
        java.io.PrintStream printStream26 = printStream14.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: hi!");
        printStream26.println('a');
        printStream26.print("inglese");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test06255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06255");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.print((java.lang.Object) "fran\347ais");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter18.println(' ');
        printWriter18.println((long) (-1));
        printWriter18.println((java.lang.Object) "");
        boolean boolean25 = printWriter18.checkError();
        java.util.Locale locale26 = null;
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter32 = printWriter18.format(locale26, "zho", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter33 = printWriter13.format("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) strArray30);
        printWriter13.write((int) '#');
        printWriter13.write((int) (short) 1);
        boolean boolean38 = printWriter13.checkError();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter42 = printWriter13.append((java.lang.CharSequence) "de-de", (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -97");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06256");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.inversetransform(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer33.transform(doubleArray38);
        double[] doubleArray41 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer33.inversetransform2(doubleArray41);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.inversetransform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer54.transform2(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer44.transform(doubleArray60);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray60, 74.68593339875962d);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.transform2(doubleArray67);
        org.apache.commons.math.complex.Complex[] complexArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, (double) 100);
        org.apache.commons.math.complex.Complex[] complexArray72 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray68, 0.9888977057628651d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2614.0076689565867, 7468.593339875962, 0.0, 3883.6685367355]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[2614.0076689565867, 7468.593339875962, 0.0, 3883.6685367355]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray72);
    }

    @Test
    public void test06257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06257");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale4 = new java.util.Locale("und", "org.apache.commons.math.FunctionEvaluationException");
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.toLanguageTag();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getISO3Country();
        java.lang.String str10 = locale4.getDisplayVariant(locale5);
        java.lang.String str11 = locale0.getDisplayVariant(locale4);
        java.util.Set<java.lang.String> strSet12 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.getISO3Language();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale locale18 = java.util.Locale.getDefault(category13);
        java.io.PrintStream printStream20 = new java.io.PrintStream("japonais");
        printStream20.print(true);
        boolean boolean23 = printStream20.checkError();
        printStream20.println();
        printStream20.print((-1));
        printStream20.println((float) (-1));
        java.util.Locale locale32 = new java.util.Locale("de", "allemand", "zh");
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter35.print(0);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter39.println(' ');
        printWriter39.println((long) (-1));
        printWriter39.println((java.lang.Object) "");
        char[] charArray52 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter39.println(charArray52);
        printWriter35.println(charArray52);
        java.util.Locale locale55 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray62);
        java.io.PrintWriter printWriter64 = printWriter35.format(locale55, "und", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray66 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray62, (double) 'u');
        java.io.PrintStream printStream67 = printStream20.format(locale32, "org.apache.commons.math.FunctionEvaluationException", (java.lang.Object[]) complexArray62);
        java.util.Locale.setDefault(category13, locale32);
        java.util.Set<java.lang.Character> charSet69 = locale32.getExtensionKeys();
        java.lang.String str70 = locale0.getDisplayName(locale32);
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale71);
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale73.toLanguageTag();
        boolean boolean75 = locale73.hasExtensions();
        java.lang.String str76 = locale73.getISO3Language();
        java.lang.String str77 = locale71.getDisplayName(locale73);
        java.util.Set<java.lang.Character> charSet78 = locale73.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet79 = locale73.getExtensionKeys();
        java.util.Locale locale81 = java.util.Locale.forLanguageTag("");
        java.lang.String str82 = locale81.getDisplayLanguage();
        java.lang.String str83 = locale73.getDisplayCountry(locale81);
        java.lang.String str84 = locale81.getISO3Language();
        java.lang.String str85 = locale32.getDisplayCountry(locale81);
        java.lang.String str86 = locale32.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals(locale4.toString(), "und_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fr" + "'", str6, "fr");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fra" + "'", str16, "fra");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale32.toString(), "de_ALLEMAND_zh");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Koreanisch" + "'", str70, "Koreanisch");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fr" + "'", str74, "fr");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fra" + "'", str76, "fra");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "japonais" + "'", str77, "japonais");
        org.junit.Assert.assertNotNull(charSet78);
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ALLEMAND" + "'", str85, "ALLEMAND");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test06258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06258");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setScript("China");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: China [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06259");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream33.print((int) (short) 10);
        printStream33.println();
        java.util.Locale locale46 = new java.util.Locale("de", "fr", "japonais");
        java.io.PrintStream printStream49 = new java.io.PrintStream("japonais");
        printStream49.print(true);
        printStream49.println("Chinesisch");
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException(throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException60);
        java.lang.Throwable[] throwableArray62 = functionEvaluationException60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = functionEvaluationException60.getSuppressed();
        java.io.PrintStream printStream64 = printStream49.format("hi!", (java.lang.Object[]) throwableArray63);
        java.io.PrintStream printStream65 = printStream33.format(locale46, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", (java.lang.Object[]) throwableArray63);
        printStream33.println((-1.0f));
        boolean boolean68 = printStream33.checkError();
        java.io.PrintStream printStream70 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertEquals(locale46.toString(), "de_FR_japonais");
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06260");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer5.transform2(doubleArray28);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.print((float) 10L);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter41.println(' ');
        printWriter41.println((long) (-1));
        printWriter41.println((java.lang.Object) "");
        printWriter41.println();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.getScript();
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        java.io.PrintWriter printWriter59 = printWriter41.printf(locale49, "ja", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter60 = printWriter34.format("", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer5.inversetransform(complexArray58);
        java.lang.Throwable throwable65 = null;
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException(throwable65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException67);
        java.lang.Object[] objArray69 = functionEvaluationException68.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray58, (java.lang.Throwable) functionEvaluationException68);
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException(throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException76);
        java.lang.Throwable[] throwableArray78 = functionEvaluationException76.getSuppressed();
        java.lang.Throwable[] throwableArray79 = functionEvaluationException76.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException76.addSuppressed((java.lang.Throwable) functionEvaluationException82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "zh", (java.lang.Object[]) complexArray58, (java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray58);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test06261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06261");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.functionevaluationexception_DEU_zho");
        printWriter1.println('4');
        printWriter1.println(false);
    }

    @Test
    public void test06262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06262");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale.setDefault(category8, locale13);
        java.util.Locale.Builder builder16 = builder4.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setScript("JA_JP");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: JA_JP [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06263");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex5.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex7.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex5.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.cos();
        org.apache.commons.math.complex.Complex complex19 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex15.acos();
        org.apache.commons.math.complex.Complex complex21 = complex15.cos();
        org.apache.commons.math.complex.Complex complex22 = complex5.add(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex21.atan();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test06264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06264");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getCountry();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category4);
        java.util.Locale locale10 = java.util.Locale.getDefault(category4);
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder14 = builder0.clear();
        java.util.Locale.Builder builder16 = builder0.removeUnicodeLocaleAttribute("Chinese");
        java.util.Locale.Builder builder18 = builder16.setLanguage("zho");
        java.util.Locale.Builder builder20 = builder16.removeUnicodeLocaleAttribute("japanese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder20.setUnicodeLocaleKeyword("fra", "\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06265");
        java.io.PrintStream printStream1 = new java.io.PrintStream("allemand (Allemagne)");
        printStream1.print(true);
        java.io.PrintStream printStream5 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: fr");
        printStream5.print(Double.NaN);
        printStream5.write(1);
        org.junit.Assert.assertNotNull(printStream5);
    }

    @Test
    public void test06266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06266");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Japanese");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("fr", strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.getDisplayScript();
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleKeys();
        java.lang.String str18 = locale14.getISO3Language();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.toLanguageTag();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getISO3Language();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.toLanguageTag();
        boolean boolean31 = locale29.hasExtensions();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.getDisplayScript();
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleKeys();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getDisplayCountry();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.getDisplayScript();
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleKeys();
        java.lang.String str45 = locale41.getISO3Language();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale14, locale19, locale20, locale24, locale25, locale28, locale29, locale32, locale36, locale37, locale39, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale locale50 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList53, strMap54);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr" + "'", str21, "fr");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fra" + "'", str23, "fra");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ja" + "'", str26, "ja");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr" + "'", str30, "fr");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fra" + "'", str45, "fra");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(languageRangeList55);
    }

    @Test
    public void test06267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06267");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer28.inversetransform2(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer0.inversetransform(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer34.inversetransform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer0.transform2(doubleArray40);
        java.io.PrintStream printStream48 = new java.io.PrintStream("japonais");
        printStream48.print(true);
        boolean boolean51 = printStream48.checkError();
        printStream48.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer56.transform(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer55.transform2(doubleArray61);
        java.io.PrintStream printStream65 = printStream48.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) complexArray64, (java.lang.Throwable) functionEvaluationException67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION", (java.lang.Object[]) complexArray64);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer0.transform(complexArray64);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer71.transform(doubleArray76);
        double[] doubleArray79 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer71.inversetransform2(doubleArray79);
        double[] doubleArray82 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray79, (double) 1);
        double[] doubleArray84 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray82, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.transform2(doubleArray82);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.transform2(univariateRealFunction86, (double) 'x', 0.40523798948758216d, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-0.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-0.0]");
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test06268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06268");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "ja", (java.lang.Object[]) complexArray18);
        java.util.Set<java.lang.String> strSet20 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale9.toLanguageTag();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale.setDefault(category22, locale23);
        java.lang.String str27 = locale23.getVariant();
        java.lang.String str28 = locale9.getDisplayScript(locale23);
        java.util.Locale locale30 = new java.util.Locale("de-DE");
        java.util.Locale.setDefault(locale30);
        java.lang.String str32 = locale9.getDisplayName(locale30);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.getImaginary();
        org.apache.commons.math.complex.Complex complex36 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex38 = complex36.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt1z();
        org.apache.commons.math.complex.Complex complex42 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex40.divide(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex38.add(complex46);
        boolean boolean48 = locale30.equals((java.lang.Object) complex38);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ja" + "'", str21, "ja");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fra" + "'", str25, "fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale30.toString(), "de-de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japanese" + "'", str32, "Japanese");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06269");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getVariant();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println(' ');
        printWriter5.println((long) (-1));
        printWriter5.println((java.lang.Object) "");
        printWriter5.println();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println((java.lang.Object) printWriter14);
        printWriter14.flush();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("zh");
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale19.getScript();
        java.lang.String str22 = locale17.getDisplayCountry(locale19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("japonais");
        printStream32.print(0.0f);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        java.io.PrintStream printStream45 = printStream32.format(locale35, "japonais", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        printStream45.print((java.lang.Object) doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer26.transform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer55.transform(doubleArray60);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer54.transform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer26.inversetransform(complexArray63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException(0.8414709848078965d, "", (java.lang.Object[]) complexArray64, (java.lang.Throwable) mathException65);
        java.io.PrintWriter printWriter67 = printWriter14.format(locale19, "", (java.lang.Object[]) complexArray64);
        java.lang.String str68 = locale0.getDisplayVariant(locale19);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayLanguage(locale71);
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale73.getLanguage();
        java.lang.String str75 = locale70.getDisplayLanguage(locale73);
        java.lang.String str76 = locale70.toLanguageTag();
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder78 = builder77.clear();
        java.util.Locale locale79 = builder78.build();
        java.lang.String str80 = locale70.getDisplayScript(locale79);
        java.lang.String str81 = locale70.getDisplayCountry();
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.util.Locale locale83 = java.util.Locale.FRENCH;
        java.lang.String str84 = locale83.getCountry();
        java.lang.String str85 = locale82.getDisplayCountry(locale83);
        java.lang.String str86 = locale83.getDisplayCountry();
        java.lang.String str87 = locale70.getDisplayCountry(locale83);
        java.util.Locale locale90 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: hi!", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean91 = locale90.hasExtensions();
        java.lang.String str92 = locale83.getDisplayVariant(locale90);
        java.lang.String str93 = locale0.getDisplayVariant(locale83);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "China" + "'", str3, "China");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u5fb7\u56fd" + "'", str22, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ja" + "'", str74, "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "und" + "'", str76, "und");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
// flaky:         org.junit.Assert.assertEquals(locale90.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test06270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06270");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex1.negate();
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.acos();
        org.apache.commons.math.complex.Complex complex11 = complex10.asin();
        boolean boolean13 = complex11.equals((java.lang.Object) "zho");
        boolean boolean14 = complex3.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex15 = complex3.atan();
        org.apache.commons.math.complex.Complex complex16 = complex15.asin();
        org.apache.commons.math.complex.Complex complex19 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean20 = complex19.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex21.exp();
        org.apache.commons.math.complex.Complex complex25 = complex19.subtract(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex15.pow(complex25);
        java.lang.Object obj28 = null;
        boolean boolean29 = complex25.equals(obj28);
        org.apache.commons.math.complex.Complex complex30 = complex25.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test06271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06271");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.abs();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex0.add(complex4);
        org.apache.commons.math.complex.Complex complex8 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.cos();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex9.add(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex9.sin();
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        boolean boolean17 = complex16.isNaN();
        org.apache.commons.math.complex.Complex complex18 = complex4.pow(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex4.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test06272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06272");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "ja", (java.lang.Object[]) complexArray18);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.util.Locale.setDefault(category20, locale26);
        java.lang.String str30 = locale9.getDisplayName(locale26);
        java.util.Locale locale33 = new java.util.Locale("\u30c9\u30a4\u30c4\u8a9e", "Chinesisch");
        java.lang.String str34 = locale26.getDisplayCountry(locale33);
        java.util.Locale locale35 = locale26.stripExtensions();
        java.lang.String str36 = locale26.toLanguageTag();
        boolean boolean37 = locale26.hasExtensions();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fra" + "'", str23, "fra");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "japonais" + "'", str30, "japonais");
        org.junit.Assert.assertEquals(locale33.toString(), "\u30c9\u30a4\u30c4\u8a9e_CHINESISCH");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr" + "'", str36, "fr");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06273");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println((long) (-1));
        boolean boolean12 = printStream1.checkError();
        printStream1.flush();
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de");
        printStream1.println();
        java.lang.Object obj17 = null;
        printStream1.print(obj17);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test06274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06274");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getLanguage();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        java.lang.String str5 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleKeys();
        java.lang.String str7 = locale2.toLanguageTag();
        java.lang.String str8 = locale2.getVariant();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        double double11 = complex9.getImaginary();
        double double12 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex15 = complex14.cos();
        org.apache.commons.math.complex.Complex complex16 = complex14.cos();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex13.add(complex17);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        org.apache.commons.math.complex.Complex complex25 = complex24.negate();
        org.apache.commons.math.complex.Complex complex26 = complex22.multiply(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex24.atan();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex31 = complex28.acos();
        org.apache.commons.math.complex.Complex complex32 = complex24.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex34 = complex17.divide(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex9.multiply(complex32);
        double double36 = complex32.abs();
        org.apache.commons.math.complex.Complex complex37 = complex32.atan();
        org.apache.commons.math.complex.Complex complex38 = complex32.tan();
        org.apache.commons.math.complex.Complex complex39 = complex32.sqrt1z();
        boolean boolean40 = locale2.equals((java.lang.Object) complex39);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ja" + "'", str3, "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str4, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test06275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06275");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt1z();
        org.apache.commons.math.complex.Complex complex26 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.negate();
        boolean boolean30 = complex26.equals((java.lang.Object) complex28);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt1z();
        org.apache.commons.math.complex.Complex complex33 = complex28.add(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex31.atan();
        org.apache.commons.math.complex.Complex complex35 = complex21.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex34.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test06276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06276");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter5.println(false);
        printWriter5.print((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test06277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06277");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.tanh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.multiply(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex8.negate();
        org.apache.commons.math.complex.Complex complex12 = complex8.acos();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex15 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex13.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.getImaginary();
        org.apache.commons.math.complex.Complex complex23 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex23.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex25.negate();
        org.apache.commons.math.complex.Complex complex29 = complex18.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math.complex.Complex complex31 = complex12.pow(complex30);
        org.apache.commons.math.complex.Complex complex32 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex2.add(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex2.negate();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z();
        org.apache.commons.math.complex.Complex complex37 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex35.divide(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.asin();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.acos();
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex47.multiply(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex47.exp();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex54.sinh();
        org.apache.commons.math.complex.Complex complex56 = complex52.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex52.atan();
        org.apache.commons.math.complex.Complex complex58 = complex52.atan();
        org.apache.commons.math.complex.Complex complex59 = complex42.divide(complex52);
        org.apache.commons.math.complex.Complex complex60 = complex2.multiply(complex59);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test06278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06278");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.print((double) 'u');
        printWriter1.print("");
        printWriter1.println("\u65e5\u672c\u8a9e");
        printWriter1.write((int) (short) 1);
        printWriter1.print((int) (byte) 1);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06279");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        java.io.PrintStream printStream16 = printStream3.format(locale6, "japonais", (java.lang.Object[]) complexArray15);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray15, throwable17);
        java.lang.String str19 = functionEvaluationException18.getPattern();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("chinois");
        functionEvaluationException18.addSuppressed((java.lang.Throwable) mathException21);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str19, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test06280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06280");
        java.util.Locale locale1 = new java.util.Locale("\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
        org.junit.Assert.assertEquals(locale1.toString(), "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
    }

    @Test
    public void test06281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06281");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        printWriter1.println(10);
        printWriter1.println("zh");
        printWriter1.println((float) (short) 10);
        java.io.PrintWriter printWriter23 = printWriter1.append((java.lang.CharSequence) "FR");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter27 = printWriter25.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter29 = printWriter27.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean34 = printWriter33.checkError();
        java.io.PrintWriter printWriter36 = printWriter33.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter39.println(' ');
        printWriter39.println((long) (-1));
        printWriter39.println((java.lang.Object) "");
        char[] charArray52 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter39.println(charArray52);
        printWriter33.write(charArray52);
        printWriter31.write(charArray52);
        printWriter29.write(charArray52);
        printWriter23.write(charArray52);
        java.io.PrintStream printStream59 = new java.io.PrintStream("japonais");
        printStream59.println((long) 10);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.println(' ');
        printWriter63.close();
        printWriter63.print((double) 1L);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter70.println(' ');
        printWriter70.println((long) (-1));
        printWriter70.println((java.lang.Object) "");
        char[] charArray83 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter70.println(charArray83);
        printWriter70.println(10);
        printWriter70.print('a');
        char[] charArray89 = new char[] {};
        printWriter70.println(charArray89);
        printWriter63.write(charArray89);
        printStream59.println(charArray89);
        printWriter23.print(charArray89);
        printWriter23.print("org.apache.commons.math.functionevaluationexception: hi!");
        printWriter23.close();
        printWriter23.println('u');
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[]");
    }

    @Test
    public void test06282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06282");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        printStream1.print("fr-FR");
        java.util.Locale locale13 = new java.util.Locale("French", "de", "");
        java.lang.String str14 = locale13.getISO3Country();
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream17 = printStream1.printf(locale13, "Koreanisch", (java.lang.Object[]) strArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = locale13.getUnicodeLocaleType("org.apache.commons.math.FunctionEvaluationException: zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.FunctionEvaluationException: zho");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale13.toString(), "french_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DEU" + "'", str14, "DEU");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test06283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06283");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.print(0);
        printStream5.println("");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        printWriter18.println();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getCountry();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str25 = locale21.getDisplayLanguage();
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException32);
        java.lang.String str34 = functionEvaluationException32.getPattern();
        java.lang.Object[] objArray35 = functionEvaluationException32.getArguments();
        java.io.PrintWriter printWriter36 = printWriter18.format(locale21, "\u30c9\u30a4\u30c4\u8a9e", objArray35);
        printWriter18.close();
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fran\347ais" + "'", str25, "fran\347ais");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(printWriter36);
    }

    @Test
    public void test06284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06284");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("fr", strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getISO3Country();
        java.lang.String str22 = locale20.getDisplayScript();
        java.util.Set<java.lang.String> strSet23 = locale20.getUnicodeLocaleKeys();
        java.lang.String str24 = locale20.getISO3Language();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.toLanguageTag();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale26.getISO3Language();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.toLanguageTag();
        boolean boolean37 = locale35.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getISO3Country();
        java.lang.String str40 = locale38.getDisplayScript();
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.getDisplayScript();
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        java.lang.String str51 = locale47.getISO3Language();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale20, locale25, locale26, locale30, locale31, locale34, locale35, locale38, locale42, locale43, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale56 = java.util.Locale.lookup(languageRangeList10, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale58.getDisplayLanguage(locale61);
        java.lang.String str64 = locale61.getScript();
        java.lang.String str65 = locale56.getDisplayName(locale61);
        java.lang.Object[] objArray67 = null;
        java.io.PrintStream printStream68 = printStream1.printf(locale61, "\u65e5\u672c\u8a9e", objArray67);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream71 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fra" + "'", str29, "fra");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ja" + "'", str32, "ja");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr" + "'", str36, "fr");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ja" + "'", str62, "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str65, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(printStream68);
    }

    @Test
    public void test06285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06285");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        boolean boolean6 = complex5.isInfinite();
        org.apache.commons.math.complex.Complex complex7 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex13);
        boolean boolean15 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex16 = complex13.atan();
        org.apache.commons.math.complex.Complex complex17 = complex13.cos();
        org.apache.commons.math.complex.Complex complex18 = complex8.divide(complex13);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.getImaginary();
        org.apache.commons.math.complex.Complex complex26 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex28 = complex26.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.acos();
        org.apache.commons.math.complex.Complex complex30 = complex29.asin();
        boolean boolean32 = complex30.equals((java.lang.Object) "zho");
        boolean boolean33 = complex22.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex34 = complex22.atan();
        org.apache.commons.math.complex.Complex complex35 = complex34.asin();
        org.apache.commons.math.complex.Complex complex38 = new org.apache.commons.math.complex.Complex((double) (short) -1, (double) (-1));
        boolean boolean39 = complex38.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex40.exp();
        org.apache.commons.math.complex.Complex complex44 = complex38.subtract(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex44.exp();
        org.apache.commons.math.complex.Complex complex46 = complex34.pow(complex44);
        org.apache.commons.math.complex.Complex complex47 = complex44.sin();
        org.apache.commons.math.complex.Complex complex48 = complex8.subtract(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex48.cos();
        org.apache.commons.math.complex.Complex complex50 = complex48.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test06286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06286");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println(' ');
        printWriter5.flush();
        java.io.PrintStream printStream10 = new java.io.PrintStream("japonais");
        printStream10.print(true);
        printStream10.println((float) (short) 10);
        printStream10.print((long) (short) 10);
        java.io.PrintStream printStream18 = printStream10.append((java.lang.CharSequence) "fr");
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter20.println(' ');
        printWriter20.println((long) (-1));
        printWriter20.println((java.lang.Object) "");
        char[] charArray33 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter20.println(charArray33);
        printWriter20.println(10);
        printWriter20.print('a');
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.println(' ');
        printWriter40.println((long) (-1));
        printWriter40.println((java.lang.Object) "");
        char[] charArray53 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter40.println(charArray53);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.Writer) printWriter40, true);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter58.print(0);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter62.println(' ');
        printWriter62.println((long) (-1));
        printWriter62.println((java.lang.Object) "");
        char[] charArray75 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter62.println(charArray75);
        printWriter58.println(charArray75);
        printWriter56.write(charArray75);
        printWriter20.write(charArray75, (int) (short) 0, 1);
        printStream10.println(charArray75);
        printWriter5.println(charArray75);
        printWriter1.write(charArray75);
        printWriter1.print(' ');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06287");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        java.io.PrintStream printStream28 = printStream14.append((java.lang.CharSequence) "FR");
        printStream28.println((int) '4');
        printStream28.println();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(printStream28);
    }

    @Test
    public void test06288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06288");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 0, "French");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer6.transform(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        double[] doubleArray27 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer14.transform(complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer14.inversetransform(complexArray34);
        java.lang.Throwable throwable39 = null;
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException(throwable39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException41);
        java.lang.Throwable[] throwableArray43 = functionEvaluationException41.getSuppressed();
        java.lang.Throwable[] throwableArray44 = functionEvaluationException41.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException41.addSuppressed((java.lang.Throwable) functionEvaluationException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray35, (java.lang.Throwable) functionEvaluationException47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "hi!", (java.lang.Object[]) complexArray12, (java.lang.Throwable) mathException49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), (java.lang.Throwable) mathException49);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter57 = printWriter55.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer64 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray69 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer64.transform(doubleArray69);
        double[] doubleArray72 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer64.inversetransform2(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer59.transform(complexArray73);
        java.io.PrintWriter printWriter75 = printWriter55.format("ja", (java.lang.Object[]) complexArray73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) complexArray73);
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException79 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("fr", (java.lang.Object[]) complexArray73, (java.lang.Throwable) functionEvaluationException79);
        functionEvaluationException51.addSuppressed((java.lang.Throwable) functionEvaluationException79);
        java.lang.Throwable[] throwableArray82 = functionEvaluationException79.getSuppressed();
        functionEvaluationException2.addSuppressed((java.lang.Throwable) functionEvaluationException79);
        java.lang.String str84 = functionEvaluationException79.getPattern();
        double double85 = functionEvaluationException79.getArgument();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test06289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06289");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("japonais");
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category7);
        java.util.Locale locale13 = java.util.Locale.getDefault(category7);
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale.Builder builder15 = builder6.setLocale(locale13);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        boolean boolean20 = printStream17.checkError();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        double[] doubleArray38 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer30.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer25.transform(complexArray39);
        java.io.PrintStream printStream41 = printStream17.format(locale23, "fr", (java.lang.Object[]) complexArray40);
        printStream17.print((double) 100);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str47 = locale44.getDisplayVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer49.transform2(doubleArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray64 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer59.transform(doubleArray64);
        org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer49.inversetransform(complexArray65);
        java.io.PrintStream printStream67 = printStream17.printf(locale44, "\u65e5\u6587", (java.lang.Object[]) complexArray65);
        java.lang.String str68 = locale13.getDisplayName(locale44);
        java.util.Set<java.lang.String> strSet69 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str70 = locale13.getVariant();
        java.lang.String str71 = locale13.getScript();
        java.lang.String str72 = locale13.getVariant();
        java.lang.String str73 = locale13.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = locale13.getUnicodeLocaleType("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: German (FRA,fr)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MathException: German (FRA,fr)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u65e5\u6587" + "'", str46, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str68, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fran\347ais" + "'", str73, "fran\347ais");
    }

    @Test
    public void test06290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06290");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.7350525871447157d, 2.319776824715853d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex6 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex2.multiply(complex3);
        org.apache.commons.math.complex.Complex complex9 = complex3.negate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test06291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06291");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = printWriter1.append((java.lang.CharSequence) "Japanese");
        printWriter8.println((double) 'x');
        java.io.PrintWriter printWriter12 = printWriter8.append('a');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter15.println(' ');
        printWriter15.println((long) (-1));
        printWriter15.println((java.lang.Object) "");
        boolean boolean22 = printWriter15.checkError();
        java.util.Locale locale23 = null;
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter29 = printWriter15.format(locale23, "zho", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter30 = printWriter8.format("allemand (Allemagne)", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
    }

    @Test
    public void test06292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06292");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.MathException: org.apache.commons.math.MathException: fr");
        printWriter1.flush();
    }

    @Test
    public void test06293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06293");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: HI!", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06294");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", "francese", "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for FRANCESE");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test06295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06295");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        char[] charArray14 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter1.println(charArray14);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        java.io.PrintWriter printWriter19 = printWriter17.append((java.lang.CharSequence) "de");
        printWriter19.print('x');
        printWriter19.print((float) (short) 0);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter19);
    }

    @Test
    public void test06296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06296");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter10 = printWriter8.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter12 = printWriter10.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean15 = printWriter14.checkError();
        java.io.PrintWriter printWriter17 = printWriter14.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter20.println(' ');
        printWriter20.println((long) (-1));
        printWriter20.println((java.lang.Object) "");
        char[] charArray33 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter20.println(charArray33);
        printWriter14.write(charArray33);
        printWriter12.write(charArray33);
        printWriter1.print(charArray33);
        printWriter1.close();
        printWriter1.println("Ind\351termin\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)");
        printWriter1.print(false);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06297");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("Chinesisch");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("DEU", (java.lang.Throwable) mathException2);
    }

    @Test
    public void test06298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06298");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.inversetransform(complexArray16);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer0.transform2(univariateRealFunction18, 0.8734582355173112d, (-2.2370357592874117d), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
    }

    @Test
    public void test06299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06299");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(3.9044258434917195E-17d, 4.1132503787829275d);
    }

    @Test
    public void test06300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06300");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u65e5\u6587", "de-DE");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: de-DE");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06301");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println((double) (-1));
        java.io.PrintStream printStream55 = printStream1.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: hi!");
        java.io.PrintStream printStream57 = new java.io.PrintStream("japonais");
        printStream57.print(true);
        boolean boolean60 = printStream57.checkError();
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.OutputStream) printStream57, true);
        boolean boolean63 = printStream57.checkError();
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream57);
        boolean boolean65 = printStream64.checkError();
        java.io.PrintStream printStream67 = printStream64.append((java.lang.CharSequence) "\u30c9\u30a4\u30c4\u8a9e");
        printStream55.print((java.lang.Object) printStream67);
        printStream55.print(true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test06302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06302");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer18.transform(doubleArray23);
        double[] doubleArray26 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.inversetransform2(doubleArray26);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer0.transform2(doubleArray26);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray32 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer29.inversetransform2(doubleArray32);
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(0.0f);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer41.transform(doubleArray46);
        java.io.PrintStream printStream48 = printStream35.format(locale38, "japonais", (java.lang.Object[]) complexArray47);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray52);
        printStream48.print((java.lang.Object) doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer29.transform2(doubleArray52);
        double[] doubleArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray52, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer0.inversetransform2(doubleArray52);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer0.transform(univariateRealFunction60, (double) 'a', (double) 'x', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray59);
    }

    @Test
    public void test06303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06303");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray12 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList22, filteringMode25);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList34);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale37.getDisplayScript();
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.lang.String str41 = locale37.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.toLanguageTag();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getLanguage();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = locale52.toLanguageTag();
        boolean boolean54 = locale52.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        java.lang.String str57 = locale55.getDisplayScript();
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleKeys();
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getDisplayCountry();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getISO3Country();
        java.lang.String str66 = locale64.getDisplayScript();
        java.util.Set<java.lang.String> strSet67 = locale64.getUnicodeLocaleKeys();
        java.lang.String str68 = locale64.getISO3Language();
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale37, locale42, locale43, locale47, locale48, locale51, locale52, locale55, locale59, locale60, locale62, locale63, locale64 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale locale72 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList70);
        printWriter1.print((java.lang.Object) languageRangeList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap75);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap77);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap79 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap79);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ja" + "'", str49, "ja");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fr" + "'", str53, "fr");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fra" + "'", str68, "fra");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertNotNull(languageRangeList78);
        org.junit.Assert.assertNotNull(languageRangeList80);
    }

    @Test
    public void test06304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06304");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println((double) (-1));
        printStream1.print(0L);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer57.transform(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        org.apache.commons.math.complex.Complex[] complexArray65 = fastFourierTransformer56.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray71 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer66.transform(doubleArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer56.transform2(complexArray72);
        printStream1.print((java.lang.Object) fastFourierTransformer56);
        java.io.PrintStream printStream76 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream76.flush();
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream76, true);
        printStream76.print((long) ' ');
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complexArray65);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertNotNull(complexArray73);
    }

    @Test
    public void test06305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06305");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println((long) (-1));
        printStream1.print((int) (byte) 100);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "_FR");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test06306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06306");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        printStream14.print('x');
        printStream14.println(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream29 = printStream14.append((java.lang.CharSequence) "en_US", (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
    }

    @Test
    public void test06307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06307");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setRegion("\u4e2d\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06308");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval((-0.0d), (double) (byte) 100);
    }

    @Test
    public void test06309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06309");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter33 = printWriter31.append('4');
        printWriter33.close();
        printWriter33.println(100L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printWriter33);
    }

    @Test
    public void test06310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06310");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        printStream14.write((int) '#');
        printStream14.println(true);
        printStream14.close();
        printStream14.flush();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
    }

    @Test
    public void test06311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06311");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray7 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer2.transform(doubleArray7);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer1.inversetransform(doubleArray7);
        org.apache.commons.math.complex.Complex[] complexArray11 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray9, 0.0d);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", throwable14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("de_DE", (java.lang.Object[]) complexArray9, (java.lang.Throwable) mathException16);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
    }

    @Test
    public void test06312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06312");
        java.io.PrintStream printStream4 = new java.io.PrintStream("japonais");
        printStream4.print(true);
        boolean boolean7 = printStream4.checkError();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream4, true);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter12.println(' ');
        printWriter12.println((long) (-1));
        printWriter12.println((java.lang.Object) "");
        printWriter12.println();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter12.println((java.lang.Object) printWriter21);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter12, true);
        printWriter24.println((java.lang.Object) true);
        printWriter24.print("org.apache.commons.math.MathException");
        printWriter24.println((float) (byte) 0);
        printWriter24.print((double) 1);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getLanguage();
        java.io.PrintStream printStream38 = new java.io.PrintStream("japonais");
        printStream38.print(0.0f);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer44.transform(doubleArray49);
        java.io.PrintStream printStream51 = printStream38.format(locale41, "japonais", (java.lang.Object[]) complexArray50);
        java.io.PrintWriter printWriter52 = printWriter24.format(locale34, "ja", (java.lang.Object[]) complexArray50);
        java.io.PrintStream printStream53 = printStream4.format("und", (java.lang.Object[]) complexArray50);
        printStream53.print("japonais");
        java.io.PrintStream printStream58 = new java.io.PrintStream("japonais");
        printStream58.print(true);
        boolean boolean61 = printStream58.checkError();
        printStream58.println();
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.lang.String str64 = locale63.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer66 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer67 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray72 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer67.transform(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray72);
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer66.transform2(doubleArray72);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray81 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer76.transform(doubleArray81);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer66.inversetransform(complexArray82);
        java.io.PrintStream printStream84 = printStream58.printf(locale63, "de", (java.lang.Object[]) complexArray83);
        java.io.PrintStream printStream85 = printStream53.printf("zho", (java.lang.Object[]) complexArray83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("de_FR_japonais", (java.lang.Object[]) complexArray83);
        org.apache.commons.math.complex.Complex[] complexArray88 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray83, 4.1132503787829275d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Franz\366sisch", (java.lang.Object[]) complexArray88);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, (java.lang.Throwable) mathException90);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ja" + "'", str64, "ja");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(printStream84);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(complexArray88);
    }

    @Test
    public void test06313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06313");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("italiano", (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06314");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.getDisplayScript();
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleKeys();
        java.lang.String str22 = locale18.getISO3Language();
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.toLanguageTag();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getISO3Language();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.toLanguageTag();
        boolean boolean35 = locale33.hasExtensions();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = locale36.getDisplayScript();
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getDisplayCountry();
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getISO3Country();
        java.lang.String str47 = locale45.getDisplayScript();
        java.util.Set<java.lang.String> strSet48 = locale45.getUnicodeLocaleKeys();
        java.lang.String str49 = locale45.getISO3Language();
        java.util.Locale[] localeArray50 = new java.util.Locale[] { locale18, locale23, locale24, locale28, locale29, locale32, locale33, locale36, locale40, locale41, locale43, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, strMap65);
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.lang.String[] strArray72 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.lang.String[] strArray81 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.lang.String>) strList82);
        java.lang.String str85 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList82);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList82);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList55, (java.util.Collection<java.lang.String>) strList86);
        printStream8.println((java.lang.Object) languageRangeList55);
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.OutputStream) printStream8, true);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fra" + "'", str27, "fra");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ja" + "'", str30, "ja");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr" + "'", str34, "fr");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fra" + "'", str49, "fra");
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test06315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06315");
        java.io.PrintStream printStream1 = new java.io.PrintStream("Canada");
        java.io.PrintStream printStream4 = new java.io.PrintStream("japonais");
        printStream4.print(true);
        printStream4.println("Chinesisch");
        java.lang.Throwable throwable13 = null;
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException(throwable13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException15);
        java.lang.Throwable[] throwableArray17 = functionEvaluationException15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = functionEvaluationException15.getSuppressed();
        java.io.PrintStream printStream19 = printStream4.format("hi!", (java.lang.Object[]) throwableArray18);
        printStream19.print((double) (short) 1);
        printStream19.print('4');
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter26.println(' ');
        printWriter26.println(false);
        printWriter26.print("FR");
        printWriter26.write("und");
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.getCountry();
        java.lang.String str38 = locale35.getDisplayCountry(locale36);
        boolean boolean39 = locale36.hasExtensions();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean44 = printWriter43.checkError();
        java.util.Locale locale45 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray52);
        java.lang.Object[] objArray54 = mathException53.getArguments();
        java.io.PrintWriter printWriter55 = printWriter43.printf(locale45, "zho", objArray54);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException61);
        double double63 = functionEvaluationException61.getArgument();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("", objArray54, (java.lang.Throwable) functionEvaluationException61);
        java.io.PrintWriter printWriter65 = printWriter26.format(locale36, "fra", objArray54);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.println(false);
        printWriter67.print((int) (short) 1);
        printWriter26.println((java.lang.Object) printWriter67);
        java.io.PrintWriter printWriter76 = printWriter26.append('4');
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException(throwable81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException83);
        java.lang.Throwable[] throwableArray85 = functionEvaluationException84.getSuppressed();
        java.io.PrintWriter printWriter86 = printWriter76.printf("fran\347ais", (java.lang.Object[]) throwableArray85);
        java.io.PrintStream printStream87 = printStream19.printf("fr_FR", (java.lang.Object[]) throwableArray85);
        java.io.PrintStream printStream88 = printStream1.format("org.apache.commons.math.MathException: GB", (java.lang.Object[]) throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream88);
    }

    @Test
    public void test06316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06316");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(0.0f);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        java.io.PrintStream printStream16 = printStream3.format(locale6, "japonais", (java.lang.Object[]) complexArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("japonais");
        printStream18.print(true);
        printStream18.println((-1));
        java.io.PrintStream printStream24 = new java.io.PrintStream("japonais");
        printStream24.print(0.0f);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray35 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer30.transform(doubleArray35);
        java.io.PrintStream printStream37 = printStream24.format(locale27, "japonais", (java.lang.Object[]) complexArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer38.inversetransform2(doubleArray41);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray41);
        printStream37.print((java.lang.Object) doubleArray41);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream37.write(byteArray48);
        printStream18.write(byteArray48);
        printStream3.write(byteArray48);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        printStream3.println();
        java.io.PrintStream printStream59 = new java.io.PrintStream("japonais");
        printStream59.print(0.0f);
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray70 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer65.transform(doubleArray70);
        java.io.PrintStream printStream72 = printStream59.format(locale62, "japonais", (java.lang.Object[]) complexArray71);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray71, throwable73);
        java.io.PrintStream printStream75 = printStream3.format("ja", (java.lang.Object[]) complexArray71);
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter78.println(' ');
        printWriter78.println((long) (-1));
        printWriter78.println((java.lang.Object) "");
        boolean boolean85 = printWriter78.checkError();
        java.util.Locale locale86 = null;
        java.lang.String[] strArray90 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray90);
        java.io.PrintWriter printWriter92 = printWriter78.format(locale86, "zho", (java.lang.Object[]) strArray90);
        java.lang.Throwable throwable93 = null;
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("japonais", (java.lang.Object[]) strArray90, throwable93);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("", (java.lang.Object[]) complexArray71, (java.lang.Throwable) mathException94);
        java.lang.Object[] objArray96 = mathException95.getArguments();
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException", (java.lang.Throwable) mathException95);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(printWriter92);
        org.junit.Assert.assertNotNull(objArray96);
    }

    @Test
    public void test06317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06317");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en-CA" + "'", str2, "en-CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en_CA" + "'", str3, "en_CA");
    }

    @Test
    public void test06318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06318");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean4 = printWriter3.checkError();
        java.io.PrintWriter printWriter6 = printWriter3.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter3);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println(' ');
        printWriter9.println((long) (-1));
        printWriter9.println((java.lang.Object) "");
        char[] charArray22 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter9.println(charArray22);
        printWriter3.write(charArray22);
        printWriter1.write(charArray22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.println(1.3043045862358962d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06319");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale6);
        java.util.Locale.Builder builder14 = builder0.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder0.setExtension('4', "org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06320");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.163916074336452d), 0.0d);
    }

    @Test
    public void test06321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06321");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayVariant();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayScript();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test06322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06322");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.acos();
        org.apache.commons.math.complex.Complex complex6 = complex0.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cos();
        org.apache.commons.math.complex.Complex complex9 = complex7.cos();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex7.cosh();
        double double12 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex16 = complex11.multiply(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex0.pow(complex11);
        org.apache.commons.math.complex.Complex complex18 = complex17.tan();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex18.negate();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex22 = complex21.cos();
        org.apache.commons.math.complex.Complex complex23 = complex21.cos();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex27 = complex20.pow(complex21);
        org.apache.commons.math.complex.Complex complex28 = complex21.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test06323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06323");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.print((double) (short) 100);
        printWriter1.print('x');
        java.io.PrintWriter printWriter9 = printWriter1.append((java.lang.CharSequence) "org.apache.commons.math.MathException: org.apache.commons.math.functionevaluationexception: fr (ANGLAIS,Chine)");
        printWriter1.print((long) (byte) -1);
        org.junit.Assert.assertNotNull(printWriter9);
    }

    @Test
    public void test06324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06324");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print("German (FRA,fr)");
        printWriter1.println((int) 'u');
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter12 = printWriter10.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        double[] doubleArray27 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer19.inversetransform2(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer14.transform(complexArray28);
        java.io.PrintWriter printWriter30 = printWriter10.format("ja", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) complexArray28);
        java.io.PrintWriter printWriter33 = printWriter1.format("", (java.lang.Object[]) complexArray28);
        boolean boolean34 = printWriter33.checkError();
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06325");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer5.inversetransform2(doubleArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray28 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer25.inversetransform2(doubleArray28);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray28);
        printStream24.print((java.lang.Object) doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer5.transform2(doubleArray28);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter34.println(' ');
        printWriter34.print((float) 10L);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter41.println(' ');
        printWriter41.println((long) (-1));
        printWriter41.println((java.lang.Object) "");
        printWriter41.println();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.getScript();
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale49.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray57 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer54.inversetransform2(doubleArray57);
        java.io.PrintWriter printWriter59 = printWriter41.printf(locale49, "ja", (java.lang.Object[]) complexArray58);
        java.io.PrintWriter printWriter60 = printWriter34.format("", (java.lang.Object[]) complexArray58);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer5.inversetransform(complexArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer62 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray67 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer62.transform(doubleArray67);
        double[] doubleArray70 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer62.inversetransform2(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray72 = fastFourierTransformer5.inversetransform2(doubleArray70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("Franz\366sisch", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(1.4142135623730951d, "hi!", (java.lang.Object[]) complexArray72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException75 = new org.apache.commons.math.FunctionEvaluationException(1.3043045862358962d, "org.apache.commons.math.FunctionEvaluationException: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION", (java.lang.Object[]) complexArray72);
        double double76 = functionEvaluationException75.getArgument();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(complexArray72);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.3043045862358962d + "'", double76 == 1.3043045862358962d);
    }

    @Test
    public void test06326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06326");
        java.util.Locale locale2 = new java.util.Locale("CHN", "English (United Kingdom)");
        org.junit.Assert.assertEquals(locale2.toString(), "chn_ENGLISH (UNITED KINGDOM)");
    }

    @Test
    public void test06327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06327");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex0.acos();
        org.apache.commons.math.complex.Complex complex6 = complex0.tan();
        org.apache.commons.math.complex.Complex complex7 = complex0.atan();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.multiply(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex13.exp();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex18.add(complex21);
        double double23 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex24 = complex22.cos();
        org.apache.commons.math.complex.Complex complex25 = complex8.pow(complex22);
        org.apache.commons.math.complex.Complex complex26 = complex0.add(complex22);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.7456241416655579d + "'", double23 == 0.7456241416655579d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test06328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06328");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("fr", strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getISO3Country();
        java.lang.String str22 = locale20.getDisplayScript();
        java.util.Set<java.lang.String> strSet23 = locale20.getUnicodeLocaleKeys();
        java.lang.String str24 = locale20.getISO3Language();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.toLanguageTag();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale26.getISO3Language();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.toLanguageTag();
        boolean boolean37 = locale35.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getISO3Country();
        java.lang.String str40 = locale38.getDisplayScript();
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.getDisplayScript();
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        java.lang.String str51 = locale47.getISO3Language();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale20, locale25, locale26, locale30, locale31, locale34, locale35, locale38, locale42, locale43, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale56 = java.util.Locale.lookup(languageRangeList10, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale58.getDisplayLanguage(locale61);
        java.lang.String str64 = locale61.getScript();
        java.lang.String str65 = locale56.getDisplayName(locale61);
        java.lang.Object[] objArray67 = null;
        java.io.PrintStream printStream68 = printStream1.printf(locale61, "\u65e5\u672c\u8a9e", objArray67);
        printStream1.println();
        printStream1.write((int) 'u');
        printStream1.println((float) (byte) 0);
        printStream1.print(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fra" + "'", str29, "fra");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ja" + "'", str32, "ja");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr" + "'", str36, "fr");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ja" + "'", str62, "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str65, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(printStream68);
    }

    @Test
    public void test06329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06329");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getCountry();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale4.getDisplayName(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder2.setLanguageTag("Japanese");
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale17.getDisplayName(locale20);
        java.util.Locale.Builder builder23 = builder15.setLocale(locale20);
        java.util.Locale.Builder builder25 = builder15.setLanguageTag("Japanese");
        java.util.Locale locale26 = builder25.build();
        java.util.Locale.Builder builder27 = builder2.setLocale(locale26);
        java.util.Locale locale28 = builder27.build();
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayLanguage();
        java.lang.String str32 = locale28.getExtension('u');
        java.lang.String str33 = locale28.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais" + "'", str22, "fran\347ais");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "japanese");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "japanese" + "'", str30, "japanese");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "japanese" + "'", str33, "japanese");
    }

    @Test
    public void test06330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06330");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("cor\351en", 4.6711023094386594E-17d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=core?en");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06331");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.println((int) (byte) 0);
        printWriter4.print(0.0f);
        java.io.PrintStream printStream12 = new java.io.PrintStream("japonais");
        printStream12.print(0.0f);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream12, true);
        printStream16.print((float) (short) -1);
        printStream16.print('a');
        printStream16.println();
        printStream16.print("hi!");
        printStream16.print(0);
        printStream16.println("");
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream16, true);
        boolean boolean30 = printStream16.checkError();
        printStream16.println('a');
        printWriter4.println((java.lang.Object) printStream16);
        printWriter4.close();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test06332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06332");
        java.util.Locale locale2 = new java.util.Locale("fran\347ais", "Japanese");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for franc?ais");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "fran\347ais_JAPANESE");
    }

    @Test
    public void test06333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06333");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cos();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex4.sinh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex9 = complex7.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.log();
        boolean boolean11 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex12 = complex3.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex16 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex18 = complex10.subtract(complex13);
        org.apache.commons.math.complex.Complex complex19 = complex10.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test06334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06334");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        printStream1.print((double) 100);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale28.getDisplayVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer33.transform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray48 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer43.transform(doubleArray48);
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer33.inversetransform(complexArray49);
        java.io.PrintStream printStream51 = printStream1.printf(locale28, "\u65e5\u6587", (java.lang.Object[]) complexArray49);
        java.util.Set<java.lang.String> strSet52 = locale28.getUnicodeLocaleKeys();
        boolean boolean53 = locale28.hasExtensions();
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter57 = printWriter55.append((java.lang.CharSequence) "");
        printWriter57.println('a');
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getISO3Country();
        java.lang.String str62 = locale60.getISO3Language();
        printWriter57.print((java.lang.Object) locale60);
        java.lang.String str64 = locale60.getScript();
        java.lang.String str65 = locale60.toLanguageTag();
        java.util.Locale locale66 = locale60.stripExtensions();
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = locale67.getISO3Country();
        java.lang.String str69 = locale67.getDisplayScript();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleKeys();
        java.lang.String str71 = locale67.getISO3Language();
        java.lang.String str72 = locale67.getISO3Language();
        java.lang.String str73 = locale67.getLanguage();
        java.lang.String str74 = locale60.getDisplayScript(locale67);
        java.lang.String str75 = locale28.getDisplayCountry(locale67);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u6587" + "'", str30, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fr" + "'", str65, "fr");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fra" + "'", str72, "fra");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fr" + "'", str73, "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Japon" + "'", str75, "Japon");
    }

    @Test
    public void test06335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06335");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(0.0f);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        java.io.PrintStream printStream21 = printStream8.format(locale11, "japonais", (java.lang.Object[]) complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        printStream21.print((java.lang.Object) doubleArray25);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream21.write(byteArray32);
        printStream1.write(byteArray32);
        printStream1.print('x');
        printStream1.print('4');
        printStream1.print((long) (byte) 100);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.println(false);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = locale45.getISO3Language();
        java.util.Locale locale48 = locale45.stripExtensions();
        java.lang.String str49 = locale45.toLanguageTag();
        java.lang.String str50 = locale45.getISO3Country();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("und", (java.lang.Object[]) complexArray59);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray59);
        java.io.PrintStream printStream62 = printStream1.printf(locale45, "org.apache.commons.math.mathexception: hi!", (java.lang.Object[]) complexArray59);
        printStream62.println(0.0f);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zho" + "'", str47, "zho");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream62);
    }

    @Test
    public void test06336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06336");
        java.io.PrintStream printStream1 = new java.io.PrintStream("chinois (Taiwan)");
        printStream1.print((float) (byte) 10);
        printStream1.close();
    }

    @Test
    public void test06337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06337");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.transform2(doubleArray14);
        java.io.PrintStream printStream18 = printStream1.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray17);
        java.io.PrintStream printStream20 = printStream18.append('4');
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 1, (byte) 10 };
        printStream20.write(byteArray24);
        java.io.PrintStream printStream27 = printStream20.append('a');
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) 'u', "chinois (Chine)");
        printStream20.print((java.lang.Object) "chinois (Chine)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 1, 10]");
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test06338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06338");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.lang.String str4 = locale0.getISO3Language();
        java.lang.String str5 = locale0.getDisplayScript();
        java.util.Locale locale6 = locale0.stripExtensions();
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale6.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test06339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06339");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter29.println(' ');
        printWriter29.print((float) 10L);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter36.println(' ');
        printWriter36.println((long) (-1));
        printWriter36.println((java.lang.Object) "");
        printWriter36.println();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getScript();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.lang.String str47 = locale44.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer49.inversetransform2(doubleArray52);
        java.io.PrintWriter printWriter54 = printWriter36.printf(locale44, "ja", (java.lang.Object[]) complexArray53);
        java.io.PrintWriter printWriter55 = printWriter29.format("", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        java.io.PrintStream printStream63 = new java.io.PrintStream("japonais");
        printStream63.print(0.0f);
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet67 = locale66.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer69 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray74 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray75 = fastFourierTransformer69.transform(doubleArray74);
        java.io.PrintStream printStream76 = printStream63.format(locale66, "japonais", (java.lang.Object[]) complexArray75);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer77.inversetransform2(doubleArray80);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray80);
        printStream76.print((java.lang.Object) doubleArray80);
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer57.transform2(doubleArray80);
        double[] doubleArray86 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray80, Double.NaN);
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer0.inversetransform(doubleArray86);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer0.inversetransform2(univariateRealFunction88, (-2.2370357592874117d), (double) (-1L), (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN, NaN]");
        org.junit.Assert.assertNotNull(complexArray87);
    }

    @Test
    public void test06340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06340");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = locale4.stripExtensions();
        java.lang.String str7 = locale4.getDisplayScript();
        java.lang.String str8 = locale4.getScript();
        java.lang.String str9 = locale4.getISO3Country();
        java.util.Locale locale10 = locale4.stripExtensions();
        java.lang.String str11 = locale0.getDisplayCountry(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr" + "'", str1, "fr");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "chinois" + "'", str5, "chinois");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CHN" + "'", str9, "CHN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06341");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) (byte) 1, (double) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0, 1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06342");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print(100L);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter11 = printWriter9.append((java.lang.CharSequence) "");
        printWriter9.println();
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.write((int) 'a');
        printStream14.print(0.0f);
        java.io.PrintStream printStream20 = printStream14.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter25 = printWriter23.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        double[] doubleArray40 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer32.inversetransform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer27.transform(complexArray41);
        java.io.PrintWriter printWriter43 = printWriter23.format("ja", (java.lang.Object[]) complexArray41);
        java.io.PrintStream printStream45 = new java.io.PrintStream("japonais");
        printStream45.print(0.0f);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        java.io.PrintStream printStream58 = printStream45.format(locale48, "japonais", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        printStream58.print((java.lang.Object) doubleArray62);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.print(0);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter71.println(' ');
        printWriter71.println((long) (-1));
        printWriter71.println((java.lang.Object) "");
        char[] charArray84 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter71.println(charArray84);
        printWriter67.println(charArray84);
        printStream58.print(charArray84);
        printWriter43.print(charArray84);
        printStream21.println(charArray84);
        printWriter9.write(charArray84, (int) (byte) 0, (int) (short) 0);
        printStream5.println(charArray84);
        java.io.PrintStream printStream95 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        printStream5.print(true);
        java.io.PrintStream printStream99 = new java.io.PrintStream((java.io.OutputStream) printStream5, false);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06343");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 1.557407724654902d, 1.367947197099293d, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.557407724654902, 1.367947197099293]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06344");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print(100L);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        java.lang.Throwable[] throwableArray11 = functionEvaluationException10.getSuppressed();
        double double12 = functionEvaluationException10.getArgument();
        printStream5.println((java.lang.Object) double12);
        printStream5.print('a');
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test06345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06345");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(true);
        printStream16.println((-1));
        java.io.PrintStream printStream22 = new java.io.PrintStream("japonais");
        printStream22.print(0.0f);
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream22.format(locale25, "japonais", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer36.inversetransform2(doubleArray39);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray39);
        printStream35.print((java.lang.Object) doubleArray39);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream35.write(byteArray46);
        printStream16.write(byteArray46);
        printStream1.write(byteArray46);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream53 = printStream1.append((java.lang.CharSequence) "chinois");
        java.io.PrintStream printStream54 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println((float) (-1));
        printStream1.print((long) (short) -1);
        printStream1.flush();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test06346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06346");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex6.multiply(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex6.exp();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex15 = complex11.add(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex2.pow(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex2.atan();
        double double19 = complex18.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test06347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06347");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("japonais");
        java.lang.String str2 = languageRange1.getRange();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray12);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer6.transform2(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer6.transform2(doubleArray32);
        java.io.PrintStream printStream36 = new java.io.PrintStream("japonais");
        printStream36.print(0.0f);
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        java.io.PrintStream printStream49 = printStream36.format(locale39, "japonais", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray53);
        printStream49.print((java.lang.Object) doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer6.transform(doubleArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray61 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer58.inversetransform2(doubleArray61);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer63 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer63.inversetransform2(doubleArray66);
        java.io.PrintStream printStream69 = new java.io.PrintStream("japonais");
        printStream69.print(0.0f);
        java.util.Locale locale72 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray80 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray81 = fastFourierTransformer75.transform(doubleArray80);
        java.io.PrintStream printStream82 = printStream69.format(locale72, "japonais", (java.lang.Object[]) complexArray81);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer83 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer83.inversetransform2(doubleArray86);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray86);
        printStream82.print((java.lang.Object) doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer63.transform2(doubleArray86);
        org.apache.commons.math.complex.Complex[] complexArray91 = fastFourierTransformer58.transform(complexArray90);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer6.inversetransform(complexArray90);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("China", (java.lang.Object[]) complexArray90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException94 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "de-x-lvariant-zh", (java.lang.Object[]) complexArray90);
        boolean boolean95 = languageRange1.equals((java.lang.Object) complexArray90);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "japonais" + "'", str2, "japonais");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test06348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06348");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = complex5.cos();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.multiply(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex15.atan();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex19.acos();
        org.apache.commons.math.complex.Complex complex23 = complex15.add(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex8.divide(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex0.multiply(complex23);
        double double27 = complex23.abs();
        org.apache.commons.math.complex.Complex complex28 = complex23.atan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.getImaginary();
        org.apache.commons.math.complex.Complex complex32 = complex29.sinh();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.negate();
        org.apache.commons.math.complex.Complex complex36 = complex32.multiply(complex34);
        org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex40 = complex34.add(complex39);
        boolean boolean41 = complex39.isNaN();
        org.apache.commons.math.complex.Complex complex42 = complex23.subtract(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex42.sin();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = complex44.sinh();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.acos();
        org.apache.commons.math.complex.Complex complex50 = complex49.negate();
        org.apache.commons.math.complex.Complex complex51 = complex47.multiply(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex49.atan();
        org.apache.commons.math.complex.Complex complex53 = complex52.exp();
        org.apache.commons.math.complex.Complex complex54 = complex52.sin();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.getImaginary();
        org.apache.commons.math.complex.Complex complex58 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex60 = complex58.divide(complex59);
        org.apache.commons.math.complex.Complex complex61 = complex59.acos();
        org.apache.commons.math.complex.Complex complex62 = complex61.asin();
        boolean boolean64 = complex62.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        double double67 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = complex65.sinh();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex70 = complex68.divide(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex69.sinh();
        org.apache.commons.math.complex.Complex complex72 = complex62.subtract(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex72.sin();
        double double74 = complex72.abs();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        double double77 = complex75.getImaginary();
        org.apache.commons.math.complex.Complex complex78 = complex75.sinh();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex80 = complex78.divide(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex79.acos();
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex83 = complex82.cosh();
        org.apache.commons.math.complex.Complex complex84 = complex82.tanh();
        double double85 = complex84.getReal();
        org.apache.commons.math.complex.Complex complex86 = complex84.tanh();
        org.apache.commons.math.complex.Complex complex87 = complex86.cos();
        org.apache.commons.math.complex.Complex complex88 = complex81.multiply(complex86);
        org.apache.commons.math.complex.Complex complex89 = complex72.pow(complex81);
        org.apache.commons.math.complex.Complex complex90 = complex52.multiply(complex81);
        org.apache.commons.math.complex.Complex complex91 = complex90.sqrt();
        org.apache.commons.math.complex.Complex complex92 = complex43.subtract(complex90);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test06349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06349");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        printStream14.println(true);
        printStream14.println("allemand");
        printStream14.println();
        java.io.PrintStream printStream42 = printStream14.append('a');
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getVariant();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale locale46 = locale43.stripExtensions();
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale46.getISO3Language();
        java.lang.String str49 = locale46.getScript();
        java.lang.String str50 = locale46.getLanguage();
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException(throwable55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException57);
        java.lang.Object[] objArray59 = functionEvaluationException58.getArguments();
        java.lang.Object[] objArray60 = functionEvaluationException58.getArguments();
        java.io.PrintStream printStream61 = printStream14.printf(locale46, "JPN", objArray60);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream14, true);
        printStream14.println((-1.0f));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "jpn" + "'", str48, "jpn");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja" + "'", str50, "ja");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test06350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06350");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        boolean boolean13 = complex11.isNaN();
        org.apache.commons.math.complex.Complex complex14 = complex11.acos();
        org.apache.commons.math.complex.Complex complex15 = complex11.negate();
        org.apache.commons.math.complex.Complex complex16 = complex11.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test06351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06351");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Italian");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Italian");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06352");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("KR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: KR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test06353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06353");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setUnicodeLocaleKeyword("Allemagne", "English");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Allemagne [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test06354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06354");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter10.print((float) (-1));
        printWriter10.println('4');
        java.io.PrintWriter printWriter17 = printWriter10.append('4');
        printWriter10.write((int) (byte) 10);
        printWriter10.write("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter10.write("chinois (Taiwan)");
        org.junit.Assert.assertNotNull(printWriter17);
    }

    @Test
    public void test06355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06355");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray8 = fastFourierTransformer0.inversetransform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer25 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer25.transform(doubleArray30);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer9.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer33 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer33.inversetransform2(doubleArray36);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        double[] doubleArray46 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer38.inversetransform2(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer33.transform(complexArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer9.transform2(complexArray48);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer9.transform(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer0.inversetransform(doubleArray56);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray66 = fastFourierTransformer0.transform2(univariateRealFunction62, 3.9044258434917195E-17d, 1.0d, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray8);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
    }

    @Test
    public void test06356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06356");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("JAPANISCH", "Deutsch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Deutsch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06357");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter27.println(' ');
        printWriter27.println((long) (-1));
        printWriter27.println((java.lang.Object) "");
        char[] charArray40 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter27.println(charArray40);
        printWriter27.println(10);
        printWriter27.print('a');
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter47.println(' ');
        printWriter47.println((long) (-1));
        printWriter47.println((java.lang.Object) "");
        char[] charArray60 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter47.println(charArray60);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.Writer) printWriter47, true);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter65.print(0);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter69.println(' ');
        printWriter69.println((long) (-1));
        printWriter69.println((java.lang.Object) "");
        char[] charArray82 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter69.println(charArray82);
        printWriter65.println(charArray82);
        printWriter63.write(charArray82);
        printWriter27.write(charArray82, (int) (short) 0, 1);
        printStream25.println(charArray82);
        printStream25.print((long) (byte) 100);
        java.io.PrintStream printStream93 = printStream25.append('4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream97 = printStream25.append((java.lang.CharSequence) "eng", (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test06358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06358");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setRegion("FR");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setLanguageTag("gb");
        java.util.Locale.Builder builder11 = builder6.setScript("");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getISO3Language();
        java.util.Locale.Builder builder15 = builder6.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setScript("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zho" + "'", str14, "zho");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test06359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06359");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(0.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream9, true);
        printStream13.print((float) (short) -1);
        printStream13.print('a');
        printStream13.println();
        printStream13.print("hi!");
        printStream13.println((-1L));
        printStream13.println((double) 0.0f);
        printStream13.close();
        printWriter1.print((java.lang.Object) printStream13);
        java.io.PrintWriter printWriter28 = printWriter1.append('4');
        printWriter1.write(100);
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test06360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06360");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.MathException: GB", "org.apache.commons.math.MathException: ind\351termin\351 (org.apache.commons.math.functionevaluationexception)_DEU_Chinese", "org.apache.commons.math.MathException: de");
        org.junit.Assert.assertEquals(locale3.toString(), "org.apache.commons.math.mathexception: gb_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: IND\351TERMIN\351 (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)_DEU_CHINESE_org.apache.commons.math.MathException: de");
    }

    @Test
    public void test06361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06361");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream7.println("hi!");
        printStream7.println((int) '#');
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale12.getDisplayVariant();
        java.lang.String str14 = locale12.getDisplayVariant();
        printStream7.print((java.lang.Object) locale12);
        java.lang.Object obj16 = locale12.clone();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "en_CA");
    }

    @Test
    public void test06362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06362");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream1.print((int) '4');
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean19 = printStream1.checkError();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06363");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.FunctionEvaluationException: FR", "org.apache.commons.math.MathException: fran\347ais");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: franc?ais");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06364");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("JPN");
    }

    @Test
    public void test06365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06365");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: zho");
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.functionevaluationexception: zho");
    }

    @Test
    public void test06366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06366");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("FR");
        double double7 = languageRange6.getWeight();
        java.lang.String str8 = languageRange6.getRange();
        double double9 = languageRange6.getWeight();
        java.lang.String str10 = languageRange6.getRange();
        printWriter1.print((java.lang.Object) languageRange6);
        java.lang.String str12 = languageRange6.getRange();
        double double13 = languageRange6.getWeight();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("org.apache.commons.math.FunctionEvaluationException");
        boolean boolean16 = languageRange6.equals((java.lang.Object) "org.apache.commons.math.FunctionEvaluationException");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr" + "'", str12, "fr");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06367");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean4 = printWriter3.checkError();
        java.io.PrintWriter printWriter6 = printWriter3.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter3);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println(' ');
        printWriter9.println((long) (-1));
        printWriter9.println((java.lang.Object) "");
        char[] charArray22 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter9.println(charArray22);
        printWriter3.write(charArray22);
        printWriter1.write(charArray22);
        printWriter1.println();
        printWriter1.println('a');
        printWriter1.println((long) 'a');
        java.io.PrintWriter printWriter32 = printWriter1.append('u');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(printWriter6);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(printWriter32);
    }

    @Test
    public void test06368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06368");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.print("German (FRA,fr)");
        printWriter1.print((float) '#');
    }

    @Test
    public void test06369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06369");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.String str2 = locale1.getVariant();
        java.lang.String str3 = locale1.getDisplayVariant();
        java.lang.String str4 = locale1.getISO3Country();
        java.lang.String str5 = locale1.getISO3Country();
        java.lang.String str6 = locale1.getCountry();
        java.util.Locale locale9 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: zho", "fr-FR");
        java.lang.String str10 = locale1.getDisplayLanguage(locale9);
        java.lang.String str11 = locale1.getLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(locale9.toString(), "org.apache.commons.math.functionevaluationexception: zho_FR-FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.math.functionevaluationexception: fr" + "'", str10, "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.functionevaluationexception: fr" + "'", str11, "org.apache.commons.math.functionevaluationexception: fr");
    }

    @Test
    public void test06370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06370");
        java.lang.String[] strArray3 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray3);
        double double5 = functionEvaluationException4.getArgument();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException4);
        java.lang.String str7 = functionEvaluationException4.getPattern();
        java.lang.String str8 = functionEvaluationException4.getPattern();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
    }

    @Test
    public void test06371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06371");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder7 = builder4.setExtension('a', "");
        java.util.Locale locale8 = builder7.build();
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale12 = new java.util.Locale("de-de", "\u7f8e\u56fd");
        java.lang.String str13 = locale8.getDisplayName(locale12);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u7f8e\u56fd");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "French" + "'", str13, "French");
    }

    @Test
    public void test06372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06372");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer0.transform(complexArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer16.transform2(complexArray32);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer34 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray39 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer34.transform(doubleArray39);
        double[] doubleArray42 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray43 = fastFourierTransformer34.inversetransform2(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer16.transform2(doubleArray42);
        double[] doubleArray46 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray42, (-1.0d));
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer0.transform2(doubleArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform(doubleArray53);
        double[] doubleArray56 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer48.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer0.transform(doubleArray56);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer0.inversetransform2(univariateRealFunction59, (double) 0L, (double) 0L, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
    }

    @Test
    public void test06373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06373");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println('#');
        java.io.PrintStream printStream8 = new java.io.PrintStream("japonais");
        printStream8.print(0.0f);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        java.io.PrintStream printStream21 = printStream8.format(locale11, "japonais", (java.lang.Object[]) complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray25 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer22.inversetransform2(doubleArray25);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray25);
        printStream21.print((java.lang.Object) doubleArray25);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream21.write(byteArray32);
        printStream1.write(byteArray32);
        printStream1.print('x');
        printStream1.print('4');
        printStream1.println('a');
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setRegion("");
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder45 = builder43.setLocale(locale44);
        printStream1.println((java.lang.Object) builder45);
        java.util.Locale locale47 = builder45.build();
        java.util.Locale.Builder builder49 = builder45.setScript("");
        java.util.Locale.Builder builder50 = builder45.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder50.removeUnicodeLocaleAttribute("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test06374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06374");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("China", "Japanisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Japanisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06375");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cos();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex4.multiply(complex11);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.log();
        org.apache.commons.math.complex.Complex complex22 = complex12.subtract(complex21);
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test06376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06376");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.print(0);
        printStream5.println("");
        printStream5.print((long) (byte) 0);
    }

    @Test
    public void test06377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06377");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test06378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06378");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex0.multiply(complex2);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("org.apache.commons.math.FunctionEvaluationException: fr");
        boolean boolean7 = complex2.equals((java.lang.Object) printWriter6);
        printWriter6.print('#');
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale11.getDisplayLanguage(locale14);
        java.lang.String str17 = locale14.getScript();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray38 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray39 = fastFourierTransformer35.inversetransform2(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer19.inversetransform(complexArray39);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer42.transform(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer41.inversetransform(doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray49, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer19.inversetransform2(complexArray49);
        java.io.PrintWriter printWriter53 = printWriter6.printf(locale14, "giapponese", (java.lang.Object[]) complexArray49);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ja" + "'", str15, "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(printWriter53);
    }

    @Test
    public void test06379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06379");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.print((long) (short) 1);
        printWriter4.flush();
        printWriter4.println();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale15.getISO3Country();
        java.lang.String str18 = locale15.getDisplayScript();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale20.getDisplayCountry();
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category19);
        java.util.Locale locale25 = java.util.Locale.getDefault(category19);
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale15.getDisplayCountry(locale25);
        boolean boolean28 = locale25.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getISO3Country();
        java.lang.String str31 = locale29.getDisplayScript();
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleKeys();
        java.lang.String str33 = locale29.getISO3Language();
        java.lang.String str34 = locale29.getISO3Language();
        java.lang.String str35 = locale29.getVariant();
        java.lang.String str36 = locale25.getDisplayVariant(locale29);
        java.lang.String str37 = locale13.getDisplayCountry(locale25);
        java.io.PrintStream printStream40 = new java.io.PrintStream("japonais");
        printStream40.write((int) 'a');
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.println(' ');
        printWriter45.print((float) 10L);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter52.println(' ');
        printWriter52.println((long) (-1));
        printWriter52.println((java.lang.Object) "");
        printWriter52.println();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getScript();
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleKeys();
        java.lang.String str63 = locale60.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer65 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray68 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer65.inversetransform2(doubleArray68);
        java.io.PrintWriter printWriter70 = printWriter52.printf(locale60, "ja", (java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter71 = printWriter45.format("", (java.lang.Object[]) complexArray69);
        java.io.PrintStream printStream72 = printStream40.format("de", (java.lang.Object[]) complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray69);
        java.io.PrintWriter printWriter75 = printWriter4.printf(locale25, "zh", (java.lang.Object[]) complexArray69);
        java.lang.String str76 = locale25.getISO3Language();
        java.lang.String str77 = locale25.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fra" + "'", str33, "fra");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "fra" + "'", str76, "fra");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fran\347ais" + "'", str77, "fran\347ais");
    }

    @Test
    public void test06380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06380");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer18.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        double[] doubleArray44 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer36.inversetransform2(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer18.transform2(doubleArray44);
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray44, (-1.0d));
        double[] doubleArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray44, (double) (short) 0);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer0.inversetransform2(doubleArray50);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform(univariateRealFunction52, (double) 0.0f, (double) 10L, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0]");
        org.junit.Assert.assertNotNull(complexArray51);
    }

    @Test
    public void test06381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06381");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fr-FR");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale15 = java.util.Locale.getDefault(category10);
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = locale15.getDisplayScript(locale17);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.println(false);
        printWriter24.print("FR");
        printWriter24.write("und");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean42 = printWriter41.checkError();
        java.util.Locale locale43 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray50);
        java.lang.Object[] objArray52 = mathException51.getArguments();
        java.io.PrintWriter printWriter53 = printWriter41.printf(locale43, "zho", objArray52);
        java.lang.Throwable throwable58 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException59);
        double double61 = functionEvaluationException59.getArgument();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray52, (java.lang.Throwable) functionEvaluationException59);
        java.io.PrintWriter printWriter63 = printWriter24.format(locale34, "fra", objArray52);
        java.io.PrintStream printStream64 = printStream9.format(locale15, "\u30d5\u30e9\u30f3\u30b9\u8a9e", objArray52);
        java.io.PrintStream printStream66 = printStream9.append((java.lang.CharSequence) "Etats-Unis");
        java.io.PrintStream printStream68 = printStream66.append('a');
        printStream68.print(' ');
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printStream68);
    }

    @Test
    public void test06382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06382");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "italiano");
    }

    @Test
    public void test06383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06383");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("Chine", "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??? (????)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06384");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.flush();
        printStream1.println('a');
        printStream1.print((double) (short) -1);
        printStream1.print("\u975e\u78ba\u5b9a (ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION)");
        printStream1.print(false);
    }

    @Test
    public void test06385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06385");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        printStream3.print(true);
        boolean boolean6 = printStream3.checkError();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream3, true);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer11.inversetransform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer16.transform(doubleArray21);
        double[] doubleArray24 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer16.inversetransform2(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer11.transform(complexArray25);
        java.io.PrintStream printStream27 = printStream3.format(locale9, "fr", (java.lang.Object[]) complexArray26);
        boolean boolean28 = locale9.hasExtensions();
        java.lang.String str29 = locale1.getDisplayVariant(locale9);
        java.lang.String str30 = locale9.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test06386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06386");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        java.io.PrintStream printStream6 = new java.io.PrintStream("japonais");
        printStream6.print(0.0f);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        java.io.PrintStream printStream19 = printStream6.format(locale9, "japonais", (java.lang.Object[]) complexArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray23);
        printStream19.print((java.lang.Object) doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer0.transform2(doubleArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer28.transform2(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform(complexArray37);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer39 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer39.transform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.inversetransform2(doubleArray45);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray55 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer50.transform(doubleArray55);
        double[] doubleArray58 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer60 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform(doubleArray66);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray69 = fastFourierTransformer60.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer50.transform(complexArray69);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer71 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer72 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray77 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer72.transform(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer71.inversetransform(doubleArray77);
        double[] doubleArray81 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer50.transform(doubleArray77);
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer0.inversetransform2(doubleArray77);
        double[] doubleArray85 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray77, 120.0d);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray85);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray69);
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-4200.0, -12000.0, -0.0, -6240.0]");
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-4200.0, -12000.0, -0.0, -6240.0]");
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-4200.0, -12000.0, -0.0, -6240.0]");
    }

    @Test
    public void test06387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06387");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println(false);
        printWriter1.print("FR");
        printWriter1.write("und");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean19 = printWriter18.checkError();
        java.util.Locale locale20 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer23 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray26 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer23.inversetransform2(doubleArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray27);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        java.io.PrintWriter printWriter30 = printWriter18.printf(locale20, "zho", objArray29);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException36);
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("", objArray29, (java.lang.Throwable) functionEvaluationException36);
        java.io.PrintWriter printWriter40 = printWriter1.format(locale11, "fra", objArray29);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter42.println(' ');
        printWriter42.println(false);
        printWriter42.print((int) (short) 1);
        printWriter1.println((java.lang.Object) printWriter42);
        java.io.PrintWriter printWriter51 = printWriter1.append('4');
        printWriter51.flush();
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter51, true);
        java.io.PrintWriter printWriter56 = printWriter54.append((java.lang.CharSequence) "chinois");
        java.io.PrintWriter printWriter58 = printWriter54.append('a');
        printWriter54.print(2.319776824715853d);
        printWriter54.close();
        printWriter54.println('4');
        printWriter54.println(0.0f);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printWriter58);
    }

    @Test
    public void test06388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06388");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex0.conjugate();
        boolean boolean5 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex0.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test06389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06389");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getExtension('a');
        java.lang.String str5 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ko_KR" + "'", str5, "ko_KR");
    }

    @Test
    public void test06390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06390");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter13.print((java.lang.Object) "fran\347ais");
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter18.println(' ');
        printWriter18.println((long) (-1));
        printWriter18.println((java.lang.Object) "");
        boolean boolean25 = printWriter18.checkError();
        java.util.Locale locale26 = null;
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter32 = printWriter18.format(locale26, "zho", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter33 = printWriter13.format("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) strArray30);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.getImaginary();
        org.apache.commons.math.complex.Complex complex37 = complex34.sinh();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.getImaginary();
        org.apache.commons.math.complex.Complex complex41 = complex38.sinh();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex43 = complex41.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.exp();
        org.apache.commons.math.complex.Complex complex45 = complex34.pow(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex34.negate();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex48 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex47.sin();
        org.apache.commons.math.complex.Complex complex50 = complex46.divide(complex47);
        printWriter13.print((java.lang.Object) complex46);
        org.apache.commons.math.complex.Complex complex52 = complex46.asin();
        double double53 = complex52.getReal();
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test06391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06391");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("fr", strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getISO3Country();
        java.lang.String str22 = locale20.getDisplayScript();
        java.util.Set<java.lang.String> strSet23 = locale20.getUnicodeLocaleKeys();
        java.lang.String str24 = locale20.getISO3Language();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.toLanguageTag();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale26.getISO3Language();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.toLanguageTag();
        boolean boolean37 = locale35.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getISO3Country();
        java.lang.String str40 = locale38.getDisplayScript();
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Locale locale46 = java.util.Locale.KOREA;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.getDisplayScript();
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        java.lang.String str51 = locale47.getISO3Language();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale20, locale25, locale26, locale30, locale31, locale34, locale35, locale38, locale42, locale43, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale56 = java.util.Locale.lookup(languageRangeList10, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale58.getDisplayLanguage(locale61);
        java.lang.String str64 = locale61.getScript();
        java.lang.String str65 = locale56.getDisplayName(locale61);
        java.lang.Object[] objArray67 = null;
        java.io.PrintStream printStream68 = printStream1.printf(locale61, "\u65e5\u672c\u8a9e", objArray67);
        boolean boolean69 = printStream68.checkError();
        java.io.PrintStream printStream71 = new java.io.PrintStream((java.io.OutputStream) printStream68, true);
        printStream68.println((-1.0f));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fra" + "'", str29, "fra");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ja" + "'", str32, "ja");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fr" + "'", str36, "fr");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ja" + "'", str62, "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str65, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06392");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.MathException: hi!", "United States", "jpn");
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Locale locale5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getDisplayName(locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "org.apache.commons.math.mathexception: hi!_UNITED STATES_jpn");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test06393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06393");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = locale0.stripExtensions();
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale3.getScript();
        java.lang.String str7 = locale3.getLanguage();
        java.util.Set<java.lang.String> strSet8 = locale3.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "jpn" + "'", str5, "jpn");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test06394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06394");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.flush();
        printStream1.println((double) (short) 100);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.print(0.0f);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.transform(doubleArray18);
        java.io.PrintStream printStream20 = printStream7.format(locale10, "japonais", (java.lang.Object[]) complexArray19);
        java.io.PrintStream printStream21 = printStream1.printf("org.apache.commons.math.functionevaluationexception: hi!", (java.lang.Object[]) complexArray19);
        printStream21.print(10L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(printStream21);
    }

    @Test
    public void test06395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06395");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) 'a', "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("de", (java.lang.Throwable) functionEvaluationException4);
        java.lang.Throwable[] throwableArray6 = mathException5.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1);
        double double9 = functionEvaluationException8.getArgument();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("English", (java.lang.Object[]) throwableArray6, (java.lang.Throwable) functionEvaluationException8);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test06396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06396");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.println((float) (byte) 100);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getCountry();
        java.lang.String str33 = locale30.getDisplayCountry(locale31);
        java.lang.String str34 = locale30.getDisplayCountry();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "org.apache.commons.math.FunctionEvaluationException: fr");
        java.lang.Throwable[] throwableArray40 = functionEvaluationException39.getSuppressed();
        java.lang.String[] strArray44 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray44);
        double double46 = functionEvaluationException45.getArgument();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\u65e5\u6587", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) mathException48);
        java.io.PrintStream printStream50 = printStream1.format(locale30, "en", (java.lang.Object[]) throwableArray40);
        printStream1.print(true);
        printStream1.println((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(printStream50);
    }

    @Test
    public void test06397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06397");
        java.util.Locale locale3 = new java.util.Locale("\u30d5\u30e9\u30f3\u30b9\u8a9e", "org.apache.commons.math.FunctionEvaluationException", "und");
        java.lang.String str4 = locale3.getDisplayVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e_ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION_und");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
    }

    @Test
    public void test06398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06398");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getDisplayScript();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getCountry();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale1.getDisplayCountry(locale11);
        boolean boolean14 = locale11.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = locale11.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06399");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math.complex.Complex complex5 = complex4.negate();
        boolean boolean6 = complex2.equals((java.lang.Object) complex4);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math.complex.Complex complex19 = complex15.multiply(complex17);
        org.apache.commons.math.complex.Complex complex22 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex23 = complex17.add(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex17.negate();
        org.apache.commons.math.complex.Complex complex26 = complex17.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex17.acos();
        org.apache.commons.math.complex.Complex complex29 = complex17.asin();
        org.apache.commons.math.complex.Complex complex30 = complex17.exp();
        org.apache.commons.math.complex.Complex complex31 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex32 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex11.divide(complex32);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test06400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06400");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.println((int) (byte) 100);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
    }

    @Test
    public void test06401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06401");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.toLanguageTag();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray31 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer26.transform(doubleArray31);
        java.io.PrintStream printStream33 = printStream14.printf(locale22, "GB", (java.lang.Object[]) complexArray32);
        printStream33.println((float) 100);
        printStream33.println((long) (byte) 10);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream33.print((int) (short) 10);
        printStream33.close();
        printStream33.println(32.0d);
        printStream33.write((int) (byte) 1);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream33);
        printStream33.write(10);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test06402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06402");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.println(false);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        printStream7.print((int) (short) 10);
        printStream7.print('x');
        org.junit.Assert.assertNotNull(printStream7);
    }

    @Test
    public void test06403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06403");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray13 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer10.inversetransform2(doubleArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        java.io.PrintStream printStream29 = printStream16.format(locale19, "japonais", (java.lang.Object[]) complexArray28);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer30 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer30.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray33);
        printStream29.print((java.lang.Object) doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer10.transform2(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer0.inversetransform2(doubleArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer41.inversetransform2(doubleArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer46.transform(doubleArray51);
        double[] doubleArray54 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer46.inversetransform2(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer41.transform(complexArray55);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer57 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray60 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer57.inversetransform2(doubleArray60);
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer41.inversetransform(complexArray61);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException(throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException68);
        java.lang.Throwable[] throwableArray70 = functionEvaluationException68.getSuppressed();
        java.lang.Throwable[] throwableArray71 = functionEvaluationException68.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException68.addSuppressed((java.lang.Throwable) functionEvaluationException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException74);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62);
        org.apache.commons.math.complex.Complex[] complexArray78 = fastFourierTransformer0.inversetransform(complexArray62);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer79 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray82 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray83 = fastFourierTransformer79.inversetransform2(doubleArray82);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray82);
        org.apache.commons.math.complex.Complex[] complexArray85 = fastFourierTransformer0.inversetransform(doubleArray82);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer0.inversetransform(univariateRealFunction86, 10.024906793143211d, 0.7350525871447157d, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [10.024906793143211, 0.7350525871447157]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(complexArray78);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray83);
        org.junit.Assert.assertNotNull(complexArray85);
    }

    @Test
    public void test06404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06404");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        java.io.PrintStream printStream5 = new java.io.PrintStream("japonais");
        printStream5.print(true);
        boolean boolean8 = printStream5.checkError();
        printStream5.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.transform(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer12.transform2(doubleArray18);
        java.io.PrintStream printStream22 = printStream5.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray21);
        java.io.PrintStream printStream24 = printStream22.append('4');
        byte[] byteArray28 = new byte[] { (byte) 100, (byte) 1, (byte) 10 };
        printStream24.write(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray28, 0, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 1, 10]");
    }

    @Test
    public void test06405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06405");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.getDefault(category2);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray12);
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer6.transform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer16 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer16.inversetransform2(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer6.transform(complexArray20);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer24.inversetransform2(doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream("japonais");
        printStream30.print(0.0f);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        java.io.PrintStream printStream43 = printStream30.format(locale33, "japonais", (java.lang.Object[]) complexArray42);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray47);
        printStream43.print((java.lang.Object) doubleArray47);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer24.transform2(doubleArray47);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter53.println(' ');
        printWriter53.print((float) 10L);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter60.println(' ');
        printWriter60.println((long) (-1));
        printWriter60.println((java.lang.Object) "");
        printWriter60.println();
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale68.getScript();
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleKeys();
        java.lang.String str71 = locale68.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer73 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray76 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray77 = fastFourierTransformer73.inversetransform2(doubleArray76);
        java.io.PrintWriter printWriter78 = printWriter60.printf(locale68, "ja", (java.lang.Object[]) complexArray77);
        java.io.PrintWriter printWriter79 = printWriter53.format("", (java.lang.Object[]) complexArray77);
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer24.inversetransform(complexArray77);
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException(throwable84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException86);
        java.lang.Object[] objArray88 = functionEvaluationException87.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray77, (java.lang.Throwable) functionEvaluationException87);
        org.apache.commons.math.complex.Complex[] complexArray90 = fastFourierTransformer6.inversetransform(complexArray77);
        java.io.PrintStream printStream91 = printStream1.format(locale4, "allemand", (java.lang.Object[]) complexArray77);
        printStream1.println((long) 'u');
        printStream1.print(Double.NEGATIVE_INFINITY);
        java.io.PrintStream printStream97 = printStream1.append('a');
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(printStream97);
    }

    @Test
    public void test06406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06406");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex3 = complex0.exp();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex6 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex5.exp();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.getImaginary();
        double double11 = complex8.getReal();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex17 = complex15.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.asin();
        boolean boolean21 = complex19.equals((java.lang.Object) "zho");
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex25 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex27 = complex25.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex29 = complex19.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex8.add(complex19);
        double double31 = complex30.abs();
        org.apache.commons.math.complex.Complex complex32 = complex7.pow(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex30.asin();
        org.apache.commons.math.complex.Complex complex34 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex4.multiply(complex34);
        double double36 = complex4.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test06407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06407");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 0, Double.NaN);
    }

    @Test
    public void test06408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06408");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print("GB");
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter5.println(' ');
        printWriter5.println((long) (-1));
        printWriter5.println((java.lang.Object) "");
        char[] charArray18 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter5.println(charArray18);
        printWriter5.println(10);
        printWriter5.print('a');
        char[] charArray24 = new char[] {};
        printWriter5.println(charArray24);
        printStream1.println(charArray24);
        printStream1.print((float) '4');
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
    }

    @Test
    public void test06409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06409");
        java.lang.Throwable throwable8 = null;
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException(throwable8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException10);
        java.lang.Throwable[] throwableArray12 = functionEvaluationException10.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "zh", (java.lang.Throwable) functionEvaluationException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("\u30d5\u30e9\u30f3\u30b9\u8a9e)", (java.lang.Throwable) functionEvaluationException15);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test06410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06410");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((-1));
        printStream1.println();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.setLanguage("de");
        java.util.Locale.Builder builder12 = builder7.setLanguage("chinois");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder12.clear();
        printStream1.println((java.lang.Object) builder14);
        java.util.Locale.Builder builder17 = builder14.setLanguage("TWN");
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder14.setLocale(locale19);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test06411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06411");
        java.util.Locale locale1 = new java.util.Locale("french");
        org.junit.Assert.assertEquals(locale1.toString(), "french");
    }

    @Test
    public void test06412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06412");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        double double3 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math.complex.Complex complex7 = complex5.cos();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex4.add(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex10.sinh();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex15 = complex14.acos();
        org.apache.commons.math.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.multiply(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex15.atan();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex19.acos();
        org.apache.commons.math.complex.Complex complex23 = complex15.add(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex8.divide(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex0.multiply(complex23);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.getImaginary();
        double double31 = complex28.getReal();
        org.apache.commons.math.complex.Complex complex32 = complex28.asin();
        org.apache.commons.math.complex.Complex complex33 = complex27.add(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex33.sin();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.sinh();
        org.apache.commons.math.complex.Complex complex37 = complex26.add(complex36);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test06413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06413");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder6 = builder2.removeUnicodeLocaleAttribute("chinois");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter8.println(' ');
        printWriter8.println((long) (-1));
        printWriter8.println((java.lang.Object) "");
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream20.print((float) (short) -1);
        printStream20.print('a');
        printStream20.println();
        printStream20.print("hi!");
        printStream20.println((-1L));
        printStream20.println((double) 0.0f);
        printStream20.close();
        printWriter8.print((java.lang.Object) printStream20);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getVariant();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = locale34.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale34.getDisplayLanguage(locale38);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter46 = printWriter44.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        double[] doubleArray61 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer53.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer48.transform(complexArray62);
        java.io.PrintWriter printWriter64 = printWriter44.format("ja", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable[] throwableArray72 = functionEvaluationException70.getSuppressed();
        java.lang.Throwable[] throwableArray73 = functionEvaluationException70.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException70.addSuppressed((java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException76);
        java.io.PrintStream printStream79 = printStream20.printf(locale38, "org.apache.commons.math.FunctionEvaluationException: FR", (java.lang.Object[]) complexArray62);
        java.util.Locale.Builder builder80 = builder2.setLocale(locale38);
        java.util.Locale locale81 = builder2.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanese" + "'", str39, "Japanese");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
    }

    @Test
    public void test06414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06414");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale.setDefault(locale7);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test06415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06415");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex1.negate();
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.tan();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test06416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06416");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println("Chinesisch");
        printStream1.print('4');
        printStream1.println((int) '4');
        java.io.PrintStream printStream11 = printStream1.append((java.lang.CharSequence) "de_ALLEMAND_zh");
        printStream11.close();
        printStream11.write((int) (short) 100);
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test06417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06417");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter1.println(0.8414709848078965d);
        printWriter1.print((int) '4');
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test06418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06418");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean7 = printStream1.checkError();
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "zh");
        printStream1.println((long) (-1));
        printStream1.print((int) (byte) 100);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("japonais");
        printStream26.print(0.0f);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        java.io.PrintStream printStream39 = printStream26.format(locale29, "japonais", (java.lang.Object[]) complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        printStream39.print((java.lang.Object) doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer20.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer15.transform(complexArray47);
        java.io.PrintStream printStream49 = printStream1.printf("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) complexArray48);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream49, false);
        printStream51.println("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        java.io.PrintStream printStream55 = printStream51.append('#');
        printStream51.print(0.0f);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printStream55);
    }

    @Test
    public void test06419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06419");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Etats-Unis");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean8 = printWriter7.checkError();
        java.io.PrintWriter printWriter10 = printWriter7.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        printWriter11.println(false);
        printWriter11.println((float) 0);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale19.getDisplayCountry(locale20);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getCountry();
        java.lang.String str25 = locale20.getDisplayName(locale23);
        java.util.Locale.Builder builder26 = builder18.setLocale(locale23);
        java.util.Locale.Builder builder28 = builder18.setLanguageTag("Japanese");
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clear();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.getCountry();
        java.lang.String str35 = locale32.getDisplayCountry(locale33);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = locale36.getCountry();
        java.lang.String str38 = locale33.getDisplayName(locale36);
        java.util.Locale.Builder builder39 = builder31.setLocale(locale36);
        java.util.Locale.Builder builder41 = builder31.setLanguageTag("Japanese");
        java.util.Locale locale42 = builder41.build();
        java.util.Locale.Builder builder43 = builder18.setLocale(locale42);
        java.lang.String str44 = locale42.getCountry();
        java.lang.String str45 = locale42.getLanguage();
        printWriter11.println((java.lang.Object) locale42);
        java.util.Set<java.lang.String> strSet47 = locale42.getUnicodeLocaleKeys();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.parse("FR", strMap49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList50, strMap51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList50, strMap53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.lang.String[] strArray60 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strMap64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strMap66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strMap68);
        java.util.Collection<java.lang.String> strCollection70 = null;
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strCollection70, filteringMode71);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList50, (java.util.Collection<java.lang.String>) strList72, filteringMode73);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet47, filteringMode73);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "FR" + "'", str24, "FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fran\347ais" + "'", str25, "fran\347ais");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "FR" + "'", str37, "FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fran\347ais" + "'", str38, "fran\347ais");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "japanese" + "'", str45, "japanese");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode71.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode73.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strList75);
    }

    @Test
    public void test06420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06420");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Chine", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray17 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList18);
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        java.lang.String str29 = java.util.Locale.lookupTag(languageRangeList25, (java.util.Collection<java.lang.String>) strSet28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.parse("FR", strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap33);
        java.util.Locale.LanguageRange languageRange36 = new java.util.Locale.LanguageRange("FR");
        double double37 = languageRange36.getWeight();
        java.util.Locale.LanguageRange languageRange39 = new java.util.Locale.LanguageRange("FR");
        double double40 = languageRange39.getWeight();
        java.lang.String str41 = languageRange39.getRange();
        java.util.Locale.LanguageRange languageRange43 = new java.util.Locale.LanguageRange("FR");
        java.lang.String str44 = languageRange43.getRange();
        java.util.Locale.LanguageRange languageRange46 = new java.util.Locale.LanguageRange("FR");
        java.util.Locale.LanguageRange languageRange48 = new java.util.Locale.LanguageRange("FR");
        double double49 = languageRange48.getWeight();
        java.lang.String str50 = languageRange48.getRange();
        double double51 = languageRange48.getWeight();
        java.util.Locale.LanguageRange languageRange53 = new java.util.Locale.LanguageRange("FR");
        java.lang.String str54 = languageRange53.getRange();
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("anglais", (double) 1L);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange36, languageRange39, languageRange43, languageRange46, languageRange48, languageRange53, languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale.LanguageRange languageRange62 = new java.util.Locale.LanguageRange("FR");
        double double63 = languageRange62.getWeight();
        java.lang.String str64 = languageRange62.getRange();
        java.util.Locale.LanguageRange languageRange66 = new java.util.Locale.LanguageRange("FR");
        double double67 = languageRange66.getWeight();
        java.lang.String str68 = languageRange66.getRange();
        double double69 = languageRange66.getWeight();
        java.util.Locale.LanguageRange languageRange71 = new java.util.Locale.LanguageRange("FR");
        double double72 = languageRange71.getWeight();
        java.lang.String str73 = languageRange71.getRange();
        java.lang.String str74 = languageRange71.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] { languageRange62, languageRange66, languageRange71 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getISO3Country();
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.lang.String str81 = locale80.getLanguage();
        java.lang.String str82 = locale78.getDisplayName(locale80);
        java.lang.String str83 = locale78.getLanguage();
        java.util.Set<java.lang.String> strSet84 = locale78.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.lang.String>) strSet84, filteringMode85);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList86);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags(languageRangeList32, (java.util.Collection<java.lang.String>) strList86, filteringMode88);
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet28, filteringMode88);
        java.util.Locale locale94 = new java.util.Locale("de", "allemand", "zh");
        java.util.Set<java.lang.String> strSet95 = locale94.getUnicodeLocaleAttributes();
        java.lang.String str96 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet95);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap97 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList98 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap97);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "de" + "'", str27, "de");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fr" + "'", str41, "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr" + "'", str44, "fr");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fr" + "'", str54, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fr" + "'", str64, "fr");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fr" + "'", str68, "fr");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fr" + "'", str73, "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fr" + "'", str74, "fr");
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ja" + "'", str81, "ja");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str82, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "fr" + "'", str83, "fr");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode85.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode88.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertEquals(locale94.toString(), "de_ALLEMAND_zh");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNotNull(languageRangeList98);
    }

    @Test
    public void test06421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06421");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.print((float) (-1L));
        boolean boolean12 = printStream5.checkError();
        printStream5.println(0.5403023058681398d);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream5, true);
        printWriter16.print((float) 10);
        printWriter16.print(false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06422");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.functionevaluationexception: fr", "anglais", "Chine");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale3.getDisplayLanguage(locale6);
        java.lang.String str13 = locale3.getVariant();
        java.lang.String str14 = locale3.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "org.apache.commons.math.functionevaluationexception: fr_ANGLAIS_Chine");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.functionevaluationexception: fr" + "'", str12, "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chine" + "'", str13, "Chine");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und-Chine" + "'", str14, "und-Chine");
    }

    @Test
    public void test06423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06423");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 2.319776824715853d, 4.6711023094386594E-17d, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [2.319776824715853, 4.6711023094386594E-17]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06424");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        printStream25.print((float) 'u');
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        java.util.Locale.Builder builder31 = builder29.setScript("");
        java.util.Locale.Builder builder33 = builder29.setLanguage("zho");
        java.util.Locale.Builder builder34 = builder29.clear();
        printStream25.println((java.lang.Object) builder29);
        printStream25.print((-1));
        java.lang.Throwable throwable42 = null;
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException(throwable42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException44);
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException(throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException51);
        java.lang.String str53 = functionEvaluationException51.getPattern();
        functionEvaluationException44.addSuppressed((java.lang.Throwable) functionEvaluationException51);
        java.lang.Object[] objArray55 = functionEvaluationException51.getArguments();
        java.io.PrintStream printStream56 = printStream25.format("giapponese", objArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(printStream56);
    }

    @Test
    public void test06425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06425");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.toLanguageTag();
        boolean boolean9 = locale7.hasExtensions();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale.Builder builder12 = builder4.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setLanguageTag("\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06426");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex3.divide(complex4);
        org.apache.commons.math.complex.Complex complex6 = complex4.acos();
        org.apache.commons.math.complex.Complex complex7 = complex4.cos();
        org.apache.commons.math.complex.Complex complex8 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test06427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06427");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException: fr");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.functionevaluationexception: fr");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test06428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06428");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, 0.7456241416655579d, 2.319776824715853d, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06429");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\u30c9\u30a4\u30c4\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ?????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06430");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale.Builder builder5 = builder0.setLanguage("chinois");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("kor");
        java.util.Locale.Builder builder12 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder9.addUnicodeLocaleAttribute("\u65e5\u672c\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06431");
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException(throwable6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException8);
        java.lang.String str10 = functionEvaluationException8.getPattern();
        java.lang.String str11 = functionEvaluationException8.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d);
        functionEvaluationException8.addSuppressed((java.lang.Throwable) functionEvaluationException13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "Franz\366sisch", (java.lang.Throwable) functionEvaluationException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) functionEvaluationException8);
        java.lang.String str17 = functionEvaluationException8.getPattern();
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test06432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06432");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("ja");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setRegion("ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ORG.APACHE.COMMONS.MATH.FUNCTIONEVALUATIONEXCEPTION [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test06433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06433");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.print('4');
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException(throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException18);
        java.lang.Throwable[] throwableArray20 = functionEvaluationException18.getSuppressed();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), (java.lang.Throwable) mathException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "zh", (java.lang.Throwable) functionEvaluationException22);
        printStream1.println((java.lang.Object) "zh");
        printStream1.println();
        printStream1.println(true);
        printStream1.print(0);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.println(100L);
        printStream1.print((int) 'u');
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test06434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06434");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException(throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException14);
        java.lang.Object[] objArray16 = functionEvaluationException15.getArguments();
        java.io.PrintStream printStream17 = printStream1.printf("org.apache.commons.math.FunctionEvaluationException: hi!", objArray16);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        printWriter18.println();
        printWriter18.print((long) (short) 10);
        printWriter18.write("Chinese (China)", (int) (short) 1, (int) (short) 10);
        java.io.PrintWriter printWriter27 = printWriter18.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: FR");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(printWriter27);
    }

    @Test
    public void test06435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06435");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("italien");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "italien");
    }

    @Test
    public void test06436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06436");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder4.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setScript("\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06437");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        printStream1.print((-1));
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        java.io.PrintStream printStream19 = printStream1.format("\u30c9\u30a4\u30c4\u8a9e", (java.lang.Object[]) complexArray18);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream19, true);
        printStream19.print('#');
        printStream19.println((long) 1);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException(throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException33);
        double double35 = functionEvaluationException34.getArgument();
        java.lang.String str36 = functionEvaluationException34.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "", (java.lang.Throwable) functionEvaluationException34);
        printStream19.print((java.lang.Object) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test06438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06438");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex17 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex18 = complex12.add(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex12.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex12.negate();
        org.apache.commons.math.complex.Complex complex21 = complex0.add(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.getImaginary();
        double double25 = complex22.abs();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.getImaginary();
        org.apache.commons.math.complex.Complex complex29 = complex22.add(complex26);
        double double30 = complex22.getReal();
        org.apache.commons.math.complex.Complex complex31 = complex22.tanh();
        double double32 = complex22.getImaginary();
        org.apache.commons.math.complex.Complex complex33 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex0.multiply(complex22);
        org.apache.commons.math.complex.Complex complex37 = new org.apache.commons.math.complex.Complex(1.557407724654902d, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex38 = complex0.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.tanh();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.getImaginary();
        double double43 = complex40.abs();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.getImaginary();
        org.apache.commons.math.complex.Complex complex47 = complex40.add(complex44);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex49 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex51 = complex44.subtract(complex48);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = complex52.acos();
        org.apache.commons.math.complex.Complex complex56 = complex48.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex58 = complex57.cos();
        org.apache.commons.math.complex.Complex complex59 = complex56.add(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex38.multiply(complex60);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test06439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06439");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException(throwable4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException6);
        java.lang.String str8 = functionEvaluationException6.getPattern();
        java.lang.Object[] objArray9 = functionEvaluationException6.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("United Kingdom", objArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test06440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06440");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale locale4 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "China" + "'", str2, "China");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
    }

    @Test
    public void test06441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06441");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = printWriter1.append((java.lang.CharSequence) "Japanese");
        printWriter8.println((double) 'x');
        java.io.PrintWriter printWriter12 = printWriter8.append('a');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter15.println(' ');
        printWriter15.println((long) (-1));
        printWriter15.println((java.lang.Object) "");
        boolean boolean22 = printWriter15.checkError();
        java.util.Locale locale23 = null;
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter29 = printWriter15.format(locale23, "zho", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter30 = printWriter8.format("allemand (Allemagne)", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter32 = printWriter8.append((java.lang.CharSequence) "ja_JP");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale34.getDisplayScript(locale38);
        java.util.Locale locale40 = locale38.stripExtensions();
        java.util.Locale locale43 = new java.util.Locale("ja", "");
        java.lang.String str44 = locale40.getDisplayCountry(locale43);
        java.lang.Object[] objArray46 = null;
        java.io.PrintWriter printWriter47 = printWriter32.format(locale40, "und-Chine", objArray46);
        java.util.Locale.setDefault(locale40);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("org.apache.commons.math.functionevaluationexception: fr");
        java.lang.String str51 = locale40.getDisplayLanguage(locale50);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.getImaginary();
        org.apache.commons.math.complex.Complex complex55 = complex52.sinh();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex57 = complex56.acos();
        org.apache.commons.math.complex.Complex complex58 = complex57.negate();
        org.apache.commons.math.complex.Complex complex59 = complex55.multiply(complex57);
        org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex63 = complex57.add(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex57.sinh();
        org.apache.commons.math.complex.Complex complex65 = complex57.negate();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex67 = complex66.cos();
        org.apache.commons.math.complex.Complex complex68 = complex66.cos();
        org.apache.commons.math.complex.Complex complex69 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex66.cosh();
        double double71 = complex70.getImaginary();
        org.apache.commons.math.complex.Complex complex72 = complex57.add(complex70);
        double double73 = complex70.abs();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        double double76 = complex74.getImaginary();
        org.apache.commons.math.complex.Complex complex77 = complex74.sinh();
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex79 = complex77.divide(complex78);
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = complex80.sqrt1z();
        org.apache.commons.math.complex.Complex complex82 = complex80.conjugate();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex84.sqrt();
        org.apache.commons.math.complex.Complex complex86 = complex80.divide(complex85);
        double double87 = complex85.getReal();
        org.apache.commons.math.complex.Complex complex88 = complex78.divide(complex85);
        org.apache.commons.math.complex.Complex complex89 = complex70.add(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex89.asin();
        org.apache.commons.math.complex.Complex complex91 = complex89.acos();
        boolean boolean92 = locale40.equals((java.lang.Object) complex89);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u30ab\u30ca\u30c0" + "'", str44, "\u30ab\u30ca\u30c0");
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English" + "'", str51, "English");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.5403023058681398d + "'", double73 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.7350525871447157d + "'", double87 == 0.7350525871447157d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test06442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06442");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("japonais");
        printStream26.print(0.0f);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        java.io.PrintStream printStream39 = printStream26.format(locale29, "japonais", (java.lang.Object[]) complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        printStream39.print((java.lang.Object) doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer20.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer10.inversetransform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer50.transform2(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray56);
        double[] doubleArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) (-1.0f));
        double[] doubleArray65 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray56, (double) 10.0f);
        double[] doubleArray67 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray65, (double) (-1));
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer0.inversetransform(doubleArray67);
        double[] doubleArray70 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray67, 0.18781088919991634d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[65.73381121997072, 187.81088919991635, 0.0, 97.6616623839565]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[65.73381121997072, 187.81088919991635, 0.0, 97.6616623839565]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[65.73381121997072, 187.81088919991635, 0.0, 97.6616623839565]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[65.73381121997072, 187.81088919991635, 0.0, 97.6616623839565]");
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[65.73381121997072, 187.81088919991635, 0.0, 97.6616623839565]");
    }

    @Test
    public void test06443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06443");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("de");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale4.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleKeys();
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale6);
        java.util.Locale locale13 = builder0.build();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str16 = locale13.getExtension('a');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str8, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test06444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06444");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex16 = complex5.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.tan();
        org.apache.commons.math.complex.Complex complex22 = complex20.asin();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex15.multiply(complex23);
        boolean boolean25 = complex24.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06445");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.print("hi!");
        printStream5.println((-1L));
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintStream printStream17 = new java.io.PrintStream("japonais");
        printStream17.print(true);
        boolean boolean20 = printStream17.checkError();
        printStream17.println();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException(throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable28);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException30);
        java.lang.Object[] objArray32 = functionEvaluationException31.getArguments();
        java.io.PrintStream printStream33 = printStream17.printf("org.apache.commons.math.FunctionEvaluationException: hi!", objArray32);
        printStream5.print((java.lang.Object) printStream17);
        java.io.PrintStream printStream36 = new java.io.PrintStream((java.io.OutputStream) printStream5, false);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.getImaginary();
        org.apache.commons.math.complex.Complex complex40 = complex37.sinh();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex42 = complex40.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = complex41.cos();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex46 = complex45.cos();
        org.apache.commons.math.complex.Complex complex47 = complex45.cos();
        org.apache.commons.math.complex.Complex complex48 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex41.multiply(complex48);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.getImaginary();
        org.apache.commons.math.complex.Complex complex53 = complex50.sinh();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex55 = complex54.acos();
        org.apache.commons.math.complex.Complex complex56 = complex55.negate();
        org.apache.commons.math.complex.Complex complex57 = complex53.multiply(complex55);
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = complex49.subtract(complex58);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex63 = complex60.cos();
        org.apache.commons.math.complex.Complex complex64 = complex59.pow(complex60);
        boolean boolean65 = complex60.isNaN();
        boolean boolean66 = complex60.isInfinite();
        org.apache.commons.math.complex.Complex complex67 = complex60.atan();
        printStream36.println((java.lang.Object) complex67);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test06446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06446");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream5);
        printStream11.println(true);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException20);
        java.lang.Throwable[] throwableArray22 = functionEvaluationException21.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.format("", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("japonais");
        printStream25.write((int) 'a');
        printStream25.print(0.0f);
        java.io.PrintStream printStream31 = printStream25.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.getISO3Language();
        printStream25.println((java.lang.Object) locale32);
        java.util.Locale locale38 = new java.util.Locale("fra");
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.lang.String str42 = locale32.getDisplayScript(locale38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer45 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray50 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer45.transform(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray50);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer44.transform2(doubleArray50);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer54 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer54.transform(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray61 = fastFourierTransformer44.inversetransform(complexArray60);
        org.apache.commons.math.complex.Complex[] complexArray63 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray60, (double) (-1));
        java.io.PrintStream printStream64 = printStream23.format(locale32, "allemand", (java.lang.Object[]) complexArray63);
        printStream64.print((int) (short) 0);
        printStream64.println(true);
        printStream64.println((float) 10L);
        printStream64.println('u');
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals(locale38.toString(), "fra");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printStream64);
    }

    @Test
    public void test06447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06447");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean2 = printWriter1.checkError();
        java.io.PrintWriter printWriter4 = printWriter1.append((java.lang.CharSequence) "fra");
        printWriter4.println(false);
        printWriter4.println(true);
        printWriter4.println((long) (byte) 0);
        printWriter4.close();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(printWriter4);
    }

    @Test
    public void test06448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06448");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??? (????)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06449");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray3 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray4 = fastFourierTransformer0.inversetransform2(doubleArray3);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer5 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer6 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray11 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray12 = fastFourierTransformer6.transform(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray11);
        org.apache.commons.math.complex.Complex[] complexArray14 = fastFourierTransformer5.inversetransform2(doubleArray11);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray20 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray21 = fastFourierTransformer15.transform(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer5.transform2(complexArray21);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter24.println(' ');
        printWriter24.print((float) 10L);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.println((long) (-1));
        printWriter31.println((java.lang.Object) "");
        printWriter31.println();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getScript();
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleKeys();
        java.lang.String str42 = locale39.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer44 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray47 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer44.inversetransform2(doubleArray47);
        java.io.PrintWriter printWriter49 = printWriter31.printf(locale39, "ja", (java.lang.Object[]) complexArray48);
        java.io.PrintWriter printWriter50 = printWriter24.format("", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer5.inversetransform(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer0.transform2(complexArray48);
        org.apache.commons.math.complex.Complex[] complexArray54 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray52, (double) (byte) 100);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray52);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray12);
        org.junit.Assert.assertNotNull(complexArray14);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(complexArray51);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(complexArray54);
    }

    @Test
    public void test06450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06450");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        printStream1.print(0.0f);
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream7);
        boolean boolean9 = printStream7.checkError();
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(0.0f);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer17 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer17.transform(doubleArray22);
        java.io.PrintStream printStream24 = printStream11.format(locale14, "japonais", (java.lang.Object[]) complexArray23);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer31 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray36 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray37 = fastFourierTransformer31.transform(doubleArray36);
        double[] doubleArray39 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray40 = fastFourierTransformer31.inversetransform2(doubleArray39);
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer26.transform(complexArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer42 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer42.inversetransform2(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer26.inversetransform(complexArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer49 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer49.transform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer48.inversetransform(doubleArray54);
        org.apache.commons.math.complex.Complex[] complexArray58 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray56, (double) (byte) 10);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer26.inversetransform2(complexArray56);
        java.io.PrintStream printStream60 = printStream7.printf(locale14, "German (FRA,fr)", (java.lang.Object[]) complexArray56);
        printStream60.println();
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.print(0);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.println((long) (-1));
        printWriter67.println((java.lang.Object) "");
        char[] charArray80 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter67.println(charArray80);
        printWriter63.println(charArray80);
        printStream60.print(charArray80);
        printStream60.flush();
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        double double87 = complex85.getImaginary();
        org.apache.commons.math.complex.Complex complex88 = complex85.sinh();
        org.apache.commons.math.complex.Complex complex89 = complex85.sqrt();
        printStream60.println((java.lang.Object) complex85);
        org.apache.commons.math.complex.Complex complex91 = complex85.log();
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test06451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06451");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("Etats-Unis");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("FR", strMap28);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray35 = new java.lang.String[] { "fr", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList36);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale39.getISO3Country();
        java.lang.String str41 = locale39.getDisplayScript();
        java.util.Set<java.lang.String> strSet42 = locale39.getUnicodeLocaleKeys();
        java.lang.String str43 = locale39.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.toLanguageTag();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = locale50.getLanguage();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleKeys();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale54.toLanguageTag();
        boolean boolean56 = locale54.hasExtensions();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        java.lang.String str59 = locale57.getDisplayScript();
        java.util.Set<java.lang.String> strSet60 = locale57.getUnicodeLocaleKeys();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = locale62.getDisplayCountry();
        java.util.Locale locale64 = java.util.Locale.KOREA;
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = locale66.getDisplayScript();
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleKeys();
        java.lang.String str70 = locale66.getISO3Language();
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale39, locale44, locale45, locale49, locale50, locale53, locale54, locale57, locale61, locale62, locale64, locale65, locale66 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter(languageRangeList29, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter(languageRangeList26, (java.util.Collection<java.util.Locale>) localeList75);
        java.util.Locale locale77 = java.util.Locale.lookup(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder80 = builder78.setRegion("");
        java.util.Locale locale81 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder82 = builder80.setLocale(locale81);
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags(languageRangeList20, (java.util.Collection<java.lang.String>) strSet83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fra" + "'", str43, "fra");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fr" + "'", str46, "fr");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fra" + "'", str48, "fra");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ja" + "'", str51, "ja");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fr" + "'", str55, "fr");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "fra" + "'", str70, "fra");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNull(locale77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test06452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06452");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr", "US");
        printWriter2.flush();
    }

    @Test
    public void test06453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06453");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray5 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray6 = fastFourierTransformer0.transform(doubleArray5);
        double[] doubleArray8 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.inversetransform2(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer0.transform(complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer22 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray27 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer22.transform(doubleArray27);
        org.apache.commons.math.complex.Complex[] complexArray29 = fastFourierTransformer21.inversetransform(doubleArray27);
        double[] doubleArray31 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray27, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray32 = fastFourierTransformer0.transform(doubleArray27);
        java.io.PrintStream printStream34 = new java.io.PrintStream("japonais");
        printStream34.print(0.0f);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray45 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer40.transform(doubleArray45);
        java.io.PrintStream printStream47 = printStream34.format(locale37, "japonais", (java.lang.Object[]) complexArray46);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer0.transform2(complexArray46);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer0.transform2(univariateRealFunction49, 0.0d, (double) 0L, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0, 0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-35.0, -100.0, -0.0, -52.0]");
        org.junit.Assert.assertNotNull(complexArray32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(complexArray48);
    }

    @Test
    public void test06454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06454");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print(100L);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter11 = printWriter9.append((java.lang.CharSequence) "");
        printWriter9.println();
        java.io.PrintStream printStream14 = new java.io.PrintStream("japonais");
        printStream14.write((int) 'a');
        printStream14.print(0.0f);
        java.io.PrintStream printStream20 = printStream14.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream20);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter25 = printWriter23.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer27 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray30 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray31 = fastFourierTransformer27.inversetransform2(doubleArray30);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        double[] doubleArray40 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer32.inversetransform2(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer27.transform(complexArray41);
        java.io.PrintWriter printWriter43 = printWriter23.format("ja", (java.lang.Object[]) complexArray41);
        java.io.PrintStream printStream45 = new java.io.PrintStream("japonais");
        printStream45.print(0.0f);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray56 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer51.transform(doubleArray56);
        java.io.PrintStream printStream58 = printStream45.format(locale48, "japonais", (java.lang.Object[]) complexArray57);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer59 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray62 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer59.inversetransform2(doubleArray62);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray62);
        printStream58.print((java.lang.Object) doubleArray62);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.print(0);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter71.println(' ');
        printWriter71.println((long) (-1));
        printWriter71.println((java.lang.Object) "");
        char[] charArray84 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter71.println(charArray84);
        printWriter67.println(charArray84);
        printStream58.print(charArray84);
        printWriter43.print(charArray84);
        printStream21.println(charArray84);
        printWriter9.write(charArray84, (int) (byte) 0, (int) (short) 0);
        printStream5.println(charArray84);
        printStream5.println();
        java.io.PrintStream printStream96 = new java.io.PrintStream((java.io.OutputStream) printStream5, true);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06455");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("FR");
        java.util.Locale.Builder builder6 = builder2.removeUnicodeLocaleAttribute("chinois");
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter8.println(' ');
        printWriter8.println((long) (-1));
        printWriter8.println((java.lang.Object) "");
        java.io.PrintStream printStream16 = new java.io.PrintStream("japonais");
        printStream16.print(0.0f);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream16, true);
        printStream20.print((float) (short) -1);
        printStream20.print('a');
        printStream20.println();
        printStream20.print("hi!");
        printStream20.println((-1L));
        printStream20.println((double) 0.0f);
        printStream20.close();
        printWriter8.print((java.lang.Object) printStream20);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getVariant();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = locale34.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale34.getDisplayLanguage(locale38);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter46 = printWriter44.append((java.lang.CharSequence) "");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray51 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray52 = fastFourierTransformer48.inversetransform2(doubleArray51);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer53 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer53.transform(doubleArray58);
        double[] doubleArray61 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer53.inversetransform2(doubleArray61);
        org.apache.commons.math.complex.Complex[] complexArray63 = fastFourierTransformer48.transform(complexArray62);
        java.io.PrintWriter printWriter64 = printWriter44.format("ja", (java.lang.Object[]) complexArray62);
        java.lang.Throwable throwable68 = null;
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException(throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException70);
        java.lang.Throwable[] throwableArray72 = functionEvaluationException70.getSuppressed();
        java.lang.Throwable[] throwableArray73 = functionEvaluationException70.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "zh");
        functionEvaluationException70.addSuppressed((java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray62, (java.lang.Throwable) functionEvaluationException76);
        java.io.PrintStream printStream79 = printStream20.printf(locale38, "org.apache.commons.math.FunctionEvaluationException: FR", (java.lang.Object[]) complexArray62);
        java.util.Locale.Builder builder80 = builder2.setLocale(locale38);
        java.util.Locale.Builder builder81 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder84 = builder81.setExtension(' ', "kor");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanese" + "'", str39, "Japanese");
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test06456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06456");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream35, true);
        java.io.PrintStream printStream41 = printStream37.append((java.lang.CharSequence) "de", (int) (short) 0, (int) (byte) 1);
        java.io.PrintStream printStream43 = printStream37.append((java.lang.CharSequence) "ja");
        printStream43.print((float) 1L);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream43);
        java.io.PrintStream printStream48 = printStream46.append('a');
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream46, true);
        java.io.PrintWriter printWriter52 = printWriter50.append((java.lang.CharSequence) "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printWriter52);
    }

    @Test
    public void test06457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06457");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "Japanisch");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Japanisch");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06458");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("japonais");
        java.util.Locale.Builder builder6 = builder4.setVariant("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setVariant("org.apache.commons.math.MathException: de_ALLEMAND_zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: de_ALLEMAND_zh [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06459");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.write((int) 'a');
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter6.println(' ');
        printWriter6.print((float) 10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter13.println(' ');
        printWriter13.println((long) (-1));
        printWriter13.println((java.lang.Object) "");
        printWriter13.println();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getScript();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        java.io.PrintWriter printWriter31 = printWriter13.printf(locale21, "ja", (java.lang.Object[]) complexArray30);
        java.io.PrintWriter printWriter32 = printWriter6.format("", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream33 = printStream1.format("de", (java.lang.Object[]) complexArray30);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream33);
        printStream33.print(1L);
        printStream33.print((float) (-1));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test06460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06460");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(0.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream9, true);
        printStream13.print((float) (short) -1);
        printStream13.print('a');
        printStream13.println();
        printStream13.print("hi!");
        printStream13.println((-1L));
        printStream13.println((double) 0.0f);
        printStream13.close();
        printWriter1.print((java.lang.Object) printStream13);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream13, false);
        printStream13.close();
    }

    @Test
    public void test06461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06461");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer15 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer15.inversetransform2(doubleArray18);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray18);
        printStream14.print((java.lang.Object) doubleArray18);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream14.write(byteArray25);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        java.io.PrintStream printStream35 = printStream14.printf("de", (java.lang.Object[]) complexArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream35, true);
        java.io.PrintStream printStream39 = printStream35.append((java.lang.CharSequence) "allemand");
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        printWriter40.print((float) (short) 10);
        printWriter40.println((double) 1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10, -1]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream39);
    }

    @Test
    public void test06462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06462");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        printStream1.println((float) (short) 10);
        printStream1.print('4');
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print('a');
    }

    @Test
    public void test06463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06463");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println((java.lang.Object) printWriter10);
        printWriter1.flush();
        printWriter1.println(false);
        printWriter1.write("FR");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer35 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer35.transform(doubleArray40);
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer19.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer43 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer43.inversetransform2(doubleArray46);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer48 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer48.transform(doubleArray53);
        double[] doubleArray56 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer48.inversetransform2(doubleArray56);
        org.apache.commons.math.complex.Complex[] complexArray58 = fastFourierTransformer43.transform(complexArray57);
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer19.transform2(complexArray58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(52.0d, "Franz\366sisch", (java.lang.Object[]) complexArray58);
        printWriter1.print((java.lang.Object) functionEvaluationException60);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        printWriter1.close();
        printWriter1.print((long) '4');
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complexArray59);
    }

    @Test
    public void test06464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06464");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println((-1L));
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("japonais");
        printStream9.print(true);
        boolean boolean12 = printStream9.checkError();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream9, true);
        boolean boolean15 = printStream9.checkError();
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream9);
        printStream16.println(0.7350525871447157d);
        printStream16.println((int) ' ');
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream16);
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.print(0.0f);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        java.io.PrintStream printStream36 = printStream23.format(locale26, "japonais", (java.lang.Object[]) complexArray35);
        printStream36.print((int) '4');
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter40.println(' ');
        printWriter40.println((long) (-1));
        printWriter40.println((java.lang.Object) "");
        char[] charArray53 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter40.println(charArray53);
        printWriter40.println(10);
        printWriter40.print('a');
        char[] charArray59 = new char[] {};
        printWriter40.println(charArray59);
        printStream36.println(charArray59);
        printWriter21.print(charArray59);
        printWriter7.write(charArray59);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[]");
    }

    @Test
    public void test06465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06465");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        printStream1.println();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getLanguage();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer9.transform2(doubleArray15);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray26 = fastFourierTransformer9.inversetransform(complexArray25);
        java.io.PrintStream printStream27 = printStream1.printf(locale6, "de", (java.lang.Object[]) complexArray26);
        printStream1.print(1);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(true);
        boolean boolean34 = printStream31.checkError();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream31, true);
        boolean boolean37 = printStream31.checkError();
        printStream31.print("fr-FR");
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(true);
        printStream41.println((float) (short) 10);
        printStream41.print((long) (short) 10);
        java.io.PrintStream printStream49 = printStream41.append((java.lang.CharSequence) "fr");
        printStream49.flush();
        java.io.PrintStream printStream52 = new java.io.PrintStream("japonais");
        printStream52.write((int) 'a');
        printStream52.print(0.0f);
        java.io.PrintStream printStream58 = printStream52.append((java.lang.CharSequence) "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printStream52.println((float) (short) 1);
        java.io.PrintStream printStream62 = new java.io.PrintStream("japonais");
        printStream62.print(0.0f);
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet66 = locale65.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer68 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray73 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray74 = fastFourierTransformer68.transform(doubleArray73);
        java.io.PrintStream printStream75 = printStream62.format(locale65, "japonais", (java.lang.Object[]) complexArray74);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer76 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray79 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray80 = fastFourierTransformer76.inversetransform2(doubleArray79);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray79);
        printStream75.print((java.lang.Object) doubleArray79);
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 10, (byte) -1 };
        printStream75.write(byteArray86);
        printStream52.write(byteArray86, 0, 0);
        printStream49.write(byteArray86);
        printStream31.write(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray86, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray80);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 10, -1]");
    }

    @Test
    public void test06466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06466");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable27);
        printStream1.print((java.lang.Object) throwable27);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(true);
        printStream31.println((float) (short) 10);
        printStream31.print((long) (short) 10);
        java.io.PrintStream printStream39 = printStream31.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(0.0f);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        java.io.PrintStream printStream54 = printStream41.format(locale44, "japonais", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray58);
        printStream54.print((java.lang.Object) doubleArray58);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.print(0);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.println((long) (-1));
        printWriter67.println((java.lang.Object) "");
        char[] charArray80 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter67.println(charArray80);
        printWriter63.println(charArray80);
        printStream54.print(charArray80);
        printStream31.print(charArray80);
        printStream1.print(charArray80);
        java.lang.Throwable throwable90 = null;
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException(throwable90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException92 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable90);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException93 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException92);
        java.lang.Throwable[] throwableArray94 = functionEvaluationException92.getSuppressed();
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) functionEvaluationException92);
        printStream1.print((java.lang.Object) functionEvaluationException92);
        java.io.PrintWriter printWriter98 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean99 = printStream1.checkError();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, #,  , a, a, a]");
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test06467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06467");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        printWriter1.println();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale9.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer14.inversetransform2(doubleArray17);
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "ja", (java.lang.Object[]) complexArray18);
        java.util.Set<java.lang.String> strSet20 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale9.toLanguageTag();
        java.lang.String str22 = locale9.getISO3Country();
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ja" + "'", str21, "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test06468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06468");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex1 = complex0.acos();
        org.apache.commons.math.complex.Complex complex2 = complex1.negate();
        org.apache.commons.math.complex.Complex complex3 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        double double8 = complex3.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test06469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06469");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer11 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray16 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer11.transform(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer10.transform2(doubleArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer20 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray23 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer20.inversetransform2(doubleArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("japonais");
        printStream26.print(0.0f);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer32 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray37 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray38 = fastFourierTransformer32.transform(doubleArray37);
        java.io.PrintStream printStream39 = printStream26.format(locale29, "japonais", (java.lang.Object[]) complexArray38);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer40 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer40.inversetransform2(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        printStream39.print((java.lang.Object) doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer20.transform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer10.inversetransform2(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray49 = fastFourierTransformer0.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer51 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray54 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray55 = fastFourierTransformer51.inversetransform2(doubleArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray55);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer0.transform(complexArray55);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray62 = fastFourierTransformer0.inversetransform(univariateRealFunction58, 0.0d, Double.POSITIVE_INFINITY, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertNotNull(complexArray49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(complexArray57);
    }

    @Test
    public void test06470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06470");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "");
        printWriter3.println('a');
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Language();
        printWriter3.print((java.lang.Object) locale6);
        printWriter3.println("hi!");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter("org.apache.commons.math.functionevaluationexception_DEU_zho");
        printWriter13.println((int) '4');
        java.io.PrintWriter printWriter17 = printWriter13.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: zh");
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter("de");
        java.io.PrintWriter printWriter21 = printWriter19.append((java.lang.CharSequence) "");
        java.io.PrintWriter printWriter23 = printWriter21.append((java.lang.CharSequence) "org.apache.commons.math.FunctionEvaluationException: fr");
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean26 = printWriter25.checkError();
        java.io.PrintWriter printWriter28 = printWriter25.append((java.lang.CharSequence) "fra");
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter31.println(' ');
        printWriter31.println((long) (-1));
        printWriter31.println((java.lang.Object) "");
        char[] charArray44 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter31.println(charArray44);
        printWriter25.write(charArray44);
        printWriter23.write(charArray44);
        printWriter17.println(charArray44);
        printWriter3.write(charArray44);
        printWriter3.write("org.apache.commons.math.MathException: GB", 0, (int) (short) 10);
        printWriter3.print('x');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06471");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform2(complexArray16);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer19.transform(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray27 = fastFourierTransformer18.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer28 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray33 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer28.transform(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer18.transform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer36 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray41 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray42 = fastFourierTransformer36.transform(doubleArray41);
        double[] doubleArray44 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer36.inversetransform2(doubleArray44);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer18.transform2(doubleArray44);
        double[] doubleArray48 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray44, (-1.0d));
        double[] doubleArray50 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray44, (double) 'a');
        org.apache.commons.math.complex.Complex[] complexArray51 = fastFourierTransformer0.inversetransform2(doubleArray44);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray56 = fastFourierTransformer0.inversetransform2(univariateRealFunction52, (double) (short) 1, 1.213053294120664d, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[97.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[97.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[97.0]");
        org.junit.Assert.assertNotNull(complexArray51);
    }

    @Test
    public void test06472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06472");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer14 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray19 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray20 = fastFourierTransformer14.transform(doubleArray19);
        double[] doubleArray22 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer14.inversetransform2(doubleArray22);
        org.apache.commons.math.complex.Complex[] complexArray24 = fastFourierTransformer9.transform(complexArray23);
        java.io.PrintStream printStream25 = printStream1.format(locale7, "fr", (java.lang.Object[]) complexArray24);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, throwable27);
        printStream1.print((java.lang.Object) throwable27);
        java.io.PrintStream printStream31 = new java.io.PrintStream("japonais");
        printStream31.print(true);
        printStream31.println((float) (short) 10);
        printStream31.print((long) (short) 10);
        java.io.PrintStream printStream39 = printStream31.append((java.lang.CharSequence) "fr");
        java.io.PrintStream printStream41 = new java.io.PrintStream("japonais");
        printStream41.print(0.0f);
        java.util.Locale locale44 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer47 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray52 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer47.transform(doubleArray52);
        java.io.PrintStream printStream54 = printStream41.format(locale44, "japonais", (java.lang.Object[]) complexArray53);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer55 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray58 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray59 = fastFourierTransformer55.inversetransform2(doubleArray58);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray58);
        printStream54.print((java.lang.Object) doubleArray58);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter63.print(0);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter67.println(' ');
        printWriter67.println((long) (-1));
        printWriter67.println((java.lang.Object) "");
        char[] charArray80 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter67.println(charArray80);
        printWriter63.println(charArray80);
        printStream54.print(charArray80);
        printStream31.print(charArray80);
        printStream1.print(charArray80);
        printStream1.print(false);
        printStream1.print('a');
        boolean boolean90 = printStream1.checkError();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a, #,  , a, a, a]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test06473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06473");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(97.0d, 1.5430806348152437d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [97.0, 1.5430806348152437]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06474");
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = org.apache.commons.math.transform.FastFourierTransformer.sample(univariateRealFunction0, (double) 0, 0.5669767943827975d, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06475");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex8 = complex7.log();
        org.apache.commons.math.complex.Complex complex9 = complex8.sin();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test06476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06476");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getCountry();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getCountry();
        java.lang.String str9 = locale4.getDisplayName(locale7);
        java.util.Locale.Builder builder10 = builder2.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder2.setLanguageTag("Japanese");
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getCountry();
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = locale17.getDisplayName(locale20);
        java.util.Locale.Builder builder23 = builder15.setLocale(locale20);
        java.util.Locale.Builder builder25 = builder15.setLanguageTag("Japanese");
        java.util.Locale locale26 = builder25.build();
        java.util.Locale.Builder builder27 = builder2.setLocale(locale26);
        java.util.Locale locale28 = builder27.build();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clear();
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale locale32 = builder30.build();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.lang.String str38 = locale32.getDisplayName(locale34);
        java.util.Locale.Builder builder39 = builder27.setLocale(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder39.addUnicodeLocaleAttribute("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR" + "'", str8, "FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FR" + "'", str21, "FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais" + "'", str22, "fran\347ais");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "japanese");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test06477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06477");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex7.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.multiply(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex12.negate();
        org.apache.commons.math.complex.Complex complex16 = complex5.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z();
        org.apache.commons.math.complex.Complex complex19 = complex17.exp();
        org.apache.commons.math.complex.Complex complex20 = complex19.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test06478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06478");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.toLanguageTag();
        boolean boolean9 = locale7.hasExtensions();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale.Builder builder12 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder14 = builder4.setLanguage("cinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setVariant("\u30d5\u30e9\u30f3\u30b9\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06479");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getCountry();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = locale9.getDisplayName(locale12);
        java.util.Locale.Builder builder15 = builder7.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale.Builder builder17 = builder1.setLocale(locale16);
        boolean boolean18 = locale16.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FR" + "'", str13, "FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fran\347ais" + "'", str14, "fran\347ais");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06480");
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        boolean boolean5 = printWriter4.checkError();
        java.util.Locale locale6 = null;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer9.inversetransform2(doubleArray12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) complexArray13);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        java.io.PrintWriter printWriter16 = printWriter4.printf(locale6, "zho", objArray15);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException22);
        double double24 = functionEvaluationException22.getArgument();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray15, (java.lang.Throwable) functionEvaluationException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "Chinesisch", (java.lang.Throwable) mathException25);
        java.lang.Object[] objArray27 = functionEvaluationException26.getArguments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(objArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Number of samples not power of 2, consider padding for fix.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
    }

    @Test
    public void test06481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06481");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        java.io.PrintStream printStream11 = new java.io.PrintStream("japonais");
        printStream11.print(true);
        boolean boolean14 = printStream11.checkError();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream11, true);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer19 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray22 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer19.inversetransform2(doubleArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer24 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer24.transform(doubleArray29);
        double[] doubleArray32 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray33 = fastFourierTransformer24.inversetransform2(doubleArray32);
        org.apache.commons.math.complex.Complex[] complexArray34 = fastFourierTransformer19.transform(complexArray33);
        java.io.PrintStream printStream35 = printStream11.format(locale17, "fr", (java.lang.Object[]) complexArray34);
        org.apache.commons.math.complex.Complex[] complexArray36 = fastFourierTransformer0.inversetransform2(complexArray34);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray43);
        org.apache.commons.math.complex.Complex[] complexArray46 = fastFourierTransformer37.inversetransform2(doubleArray43);
        java.io.PrintStream printStream48 = new java.io.PrintStream("japonais");
        printStream48.print(true);
        boolean boolean51 = printStream48.checkError();
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream48, true);
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer56 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray59 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray60 = fastFourierTransformer56.inversetransform2(doubleArray59);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer61 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray66 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer61.transform(doubleArray66);
        double[] doubleArray69 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray70 = fastFourierTransformer61.inversetransform2(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray71 = fastFourierTransformer56.transform(complexArray70);
        java.io.PrintStream printStream72 = printStream48.format(locale54, "fr", (java.lang.Object[]) complexArray71);
        org.apache.commons.math.complex.Complex[] complexArray73 = fastFourierTransformer37.inversetransform2(complexArray71);
        java.io.PrintStream printStream75 = new java.io.PrintStream("japonais");
        printStream75.print(0.0f);
        java.util.Locale locale78 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet79 = locale78.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer81 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray86 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray87 = fastFourierTransformer81.transform(doubleArray86);
        java.io.PrintStream printStream88 = printStream75.format(locale78, "japonais", (java.lang.Object[]) complexArray87);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer89 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray92 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray93 = fastFourierTransformer89.inversetransform2(doubleArray92);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray92);
        printStream88.print((java.lang.Object) doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray96 = fastFourierTransformer37.inversetransform2(doubleArray92);
        org.apache.commons.math.complex.Complex[] complexArray97 = fastFourierTransformer0.inversetransform2(complexArray96);
        double[] doubleArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray99 = fastFourierTransformer0.inversetransform(doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray60);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray70);
        org.junit.Assert.assertNotNull(complexArray71);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray87);
        org.junit.Assert.assertNotNull(printStream88);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(complexArray97);
    }

    @Test
    public void test06482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06482");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.flush();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        java.io.PrintWriter printWriter8 = printWriter1.append((java.lang.CharSequence) "Japanese");
        printWriter8.println((double) 'x');
        java.io.PrintWriter printWriter12 = printWriter8.append('a');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter15.println(' ');
        printWriter15.println((long) (-1));
        printWriter15.println((java.lang.Object) "");
        boolean boolean22 = printWriter15.checkError();
        java.util.Locale locale23 = null;
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter29 = printWriter15.format(locale23, "zho", (java.lang.Object[]) strArray27);
        java.io.PrintWriter printWriter30 = printWriter8.format("allemand (Allemagne)", (java.lang.Object[]) strArray27);
        printWriter30.print(' ');
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter30);
    }

    @Test
    public void test06483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06483");
        java.util.Locale locale3 = new java.util.Locale("French", "de", "");
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale8 = new java.util.Locale("org.apache.commons.math.FunctionEvaluationException", "deu", "zho");
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = locale3.getDisplayLanguage(locale8);
        org.junit.Assert.assertEquals(locale3.toString(), "french_DE");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DEU" + "'", str4, "DEU");
        org.junit.Assert.assertEquals(locale8.toString(), "org.apache.commons.math.functionevaluationexception_DEU_zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "x-lvariant-zho" + "'", str9, "x-lvariant-zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "french" + "'", str10, "french");
    }

    @Test
    public void test06484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06484");
        org.apache.commons.math.transform.FastFourierTransformer.verifyInterval(0.18781088919991634d, 0.5403023058681398d);
    }

    @Test
    public void test06485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06485");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.toLanguageTag();
        boolean boolean9 = locale7.hasExtensions();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale.Builder builder12 = builder4.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder4.addUnicodeLocaleAttribute("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06486");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer2 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer3 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray8 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer3.transform(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray8);
        org.apache.commons.math.complex.Complex[] complexArray11 = fastFourierTransformer2.inversetransform2(doubleArray8);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer12 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray17 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray18 = fastFourierTransformer12.transform(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer2.transform2(complexArray18);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter21.println(' ');
        printWriter21.print((float) 10L);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter28.println(' ');
        printWriter28.println((long) (-1));
        printWriter28.println((java.lang.Object) "");
        printWriter28.println();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getScript();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleKeys();
        java.lang.String str39 = locale36.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray44 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray45 = fastFourierTransformer41.inversetransform2(doubleArray44);
        java.io.PrintWriter printWriter46 = printWriter28.printf(locale36, "ja", (java.lang.Object[]) complexArray45);
        java.io.PrintWriter printWriter47 = printWriter21.format("", (java.lang.Object[]) complexArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = fastFourierTransformer2.inversetransform(complexArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "\u65e5\u672c\u8a9e", (java.lang.Object[]) complexArray45);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet((java.lang.Object[]) complexArray45);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(complexArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(complexArray48);
    }

    @Test
    public void test06487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06487");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray4 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray5 = fastFourierTransformer1.inversetransform2(doubleArray4);
        java.io.PrintStream printStream7 = new java.io.PrintStream("japonais");
        printStream7.print(0.0f);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer13 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray18 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray19 = fastFourierTransformer13.transform(doubleArray18);
        java.io.PrintStream printStream20 = printStream7.format(locale10, "japonais", (java.lang.Object[]) complexArray19);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer21 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray24 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray25 = fastFourierTransformer21.inversetransform2(doubleArray24);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray24);
        printStream20.print((java.lang.Object) doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray28 = fastFourierTransformer1.transform2(doubleArray24);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter30.println(' ');
        printWriter30.print((float) 10L);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter37.println(' ');
        printWriter37.println((long) (-1));
        printWriter37.println((java.lang.Object) "");
        printWriter37.println();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getScript();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = locale45.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer50 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray53 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray54 = fastFourierTransformer50.inversetransform2(doubleArray53);
        java.io.PrintWriter printWriter55 = printWriter37.printf(locale45, "ja", (java.lang.Object[]) complexArray54);
        java.io.PrintWriter printWriter56 = printWriter30.format("", (java.lang.Object[]) complexArray54);
        org.apache.commons.math.complex.Complex[] complexArray57 = fastFourierTransformer1.inversetransform(complexArray54);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer58 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray63 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray64 = fastFourierTransformer58.transform(doubleArray63);
        double[] doubleArray66 = new double[] { (-1) };
        org.apache.commons.math.complex.Complex[] complexArray67 = fastFourierTransformer58.inversetransform2(doubleArray66);
        org.apache.commons.math.complex.Complex[] complexArray68 = fastFourierTransformer1.inversetransform2(doubleArray66);
        java.io.PrintStream printStream70 = new java.io.PrintStream("japonais");
        printStream70.print(true);
        boolean boolean73 = printStream70.checkError();
        printStream70.println('#');
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer77 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer78 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray83 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray84 = fastFourierTransformer78.transform(doubleArray83);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray83);
        org.apache.commons.math.complex.Complex[] complexArray86 = fastFourierTransformer77.transform2(doubleArray83);
        java.io.PrintStream printStream87 = printStream70.format("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray88 = fastFourierTransformer1.transform2(complexArray86);
        org.apache.commons.math.complex.Complex[] complexArray90 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray86, (double) (-1));
        org.apache.commons.math.complex.Complex[] complexArray92 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray86, (double) (byte) -1);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.functionevaluationexception: fr (ANGLAIS,Chine)", (java.lang.Object[]) complexArray92);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray5);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray25);
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(complexArray57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0]");
        org.junit.Assert.assertNotNull(complexArray67);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray84);
        org.junit.Assert.assertNotNull(complexArray86);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(complexArray88);
        org.junit.Assert.assertNotNull(complexArray90);
        org.junit.Assert.assertNotNull(complexArray92);
    }

    @Test
    public void test06488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06488");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.transform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        double[] doubleArray12 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(doubleArray6, (double) 1.0f);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
    }

    @Test
    public void test06489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06489");
        java.io.PrintStream printStream3 = new java.io.PrintStream("japonais");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category4);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer8 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer9 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray14 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray15 = fastFourierTransformer9.transform(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer8.transform2(doubleArray14);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer18 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray21 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray22 = fastFourierTransformer18.inversetransform2(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray23 = fastFourierTransformer8.transform(complexArray22);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer26 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray29 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray30 = fastFourierTransformer26.inversetransform2(doubleArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("japonais");
        printStream32.print(0.0f);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer38 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray43 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray44 = fastFourierTransformer38.transform(doubleArray43);
        java.io.PrintStream printStream45 = printStream32.format(locale35, "japonais", (java.lang.Object[]) complexArray44);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer46 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray49 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray50 = fastFourierTransformer46.inversetransform2(doubleArray49);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray49);
        printStream45.print((java.lang.Object) doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray53 = fastFourierTransformer26.transform2(doubleArray49);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter55.println(' ');
        printWriter55.print((float) 10L);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter62.println(' ');
        printWriter62.println((long) (-1));
        printWriter62.println((java.lang.Object) "");
        printWriter62.println();
        java.util.Locale locale70 = java.util.Locale.JAPANESE;
        java.lang.String str71 = locale70.getScript();
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleKeys();
        java.lang.String str73 = locale70.getVariant();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer75 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray78 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray79 = fastFourierTransformer75.inversetransform2(doubleArray78);
        java.io.PrintWriter printWriter80 = printWriter62.printf(locale70, "ja", (java.lang.Object[]) complexArray79);
        java.io.PrintWriter printWriter81 = printWriter55.format("", (java.lang.Object[]) complexArray79);
        org.apache.commons.math.complex.Complex[] complexArray82 = fastFourierTransformer26.inversetransform(complexArray79);
        java.lang.Throwable throwable86 = null;
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException(throwable86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((double) '#', throwable86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "hi!", (java.lang.Throwable) functionEvaluationException88);
        java.lang.Object[] objArray90 = functionEvaluationException89.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException91 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray79, (java.lang.Throwable) functionEvaluationException89);
        org.apache.commons.math.complex.Complex[] complexArray92 = fastFourierTransformer8.inversetransform(complexArray79);
        java.io.PrintStream printStream93 = printStream3.format(locale6, "allemand", (java.lang.Object[]) complexArray79);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("fr_FR");
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("zh_CN", (java.lang.Throwable) mathException96);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException98 = new org.apache.commons.math.FunctionEvaluationException(1.4412118677491172d, "zh_TW", (java.lang.Object[]) complexArray79, (java.lang.Throwable) mathException96);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray15);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(complexArray82);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertNotNull(complexArray92);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test06490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06490");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setScript("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.functionevaluationexception: fr [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06491");
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer0 = new org.apache.commons.math.transform.FastFourierTransformer();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer1 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray6 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray7 = fastFourierTransformer1.transform(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray6);
        org.apache.commons.math.complex.Complex[] complexArray9 = fastFourierTransformer0.inversetransform2(doubleArray6);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer10 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray15 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray16 = fastFourierTransformer10.transform(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray17 = fastFourierTransformer0.transform2(complexArray16);
        org.apache.commons.math.complex.Complex[] complexArray19 = org.apache.commons.math.transform.FastFourierTransformer.scaleArray(complexArray16, (double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray7);
        org.junit.Assert.assertNotNull(complexArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(complexArray19);
    }

    @Test
    public void test06492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06492");
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 100, "hi!", throwable5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (-1.0f), "FR", (java.lang.Throwable) functionEvaluationException6);
        java.lang.Throwable[] throwableArray8 = functionEvaluationException6.getSuppressed();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(0.7456241416655579d, (java.lang.Throwable) functionEvaluationException6);
        double double11 = functionEvaluationException10.getArgument();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.7456241416655579d + "'", double11 == 0.7456241416655579d);
    }

    @Test
    public void test06493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06493");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(true);
        boolean boolean4 = printStream1.checkError();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println(' ');
        printWriter9.println((long) (-1));
        printWriter9.println((java.lang.Object) "");
        printWriter9.println();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter9.println((java.lang.Object) printWriter18);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        printWriter21.println((java.lang.Object) true);
        printWriter21.print("org.apache.commons.math.MathException");
        printWriter21.println((float) (byte) 0);
        printWriter21.print((double) 1);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getLanguage();
        java.io.PrintStream printStream35 = new java.io.PrintStream("japonais");
        printStream35.print(0.0f);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer41 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray46 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray47 = fastFourierTransformer41.transform(doubleArray46);
        java.io.PrintStream printStream48 = printStream35.format(locale38, "japonais", (java.lang.Object[]) complexArray47);
        java.io.PrintWriter printWriter49 = printWriter21.format(locale31, "ja", (java.lang.Object[]) complexArray47);
        java.io.PrintStream printStream50 = printStream1.format("und", (java.lang.Object[]) complexArray47);
        printStream50.print("japonais");
        java.io.PrintStream printStream54 = printStream50.append(' ');
        java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream54, true);
        java.io.PrintStream printStream57 = new java.io.PrintStream((java.io.OutputStream) printStream56);
        printStream57.close();
        printStream57.println((-1));
        printStream57.print((float) (short) -1);
        printStream57.print(1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test06494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06494");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print((float) (short) -1);
        printStream5.print('a');
        printStream5.println();
        printStream5.println((float) 1);
        printStream5.println(true);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream5, false);
        printStream5.print('a');
    }

    @Test
    public void test06495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06495");
        java.io.PrintStream printStream1 = new java.io.PrintStream("japonais");
        printStream1.print(0.0f);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer7 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray12 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray13 = fastFourierTransformer7.transform(doubleArray12);
        java.io.PrintStream printStream14 = printStream1.format(locale4, "japonais", (java.lang.Object[]) complexArray13);
        printStream14.print((int) '4');
        java.io.PrintStream printStream18 = printStream14.append('u');
        printStream14.println('x');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream14, false, "ko");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ko");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(printStream18);
    }

    @Test
    public void test06496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06496");
        java.util.Locale locale1 = new java.util.Locale("fra");
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Locale locale5 = locale1.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale1.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "fra");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fra");
    }

    @Test
    public void test06497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06497");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter1.println(' ');
        printWriter1.println((long) (-1));
        printWriter1.println((java.lang.Object) "");
        boolean boolean8 = printWriter1.checkError();
        java.util.Locale locale9 = null;
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 100, "fr", (java.lang.Object[]) strArray13);
        java.io.PrintWriter printWriter15 = printWriter1.format(locale9, "zho", (java.lang.Object[]) strArray13);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter17.println(' ');
        printWriter17.println(false);
        java.io.PrintStream printStream23 = new java.io.PrintStream("japonais");
        printStream23.print(0.0f);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer29 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray34 = new double[] { '#', 100L, 0L, '4' };
        org.apache.commons.math.complex.Complex[] complexArray35 = fastFourierTransformer29.transform(doubleArray34);
        java.io.PrintStream printStream36 = printStream23.format(locale26, "japonais", (java.lang.Object[]) complexArray35);
        org.apache.commons.math.transform.FastFourierTransformer fastFourierTransformer37 = new org.apache.commons.math.transform.FastFourierTransformer();
        double[] doubleArray40 = new double[] { (byte) 0, 1.0f };
        org.apache.commons.math.complex.Complex[] complexArray41 = fastFourierTransformer37.inversetransform2(doubleArray40);
        org.apache.commons.math.transform.FastFourierTransformer.verifyDataSet(doubleArray40);
        printStream36.print((java.lang.Object) doubleArray40);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter45.print(0);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter("\u30d5\u30e9\u30f3\u30b9\u8a9e");
        printWriter49.println(' ');
        printWriter49.println((long) (-1));
        printWriter49.println((java.lang.Object) "");
        char[] charArray62 = new char[] { 'a', '#', ' ', 'a', 'a', 'a' };
        printWriter49.println(charArray62);
        printWriter45.println(charArray62);
        printStream36.print(charArray62);
        printWriter17.println(charArray62);
        printWriter17.close();
        printWriter1.print((java.lang.Object) printWriter17);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter((java.io.Writer) printWriter17, true);
        printWriter70.println(false);
        printWriter70.write("\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)", (int) 'a', (int) (short) -1);
        printWriter70.print('4');
        printWriter70.write((int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 0.0, 52.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a, #,  , a, a, a]");
    }

    @Test
    public void test06498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06498");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.I;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex3 = complex0.sinh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.NaN;
        org.apache.commons.math.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math.complex.Complex complex7 = complex3.multiply(complex5);
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 10, (double) 100);
        org.apache.commons.math.complex.Complex complex11 = complex5.add(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math.complex.Complex complex13 = complex5.sin();
        double double14 = complex5.getReal();
        org.apache.commons.math.complex.Complex complex15 = complex5.sin();
        double double16 = complex5.getImaginary();
        boolean boolean17 = complex5.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06499");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getVariant();
        java.lang.String str4 = locale0.toLanguageTag();
        java.lang.String str6 = locale0.getUnicodeLocaleType("de");
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale8.getISO3Country();
        java.lang.String str11 = locale8.getDisplayScript();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category12);
        java.util.Locale locale18 = java.util.Locale.getDefault(category12);
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.lang.String str20 = locale8.getDisplayCountry(locale18);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setRegion("");
        java.util.Locale.Builder builder24 = builder21.clearExtensions();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.util.Locale.setDefault(category25, locale26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category25);
        java.util.Locale locale31 = java.util.Locale.getDefault(category25);
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder33 = builder21.setLocale(locale31);
        java.util.Locale locale34 = builder21.build();
        java.lang.String str35 = locale8.getDisplayName(locale34);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("org.apache.commons.math.MathException: fr");
        java.lang.String str38 = locale8.getDisplayScript(locale37);
        java.lang.String str39 = locale0.getDisplayVariant(locale37);
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder40.clear();
        java.util.Locale.Builder builder44 = builder41.setExtension('x', "");
        java.util.Locale.Builder builder45 = builder44.clear();
        java.util.Locale locale48 = new java.util.Locale("ja", "");
        java.lang.String str49 = locale48.getScript();
        java.util.Locale.Builder builder50 = builder45.setLocale(locale48);
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.setLanguage("de");
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getLanguage();
        java.lang.String str59 = locale55.getDisplayName(locale57);
        java.lang.String str60 = locale57.getDisplayScript();
        java.util.Set<java.lang.String> strSet61 = locale57.getUnicodeLocaleKeys();
        java.lang.String str62 = locale57.toLanguageTag();
        java.util.Locale.Builder builder63 = builder51.setLocale(locale57);
        java.lang.String str64 = locale57.getDisplayScript();
        java.util.Locale.Builder builder65 = builder45.setLocale(locale57);
        java.util.Set<java.lang.Character> charSet66 = locale57.getExtensionKeys();
        java.lang.String str67 = locale37.getDisplayName(locale57);
        java.lang.String str68 = locale37.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ja" + "'", str4, "ja");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ja" + "'", str58, "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str59, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ja" + "'", str62, "ja");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test06500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06500");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getCountry();
        java.lang.String str11 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getCountry();
        java.lang.String str14 = locale9.getDisplayName(locale12);
        java.util.Locale.Builder builder15 = builder7.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale.Builder builder17 = builder1.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("Japanese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.setVariant("ind\351termin\351 (org.apache.commons.math.functionevaluationexception)_DEU_Chinese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: inde?termine? (org.apache.commons.math.functionevaluationexception)_DEU_Chinese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FR" + "'", str13, "FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fran\347ais" + "'", str14, "fran\347ais");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }
}

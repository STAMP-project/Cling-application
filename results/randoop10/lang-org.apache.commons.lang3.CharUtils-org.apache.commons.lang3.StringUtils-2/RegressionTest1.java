import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        int int2 = charBuffer1.length();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        int int6 = charBuffer4.capacity();
        boolean boolean7 = charBuffer4.hasArray();
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        java.nio.CharBuffer charBuffer12 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer4, charBuffer11);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer15 = charBuffer1.append((java.lang.CharSequence) charBuffer4, (-999999999), 10000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        float[] floatArray16 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer17 = java.nio.FloatBuffer.wrap(floatArray16);
        boolean boolean18 = zoneIdMap1.contains((java.lang.Object) floatArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer21 = java.nio.FloatBuffer.wrap(floatArray16, 385000000, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfLong ofLong4 = longStream2.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Iterator<java.lang.String> strItor14 = strList11.iterator();
        java.util.Collection<java.lang.String> strCollection15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = strList11.addAll(strCollection15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strItor14);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        char[] charArray10 = new char[] { 'a', '#', '4', '#' };
        boolean boolean11 = org.apache.commons.lang3.StringUtils.containsAny("", charArray10);
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray10);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer16 = charBuffer1.put(charArray10, (int) (byte) -1, (int) '\n');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("", (int) '\n', "MINUTE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MINUTEMINU" + "'", str3, "MINUTEMINU");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond(10L, (long) (short) 0);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("English (United Kingdom)", (int) (short) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (United Kingdom)" + "'", str2, "English (United Kingdom)");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1, (byte) 1, (byte) 10 };
        java.nio.ByteBuffer byteBuffer14 = byteBuffer6.put(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress15 = java.net.InetAddress.getByAddress(byteArray13);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: addr is of illegal length");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("/experiment/GBR/", "United Kingdom");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/experiment/GBR/" + "'", str2, "/experiment/GBR/");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        java.lang.String str5 = file1.getCanonicalPath();
        boolean boolean8 = file1.setReadable(true, true);
        java.lang.String str9 = file1.getAbsolutePath();
        boolean boolean10 = file1.createNewFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/GBR" + "'", str5, "/experiment/GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/GBR" + "'", str9, "/experiment/GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.util.Map<java.lang.String, java.lang.String> strMap1 = java.time.ZoneId.SHORT_IDS;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId2 = java.time.ZoneId.of("1 - 53", strMap1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 1 - 53");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap1);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.min();
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream2.onClose(runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate(33237);
        java.nio.ByteOrder byteOrder16 = byteBuffer15.order();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = fileChannel11.read(byteBuffer15);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteOrder16);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (short) 100);
        int int3 = fieldPosition2.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.minusNanos((long) (short) 100);
        int int8 = localDateTime1.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer15 = byteBuffer14.asLongBuffer();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer18 = byteBuffer17.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer21 = byteBuffer20.asLongBuffer();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.duplicate();
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer25 = byteBuffer24.asLongBuffer();
        float float27 = byteBuffer24.getFloat(4);
        double double29 = byteBuffer24.getDouble((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer32 = byteBuffer31.asLongBuffer();
        short short33 = byteBuffer31.getShort();
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] { byteBuffer17, byteBuffer22, byteBuffer24, byteBuffer31 };
        // The following exception was thrown during execution in test generation
        try {
            long long37 = fileChannel11.write(byteBufferArray34, 64, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(doubleBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(longBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(longBuffer25);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(longBuffer32);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 0 + "'", short33 == (short) 0);
        org.junit.Assert.assertNotNull(byteBufferArray34);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("(null <no signer certificates>)");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: (null <no signer certificates>)");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        int int7 = duration1.getNano();
        java.time.Duration duration9 = duration1.withNanos(12);
        java.time.Duration duration11 = duration9.minusHours((long) (-7));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
        java.util.function.DoubleToLongFunction doubleToLongFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = doubleStream2.mapToLong(doubleToLongFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer4 = charBuffer3.flip();
        int int5 = charBuffer3.capacity();
        boolean boolean6 = charBuffer3.hasArray();
        boolean boolean7 = chronology1.equals((java.lang.Object) charBuffer3);
        // The following exception was thrown during execution in test generation
        try {
            char char9 = charBuffer3.charAt(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI3 = new java.net.URI("ZoneRules[currentStandardOffset=Z]", "/experiment/GBR/", "English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Illegal character in scheme name at index 9: ZoneRules[currentStandardOffset=Z]:/experiment/GBR/#English%20(United%20Kingdom)");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.function.DoublePredicate doublePredicate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = doubleStream6.noneMatch(doublePredicate7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        java.io.File file8 = file1.getAbsoluteFile();
        java.lang.String str9 = file8.toString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/GBR");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/GBR" + "'", str9, "/experiment/GBR");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]", "MINUTEMINU");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) 33237);
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        long[] longArray1 = new long[] { (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer4 = java.nio.LongBuffer.wrap(longArray1, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[0]");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        java.time.Period period4 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period5 = period4.normalized();
        long long6 = period4.toTotalMonths();
        java.time.chrono.ChronoPeriod chronoPeriod8 = period4.multipliedBy((int) (short) 100);
        java.time.chrono.ChronoPeriod chronoPeriod9 = period1.plus((java.time.temporal.TemporalAmount) period4);
        java.time.Period period10 = period1.normalized();
        java.time.Period period12 = period1.plusMonths((long) '-');
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(chronoPeriod8);
        org.junit.Assert.assertNotNull(chronoPeriod9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime4.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset14);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit19 = chronoField18.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime20 = localDateTime16.minus((long) (-999999999), temporalUnit19);
        java.lang.String str21 = temporalUnit19.toString();
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime8.plus((long) (byte) 100, temporalUnit19);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime8.plusWeeks((long) '4');
        java.time.temporal.ValueRange valueRange25 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime24);
        boolean boolean27 = valueRange25.isValidValue((long) 1);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField18.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit19 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit19.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Weeks" + "'", str21, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(valueRange25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset1 = java.nio.charset.Charset.forName("hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime4 = offsetTime2.plusNanos(1434414441700000L);
        int int5 = offsetTime4.getMinute();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 41 + "'", int5 == 41);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of(33237, 1, 227000000, 385000000, 31, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 227000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble1 = doubleStream0.min();
        // The following exception was thrown during execution in test generation
        try {
            double double2 = optionalDouble1.getAsDouble();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.DayOfWeek dayOfWeek23 = localDateTime17.getDayOfWeek();
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant27 = instant25.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime28 = java.nio.file.attribute.FileTime.from(instant25);
        java.time.Instant instant30 = instant25.plusMillis((long) 10);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = instant32.query(periodTemporalQuery36);
        java.time.Period period38 = instant30.query(periodTemporalQuery36);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate40 = localDateTime39.toLocalDate();
        java.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks(0L);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean44 = localDateTime39.isSupported((java.time.temporal.TemporalField) chronoField43);
        int int45 = instant30.get((java.time.temporal.TemporalField) chronoField43);
        boolean boolean46 = dayOfWeek23.isSupported((java.time.temporal.TemporalField) chronoField43);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(fileTime28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField43.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.util.stream.Stream.Builder<java.time.temporal.TemporalUnit> temporalUnitBuilder0 = java.util.stream.Stream.builder();
        org.junit.Assert.assertNotNull(temporalUnitBuilder0);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd(" ", "\\u0023");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + " " + "'", str2, " ");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.IsoEra isoEra1 = java.time.chrono.IsoEra.of(437000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid era: 437000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = charsetDecoder1.isCharsetDetected();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.time.Period period1 = java.time.Period.ofWeeks(1);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        byte[] byteArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer8 = byteBuffer4.get(byteArray5, 413000000, (int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.util.Date date1 = new java.util.Date(1L);
        java.util.Date date8 = new java.util.Date((int) (byte) 100, (-999999999), (int) 'a', 0, 31, 4);
        date8.setMinutes((int) '\r');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = date1.before(date8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: sun.util.calendar.JulianCalendar$Date cannot be cast to sun.util.calendar.Gregorian$Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date8.toString(), "Sun Jan 05 00:13:04 UTC 83331334");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        int int2 = org.apache.commons.lang3.CharUtils.toIntValue('u', 256);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 256 + "'", int2 == 256);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate3 = localDateTime2.toLocalDate();
        java.time.LocalDateTime localDateTime5 = localDateTime2.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange6 = chronoField1.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime2);
        boolean boolean7 = localDate0.equals((java.lang.Object) valueRange6);
        java.time.LocalDate localDate8 = java.time.LocalDate.now();
        java.time.LocalDate localDate9 = java.time.LocalDate.MIN;
        boolean boolean10 = localDate8.isEqual((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean12 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField11);
        int int13 = localDate9.getDayOfYear();
        java.time.Period period14 = java.time.Period.between(localDate0, localDate9);
        java.time.OffsetTime offsetTime16 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime18 = offsetTime16.withSecond(16);
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime23 = java.nio.file.attribute.FileTime.from(instant20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery24 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period25 = instant20.query(periodTemporalQuery24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = instant20.isSupported(temporalUnit27);
        boolean boolean29 = offsetTime16.isSupported(temporalUnit27);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate30 = localDate0.minus(57632000000000L, temporalUnit27);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -1105537396387");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField11.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(periodTemporalQuery24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime1 = java.time.LocalTime.parse((java.lang.CharSequence) "1 Jan 1970 00:00:32 GMT");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '1 Jan 1970 00:00:32 GMT' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("\u4e0b\u5348\u65f6\u5206\u79d2", "-999999999-01-01");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.LocalDate localDate32 = zonedDateTime31.toLocalDate();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime33 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = zonedDateTime31.isBefore(localDateChronoZonedDateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.FileChannel.MapMode mapMode14 = java.nio.channels.FileChannel.MapMode.READ_WRITE;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.MappedByteBuffer mappedByteBuffer17 = fileChannel11.map(mapMode14, (long) '+', (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(mapMode14);
        org.junit.Assert.assertEquals(mapMode14.toString(), "READ_WRITE");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("hi!", 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDate localDate4 = java.time.LocalDate.now();
        java.time.LocalDate localDate5 = java.time.LocalDate.MIN;
        boolean boolean6 = localDate4.isEqual((java.time.chrono.ChronoLocalDate) localDate5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.withSecond((int) (byte) 0);
        java.time.LocalDate localDate13 = offsetDateTime10.toLocalDate();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean15 = offsetDateTime10.isSupported((java.time.temporal.TemporalField) chronoField14);
        boolean boolean16 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField14);
        java.time.Period period17 = java.time.Period.between(localDate1, localDate4);
        java.time.Instant instant19 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant21 = instant19.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime22 = java.nio.file.attribute.FileTime.from(instant19);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = instant19.query(periodTemporalQuery23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit26 = chronoField25.getBaseUnit();
        boolean boolean27 = instant19.isSupported(temporalUnit26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        int int33 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDateTime localDateTime35 = localDateTime29.minusNanos((long) (short) 100);
        boolean boolean36 = temporalUnit26.isSupportedBy((java.time.temporal.Temporal) localDateTime29);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.withSecond((int) (byte) 0);
        java.time.LocalDate localDate43 = offsetDateTime40.toLocalDate();
        java.time.Month month44 = localDate43.getMonth();
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime48.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.zone.ZoneRules zoneRules55 = zoneOffset53.getRules();
        java.time.ZonedDateTime zonedDateTime56 = offsetDateTime48.atZoneSameInstant((java.time.ZoneId) zoneOffset53);
        int int57 = zonedDateTime56.getDayOfMonth();
        int int58 = zonedDateTime56.getHour();
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime56.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.OffsetDateTime offsetDateTime66 = offsetDateTime64.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime70 = localDateTime67.atOffset(zoneOffset69);
        java.time.zone.ZoneRules zoneRules71 = zoneOffset69.getRules();
        java.time.ZonedDateTime zonedDateTime72 = offsetDateTime64.atZoneSameInstant((java.time.ZoneId) zoneOffset69);
        java.time.ZonedDateTime zonedDateTime73 = zonedDateTime72.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long75 = zonedDateTime72.getLong((java.time.temporal.TemporalField) chronoField74);
        long long76 = zonedDateTime60.getLong((java.time.temporal.TemporalField) chronoField74);
        boolean boolean77 = month44.isSupported((java.time.temporal.TemporalField) chronoField74);
        long long78 = localDateTime29.getLong((java.time.temporal.TemporalField) chronoField74);
        boolean boolean79 = chronoField74.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            int int80 = localDate1.get((java.time.temporal.TemporalField) chronoField74);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField14.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField25.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit26 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit26.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + month44 + "' != '" + java.time.Month.DECEMBER + "'", month44.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(zoneRules55);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 23 + "'", int58 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertNotNull(zonedDateTime72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField74.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 999999999L + "'", long75 == 999999999L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 999999999L + "'", long76 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 999999999L + "'", long78 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.security.NoSuchProviderException noSuchProviderException2 = new java.security.NoSuchProviderException();
        java.security.NoSuchProviderException noSuchProviderException3 = new java.security.NoSuchProviderException();
        noSuchProviderException2.addSuppressed((java.lang.Throwable) noSuchProviderException3);
        java.security.InvalidKeyException invalidKeyException5 = new java.security.InvalidKeyException(" ", (java.lang.Throwable) noSuchProviderException3);
        java.util.concurrent.ExecutionException executionException6 = new java.util.concurrent.ExecutionException((java.lang.Throwable) invalidKeyException5);
        java.io.IOException iOException7 = new java.io.IOException("Minute", (java.lang.Throwable) invalidKeyException5);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.lang.CharSequence charSequence0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period1 = java.time.Period.parse(charSequence0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: text");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileLock fileLock14 = fileChannel11.tryLock();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getAverage();
        double double2 = doubleSummaryStatistics0.getSum();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.plusHours((long) 16384);
        java.time.LocalTime localTime4 = localTime0.plusMinutes(0L);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime9.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset19);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit24 = chronoField23.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime25 = localDateTime21.minus((long) (-999999999), temporalUnit24);
        java.lang.String str26 = temporalUnit24.toString();
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime13.plus((long) (byte) 100, temporalUnit24);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime28 = localTime0.minus((long) 437000000, temporalUnit24);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField23.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit24 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit24.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Weeks" + "'", str26, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime27);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "US-ASCII");
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR (File name too long)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = charBuffer1.hasArray();
        boolean boolean5 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) charBuffer1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer8 = charBuffer1.subSequence((int) '\r', 722000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.util.Date date3 = new java.util.Date(23, 59, 12);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant7 = instant5.minusNanos((long) 'a');
        long long8 = instant5.toEpochMilli();
        java.util.Date date9 = java.util.Date.from(instant5);
        java.lang.String str10 = date9.toGMTString();
        long long11 = date9.getTime();
        int int12 = date9.getDate();
        int int13 = date3.compareTo(date9);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Dec 12 00:00:00 UTC 1927");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32000L + "'", long8 == 32000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str10, "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32000L + "'", long11 == 32000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer14 = byteBuffer13.asLongBuffer();
        boolean boolean15 = byteBuffer13.hasArray();
        java.lang.Object obj16 = byteBuffer13.array();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer19 = byteBuffer18.asLongBuffer();
        float float21 = byteBuffer18.getFloat(4);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer18.putChar('\r');
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1, (byte) 1, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer23.put(byteArray30);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer34 = byteBuffer33.asLongBuffer();
        float float36 = byteBuffer33.getFloat(4);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer33.putChar('\r');
        boolean boolean39 = byteBuffer38.isDirect();
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] { byteBuffer13, byteBuffer23, byteBuffer38 };
        // The following exception was thrown during execution in test generation
        try {
            long long43 = fileChannel11.read(byteBufferArray40, (int) '+', 533000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(longBuffer19);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(longBuffer34);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteBufferArray40);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        double[] doubleArray0 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer3 = java.nio.DoubleBuffer.wrap(doubleArray0, 722000000, 437000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.lang.String str4 = localDate1.toString();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.LocalTime localTime12 = java.time.LocalTime.now(clock11);
        java.time.LocalTime localTime14 = localTime12.plusHours((long) 16384);
        java.time.LocalTime localTime16 = localTime12.minusNanos(0L);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        int int33 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        int int39 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        int int44 = localDateTime35.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        boolean boolean45 = localDateTime24.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime46.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        boolean boolean56 = localDateTime46.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        boolean boolean57 = localDateTime40.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        java.time.LocalDate localDate58 = localDateTime40.toLocalDate();
        java.time.LocalDate localDate59 = java.time.LocalDate.now();
        java.time.LocalDate localDate60 = java.time.LocalDate.MIN;
        boolean boolean61 = localDate59.isEqual((java.time.chrono.ChronoLocalDate) localDate60);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean63 = localDate60.isSupported((java.time.temporal.TemporalField) chronoField62);
        int int64 = localDate60.getDayOfYear();
        int int65 = localDate58.compareTo((java.time.chrono.ChronoLocalDate) localDate60);
        java.time.Instant instant67 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.Clock clock72 = java.time.Clock.fixed(instant67, (java.time.ZoneId) zoneOffset70);
        java.time.LocalTime localTime73 = java.time.LocalTime.now(clock72);
        java.time.LocalTime localTime75 = localTime73.plusHours((long) 16384);
        java.time.LocalTime localTime77 = localTime73.minusNanos(0L);
        java.time.LocalDate localDate78 = java.time.LocalDate.now();
        java.time.LocalDate localDate79 = java.time.LocalDate.MIN;
        boolean boolean80 = localDate78.isEqual((java.time.chrono.ChronoLocalDate) localDate79);
        int int81 = localDate79.getYear();
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime85 = localDateTime82.atOffset(zoneOffset84);
        java.time.temporal.Temporal temporal86 = localDate79.adjustInto((java.time.temporal.Temporal) localDateTime82);
        java.time.LocalDateTime localDateTime87 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset89 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime90 = localDateTime87.atOffset(zoneOffset89);
        java.time.Clock clock91 = java.time.Clock.systemUTC();
        java.time.Instant instant92 = clock91.instant();
        java.time.ZoneId zoneId93 = clock91.getZone();
        java.time.ZonedDateTime zonedDateTime94 = java.time.ZonedDateTime.ofInstant(localDateTime82, zoneOffset89, zoneId93);
        java.time.OffsetDateTime offsetDateTime95 = java.time.OffsetDateTime.of(localDate60, localTime77, zoneOffset89);
        java.time.ZoneOffset zoneOffset97 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime98 = java.time.ZonedDateTime.ofLocal(localDateTime17, (java.time.ZoneId) zoneOffset89, zoneOffset97);
        java.time.OffsetDateTime offsetDateTime99 = java.time.OffsetDateTime.of(localDate1, localTime12, zoneOffset89);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-999999999-01-01" + "'", str4, "-999999999-01-01");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField62.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1999999998 + "'", int65 == 1999999998);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(clock72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-999999999) + "'", int81 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(temporal86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(zoneOffset89);
        org.junit.Assert.assertNotNull(offsetDateTime90);
        org.junit.Assert.assertNotNull(clock91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(zoneId93);
        org.junit.Assert.assertNotNull(zonedDateTime94);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(zoneOffset97);
        org.junit.Assert.assertNotNull(zonedDateTime98);
        org.junit.Assert.assertNotNull(offsetDateTime99);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = charsetDecoder1.isCharsetDetected();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException1 = new java.security.NoSuchAlgorithmException("PT10S");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        boolean boolean49 = chronoField46.isDateBased();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        java.util.function.IntUnaryOperator intUnaryOperator3 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator5 = intUnaryOperator3.compose(intUnaryOperator4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = intStream1.map(intUnaryOperator3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intUnaryOperator3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intUnaryOperator5);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        short short17 = byteBuffer15.getShort();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putChar('G');
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer24 = byteBuffer23.asLongBuffer();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer23.putLong((long) 829000000);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer29 = byteBuffer28.asLongBuffer();
        float float31 = byteBuffer28.getFloat(4);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer28.putChar('\r');
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer36 = byteBuffer35.asLongBuffer();
        float float38 = byteBuffer35.getFloat(4);
        double double40 = byteBuffer35.getDouble((int) (byte) 0);
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] { byteBuffer19, byteBuffer21, byteBuffer23, byteBuffer33, byteBuffer35 };
        // The following exception was thrown during execution in test generation
        try {
            long long42 = fileChannel13.write(byteBufferArray41);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(longBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(longBuffer29);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(longBuffer36);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(byteBufferArray41);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration77 = networkInterface76.getInetAddresses();
        java.lang.String str78 = networkInterface76.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertNotNull(inetAddressEnumeration77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "name:lo (lo)" + "'", str78, "name:lo (lo)");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAscii('G');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "zonerules[currentstandardoffset=z]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("MINUTE", "MinuteOfHour", (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream7 = intStream6.boxed();
        java.util.stream.Stream<java.lang.Integer> intStream9 = intStream7.skip(10L);
        long long10 = intStream9.count();
        boolean boolean11 = path4.equals((java.lang.Object) intStream9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.Integer> intOptional12 = intStream9.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.net.Proxy.Type type0 = java.net.Proxy.Type.SOCKS;
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + java.net.Proxy.Type.SOCKS + "'", type0.equals(java.net.Proxy.Type.SOCKS));
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Double> wildcardComparator4 = ofDouble3.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime3.minusMinutes((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime13 = offsetDateTime3.plusSeconds((long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(offsetDateTime11);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        long[] longArray9 = new long[] { 21, 12, 1999999998, (-365243219162L), (-999999999), 0L };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer10 = longBuffer2.get(longArray9);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[21, 12, 1999999998, -365243219162, -999999999, 0]");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime12.withFixedOffsetZone();
        int int14 = zonedDateTime13.getMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        double double1 = doubleStream0.sum();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream2 = doubleStream0.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        int int16 = localDateTime14.getSecond();
        java.time.Duration duration19 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int20 = duration19.getNano();
        java.time.Duration duration21 = duration19.abs();
        java.time.LocalDateTime localDateTime22 = localDateTime14.minus((java.time.temporal.TemporalAmount) duration21);
        java.time.Duration duration24 = duration21.plusMillis(0L);
        java.lang.String str25 = duration24.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT10S" + "'", str25, "PT10S");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.DayOfWeek dayOfWeek23 = localDateTime17.getDayOfWeek();
        java.time.format.TextStyle textStyle24 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.lang.String str29 = dayOfWeek23.getDisplayName(textStyle24, locale25);
        java.lang.String str30 = locale25.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle24 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle24.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GBR" + "'", str26, "GBR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5" + "'", str29, "5");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en_GB" + "'", str30, "en_GB");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate2 = localDate0.withMonth(365);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 365");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        short[] shortArray2 = new short[] { (byte) 1, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer5 = java.nio.ShortBuffer.wrap(shortArray2, 23, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 0]");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration4 = duration2.abs();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period5 = java.time.Period.from((java.time.temporal.TemporalAmount) duration4);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        java.nio.CharBuffer charBuffer4 = charBuffer2.duplicate();
        java.time.temporal.TemporalQuery[] temporalQueryArray6 = new java.time.temporal.TemporalQuery[0];
        @SuppressWarnings("unchecked")
        java.time.temporal.TemporalQuery<?>[] wildcardTemporalQueryArray7 = (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray6;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor8 = dateTimeFormatter0.parseBest((java.lang.CharSequence) charBuffer2, (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: At least two queries must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(temporalQueryArray6);
        org.junit.Assert.assertNotNull(wildcardTemporalQueryArray7);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        java.time.LocalTime localTime2 = localTime0.plusHours(0L);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit4 = chronoField3.getBaseUnit();
        java.time.temporal.ValueRange valueRange5 = localTime2.range((java.time.temporal.TemporalField) chronoField3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = offsetDateTime9.atZoneSameInstant((java.time.ZoneId) zoneOffset14);
        int int18 = zonedDateTime17.getDayOfMonth();
        int int19 = zonedDateTime17.getHour();
        java.time.Instant instant20 = zonedDateTime17.toInstant();
        long long21 = chronoField3.getFrom((java.time.temporal.TemporalAccessor) instant20);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField3.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit4 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit4.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 999999L + "'", long21 == 999999L);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        java.time.Period period4 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period5 = period4.normalized();
        long long6 = period4.toTotalMonths();
        java.time.chrono.ChronoPeriod chronoPeriod8 = period4.multipliedBy((int) (short) 100);
        java.time.chrono.ChronoPeriod chronoPeriod9 = period1.plus((java.time.temporal.TemporalAmount) period4);
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant13 = instant11.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime14 = java.nio.file.attribute.FileTime.from(instant11);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery15 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period16 = instant11.query(periodTemporalQuery15);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        boolean boolean19 = instant11.isSupported(temporalUnit18);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime27 = localDateTime21.minusNanos((long) (short) 100);
        boolean boolean28 = temporalUnit18.isSupportedBy((java.time.temporal.Temporal) localDateTime21);
        boolean boolean29 = temporalUnit18.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronoPeriod9.get(temporalUnit18);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(chronoPeriod8);
        org.junit.Assert.assertNotNull(chronoPeriod9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(fileTime14);
        org.junit.Assert.assertNotNull(periodTemporalQuery15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.Instant instant5 = instant3.minusMillis((long) 399000000);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = instant5.getLong((java.time.temporal.TemporalField) chronoField6);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfAmPm");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField6.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.lang.CharSequence charSequence0 = null;
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase(charSequence0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream3.onClose(runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        int int1 = localTime0.getNano();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long3 = localTime0.getLong((java.time.temporal.TemporalField) chronoField2);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.withSecond((int) (byte) 0);
        boolean boolean10 = chronoField2.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime7);
        long long11 = offsetDateTime7.toEpochSecond();
        org.junit.Assert.assertNotNull(localTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 781000000 + "'", int1 == 781000000);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField2.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 14L + "'", long3 == 14L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 31556889832780799L + "'", long11 == 31556889832780799L);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((long) 794000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1015217286");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        int int7 = duration1.getNano();
        java.time.Duration duration9 = duration1.withNanos(12);
        java.time.Duration duration11 = duration9.minusNanos(364740218880L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "name:lo (lo)", (int) '-');
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = instant1.isSupported(temporalUnit8);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.minusNanos((long) (short) 100);
        boolean boolean18 = temporalUnit8.isSupportedBy((java.time.temporal.Temporal) localDateTime11);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.withSecond((int) (byte) 0);
        java.time.LocalDate localDate25 = offsetDateTime22.toLocalDate();
        java.time.Month month26 = localDate25.getMonth();
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime30.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.zone.ZoneRules zoneRules37 = zoneOffset35.getRules();
        java.time.ZonedDateTime zonedDateTime38 = offsetDateTime30.atZoneSameInstant((java.time.ZoneId) zoneOffset35);
        int int39 = zonedDateTime38.getDayOfMonth();
        int int40 = zonedDateTime38.getHour();
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime38.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime46.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        java.time.zone.ZoneRules zoneRules53 = zoneOffset51.getRules();
        java.time.ZonedDateTime zonedDateTime54 = offsetDateTime46.atZoneSameInstant((java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime54.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long57 = zonedDateTime54.getLong((java.time.temporal.TemporalField) chronoField56);
        long long58 = zonedDateTime42.getLong((java.time.temporal.TemporalField) chronoField56);
        boolean boolean59 = month26.isSupported((java.time.temporal.TemporalField) chronoField56);
        long long60 = localDateTime11.getLong((java.time.temporal.TemporalField) chronoField56);
        java.util.Set<java.lang.String> strSet61 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month62 = java.time.Month.OCTOBER;
        java.time.Month month64 = month62.plus(0L);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        int int70 = localDateTime65.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime66);
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime74 = localDateTime71.atOffset(zoneOffset73);
        int int75 = localDateTime66.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime71);
        java.time.temporal.Temporal temporal76 = month64.adjustInto((java.time.temporal.Temporal) localDateTime66);
        boolean boolean77 = strSet61.equals((java.lang.Object) month64);
        java.security.ProtectionDomain[] protectionDomainArray78 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext79 = new java.security.AccessControlContext(protectionDomainArray78);
        java.time.LocalDate localDate80 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery81 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period82 = localDate80.query(periodTemporalQuery81);
        boolean boolean83 = accessControlContext79.equals((java.lang.Object) periodTemporalQuery81);
        java.time.Period period84 = month64.query(periodTemporalQuery81);
        java.time.Period period85 = localDateTime11.query(periodTemporalQuery81);
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime89 = localDateTime86.atOffset(zoneOffset88);
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime89.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime92 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset94 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime95 = localDateTime92.atOffset(zoneOffset94);
        java.time.zone.ZoneRules zoneRules96 = zoneOffset94.getRules();
        java.time.ZonedDateTime zonedDateTime97 = offsetDateTime89.atZoneSameInstant((java.time.ZoneId) zoneOffset94);
        java.time.ZonedDateTime zonedDateTime98 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset94);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.DECEMBER + "'", month26.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(zoneRules37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 31 + "'", int39 == 31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField56.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 999999999L + "'", long57 == 999999999L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 999999999L + "'", long58 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 999999999L + "'", long60 == 999999999L);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + month62 + "' != '" + java.time.Month.OCTOBER + "'", month62.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month64 + "' != '" + java.time.Month.OCTOBER + "'", month64.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(temporal76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(periodTemporalQuery81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(offsetDateTime89);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(zoneOffset94);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertNotNull(zoneRules96);
        org.junit.Assert.assertNotNull(zonedDateTime97);
        org.junit.Assert.assertNotNull(zonedDateTime98);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant52 = instant50.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime53 = java.nio.file.attribute.FileTime.from(instant50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = instant50.query(periodTemporalQuery54);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        boolean boolean58 = instant50.isSupported(temporalUnit57);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant62 = instant60.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.zone.ZoneRules zoneRules67 = zoneOffset65.getRules();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(instant60, (java.time.ZoneId) zoneOffset65);
        java.time.ZoneId zoneId69 = zonedDateTime68.getZone();
        java.time.Clock clock70 = java.time.Clock.fixed(instant50, zoneId69);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime14.with((java.time.temporal.TemporalAdjuster) instant50);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime75 = localDateTime72.atOffset(zoneOffset74);
        java.time.OffsetDateTime offsetDateTime77 = offsetDateTime75.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime81 = localDateTime78.atOffset(zoneOffset80);
        java.time.zone.ZoneRules zoneRules82 = zoneOffset80.getRules();
        java.time.ZonedDateTime zonedDateTime83 = offsetDateTime75.atZoneSameInstant((java.time.ZoneId) zoneOffset80);
        java.time.ZoneId zoneId84 = zonedDateTime83.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime85 = zonedDateTime14.withZoneSameInstant(zoneId84);
        java.lang.String str86 = zoneId84.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertNotNull(zonedDateTime83);
        org.junit.Assert.assertNotNull(zoneId84);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Z" + "'", str86, "Z");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        boolean boolean3 = intStream1.isParallel();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = ofInt7.trySplit();
        java.util.stream.IntStream.Builder builder9 = java.util.stream.IntStream.builder();
        ofInt7.forEachRemaining((java.util.function.IntConsumer) builder9);
        // The following exception was thrown during execution in test generation
        try {
            intStream4.forEach((java.util.function.IntConsumer) builder9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNull(intSpliterator8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.util.function.Predicate<java.util.Locale.Builder> builderPredicate4 = java.util.function.Predicate.isEqual((java.lang.Object) short3);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(builderPredicate4);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.lang.String str1 = org.apache.commons.lang3.CharUtils.unicodeEscaped((java.lang.Character) '#');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\u0023" + "'", str1, "\\u0023");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate2 = localDate0.withDayOfMonth((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime5 = localDate0.atTime((int) 'x', (-7));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 120");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.format.TextStyle textStyle2 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getISO3Language();
        java.time.format.DecimalStyle decimalStyle5 = java.time.format.DecimalStyle.of(locale3);
        java.lang.String str6 = chronology1.getDisplayName(textStyle2, locale3);
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime9 = offsetTime7.withSecond(16);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int11 = offsetTime9.get((java.time.temporal.TemporalField) chronoField10);
        java.time.temporal.ValueRange valueRange12 = chronology1.range(chronoField10);
        boolean boolean13 = chronoField10.isDateBased();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + textStyle2 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle2.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField10.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(valueRange12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.minusNanos((long) 100);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int7 = offsetTime5.get((java.time.temporal.TemporalField) chronoField6);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime9 = localTime0.with((java.time.temporal.TemporalField) chronoField6, (long) 'M');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 77");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField6.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        java.util.stream.IntStream intStream10 = charBuffer9.chars();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = intStream10.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Integer> wildcardComparator12 = intSpliterator11.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intSpliterator11);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.lang.String[] strArray5 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray7 = org.apache.commons.lang3.StringUtils.stripAll(strArray5, "GBR");
        java.lang.String str11 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray5, 'a', 31, 31);
        java.lang.String[] strArray15 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("eng", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", (int) (byte) -1);
        java.lang.String str16 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("ZoneRules[currentStandardOffset=Z]", strArray5, strArray15);
        java.lang.String str17 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray15);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAny("KOR", strArray15);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str16, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        int int8 = localDateTime3.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        int int13 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        boolean boolean25 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        boolean boolean36 = localDateTime26.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        boolean boolean37 = localDateTime20.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.LocalDate localDate38 = localDateTime20.toLocalDate();
        java.time.LocalDate localDate39 = java.time.LocalDate.now();
        java.time.LocalDate localDate40 = java.time.LocalDate.MIN;
        boolean boolean41 = localDate39.isEqual((java.time.chrono.ChronoLocalDate) localDate40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean43 = localDate40.isSupported((java.time.temporal.TemporalField) chronoField42);
        int int44 = localDate40.getDayOfYear();
        int int45 = localDate38.compareTo((java.time.chrono.ChronoLocalDate) localDate40);
        java.time.Instant instant47 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.Clock clock52 = java.time.Clock.fixed(instant47, (java.time.ZoneId) zoneOffset50);
        java.time.LocalTime localTime53 = java.time.LocalTime.now(clock52);
        java.time.LocalTime localTime55 = localTime53.plusHours((long) 16384);
        java.time.LocalTime localTime57 = localTime53.minusNanos(0L);
        java.time.LocalDate localDate58 = java.time.LocalDate.now();
        java.time.LocalDate localDate59 = java.time.LocalDate.MIN;
        boolean boolean60 = localDate58.isEqual((java.time.chrono.ChronoLocalDate) localDate59);
        int int61 = localDate59.getYear();
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.temporal.Temporal temporal66 = localDate59.adjustInto((java.time.temporal.Temporal) localDateTime62);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime70 = localDateTime67.atOffset(zoneOffset69);
        java.time.Clock clock71 = java.time.Clock.systemUTC();
        java.time.Instant instant72 = clock71.instant();
        java.time.ZoneId zoneId73 = clock71.getZone();
        java.time.ZonedDateTime zonedDateTime74 = java.time.ZonedDateTime.ofInstant(localDateTime62, zoneOffset69, zoneId73);
        java.time.OffsetDateTime offsetDateTime75 = java.time.OffsetDateTime.of(localDate40, localTime57, zoneOffset69);
        java.time.Clock clock76 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset69);
        java.time.OffsetTime offsetTime77 = java.time.OffsetTime.of(localTime0, zoneOffset69);
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        // The following exception was thrown during execution in test generation
        try {
            long long79 = zoneOffset69.getLong((java.time.temporal.TemporalField) chronoField78);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfAmPm");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField42.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1999999998 + "'", int45 == 1999999998);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(clock52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-999999999) + "'", int61 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(temporal66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(clock71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(zoneId73);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(clock76);
        org.junit.Assert.assertNotNull(offsetTime77);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField78.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.zone.ZoneRules zoneRules4 = zoneOffset2.getRules();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.lang.String str14 = zoneRules12.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = zoneRules12.getTransitions();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        boolean boolean38 = localDateTime17.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str40 = localDateTime33.format(dateTimeFormatter39);
        java.time.ZoneOffset zoneOffset41 = zoneRules12.getOffset(localDateTime33);
        java.time.LocalDateTime localDateTime43 = localDateTime33.minusMinutes(13L);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition44 = zoneRules4.getTransition(localDateTime33);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList45 = zoneRules4.getTransitionRules();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(zoneRules4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str14, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str40, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNull(zoneOffsetTransition44);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList45);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.lang.Object obj7 = byteBuffer6.array();
        // The following exception was thrown during execution in test generation
        try {
            short short9 = byteBuffer6.getShort((-7));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI5 = new java.net.URI("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", "", "1 Jan 1970 00:00:32 GMT", "Minute", "java.nio.HeapShortBuffer[pos=64 lim=64 cap=64]");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)://1%20Jan%201970%2000:00:32%20GMT?Minute#java.nio.HeapShortBuffer[pos=64%20lim=64%20cap=64]");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime7.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean28 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime29.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        boolean boolean39 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean40 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDate localDate41 = localDateTime23.toLocalDate();
        java.time.LocalDate localDate42 = java.time.LocalDate.now();
        java.time.LocalDate localDate43 = java.time.LocalDate.MIN;
        boolean boolean44 = localDate42.isEqual((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean46 = localDate43.isSupported((java.time.temporal.TemporalField) chronoField45);
        int int47 = localDate43.getDayOfYear();
        int int48 = localDate41.compareTo((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.Clock clock55 = java.time.Clock.fixed(instant50, (java.time.ZoneId) zoneOffset53);
        java.time.LocalTime localTime56 = java.time.LocalTime.now(clock55);
        java.time.LocalTime localTime58 = localTime56.plusHours((long) 16384);
        java.time.LocalTime localTime60 = localTime56.minusNanos(0L);
        java.time.LocalDate localDate61 = java.time.LocalDate.now();
        java.time.LocalDate localDate62 = java.time.LocalDate.MIN;
        boolean boolean63 = localDate61.isEqual((java.time.chrono.ChronoLocalDate) localDate62);
        int int64 = localDate62.getYear();
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        java.time.temporal.Temporal temporal69 = localDate62.adjustInto((java.time.temporal.Temporal) localDateTime65);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.Clock clock74 = java.time.Clock.systemUTC();
        java.time.Instant instant75 = clock74.instant();
        java.time.ZoneId zoneId76 = clock74.getZone();
        java.time.ZonedDateTime zonedDateTime77 = java.time.ZonedDateTime.ofInstant(localDateTime65, zoneOffset72, zoneId76);
        java.time.OffsetDateTime offsetDateTime78 = java.time.OffsetDateTime.of(localDate43, localTime60, zoneOffset72);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.ofLocal(localDateTime0, (java.time.ZoneId) zoneOffset72, zoneOffset80);
        java.time.Period period83 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period84 = java.time.Period.from((java.time.temporal.TemporalAmount) period83);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime85 = localDateTime0.minus((java.time.temporal.TemporalAmount) period84);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField45.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1999999998 + "'", int48 == 1999999998);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-999999999) + "'", int64 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(temporal69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(clock74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(zoneId76);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer14 = byteBuffer13.asLongBuffer();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.putLong((long) 829000000);
        char char18 = byteBuffer13.getChar(0);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = fileChannel11.read(byteBuffer13);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + '\000' + "'", char18 == '\000');
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = java.time.Period.from((java.time.temporal.TemporalAmount) period1);
        java.time.chrono.ChronoPeriod chronoPeriod3 = period1.negated();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(chronoPeriod3);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("lo");
            org.junit.Assert.fail("Expected exception of type java.time.zone.ZoneRulesException; message: Unknown time-zone ID: lo");
        } catch (java.time.zone.ZoneRulesException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        char[] charArray26 = new char[] { 'a', '#', '4', '#' };
        boolean boolean27 = org.apache.commons.lang3.StringUtils.containsAny("", charArray26);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer30 = charBuffer6.put(charArray26, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.replaceWith("java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        float[] floatArray16 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer17 = java.nio.FloatBuffer.wrap(floatArray16);
        boolean boolean18 = zoneIdMap1.contains((java.lang.Object) floatArray16);
        zoneIdMap1.clear();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Set<java.time.ZoneId> zoneIdSet2 = zoneIdMap1.keySet();
        boolean boolean3 = zoneIdSet2.isEmpty();
        org.junit.Assert.assertNotNull(zoneIdSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        int int0 = org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + (-1) + "'", int0 == (-1));
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty("en_GB", "Z");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en_GB" + "'", str2, "en_GB");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.function.IntPredicate intPredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = intStream1.noneMatch(intPredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        // The following exception was thrown during execution in test generation
        try {
            java.time.DayOfWeek dayOfWeek1 = java.time.DayOfWeek.of(794000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek: 794000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.net.MalformedURLException malformedURLException1 = new java.net.MalformedURLException("GBR");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean2 = file1.mkdirs();
        java.nio.file.Path path3 = file1.toPath();
        java.nio.file.Path path4 = path3.getParent();
        java.io.File file6 = new java.io.File("GBR");
        boolean boolean8 = file6.setWritable(true);
        java.nio.file.Path path9 = file6.toPath();
        java.nio.file.Path path11 = path9.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI12 = path9.toUri();
        boolean boolean14 = path9.startsWith("/experiment/GBR/");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path15 = path4.resolveSibling(path9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(path3);
        org.junit.Assert.assertNull(path4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(path9);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of(4096, 256, 794000000, (int) 'u', (int) (short) 0, (int) '\000');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 256");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("Minute(null <no signer certificates>)", "", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Minute(null <no signer certificates>)" + "'", str3, "Minute(null <no signer certificates>)");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf(" ", ":", 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap4 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.zone.ZoneRules zoneRules11 = zoneIdMap4.getOrDefault((java.lang.Object) 1.0d, zoneRules10);
        java.lang.String str12 = zoneRules10.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList13 = zoneRules10.getTransitions();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        boolean boolean36 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.format.DateTimeFormatter dateTimeFormatter37 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str38 = localDateTime31.format(dateTimeFormatter37);
        java.time.ZoneOffset zoneOffset39 = zoneRules10.getOffset(localDateTime31);
        java.time.zone.ZoneRules zoneRules40 = zoneIdMap1.getOrDefault((java.lang.Object) '\n', zoneRules10);
        java.lang.String str41 = zoneRules10.toString();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str12, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str38, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(zoneRules40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str41, "ZoneRules[currentStandardOffset=Z]");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.lang.Runnable runnable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream8 = doubleStream6.onClose(runnable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "+999999999-12-31", "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.zone.ZoneRules zoneRules4 = zoneOffset2.getRules();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.lang.String str14 = zoneRules12.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = zoneRules12.getTransitions();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        boolean boolean38 = localDateTime17.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str40 = localDateTime33.format(dateTimeFormatter39);
        java.time.ZoneOffset zoneOffset41 = zoneRules12.getOffset(localDateTime33);
        java.time.LocalDateTime localDateTime43 = localDateTime33.minusMinutes(13L);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition44 = zoneRules4.getTransition(localDateTime33);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = localDateTime33.format(dateTimeFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: formatter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(zoneRules4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str14, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str40, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNull(zoneOffsetTransition44);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.OptionalDouble optionalDouble3 = doubleStream1.findFirst();
        java.util.function.DoubleSupplier doubleSupplier4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = optionalDouble3.orElseGet(doubleSupplier4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileLock fileLock16 = fileChannel11.lock((-1L), 32L, false);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ofPattern("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Pattern letter count must be 2: V");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.with((java.time.temporal.TemporalField) chronoField6, (long) 31);
        java.time.OffsetTime offsetTime9 = offsetDateTime8.toOffsetTime();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        int int18 = instant15.getNano();
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime13.with((java.time.temporal.TemporalAdjuster) instant15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime20 = offsetTime9.with((java.time.temporal.TemporalAdjuster) offsetDateTime19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime19);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "x-windows-iso2022jp");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.time.LocalTime localTime5 = java.time.LocalTime.now();
        int int6 = localTime5.getNano();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long8 = localTime5.getLong((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.withSecond((int) (byte) 0);
        boolean boolean15 = chronoField7.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime12);
        boolean boolean16 = longBuffer4.equals((java.lang.Object) chronoField7);
        boolean boolean17 = longBuffer4.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer20 = longBuffer4.put(14, (long) '\n');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 543000000 + "'", int6 == 543000000);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField7.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 14L + "'", long8 == 14L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        int int6 = charBuffer1.compareTo(charBuffer4);
        int int7 = charBuffer4.length();
        java.nio.CharBuffer charBuffer8 = charBuffer4.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer11 = charBuffer4.subSequence(385000000, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(charBuffer8);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField14.getBaseUnit();
        boolean boolean16 = temporalUnit15.isTimeBased();
        java.time.Duration duration17 = temporalUnit15.getDuration();
        java.time.zone.ZoneRules zoneRules18 = zoneIdMap1.remove((java.lang.Object) duration17);
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        java.time.Instant instant24 = instant22.minusMillis((long) 399000000);
        java.util.Set<java.lang.String> strSet25 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month26 = java.time.Month.OCTOBER;
        java.time.Month month28 = month26.plus(0L);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime29.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        int int39 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.temporal.Temporal temporal40 = month28.adjustInto((java.time.temporal.Temporal) localDateTime30);
        boolean boolean41 = strSet25.equals((java.lang.Object) month28);
        java.security.ProtectionDomain[] protectionDomainArray42 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext43 = new java.security.AccessControlContext(protectionDomainArray42);
        java.time.LocalDate localDate44 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery45 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period46 = localDate44.query(periodTemporalQuery45);
        boolean boolean47 = accessControlContext43.equals((java.lang.Object) periodTemporalQuery45);
        java.time.Period period48 = month28.query(periodTemporalQuery45);
        java.time.Period period49 = instant24.query(periodTemporalQuery45);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate51 = localDateTime50.toLocalDate();
        java.time.temporal.Temporal temporal52 = period49.subtractFrom((java.time.temporal.Temporal) localDateTime50);
        boolean boolean54 = zoneIdMap1.remove((java.lang.Object) temporal52, (java.lang.Object) 32000L);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField14.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNull(zoneRules18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.OCTOBER + "'", month26.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month28 + "' != '" + java.time.Month.OCTOBER + "'", month28.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(temporal40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(periodTemporalQuery45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(temporal52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) 52);
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant5 = instant3.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime6 = java.nio.file.attribute.FileTime.from(instant3);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery7 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period8 = instant3.query(periodTemporalQuery7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit10 = chronoField9.getBaseUnit();
        boolean boolean11 = instant3.isSupported(temporalUnit10);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        int int17 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.LocalDateTime localDateTime19 = localDateTime13.minusNanos((long) (short) 100);
        boolean boolean20 = temporalUnit10.isSupportedBy((java.time.temporal.Temporal) localDateTime13);
        boolean boolean21 = instant1.isSupported(temporalUnit10);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertNotNull(periodTemporalQuery7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField9.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit10 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit10.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("5", "16:00:00", "name:lo (lo)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "5" + "'", str3, "5");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.average();
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfDouble ofDouble4 = doubleStream2.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        double[] doubleArray4 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer5 = java.nio.DoubleBuffer.wrap(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer8 = java.nio.DoubleBuffer.wrap(doubleArray4, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer5);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = fileChannel11.size();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        boolean boolean12 = file8.setWritable(true);
        java.net.URI uRI13 = file8.toURI();
        java.net.URI uRI14 = uRI6.relativize(uRI13);
        java.lang.String str15 = uRI6.getSchemeSpecificPart();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(uRI14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment/GBR/" + "'", str15, "/experiment/GBR/");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator5 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator6 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator7 = intUnaryOperator5.compose(intUnaryOperator6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream8 = intStream4.map(intUnaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intUnaryOperator5);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertNotNull(intUnaryOperator7);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.FileChannel.MapMode mapMode14 = java.nio.channels.FileChannel.MapMode.PRIVATE;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.MappedByteBuffer mappedByteBuffer17 = fileChannel11.map(mapMode14, (long) 1024, (long) '\r');
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(mapMode14);
        org.junit.Assert.assertEquals(mapMode14.toString(), "PRIVATE");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset9);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime15 = localDateTime11.minus((long) (-999999999), temporalUnit14);
        java.lang.String str16 = temporalUnit14.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant17 = instant1.truncatedTo(temporalUnit14);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Weeks" + "'", str16, "Weeks");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putInt((int) (byte) 0, 32);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap9 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.zone.ZoneRules zoneRules15 = zoneOffset13.getRules();
        java.time.zone.ZoneRules zoneRules16 = zoneIdMap9.getOrDefault((java.lang.Object) 1.0d, zoneRules15);
        java.lang.String str17 = zoneRules15.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = zoneRules15.getTransitions();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime19.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        boolean boolean41 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str43 = localDateTime36.format(dateTimeFormatter42);
        java.time.ZoneOffset zoneOffset44 = zoneRules15.getOffset(localDateTime36);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime7.withOffsetSameLocal(zoneOffset44);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.plusWeeks((long) 12);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(zoneRules15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str17, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str43, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        java.util.function.LongConsumer longConsumer4 = null;
        optionalLong3.ifPresent(longConsumer4);
        boolean boolean6 = optionalLong3.isPresent();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Iterator<java.lang.String> strItor14 = strList11.iterator();
        java.util.function.Predicate<java.nio.channels.ByteChannel> byteChannelPredicate15 = java.util.function.Predicate.isEqual((java.lang.Object) strList11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = strList11.set(227000000, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 227000000, Size: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(byteChannelPredicate15);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean2 = file1.mkdirs();
        java.nio.file.Path path3 = file1.toPath();
        java.nio.file.Path path4 = path3.getParent();
        java.nio.file.WatchService watchService5 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind6 = null;
        java.nio.file.WatchEvent.Kind[] kindArray8 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray9 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray8;
        wildcardKindArray9[0] = wildcardKind6;
        java.nio.file.WatchEvent.Modifier[] modifierArray12 = new java.nio.file.WatchEvent.Modifier[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey13 = path3.register(watchService5, wildcardKindArray9, modifierArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(path3);
        org.junit.Assert.assertNull(path4);
        org.junit.Assert.assertNotNull(kindArray8);
        org.junit.Assert.assertNotNull(wildcardKindArray9);
        org.junit.Assert.assertNotNull(modifierArray12);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.nio.file.AccessMode accessMode0 = java.nio.file.AccessMode.READ;
        org.junit.Assert.assertTrue("'" + accessMode0 + "' != '" + java.nio.file.AccessMode.READ + "'", accessMode0.equals(java.nio.file.AccessMode.READ));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.lang.String str35 = localDateTime6.toString();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate37 = localDateTime36.toLocalDate();
        java.time.LocalDateTime localDateTime39 = localDateTime36.plusWeeks(0L);
        int int40 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime42 = localDateTime39.minusHours((long) 999999999);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap44 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap48 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.zone.ZoneRules zoneRules54 = zoneOffset52.getRules();
        java.time.zone.ZoneRules zoneRules55 = zoneIdMap48.getOrDefault((java.lang.Object) 1.0d, zoneRules54);
        java.time.zone.ZoneRules zoneRules56 = zoneIdMap44.put((java.time.ZoneId) zoneOffset46, zoneRules54);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.OffsetDateTime offsetDateTime62 = offsetDateTime60.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.zone.ZoneRules zoneRules67 = zoneOffset65.getRules();
        java.time.ZonedDateTime zonedDateTime68 = offsetDateTime60.atZoneSameInstant((java.time.ZoneId) zoneOffset65);
        int int69 = zonedDateTime68.getDayOfMonth();
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.OffsetDateTime offsetDateTime75 = offsetDateTime73.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime79 = localDateTime76.atOffset(zoneOffset78);
        java.time.zone.ZoneRules zoneRules80 = zoneOffset78.getRules();
        java.time.ZonedDateTime zonedDateTime81 = offsetDateTime73.atZoneSameInstant((java.time.ZoneId) zoneOffset78);
        java.time.ZonedDateTime zonedDateTime82 = zonedDateTime81.withLaterOffsetAtOverlap();
        boolean boolean83 = zonedDateTime68.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime82);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.UTC;
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime85 = zonedDateTime82.withZoneSameInstant((java.time.ZoneId) zoneOffset84);
        java.time.Clock clock86 = java.time.Clock.system((java.time.ZoneId) zoneOffset84);
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransition zoneOffsetTransition87 = java.time.zone.ZoneOffsetTransition.of(localDateTime39, zoneOffset46, zoneOffset84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offsets must not be equal");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertNotNull(zoneRules55);
        org.junit.Assert.assertNull(zoneRules56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 31 + "'", int69 == 31);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(zonedDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime85);
        org.junit.Assert.assertNotNull(clock86);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        boolean boolean20 = localDateTime17.equals((java.lang.Object) charset19);
        java.nio.ByteBuffer byteBuffer22 = charset19.encode("English (United Kingdom)");
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.with((java.time.temporal.TemporalField) chronoField6, (long) 31);
        int int9 = offsetDateTime8.getMinute();
        int int10 = offsetDateTime8.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 365 + "'", int10 == 365);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getHour();
        int int14 = zonedDateTime11.getSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime16 = zonedDateTime11.plusSeconds((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (byte) -1);
        java.lang.String str2 = fileTime1.toString();
        long long3 = fileTime1.toMillis();
        java.util.concurrent.TimeUnit timeUnit4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = fileTime1.to(timeUnit4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: unit");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str2, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        float float18 = byteBuffer15.getFloat(4);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer15.putChar('\r');
        // The following exception was thrown during execution in test generation
        try {
            int int22 = fileChannel13.read(byteBuffer15, (long) '\uffff');
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer20);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit13 = null;
        boolean boolean14 = zonedDateTime12.isSupported(temporalUnit13);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime15 = zonedDateTime12.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime17 = zonedDateTime12.withMinute((int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 65535");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime15);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.net.Proxy.Type type0 = java.net.Proxy.Type.HTTP;
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + java.net.Proxy.Type.HTTP + "'", type0.equals(java.net.Proxy.Type.HTTP));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.function.DoubleConsumer doubleConsumer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleStream6.forEachOrdered(doubleConsumer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.net.MalformedURLException malformedURLException1 = new java.net.MalformedURLException("GBR");
        java.net.MalformedURLException malformedURLException3 = new java.net.MalformedURLException("GBR");
        java.net.MalformedURLException malformedURLException5 = new java.net.MalformedURLException("GBR");
        java.net.MalformedURLException[] malformedURLExceptionArray6 = new java.net.MalformedURLException[] { malformedURLException1, malformedURLException3, malformedURLException5 };
        java.util.stream.Stream<java.net.MalformedURLException> malformedURLExceptionStream7 = java.util.stream.Stream.of(malformedURLExceptionArray6);
        org.junit.Assert.assertNotNull(malformedURLExceptionArray6);
        org.junit.Assert.assertNotNull(malformedURLExceptionStream7);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("Minute", "GBR");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.time.Period period1 = java.time.Period.ofMonths(533000000);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong4 = longStream3.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long14 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = zonedDateTime11.getZone();
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime11.plusHours((long) (short) 0);
        java.time.LocalTime localTime18 = zonedDateTime17.toLocalTime();
        int int19 = localTime18.getNano();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 999999999L + "'", long14 == 999999999L);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 999999999 + "'", int19 == 999999999);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        boolean boolean8 = file1.setWritable(false, false);
        boolean boolean9 = file1.isDirectory();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray9 = new java.nio.file.LinkOption[] { linkOption7, linkOption8 };
        java.nio.file.Path path10 = path4.toRealPath(linkOptionArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path13 = path10.subpath(52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray9);
        org.junit.Assert.assertNotNull(path10);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate(722000000);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = fileChannel11.read(byteBuffer15, (long) 1024);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("/", "zonerules[currentstandardoffset=z]", "\\u0023");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/" + "'", str3, "/");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("", "MicroOfSecond");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MicroOfSecond" + "'", str2, "MicroOfSecond");
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime17 = java.time.OffsetTime.parse((java.lang.CharSequence) charBuffer3, dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.time.chrono.Chronology chronology3 = java.time.chrono.Chronology.ofLocale(locale1);
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str5 = locale1.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u4e2d\u56fd" + "'", str5, "\u4e2d\u56fd");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Language();
        java.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withLocale(locale1);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.wrap(charArray15);
        java.text.ParsePosition parsePosition23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor24 = dateTimeFormatter0.parse((java.lang.CharSequence) charBuffer22, parsePosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: position");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (byte) -1);
        java.lang.String str2 = fileTime1.toString();
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.fromMillis((long) (byte) -1);
        int int5 = fileTime1.compareTo(fileTime4);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str2, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.time.Duration duration1 = java.time.Duration.ofNanos((long) 256);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.util.Date date1 = new java.util.Date(1L);
        java.lang.String str2 = date1.toGMTString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str2, "1 Jan 1970 00:00:00 GMT");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.stream.Stream<java.lang.Long> longStream4 = longStream3.boxed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream3.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.security.SignatureException signatureException1 = new java.security.SignatureException("MicroOfSecond");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = instant1.isSupported(temporalUnit8);
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant13 = instant11.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.ZoneId zoneId20 = zonedDateTime19.getZone();
        java.time.Clock clock21 = java.time.Clock.fixed(instant1, zoneId20);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        boolean boolean44 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        int int50 = localDateTime45.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        boolean boolean55 = localDateTime45.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        boolean boolean56 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.LocalDate localDate57 = localDateTime39.toLocalDate();
        java.time.LocalDate localDate59 = localDate57.minusWeeks((long) (short) 1);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset64);
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit69 = chronoField68.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime70 = localDateTime66.minus((long) (-999999999), temporalUnit69);
        java.lang.String str71 = temporalUnit69.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long72 = instant1.until((java.time.temporal.Temporal) localDate59, temporalUnit69);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain Instant from TemporalAccessor: +999999999-12-24 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField68.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit69 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit69.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Weeks" + "'", str71, "Weeks");
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("\u7f8e\u56fd", 3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("localhost");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tsohlacol" + "'", str1, "tsohlacol");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.chrono.Era era14 = localDate13.getEra();
        java.time.Instant instant16 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.Clock clock21 = java.time.Clock.fixed(instant16, (java.time.ZoneId) zoneOffset19);
        java.time.LocalTime localTime22 = java.time.LocalTime.now(clock21);
        java.time.LocalTime localTime24 = localTime22.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean26 = localTime24.isSupported((java.time.temporal.TemporalField) chronoField25);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange27 = era14.range((java.time.temporal.TemporalField) chronoField25);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfAmPm");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + era14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField25.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setRegion("Minute");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Minute [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.time.Duration duration1 = java.time.Duration.ofHours((long) 'G');
        long long2 = duration1.toDays();
        java.time.Instant instant4 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant6 = instant4.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime7 = java.nio.file.attribute.FileTime.from(instant4);
        java.time.Instant instant9 = instant4.plusMillis((long) 10);
        boolean boolean10 = duration1.equals((java.lang.Object) instant4);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2L + "'", long2 == 2L);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fileTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAscii('x');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("-999999999-01-01");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-999999999-01-01" + "'", str1, "-999999999-01-01");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime36 = localDateTime12.plusMinutes((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer14 = byteBuffer13.asLongBuffer();
        short short15 = byteBuffer13.getShort();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putChar('G');
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer20 = byteBuffer19.asLongBuffer();
        short short21 = byteBuffer19.getShort();
        boolean boolean22 = byteBuffer13.equals((java.lang.Object) byteBuffer19);
        java.nio.ShortBuffer shortBuffer23 = byteBuffer19.asShortBuffer();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate(33237);
        java.nio.ByteOrder byteOrder26 = byteBuffer25.order();
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] { byteBuffer19, byteBuffer25 };
        // The following exception was thrown during execution in test generation
        try {
            long long30 = fileChannel11.read(byteBufferArray27, 399000000, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(shortBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteOrder26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.time.Duration duration1 = java.time.Duration.ofDays((long) 1);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.time.LocalTime localTime5 = java.time.LocalTime.now();
        int int6 = localTime5.getNano();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long8 = localTime5.getLong((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.withSecond((int) (byte) 0);
        boolean boolean15 = chronoField7.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime12);
        boolean boolean16 = longBuffer4.equals((java.lang.Object) chronoField7);
        long[] longArray19 = new long[] { 1, 1999999998 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer22 = longBuffer4.put(longArray19, (int) (short) 1, 999999999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 396000000 + "'", int6 == 396000000);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField7.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 14L + "'", long8 == 14L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[1, 1999999998]");
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.util.Date date5 = java.util.Date.from(instant1);
        long long6 = instant1.getEpochSecond();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.with((java.time.temporal.TemporalField) chronoField6, (long) 31);
        java.time.OffsetTime offsetTime9 = offsetDateTime8.toOffsetTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime11 = offsetDateTime8.withDayOfYear(437000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 437000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetTime9);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        float float9 = byteBuffer6.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer6.putChar('\r');
        java.nio.LongBuffer longBuffer12 = byteBuffer11.asLongBuffer();
        java.nio.LongBuffer longBuffer13 = longBuffer2.put(longBuffer12);
        long[] longArray16 = new long[] { 23, (-1L) };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer19 = longBuffer12.put(longArray16, (int) 'G', 33237);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[23, -1]");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.apache.commons.lang3.CharUtils.toIntValue((java.lang.Character) 'M');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The character M is not in the range '0' - '9'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset4.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset4.newEncoder();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder7.replaceWith(byteArray9);
        java.nio.charset.CodingErrorAction codingErrorAction12 = charsetEncoder11.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charsetDecoder1.onUnmappableCharacter(codingErrorAction12);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetDecoder charsetDecoder15 = charsetDecoder1.replaceWith("1 - 53");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(codingErrorAction12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MAX;
        org.junit.Assert.assertNotNull(zoneOffset0);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocate((int) ' ');
        int int15 = byteBuffer14.position();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer17 = byteBuffer16.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = fileChannel11.read(byteBuffer16);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(doubleBuffer17);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.time.Instant instant45 = java.time.Instant.ofEpochSecond((long) ' ');
        boolean boolean46 = strList41.remove((java.lang.Object) ' ');
        java.lang.Object[] objArray47 = strList41.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = strList41.get(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.net.URL uRL0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL2 = new java.net.URL(uRL0, "Minute");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: Minute");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.lang.String str1 = java.net.URLConnection.getDefaultRequestProperty("tsohlacol");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.parse((java.lang.CharSequence) "1969-12-31T23:59:59.999Z");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime3 = offsetDateTime1.plusHours(68618241259163000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 7827931816582");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime1);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.min();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong4 = longStream2.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.lang.String[] strArray0 = java.util.Locale.getISOCountries();
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.function.LongPredicate longPredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = longStream0.noneMatch(longPredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.lang3.CharUtils charUtils0 = new org.apache.commons.lang3.CharUtils();
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime1 = java.time.OffsetTime.parse((java.lang.CharSequence) "en_GB");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'en_GB' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt13 = intStream12.min();
        java.lang.String str14 = optionalInt13.toString();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        boolean boolean17 = optionalInt13.equals((java.lang.Object) localDate16);
        int int19 = optionalInt13.orElse(59);
        java.util.stream.IntStream intStream21 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt22 = intStream21.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = ofInt22.trySplit();
        java.util.stream.IntStream.Builder builder24 = java.util.stream.IntStream.builder();
        ofInt22.forEachRemaining((java.util.function.IntConsumer) builder24);
        optionalInt13.ifPresent((java.util.function.IntConsumer) builder24);
        boolean boolean27 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder24);
        java.util.Spliterator<java.lang.Integer> intSpliterator28 = ofInt2.trySplit();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<java.lang.Integer> intSpliterator29 = intSpliterator28.trySplit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(optionalInt13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalInt[10]" + "'", str14, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertNotNull(ofInt22);
        org.junit.Assert.assertNull(intSpliterator23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(intSpliterator28);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        char char1 = org.apache.commons.lang3.CharUtils.toChar((java.lang.Character) 'u');
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'u' + "'", char1 == 'u');
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("\u4e2d\u6587", 32);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u6587               " + "'", str2, "\u4e2d\u6587               ");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.min();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream2.skip((long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        long[] longArray1 = new long[] { '-' };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer4 = java.nio.LongBuffer.wrap(longArray1, 12, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[45]");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        java.nio.charset.CodingErrorAction codingErrorAction3 = charsetDecoder1.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction4 = charsetDecoder1.unmappableCharacterAction();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(codingErrorAction4);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime11.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime16 = zonedDateTime11.withHour(16384);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 16384");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.util.concurrent.TimeUnit timeUnit1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.attribute.FileTime fileTime2 = java.nio.file.attribute.FileTime.from(1434414441700000L, timeUnit1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: unit");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator5 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator6 = intUnaryOperator4.compose(intUnaryOperator5);
        int int8 = intUnaryOperator6.applyAsInt(385000000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = intStream3.map(intUnaryOperator6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intUnaryOperator5);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 385000000 + "'", int8 == 385000000);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        java.nio.CharBuffer charBuffer4 = charBuffer2.duplicate();
        char[] charArray12 = new char[] { 'a', '#', '4', '#' };
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsAny("", charArray12);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray12);
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray12);
        int int16 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer4, charArray12);
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.wrap(charArray12);
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray12);
        java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.wrap(charArray12);
        java.time.LocalDate localDate20 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery21 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period22 = localDate20.query(periodTemporalQuery21);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period23 = dateTimeFormatter0.parse((java.lang.CharSequence) charBuffer19, periodTemporalQuery21);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'a#4#' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodTemporalQuery21);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        boolean boolean13 = fileChannel11.isOpen();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int16 = fileChannel11.read(byteBuffer15);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.function.LongConsumer longConsumer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            longStream3.forEach(longConsumer4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer13 = byteBuffer7.put(722000000, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.minusNanos((long) (short) 100);
        java.time.Duration duration8 = java.time.Duration.ZERO;
        boolean boolean10 = duration8.equals((java.lang.Object) (short) 0);
        java.time.Duration duration11 = duration8.abs();
        java.time.Duration duration13 = duration11.plusMinutes((long) 'G');
        java.time.Duration duration15 = duration11.plusSeconds((long) 64);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime16 = localDateTime7.plus((java.time.temporal.TemporalAmount) duration15);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        boolean boolean3 = intStream1.isParallel();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream5 = intStream4.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.MIN;
        org.junit.Assert.assertNotNull(offsetDateTime0);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.Instant instant24 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.Clock clock29 = java.time.Clock.fixed(instant24, (java.time.ZoneId) zoneOffset27);
        java.time.LocalTime localTime30 = java.time.LocalTime.now(clock29);
        java.time.LocalTime localTime32 = localTime30.plusHours((long) 16384);
        java.time.LocalTime localTime34 = localTime30.minusNanos(0L);
        java.time.LocalDate localDate35 = java.time.LocalDate.now();
        java.time.LocalDate localDate36 = java.time.LocalDate.MIN;
        boolean boolean37 = localDate35.isEqual((java.time.chrono.ChronoLocalDate) localDate36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean39 = localDate36.isSupported((java.time.temporal.TemporalField) chronoField38);
        java.time.OffsetTime offsetTime40 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime42 = offsetTime40.withSecond(16);
        java.time.OffsetDateTime offsetDateTime43 = localDate36.atTime(offsetTime42);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        int int49 = localDateTime44.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime45);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        int int54 = localDateTime45.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        int int60 = localDateTime55.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime56);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        int int65 = localDateTime56.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        boolean boolean66 = localDateTime45.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        int int72 = localDateTime67.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime68);
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime76 = localDateTime73.atOffset(zoneOffset75);
        boolean boolean77 = localDateTime67.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime73);
        boolean boolean78 = localDateTime61.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime73);
        java.time.LocalDate localDate79 = localDateTime61.toLocalDate();
        java.time.LocalDate localDate80 = java.time.LocalDate.now();
        java.time.LocalDate localDate81 = java.time.LocalDate.MIN;
        boolean boolean82 = localDate80.isEqual((java.time.chrono.ChronoLocalDate) localDate81);
        java.time.temporal.ChronoField chronoField83 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean84 = localDate81.isSupported((java.time.temporal.TemporalField) chronoField83);
        int int85 = localDate81.getDayOfYear();
        int int86 = localDate79.compareTo((java.time.chrono.ChronoLocalDate) localDate81);
        java.time.Period period87 = localDate36.until((java.time.chrono.ChronoLocalDate) localDate81);
        java.time.temporal.ChronoField chronoField89 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit90 = chronoField89.getBaseUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate91 = localDate36.plus(999999999L, temporalUnit90);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = localDateTime17.until((java.time.temporal.Temporal) localTime30, temporalUnit90);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 00:00:32 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField38.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(offsetTime40);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + chronoField83 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField83.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1999999998 + "'", int86 == 1999999998);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + chronoField89 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField89.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit90 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit90.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(chronoLocalDate91);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        java.nio.charset.CodingErrorAction codingErrorAction3 = charsetDecoder1.malformedInputAction();
        java.nio.ByteBuffer byteBuffer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer5 = charsetDecoder1.decode(byteBuffer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(codingErrorAction3);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long30 = zonedDateTime27.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = zonedDateTime27.query(periodTemporalQuery31);
        boolean boolean33 = zonedDateTime11.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime27);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime35 = zonedDateTime27.withHour(59);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 59");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999999999L + "'", long30 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.time.Duration duration1 = java.time.Duration.ofSeconds((long) (short) 1);
        java.time.Duration duration3 = duration1.withSeconds((long) 'G');
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit6 = chronoField5.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration7 = duration1.plus((long) 781000000, temporalUnit6);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField5.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit6 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit6.equals(java.time.temporal.ChronoUnit.WEEKS));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.net.UnknownHostException unknownHostException1 = new java.net.UnknownHostException("ZoneRules[currentStandardOffset=Z]");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        java.io.File file4 = file1.getCanonicalFile();
        java.io.File file5 = file1.getParentFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream6 = new java.io.PrintStream(file1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: GBR (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/experiment/GBR");
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", 'a');
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.util.Locale.FilteringMode filteringMode0 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        org.junit.Assert.assertTrue("'" + filteringMode0 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode0.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.net.URLConnection.setDefaultAllowUserInteraction(false);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        org.junit.Assert.assertNotNull(localDateTime0);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiAlphaLower('G');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer26 = charBuffer25.flip();
        java.nio.CharBuffer charBuffer27 = charBuffer25.duplicate();
        char[] charArray35 = new char[] { 'a', '#', '4', '#' };
        boolean boolean36 = org.apache.commons.lang3.StringUtils.containsAny("", charArray35);
        boolean boolean37 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray35);
        boolean boolean38 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray35);
        int int39 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer27, charArray35);
        boolean boolean40 = charBuffer27.isDirect();
        java.nio.CharBuffer charBuffer41 = charBuffer22.append((java.lang.CharSequence) charBuffer27);
        java.nio.CharBuffer charBuffer42 = org.apache.commons.lang3.StringUtils.defaultIfEmpty(charBuffer6, charBuffer41);
        java.nio.CharBuffer charBuffer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer44 = charBuffer41.put(charBuffer43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.net.URI uRI1 = java.net.URI.create("\u4e0b\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(uRI1);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.function.LongConsumer longConsumer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            longStream0.forEachOrdered(longConsumer1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.time.Instant instant1 = java.time.Instant.ofEpochMilli((long) 834000000);
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant5 = instant3.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime6 = java.nio.file.attribute.FileTime.from(instant3);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery7 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period8 = instant3.query(periodTemporalQuery7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit10 = chronoField9.getBaseUnit();
        boolean boolean11 = instant3.isSupported(temporalUnit10);
        java.time.Instant instant13 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant15 = instant13.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = java.time.ZonedDateTime.ofInstant(instant13, (java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.time.Clock clock23 = java.time.Clock.fixed(instant3, zoneId22);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset28);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset28.getRules();
        java.time.OffsetDateTime offsetDateTime32 = instant3.atOffset(zoneOffset28);
        java.time.Instant instant34 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant36 = instant34.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime37 = java.nio.file.attribute.FileTime.from(instant34);
        java.time.Instant instant39 = instant34.plusMillis((long) 10);
        boolean boolean40 = instant3.isAfter(instant34);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime44.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.zone.ZoneRules zoneRules51 = zoneOffset49.getRules();
        java.time.ZonedDateTime zonedDateTime52 = offsetDateTime44.atZoneSameInstant((java.time.ZoneId) zoneOffset49);
        int int53 = zonedDateTime52.getDayOfMonth();
        int int54 = zonedDateTime52.getHour();
        java.time.ZonedDateTime zonedDateTime56 = zonedDateTime52.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.OffsetDateTime offsetDateTime62 = offsetDateTime60.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.zone.ZoneRules zoneRules67 = zoneOffset65.getRules();
        java.time.ZonedDateTime zonedDateTime68 = offsetDateTime60.atZoneSameInstant((java.time.ZoneId) zoneOffset65);
        java.time.ZonedDateTime zonedDateTime69 = zonedDateTime68.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long71 = zonedDateTime68.getLong((java.time.temporal.TemporalField) chronoField70);
        long long72 = zonedDateTime56.getLong((java.time.temporal.TemporalField) chronoField70);
        int int73 = instant3.get((java.time.temporal.TemporalField) chronoField70);
        int int74 = instant1.get((java.time.temporal.TemporalField) chronoField70);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertNotNull(periodTemporalQuery7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField9.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit10 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit10.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(fileTime37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 23 + "'", int54 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField70.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 999999999L + "'", long71 == 999999999L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 999999999L + "'", long72 == 999999999L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.Period period7 = java.time.Period.from((java.time.temporal.TemporalAmount) period6);
        java.time.Period period9 = period6.withDays(4);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer21 = byteBuffer20.asLongBuffer();
        java.nio.LongBuffer longBuffer23 = longBuffer21.put(0L);
        java.time.LocalTime localTime24 = java.time.LocalTime.now();
        int int25 = localTime24.getNano();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long27 = localTime24.getLong((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime31.withSecond((int) (byte) 0);
        boolean boolean34 = chronoField26.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime31);
        boolean boolean35 = longBuffer23.equals((java.lang.Object) chronoField26);
        java.lang.String str36 = chronoField26.toString();
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField26.getRangeUnit();
        java.time.temporal.ValueRange valueRange38 = offsetDateTime18.range((java.time.temporal.TemporalField) chronoField26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal40 = zonedDateTime11.with((java.time.temporal.TemporalField) chronoField26, (long) 33237);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 33237");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(longBuffer21);
        org.junit.Assert.assertNotNull(longBuffer23);
        org.junit.Assert.assertNotNull(localTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 402000000 + "'", int25 == 402000000);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField26.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 14L + "'", long27 == 14L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "MinuteOfHour" + "'", str36, "MinuteOfHour");
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(valueRange38);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("\u4e2d\u56fd", 3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        boolean boolean13 = fileChannel11.isOpen();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        int int16 = byteBuffer15.position();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = fileChannel11.write(byteBuffer17);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong5 = longStream4.max();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        boolean boolean3 = intStream1.isParallel();
        java.util.function.IntBinaryOperator intBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt5 = intStream1.reduce(intBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.util.Map<java.lang.String, java.lang.String> strMap1 = java.time.ZoneId.SHORT_IDS;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId2 = java.time.ZoneId.of("DIRECT", strMap1);
            org.junit.Assert.fail("Expected exception of type java.time.zone.ZoneRulesException; message: Unknown time-zone ID: DIRECT");
        } catch (java.time.zone.ZoneRulesException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap1);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.OptionalLong optionalLong1 = longStream0.max();
        java.util.function.LongBinaryOperator longBinaryOperator2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong3 = longStream0.reduce(longBinaryOperator2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(optionalLong1);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        long long3 = doubleStream2.count();
        // The following exception was thrown during execution in test generation
        try {
            java.util.DoubleSummaryStatistics doubleSummaryStatistics4 = doubleStream2.summaryStatistics();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.util.function.LongUnaryOperator longUnaryOperator1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream2 = java.util.stream.LongStream.iterate((long) 5, longUnaryOperator1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = instant1.isSupported(temporalUnit8);
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant13 = instant11.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.ZoneId zoneId20 = zonedDateTime19.getZone();
        java.time.Clock clock21 = java.time.Clock.fixed(instant1, zoneId20);
        java.time.LocalTime localTime22 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime24 = localTime22.plusHours((long) 16384);
        java.time.LocalTime localTime26 = localTime22.plusMinutes(0L);
        boolean boolean27 = clock21.equals((java.lang.Object) localTime22);
        java.time.LocalTime localTime28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = localTime22.isAfter(localTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = chronoField4.getDisplayName(locale5);
        java.lang.String str8 = locale0.getDisplayCountry(locale5);
        java.lang.String str9 = locale0.getDisplayLanguage();
        java.lang.String str10 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GBR" + "'", str1, "GBR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Minute" + "'", str7, "Minute");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "United Kingdom" + "'", str8, "United Kingdom");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u82f1\u6587" + "'", str9, "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u82f1\u6587" + "'", str10, "\u82f1\u6587");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("Eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setRegion("Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.security.GeneralSecurityException generalSecurityException0 = new java.security.GeneralSecurityException();
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.util.Locale.FilteringMode filteringMode0 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        org.junit.Assert.assertTrue("'" + filteringMode0 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode0.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        boolean boolean4 = codeSource2.equals((java.lang.Object) 4);
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.LocalTime localTime12 = java.time.LocalTime.now(clock11);
        java.time.LocalTime localTime14 = localTime12.plusHours((long) 16384);
        java.time.LocalTime localTime16 = localTime12.minusNanos(0L);
        boolean boolean17 = codeSource2.equals((java.lang.Object) localTime16);
        java.time.LocalTime localTime19 = localTime16.withNano(861000000);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime21 = localTime19.withSecond(385000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 385000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.util.Locale locale1 = java.util.Locale.ITALY;
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ofPattern("DIRECT", locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        char[] charArray19 = new char[] { 'a', '#', '4', '#' };
        boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny("", charArray19);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray19);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray19);
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer11, charArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer26 = byteBuffer25.asLongBuffer();
        java.nio.charset.CoderResult coderResult28 = charsetEncoder7.encode(charBuffer11, byteBuffer25, false);
        java.nio.charset.CodingErrorAction codingErrorAction29 = charsetEncoder7.malformedInputAction();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertNotNull(coderResult28);
        org.junit.Assert.assertNotNull(codingErrorAction29);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("English (United Kingdom)");
        java.security.PrivilegedActionException privilegedActionException2 = new java.security.PrivilegedActionException((java.lang.Exception) unsupportedEncodingException1);
        java.lang.Exception exception3 = privilegedActionException2.getException();
        org.junit.Assert.assertNotNull(exception3);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("localhost", (int) (short) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "localhost" + "'", str2, "localhost");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.lang.String str7 = uRI6.getSchemeSpecificPart();
        java.lang.String str8 = uRI6.getPath();
        java.lang.String str9 = uRI6.getPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/GBR/" + "'", str7, "/experiment/GBR/");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/experiment/GBR/" + "'", str8, "/experiment/GBR/");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/GBR/" + "'", str9, "/experiment/GBR/");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDateTime localDateTime36 = localDateTime6.minusWeeks((long) (short) 0);
        java.time.DayOfWeek dayOfWeek37 = localDateTime6.getDayOfWeek();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime38 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = localDateTime6.isBefore(localDateChronoLocalDateTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + dayOfWeek37 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek37.equals(java.time.DayOfWeek.FRIDAY));
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.lang.String str6 = date5.toGMTString();
        long long7 = date5.getTime();
        java.lang.String str8 = date5.toString();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str6, "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32000L + "'", long7 == 32000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Thu Jan 01 00:00:32 UTC 1970" + "'", str8, "Thu Jan 01 00:00:32 UTC 1970");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.net.SocketException socketException0 = new java.net.SocketException();
        java.security.cert.CertificateEncodingException certificateEncodingException1 = new java.security.cert.CertificateEncodingException((java.lang.Throwable) socketException0);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.time.chrono.Chronology chronology2 = java.time.chrono.Chronology.ofLocale(locale0);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.ZonedDateTime zonedDateTime14 = offsetDateTime6.atZoneSameInstant((java.time.ZoneId) zoneOffset11);
        java.time.ZoneId zoneId15 = zonedDateTime14.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime16 = zonedDateTime14.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = offsetDateTime20.atZoneSameInstant((java.time.ZoneId) zoneOffset25);
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime28.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long31 = zonedDateTime28.getLong((java.time.temporal.TemporalField) chronoField30);
        long long32 = zonedDateTime14.getLong((java.time.temporal.TemporalField) chronoField30);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime14.minusSeconds((long) 999999999);
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime35 = chronology2.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime34);
        int int36 = zonedDateTime34.getMonthValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 999999999L + "'", long31 == 999999999L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 999999999L + "'", long32 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        float[] floatArray9 = new float[] { 999999999, 17488, 227000000 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer12 = floatBuffer3.get(floatArray9, (int) 'M', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[1.0E9, 17488.0, 2.27E8]");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.chrono.Chronology chronology20 = localDateTime0.getChronology();
        java.time.temporal.ChronoField chronoField21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange22 = chronology20.range(chronoField21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        java.util.function.LongToDoubleFunction longToDoubleFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream6 = longStream0.mapToDouble(longToDoubleFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.min();
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray4 = longStream2.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime3.minusMinutes((long) 100);
        java.time.Instant instant13 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.Clock clock18 = java.time.Clock.fixed(instant13, (java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime19 = offsetDateTime11.atZoneSameInstant((java.time.ZoneId) zoneOffset16);
        java.time.LocalTime localTime20 = java.time.LocalTime.now();
        int int21 = localTime20.getNano();
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long23 = localTime20.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean24 = chronoField22.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = zoneOffset16.get((java.time.temporal.TemporalField) chronoField22);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MinuteOfHour");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(localTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 557000000 + "'", int21 == 557000000);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField22.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 14L + "'", long23 == 14L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        char char1 = org.apache.commons.lang3.CharUtils.toChar("MicroOfSecond");
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'M' + "'", char1 == 'M');
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        char char0 = java.io.File.separatorChar;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + '/' + "'", char0 == '/');
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str1, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("", "CHN", 23);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit13 = null;
        boolean boolean14 = zonedDateTime12.isSupported(temporalUnit13);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.plusYears((long) (-7));
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime18 = zonedDateTime12.withMonth((int) 'G');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 71");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zonedDateTime16);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "zh-CN");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay(0L);
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) (-7));
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.Clock clock8 = java.time.Clock.fixed(instant3, (java.time.ZoneId) zoneOffset6);
        java.time.LocalTime localTime9 = java.time.LocalTime.now(clock8);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        boolean boolean12 = duration10.equals((java.lang.Object) (short) 0);
        java.time.Duration duration13 = duration10.abs();
        java.time.LocalTime localTime14 = localTime9.plus((java.time.temporal.TemporalAmount) duration13);
        boolean boolean15 = instant1.equals((java.lang.Object) localTime14);
        java.time.LocalTime localTime17 = localTime14.plusMinutes(10L);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(clock8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt6 = intStream5.min();
        java.util.stream.IntStream intStream7 = intStream5.sequential();
        java.util.stream.IntStream intStream8 = intStream5.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = java.util.stream.IntStream.concat(intStream3, intStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(optionalInt6);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intStream8);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("etuniM", "CHN", "OptionalLong.empty");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        char[] charArray21 = new char[] { 'a', '#', '4', '#' };
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsAny("", charArray21);
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray21);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray21);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap26 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap26.getOrDefault((java.lang.Object) 1.0d, zoneRules32);
        java.lang.String str34 = zoneRules32.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = zoneRules32.getTransitions();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap1.getOrDefault((java.lang.Object) charArray21, zoneRules32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.ZonedDateTime zonedDateTime48 = offsetDateTime40.atZoneSameInstant((java.time.ZoneId) zoneOffset45);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime48.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long51 = zonedDateTime48.getLong((java.time.temporal.TemporalField) chronoField50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery52 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period53 = zonedDateTime48.query(periodTemporalQuery52);
        java.time.ZoneId zoneId54 = zonedDateTime48.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap56 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.zone.ZoneRules zoneRules62 = zoneOffset60.getRules();
        java.time.zone.ZoneRules zoneRules63 = zoneIdMap56.getOrDefault((java.lang.Object) 1.0d, zoneRules62);
        java.time.zone.ZoneRules zoneRules64 = zoneIdMap1.put(zoneId54, zoneRules63);
        float[] floatArray67 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer68 = java.nio.FloatBuffer.wrap(floatArray67);
        java.nio.FloatBuffer floatBuffer69 = floatBuffer68.compact();
        java.time.zone.ZoneRules zoneRules70 = zoneIdMap1.get((java.lang.Object) floatBuffer69);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str34, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField50.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 999999999L + "'", long51 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zoneRules64);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer68);
        org.junit.Assert.assertNotNull(floatBuffer69);
        org.junit.Assert.assertNull(zoneRules70);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putInt(41, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        java.nio.IntBuffer intBuffer12 = intBuffer11.asReadOnlyBuffer();
        int[] intArray13 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer16 = intBuffer11.put(intArray13, 0, (int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("\u4e2d\u6587", (int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u6587" + "'", str2, "\u4e2d\u6587");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.lang.String str0 = java.io.File.separator;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "/" + "'", str0, "/");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.time.LocalTime localTime1 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        java.time.Month month2 = java.time.Month.OCTOBER;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime3 = localTime1.with((java.time.temporal.TemporalAdjuster) month2);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MonthOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.OCTOBER + "'", month2.equals(java.time.Month.OCTOBER));
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.Month month7 = localDate6.getMonth();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = offsetDateTime11.atZoneSameInstant((java.time.ZoneId) zoneOffset16);
        int int20 = zonedDateTime19.getDayOfMonth();
        int int21 = zonedDateTime19.getHour();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime19.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.ZonedDateTime zonedDateTime35 = offsetDateTime27.atZoneSameInstant((java.time.ZoneId) zoneOffset32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime35.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long38 = zonedDateTime35.getLong((java.time.temporal.TemporalField) chronoField37);
        long long39 = zonedDateTime23.getLong((java.time.temporal.TemporalField) chronoField37);
        boolean boolean40 = month7.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField37.getRangeUnit();
        boolean boolean42 = chronoField37.isTimeBased();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.DECEMBER + "'", month7.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField37.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 999999999L + "'", long38 == 999999999L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 999999999L + "'", long39 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("-999999999-01-01", 1, '/');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-999999999-01-01" + "'", str3, "-999999999-01-01");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = charBuffer1.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer5 = charBuffer1.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        boolean boolean76 = inetAddress72.isMCLinkLocal();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.time.LocalTime localTime0 = java.time.LocalTime.NOON;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit2 = chronoField1.getBaseUnit();
        boolean boolean3 = localTime0.isSupported(temporalUnit2);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.Clock clock10 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset8);
        java.time.LocalTime localTime11 = java.time.LocalTime.now(clock10);
        java.time.LocalTime localTime13 = localTime11.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean15 = localTime13.isSupported((java.time.temporal.TemporalField) chronoField14);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime17 = localTime0.with((java.time.temporal.TemporalField) chronoField14, (long) 385000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfAmPm (valid values 0 - 11): 385000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField1.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit2 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit2.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(clock10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField14.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        int int0 = java.util.Spliterator.IMMUTABLE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1024 + "'", int0 == 1024);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.OptionalLong optionalLong1 = longStream0.max();
        // The following exception was thrown during execution in test generation
        try {
            long long2 = optionalLong1.getAsLong();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(optionalLong1);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        int int0 = java.util.Spliterator.CONCURRENT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4096 + "'", int0 == 4096);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime44 = offsetTime42.withSecond(413000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 413000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap12 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.zone.ZoneRules zoneRules19 = zoneIdMap12.getOrDefault((java.lang.Object) 1.0d, zoneRules18);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset24);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.lang.String str36 = zoneRules34.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = zoneRules34.getTransitions();
        java.time.zone.ZoneRules zoneRules38 = zoneIdMap12.putIfAbsent((java.time.ZoneId) zoneOffset24, zoneRules34);
        java.time.Clock clock39 = java.time.Clock.systemUTC();
        java.time.Instant instant40 = clock39.instant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition41 = zoneRules34.nextTransition(instant40);
        java.util.Locale locale42 = java.util.Locale.US;
        boolean boolean43 = zoneRules34.equals((java.lang.Object) locale42);
        java.time.Instant instant45 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant47 = instant45.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime48 = java.nio.file.attribute.FileTime.from(instant45);
        java.time.ZoneOffset zoneOffset49 = zoneRules34.getOffset(instant45);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime53.withSecond((int) (byte) 0);
        int int56 = offsetDateTime55.getMinute();
        java.time.ZoneOffset zoneOffset57 = offsetDateTime55.getOffset();
        java.time.OffsetDateTime offsetDateTime58 = instant45.atOffset(zoneOffset57);
        long long59 = localDateTime1.toEpochSecond(zoneOffset57);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str36, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList37);
        org.junit.Assert.assertNull(zoneRules38);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNull(zoneOffsetTransition41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(fileTime48);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 59 + "'", int56 == 59);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 31556889832780799L + "'", long59 == 31556889832780799L);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.lang.String str6 = date5.toGMTString();
        long long7 = date5.getTime();
        int int8 = date5.getDate();
        long long9 = date5.getTime();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str6, "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32000L + "'", long7 == 32000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32000L + "'", long9 == 32000L);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.io.IOException iOException0 = new java.io.IOException();
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("/experiment/GBR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: /experiment/GBR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.chrono.Chronology chronology20 = localDateTime0.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.ISO_TIME;
        java.lang.String str22 = localDateTime0.format(dateTimeFormatter21);
        java.time.LocalTime localTime23 = java.time.LocalTime.now();
        java.time.LocalTime localTime25 = localTime23.plusHours(0L);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        java.time.temporal.ValueRange valueRange28 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        int int41 = zonedDateTime40.getDayOfMonth();
        int int42 = zonedDateTime40.getHour();
        java.time.Instant instant43 = zonedDateTime40.toInstant();
        long long44 = chronoField26.getFrom((java.time.temporal.TemporalAccessor) instant43);
        java.time.LocalTime localTime45 = java.time.LocalTime.now();
        int int46 = localTime45.getNano();
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long48 = localTime45.getLong((java.time.temporal.TemporalField) chronoField47);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        java.time.OffsetDateTime offsetDateTime54 = offsetDateTime52.withSecond((int) (byte) 0);
        boolean boolean55 = chronoField47.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime52);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.OffsetDateTime offsetDateTime62 = offsetDateTime60.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime64 = offsetDateTime60.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset70);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField74.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime76 = localDateTime72.minus((long) (-999999999), temporalUnit75);
        java.lang.String str77 = temporalUnit75.toString();
        java.time.OffsetDateTime offsetDateTime78 = offsetDateTime64.plus((long) (byte) 100, temporalUnit75);
        java.time.OffsetDateTime offsetDateTime80 = offsetDateTime64.plusWeeks((long) '4');
        java.time.temporal.ValueRange valueRange81 = chronoField56.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime80);
        java.time.temporal.ChronoField chronoField82 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime83 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate84 = localDateTime83.toLocalDate();
        java.time.LocalDateTime localDateTime86 = localDateTime83.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange87 = chronoField82.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime83);
        java.time.temporal.ChronoField chronoField88 = java.time.temporal.ChronoField.ERA;
        java.time.temporal.TemporalField[] temporalFieldArray89 = new java.time.temporal.TemporalField[] { chronoField26, chronoField47, chronoField56, chronoField82, chronoField88 };
        java.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter21.withResolverFields(temporalFieldArray89);
        java.util.Set<java.time.temporal.TemporalField> temporalFieldSet91 = dateTimeFormatter21.getResolverFields();
        java.time.format.DateTimeFormatter dateTimeFormatter92 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology93 = dateTimeFormatter92.getChronology();
        java.time.format.TextStyle textStyle94 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale95 = java.util.Locale.UK;
        java.lang.String str96 = locale95.getISO3Language();
        java.time.format.DecimalStyle decimalStyle97 = java.time.format.DecimalStyle.of(locale95);
        java.lang.String str98 = chronology93.getDisplayName(textStyle94, locale95);
        java.time.format.DateTimeFormatter dateTimeFormatter99 = dateTimeFormatter21.withChronology(chronology93);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "23:59:59.999999999" + "'", str22, "23:59:59.999999999");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField26.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 23 + "'", int42 == 23);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999L + "'", long44 == 999999L);
        org.junit.Assert.assertNotNull(localTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 284000000 + "'", int46 == 284000000);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField47.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 14L + "'", long48 == 14L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField56.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField74.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Weeks" + "'", str77, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(valueRange81);
        org.junit.Assert.assertTrue("'" + chronoField82 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField82.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(valueRange87);
        org.junit.Assert.assertTrue("'" + chronoField88 + "' != '" + java.time.temporal.ChronoField.ERA + "'", chronoField88.equals(java.time.temporal.ChronoField.ERA));
        org.junit.Assert.assertNotNull(temporalFieldArray89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNull(temporalFieldSet91);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + textStyle94 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle94.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "eng" + "'", str96, "eng");
        org.junit.Assert.assertNotNull(decimalStyle97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "ISO" + "'", str98, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter99);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate37 = localDate35.minusWeeks((long) (short) 1);
        long long38 = localDate37.toEpochDay();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate40 = localDate37.withMonth(999999999);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 999999999");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 365241780464L + "'", long38 == 365241780464L);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream1 = builder0.build();
        java.util.function.DoublePredicate doublePredicate2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream3 = doubleStream1.filter(doublePredicate2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.function.LongPredicate longPredicate1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream2 = longStream0.filter(longPredicate1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalDate localDate9 = localDate1.plusYears(4096L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime10 = java.time.OffsetTime.from((java.time.temporal.TemporalAccessor) localDate9);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetTime from TemporalAccessor: -999995903-01-01 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.time.ZoneId zoneId2 = clock0.getZone();
        java.time.ZoneId zoneId3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Clock clock4 = clock0.withZone(zoneId3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneId2);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt4 = intStream3.max();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.ShortBuffer shortBuffer11 = byteBuffer7.asShortBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer14 = byteBuffer7.putDouble((int) '4', (double) 653000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortBuffer11);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.lang.String str7 = path6.toString();
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        boolean boolean15 = path6.equals((java.lang.Object) instant9);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str7, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("US-ASCII", "MINUTEMINU");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "S-ASCII" + "'", str2, "S-ASCII");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit13 = null;
        boolean boolean14 = zonedDateTime12.isSupported(temporalUnit13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.withSecond((int) (byte) 0);
        java.time.LocalDate localDate21 = offsetDateTime18.toLocalDate();
        java.time.LocalDate localDate23 = localDate21.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.ZonedDateTime zonedDateTime35 = offsetDateTime27.atZoneSameInstant((java.time.ZoneId) zoneOffset32);
        java.time.LocalTime localTime36 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.zone.ZoneRules zoneRules41 = zoneOffset39.getRules();
        java.time.ZonedDateTime zonedDateTime42 = java.time.ZonedDateTime.of(localDate21, localTime36, (java.time.ZoneId) zoneOffset39);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime43 = zonedDateTime12.withZoneSameInstant((java.time.ZoneId) zoneOffset39);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime45 = zonedDateTime12.plusNanos((long) '-');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime43);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        java.io.File file8 = file1.getAbsoluteFile();
        java.io.File file10 = new java.io.File("GBR");
        boolean boolean12 = file10.setWritable(true);
        int int13 = file1.compareTo(file10);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/GBR");
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.text.ParsePosition parsePosition2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor3 = dateTimeFormatter0.parse((java.lang.CharSequence) "localhost", parsePosition2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: position");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(834000000);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.security.ProtectionDomain[] protectionDomainArray0 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext1 = new java.security.AccessControlContext(protectionDomainArray0);
        java.time.LocalDate localDate2 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = localDate2.query(periodTemporalQuery3);
        boolean boolean5 = accessControlContext1.equals((java.lang.Object) periodTemporalQuery3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = offsetDateTime9.atZoneSameInstant((java.time.ZoneId) zoneOffset14);
        int int18 = zonedDateTime17.getDayOfMonth();
        int int19 = zonedDateTime17.getHour();
        int int20 = zonedDateTime17.getSecond();
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime17.withDayOfYear((int) 'x');
        boolean boolean23 = accessControlContext1.equals((java.lang.Object) zonedDateTime22);
        org.junit.Assert.assertNotNull(protectionDomainArray0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("eng", 284000000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.SUNDAY;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.Month month5 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime7.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime18 = localDateTime12.withHour(4);
        int int19 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDate localDate20 = localDateTime1.toLocalDate();
        java.time.Instant instant22 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.Clock clock27 = java.time.Clock.fixed(instant22, (java.time.ZoneId) zoneOffset25);
        java.time.LocalTime localTime28 = java.time.LocalTime.now(clock27);
        java.time.LocalTime localTime30 = localTime28.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.of(localDate20, localTime30);
        java.time.LocalTime localTime33 = localTime30.plusNanos(13L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal34 = dayOfWeek0.adjustInto((java.time.temporal.Temporal) localTime30);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: DayOfWeek");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.SUNDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.SUNDAY));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.DECEMBER + "'", month5.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer4 = charBuffer3.flip();
        int int5 = charBuffer3.capacity();
        boolean boolean6 = charBuffer3.hasArray();
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer9 = charBuffer8.flip();
        java.nio.CharBuffer charBuffer10 = charBuffer8.duplicate();
        java.nio.CharBuffer charBuffer11 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer3, charBuffer10);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.formatTo((java.time.temporal.TemporalAccessor) localDateTime1, (java.lang.Appendable) charBuffer3);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(buffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.util.Locale.setDefault(locale13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset20);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset20.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap1.getOrDefault((java.lang.Object) locale13, zoneRules23);
        float[] floatArray27 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer28 = java.nio.FloatBuffer.wrap(floatArray27);
        java.nio.FloatBuffer floatBuffer29 = floatBuffer28.compact();
        boolean boolean30 = zoneRules24.equals((java.lang.Object) floatBuffer28);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer33 = floatBuffer28.put((int) '\uffff', (float) 999999998);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GBR" + "'", str12, "GBR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertNotNull(floatBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        boolean boolean8 = longBuffer7.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        java.util.Spliterator.OfDouble ofDouble4 = ofDouble3.trySplit();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfDouble ofDouble5 = ofDouble4.trySplit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertNull(ofDouble4);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        boolean boolean5 = file1.setReadOnly();
        boolean boolean7 = file1.setLastModified((long) ' ');
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, (-999999999), (int) 'a', 0, 31, 4);
        date6.setTime((long) 10);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.io.File file7 = new java.io.File("GBR");
        boolean boolean9 = file7.setExecutable(true);
        java.io.File file10 = file7.getCanonicalFile();
        java.io.File file11 = file7.getParentFile();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = file1.compareTo(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment/GBR");
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.time.Period period1 = java.time.Period.ofDays((-7));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        int int6 = offsetDateTime5.getMinute();
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime5.plusNanos((long) 227000000);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.withSecond((int) (byte) 0);
        java.time.LocalDate localDate15 = offsetDateTime12.toLocalDate();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = offsetDateTime12.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.temporal.ValueRange valueRange19 = offsetDateTime8.range((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime20 = offsetDateTime8.toLocalTime();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        int int33 = zonedDateTime32.getDayOfMonth();
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.ZonedDateTime zonedDateTime45 = offsetDateTime37.atZoneSameInstant((java.time.ZoneId) zoneOffset42);
        java.time.ZonedDateTime zonedDateTime46 = zonedDateTime45.withLaterOffsetAtOverlap();
        boolean boolean47 = zonedDateTime32.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime46);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.UTC;
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime49 = zonedDateTime46.withZoneSameInstant((java.time.ZoneId) zoneOffset48);
        java.time.Clock clock50 = java.time.Clock.system((java.time.ZoneId) zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime8.withOffsetSameInstant(zoneOffset48);
        int int52 = offsetDateTime8.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime49);
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 365 + "'", int52 == 365);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.stream.Stream<java.lang.Long> longStream4 = longStream3.boxed();
        java.util.function.LongPredicate longPredicate5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = longStream3.filter(longPredicate5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.LocalDate localDate5 = java.time.LocalDate.now();
        java.time.LocalDate localDate6 = java.time.LocalDate.MIN;
        boolean boolean7 = localDate5.isEqual((java.time.chrono.ChronoLocalDate) localDate6);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean9 = localDate6.isSupported((java.time.temporal.TemporalField) chronoField8);
        boolean boolean10 = decimalStyle4.equals((java.lang.Object) localDate6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = offsetDateTime14.atZoneSameInstant((java.time.ZoneId) zoneOffset19);
        int int23 = zonedDateTime22.getDayOfMonth();
        int int24 = zonedDateTime22.getMinute();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime22.minusWeeks((long) 1);
        long long27 = zonedDateTime26.toEpochSecond();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer30 = byteBuffer29.asLongBuffer();
        java.nio.LongBuffer longBuffer32 = longBuffer30.put(0L);
        java.time.LocalTime localTime33 = java.time.LocalTime.now();
        int int34 = localTime33.getNano();
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long36 = localTime33.getLong((java.time.temporal.TemporalField) chronoField35);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.withSecond((int) (byte) 0);
        boolean boolean43 = chronoField35.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime40);
        boolean boolean44 = longBuffer32.equals((java.lang.Object) chronoField35);
        java.lang.String str45 = chronoField35.toString();
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField35.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = localDate6.until((java.time.temporal.Temporal) zonedDateTime26, temporalUnit46);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Hours");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField8.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 31556889832175999L + "'", long27 == 31556889832175999L);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(longBuffer30);
        org.junit.Assert.assertNotNull(longBuffer32);
        org.junit.Assert.assertNotNull(localTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 190000000 + "'", int34 == 190000000);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField35.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 14L + "'", long36 == 14L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MinuteOfHour" + "'", str45, "MinuteOfHour");
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.HOURS));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Iterator<java.lang.String> strItor14 = strList11.iterator();
        java.util.function.Predicate<java.nio.channels.ByteChannel> byteChannelPredicate15 = java.util.function.Predicate.isEqual((java.lang.Object) strList11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = strList11.set(1999999998, "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1999999998, Size: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(byteChannelPredicate15);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.OffsetDateTime offsetDateTime8 = localDate1.atTime(offsetTime7);
        int int9 = offsetDateTime8.getSecond();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("1969-12-31T23:59:59.999Z", 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str2, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.io.FileNotFoundException fileNotFoundException1 = new java.io.FileNotFoundException("United Kingdom");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException2 = new java.security.NoSuchAlgorithmException((java.lang.Throwable) fileNotFoundException1);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        boolean boolean56 = clock6.equals((java.lang.Object) zoneIdSet46);
        java.time.OffsetTime offsetTime57 = java.time.OffsetTime.now(clock6);
        java.time.OffsetTime offsetTime59 = offsetTime57.plusHours((long) 31);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertNotNull(offsetTime59);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = charBuffer3.hasArray();
        java.nio.CharBuffer charBuffer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = charBuffer3.read(charBuffer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.LocalDate localDate6 = localDate1.plusWeeks((long) 10);
        int int7 = localDate6.lengthOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer18 = byteBuffer17.asLongBuffer();
        short short19 = byteBuffer17.getShort();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putChar('G');
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer24 = byteBuffer23.asLongBuffer();
        short short25 = byteBuffer23.getShort();
        boolean boolean26 = byteBuffer17.equals((java.lang.Object) byteBuffer23);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = fileChannel11.read(byteBuffer23);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(longBuffer24);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer14 = byteBuffer13.asLongBuffer();
        boolean boolean15 = byteBuffer13.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = fileChannel11.read(byteBuffer13);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.OptionalDouble optionalDouble3 = doubleStream1.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = doubleStream1.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray4 = longStream2.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.function.IntPredicate intPredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = intStream3.anyMatch(intPredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("16:00:00");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "16:00:00" + "'", str1, "16:00:00");
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str7 = localDate1.format(dateTimeFormatter6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.text.Format format15 = dateTimeFormatter6.toFormat(periodTemporalQuery13);
        java.security.AccessControlException accessControlException17 = new java.security.AccessControlException("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.Format.Field field19 = null;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition(field19, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = format15.format((java.lang.Object) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", stringBuffer18, fieldPosition21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: toAppendTo");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-999999999-01-01" + "'", str7, "-999999999-01-01");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(format15);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofPattern("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        char[] charArray19 = new char[] { 'a', '#', '4', '#' };
        boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny("", charArray19);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray19);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray19);
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer11, charArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer26 = byteBuffer25.asLongBuffer();
        java.nio.charset.CoderResult coderResult28 = charsetEncoder7.encode(charBuffer11, byteBuffer25, false);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer31 = byteBuffer30.asLongBuffer();
        short short32 = byteBuffer30.getShort();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putChar('G');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CoderResult coderResult35 = charsetEncoder7.flush(byteBuffer34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current state = CODING, new state = FLUSHED");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertNotNull(coderResult28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(longBuffer31);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer34);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer8 = byteBuffer4.put(10000, (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        java.lang.String str3 = codeSource2.toString();
        java.security.PermissionCollection permissionCollection4 = null;
        java.lang.ClassLoader classLoader5 = null;
        java.net.URL uRL6 = null;
        java.security.CodeSigner[] codeSignerArray7 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource8 = new java.security.CodeSource(uRL6, codeSignerArray7);
        java.security.PermissionCollection permissionCollection9 = null;
        java.lang.ClassLoader classLoader10 = null;
        java.security.Principal principal11 = null;
        java.security.Principal[] principalArray12 = new java.security.Principal[] { principal11 };
        java.security.ProtectionDomain protectionDomain13 = new java.security.ProtectionDomain(codeSource8, permissionCollection9, classLoader10, principalArray12);
        java.security.ProtectionDomain protectionDomain14 = new java.security.ProtectionDomain(codeSource2, permissionCollection4, classLoader5, principalArray12);
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(null <no signer certificates>)" + "'", str3, "(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(codeSignerArray7);
        org.junit.Assert.assertNotNull(principalArray12);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.time.Instant instant0 = null;
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap2 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.zone.ZoneRules zoneRules9 = zoneIdMap2.getOrDefault((java.lang.Object) 1.0d, zoneRules8);
        java.util.Set<java.time.ZoneId> zoneIdSet10 = zoneIdMap2.keySet();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.ZoneId zoneId21 = zonedDateTime20.getZone();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset34);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition37 = zoneRules29.getTransition(localDateTime36);
        java.time.zone.ZoneRules zoneRules38 = zoneIdMap2.replace(zoneId21, zoneRules29);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Clock clock39 = java.time.Clock.fixed(instant0, zoneId21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: fixedInstant");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(zoneIdSet10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNull(zoneOffsetTransition37);
        org.junit.Assert.assertNull(zoneRules38);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = java.time.Period.from((java.time.temporal.TemporalAmount) period1);
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str4 = dateTimeFormatter3.toString();
        boolean boolean5 = period2.equals((java.lang.Object) dateTimeFormatter3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.plusNanos((long) (-7));
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime18 = java.nio.file.attribute.FileTime.from(instant15);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = instant15.query(periodTemporalQuery19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        boolean boolean23 = instant15.isSupported(temporalUnit22);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant27 = instant25.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.ofInstant(instant25, (java.time.ZoneId) zoneOffset30);
        java.time.ZoneId zoneId34 = zonedDateTime33.getZone();
        java.time.Clock clock35 = java.time.Clock.fixed(instant15, zoneId34);
        java.time.ZonedDateTime zonedDateTime36 = offsetDateTime11.atZoneSimilarLocal(zoneId34);
        java.time.temporal.Temporal temporal37 = period2.addTo((java.time.temporal.Temporal) zonedDateTime36);
        java.time.chrono.ChronoPeriod chronoPeriod39 = period2.multipliedBy(2);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str4, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(fileTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(clock35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(chronoPeriod39);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.security.cert.CertificateException certificateException1 = new java.security.cert.CertificateException("MicroOfSecond");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("1 Jan 1970 00:00:32 GMT", "MinuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDate localDate44 = localDate35.minusYears(32000L);
        java.time.LocalDate localDate46 = localDate35.minusWeeks((long) (short) 1);
        java.lang.String str47 = localDate46.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+999999999-12-24" + "'", str47, "+999999999-12-24");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset32);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField36.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime38 = localDateTime34.minus((long) (-999999999), temporalUnit37);
        java.util.List<java.time.ZoneOffset> zoneOffsetList39 = zoneRules23.getValidOffsets(localDateTime34);
        int int40 = localDateTime34.getSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField36.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime38);
        org.junit.Assert.assertNotNull(zoneOffsetList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        int int1 = isoEra0.getValue();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap3 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        java.time.zone.ZoneRules zoneRules9 = zoneOffset7.getRules();
        java.time.zone.ZoneRules zoneRules10 = zoneIdMap3.getOrDefault((java.lang.Object) 1.0d, zoneRules9);
        java.lang.String str11 = zoneRules9.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = zoneRules9.getTransitions();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        int int18 = localDateTime13.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        int int23 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        boolean boolean35 = localDateTime14.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str37 = localDateTime30.format(dateTimeFormatter36);
        java.time.ZoneOffset zoneOffset38 = zoneRules9.getOffset(localDateTime30);
        java.time.LocalDateTime localDateTime40 = localDateTime30.minusMinutes(13L);
        java.time.temporal.Temporal temporal41 = isoEra0.adjustInto((java.time.temporal.Temporal) localDateTime40);
        java.time.format.TextStyle textStyle42 = java.time.format.TextStyle.FULL_STANDALONE;
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getISO3Country();
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.lang.String str46 = locale43.getDisplayScript(locale45);
        java.util.Locale.setDefault(locale45);
        java.lang.String str48 = isoEra0.getDisplayName(textStyle42, locale45);
        java.lang.String str49 = locale45.getDisplayScript();
        java.lang.String str50 = locale45.toString();
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str11, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str37, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(temporal41);
        org.junit.Assert.assertTrue("'" + textStyle42 + "' != '" + java.time.format.TextStyle.FULL_STANDALONE + "'", textStyle42.equals(java.time.format.TextStyle.FULL_STANDALONE));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GBR" + "'", str44, "GBR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh_CN" + "'", str50, "zh_CN");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month1 = java.time.Month.OCTOBER;
        java.time.Month month3 = month1.plus(0L);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        int int9 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.temporal.Temporal temporal15 = month3.adjustInto((java.time.temporal.Temporal) localDateTime5);
        boolean boolean16 = strSet0.equals((java.lang.Object) month3);
        int int17 = month3.getValue();
        int int18 = month3.maxLength();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.OCTOBER + "'", month3.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(temporal15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = charBuffer1.hasArray();
        boolean boolean5 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) charBuffer1);
        // The following exception was thrown during execution in test generation
        try {
            char char7 = charBuffer1.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream3 = new java.io.PrintStream(outputStream0, true, "Eng");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Null output stream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = chronoField4.getDisplayName(locale5);
        java.lang.String str8 = locale0.getDisplayCountry(locale5);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        boolean boolean31 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.DayOfWeek dayOfWeek32 = localDateTime26.getDayOfWeek();
        java.time.format.TextStyle textStyle33 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getISO3Country();
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.lang.String str37 = locale34.getDisplayScript(locale36);
        java.lang.String str38 = dayOfWeek32.getDisplayName(textStyle33, locale34);
        java.lang.String str39 = locale0.getDisplayName(locale34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = locale0.getUnicodeLocaleType("name:lo (lo)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: name:lo (lo)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GBR" + "'", str1, "GBR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Minute" + "'", str7, "Minute");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "United Kingdom" + "'", str8, "United Kingdom");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek32 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek32.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle33 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle33.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GBR" + "'", str35, "GBR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "5" + "'", str38, "5");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (United Kingdom)" + "'", str39, "English (United Kingdom)");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer18.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer25 = byteBuffer24.asDoubleBuffer();
        int int26 = doubleBuffer19.compareTo(doubleBuffer25);
        int int27 = doubleBuffer25.remaining();
        java.nio.DoubleBuffer doubleBuffer28 = doubleBuffer11.put(doubleBuffer25);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = doubleBuffer28.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(doubleBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer28);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("\u4e0b\u5348\u65f6\u5206\u79d2", 437000000, 21);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.minusNanos((long) (short) 100);
        java.time.LocalDateTime localDateTime9 = localDateTime1.minusYears((long) (short) 1);
        int int10 = localDateTime9.getYear();
        java.time.LocalDateTime localDateTime12 = localDateTime9.withSecond((int) '\r');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 999999998 + "'", int10 == 999999998);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.time.Period period0 = java.time.Period.ZERO;
        boolean boolean1 = period0.isNegative();
        java.time.Period period3 = period0.minusMonths((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period5 = period3.plusMonths(365241780464L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: integer overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.time.Instant instant0 = java.time.Instant.now();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset6);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit11 = chronoField10.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime12 = localDateTime8.minus((long) (-999999999), temporalUnit11);
        java.lang.String str13 = temporalUnit11.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant14 = instant0.plus((long) 4096, temporalUnit11);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField10.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit11 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit11.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Weeks" + "'", str13, "Weeks");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        java.security.AccessControlException accessControlException6 = new java.security.AccessControlException("");
        java.lang.RuntimeException runtimeException7 = runtimeExceptionOptional4.orElse((java.lang.RuntimeException) accessControlException6);
        boolean boolean8 = runtimeExceptionOptional4.isPresent();
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
        org.junit.Assert.assertNotNull(runtimeException7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        java.security.AccessControlException accessControlException6 = new java.security.AccessControlException("");
        java.lang.RuntimeException runtimeException7 = runtimeExceptionOptional4.orElse((java.lang.RuntimeException) accessControlException6);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime11.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset21);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit26 = chronoField25.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime27 = localDateTime23.minus((long) (-999999999), temporalUnit26);
        java.lang.String str28 = temporalUnit26.toString();
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime15.plus((long) (byte) 100, temporalUnit26);
        boolean boolean30 = runtimeExceptionOptional4.equals((java.lang.Object) offsetDateTime15);
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
        org.junit.Assert.assertNotNull(runtimeException7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField25.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit26 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit26.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Weeks" + "'", str28, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean2 = file1.mkdirs();
        long long3 = file1.length();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream4 = new java.io.PrintStream(file1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: GBR (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4096L + "'", long3 == 4096L);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble2 = doubleStream1.min();
        boolean boolean3 = optionalDouble2.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder4 = optionalDoubleBuilder0.add(optionalDouble2);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder5 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble7 = doubleStream6.min();
        boolean boolean8 = optionalDouble7.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder9 = optionalDoubleBuilder5.add(optionalDouble7);
        java.util.function.Consumer<java.util.OptionalDouble> optionalDoubleConsumer10 = optionalDoubleBuilder0.andThen((java.util.function.Consumer<java.util.OptionalDouble>) optionalDoubleBuilder5);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder11 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble13 = doubleStream12.min();
        boolean boolean14 = optionalDouble13.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder15 = optionalDoubleBuilder11.add(optionalDouble13);
        java.util.stream.DoubleStream doubleStream16 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream17 = doubleStream16.distinct();
        java.util.stream.DoubleStream doubleStream18 = doubleStream17.parallel();
        java.util.OptionalDouble optionalDouble19 = doubleStream18.average();
        optionalDoubleBuilder11.accept(optionalDouble19);
        java.util.function.Consumer<java.util.OptionalDouble> optionalDoubleConsumer21 = optionalDoubleConsumer10.andThen((java.util.function.Consumer<java.util.OptionalDouble>) optionalDoubleBuilder11);
        java.util.stream.DoubleStream doubleStream22 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream23 = doubleStream22.distinct();
        java.util.stream.DoubleStream doubleStream24 = doubleStream23.parallel();
        java.util.OptionalDouble optionalDouble25 = doubleStream23.findFirst();
        optionalDoubleConsumer21.accept(optionalDouble25);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder4);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder9);
        org.junit.Assert.assertNotNull(optionalDoubleConsumer10);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder15);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertNotNull(optionalDoubleConsumer21);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertNotNull(optionalDouble25);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.ValueRange valueRange14 = zonedDateTime11.range((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = temporalUnit17.isTimeBased();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime11.minus(0L, temporalUnit17);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime11.minusDays(999999999L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(valueRange14);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.Instant instant21 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.Clock clock26 = java.time.Clock.fixed(instant21, (java.time.ZoneId) zoneOffset24);
        java.time.LocalTime localTime27 = java.time.LocalTime.now(clock26);
        java.time.LocalTime localTime29 = localTime27.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.of(localDate19, localTime29);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime32 = localDateTime30.plusMinutes(31556889832175999L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 60999881798");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.time.ZoneId zoneId2 = clock0.getZone();
        java.time.LocalDate localDate3 = java.time.LocalDate.now(zoneId2);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.withSecond((int) (byte) 0);
        java.time.LocalDate localDate9 = offsetDateTime6.toLocalDate();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean11 = offsetDateTime6.isSupported((java.time.temporal.TemporalField) chronoField10);
        boolean boolean12 = localDate0.isSupported((java.time.temporal.TemporalField) chronoField10);
        int int13 = localDate0.lengthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField10.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate37 = localDate35.minusWeeks((long) (short) 1);
        long long38 = localDate37.toEpochDay();
        java.time.Month month39 = localDate37.getMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 365241780464L + "'", long38 == 365241780464L);
        org.junit.Assert.assertTrue("'" + month39 + "' != '" + java.time.Month.DECEMBER + "'", month39.equals(java.time.Month.DECEMBER));
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        boolean boolean6 = floatBuffer4.equals((java.lang.Object) 16);
        // The following exception was thrown during execution in test generation
        try {
            float float7 = floatBuffer4.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant4 = instant2.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime5 = java.nio.file.attribute.FileTime.from(instant2);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery6 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period7 = instant2.query(periodTemporalQuery6);
        java.time.Period period8 = isoEra0.query(periodTemporalQuery6);
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.LocalDate localDate10 = java.time.LocalDate.MIN;
        boolean boolean11 = localDate9.isEqual((java.time.chrono.ChronoLocalDate) localDate10);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.withSecond((int) (byte) 0);
        java.time.LocalDate localDate18 = offsetDateTime15.toLocalDate();
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean20 = offsetDateTime15.isSupported((java.time.temporal.TemporalField) chronoField19);
        boolean boolean21 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField19);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = isoEra0.getLong((java.time.temporal.TemporalField) chronoField19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MicroOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(fileTime5);
        org.junit.Assert.assertNotNull(periodTemporalQuery6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField19.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.SUNDAY;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime5.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset15);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime21 = localDateTime17.minus((long) (-999999999), temporalUnit20);
        java.lang.String str22 = temporalUnit20.toString();
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime9.plus((long) (byte) 100, temporalUnit20);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime9.plusWeeks((long) '4');
        java.time.temporal.ValueRange valueRange26 = chronoField1.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime25);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange27 = dayOfWeek0.range((java.time.temporal.TemporalField) chronoField1);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MilliOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.SUNDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.SUNDAY));
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField1.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField19.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Weeks" + "'", str22, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(valueRange26);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month1 = java.time.Month.OCTOBER;
        java.time.Month month3 = month1.plus(0L);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        int int9 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.temporal.Temporal temporal15 = month3.adjustInto((java.time.temporal.Temporal) localDateTime5);
        boolean boolean16 = strSet0.equals((java.lang.Object) month3);
        java.security.ProtectionDomain[] protectionDomainArray17 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext18 = new java.security.AccessControlContext(protectionDomainArray17);
        java.time.LocalDate localDate19 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery20 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period21 = localDate19.query(periodTemporalQuery20);
        boolean boolean22 = accessControlContext18.equals((java.lang.Object) periodTemporalQuery20);
        java.time.Period period23 = month3.query(periodTemporalQuery20);
        java.lang.String str24 = period23.toString();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.OCTOBER + "'", month3.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(temporal15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(periodTemporalQuery20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P0D" + "'", str24, "P0D");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        double[] doubleArray4 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer5 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray12 = new double[] { 3, 21, 43200000000000L, 31556889832780799L, (-1), (-365243219162L) };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer15 = doubleBuffer5.get(doubleArray12, 31, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.0, 21.0, 4.32E13, 3.15568898327808E16, -1.0, -3.65243219162E11]");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        java.util.stream.Stream<java.lang.Integer> intStream4 = intStream2.skip(10L);
        java.util.Optional<java.lang.Integer> intOptional5 = intStream4.findAny();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Integer> intStream6 = intStream4.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intOptional5);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect(399000000);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = fileChannel11.write(byteBuffer14);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(outputStream0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setLastModified((long) 284000000);
        boolean boolean6 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration5 = duration2.minusNanos((-1L));
        java.time.Duration duration6 = duration2.abs();
        boolean boolean7 = duration2.isNegative();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("localhost");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.LongSummaryStatistics longSummaryStatistics5 = longStream0.summaryStatistics();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofPattern("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown pattern letter: B");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.security.cert.CertificateException certificateException1 = new java.security.cert.CertificateException("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR");
        java.lang.String str2 = certificateException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.security.cert.CertificateException: GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR" + "'", str2, "java.security.cert.CertificateException: GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.util.Optional<java.time.LocalDate> localDateOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(localDateOptional0);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong3 = longStream0.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        boolean boolean38 = zoneIdMap36.equals((java.lang.Object) 0);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration39 = zoneIdMap36.keys();
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet40 = zoneIdMap36.entrySet();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime44.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.zone.ZoneRules zoneRules51 = zoneOffset49.getRules();
        java.time.ZonedDateTime zonedDateTime52 = offsetDateTime44.atZoneSameInstant((java.time.ZoneId) zoneOffset49);
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime52.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId54 = zonedDateTime52.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap56 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.zone.ZoneRules zoneRules62 = zoneOffset60.getRules();
        java.time.zone.ZoneRules zoneRules63 = zoneIdMap56.getOrDefault((java.lang.Object) 1.0d, zoneRules62);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset68);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap72 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        java.time.zone.ZoneRules zoneRules78 = zoneOffset76.getRules();
        java.time.zone.ZoneRules zoneRules79 = zoneIdMap72.getOrDefault((java.lang.Object) 1.0d, zoneRules78);
        java.lang.String str80 = zoneRules78.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList81 = zoneRules78.getTransitions();
        java.time.zone.ZoneRules zoneRules82 = zoneIdMap56.putIfAbsent((java.time.ZoneId) zoneOffset68, zoneRules78);
        java.time.zone.ZoneRules zoneRules83 = zoneIdMap36.put(zoneId54, zoneRules78);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.ZonedDateTime zonedDateTime86 = java.time.ZonedDateTime.ofLocal(localDateTime6, zoneId54, zoneOffset85);
        java.time.Clock clock87 = java.time.Clock.system((java.time.ZoneId) zoneOffset85);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneIdEnumeration39);
        org.junit.Assert.assertNotNull(zoneIdEntrySet40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(zoneRules78);
        org.junit.Assert.assertNotNull(zoneRules79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str80, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList81);
        org.junit.Assert.assertNull(zoneRules82);
        org.junit.Assert.assertNull(zoneRules83);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(clock87);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime2 = localTime0.withSecond(399000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 399000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.io.FileNotFoundException fileNotFoundException0 = new java.io.FileNotFoundException();
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long29 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField28);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery30 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period31 = zonedDateTime26.query(periodTemporalQuery30);
        java.time.Period period32 = zonedDateTime11.query(periodTemporalQuery30);
        int int33 = zonedDateTime11.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField28.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.UTC;
        java.time.ZoneId[] zoneIdArray9 = new java.time.ZoneId[] { zoneOffset4, zoneOffset8 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet10 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet10, zoneIdArray9);
        java.util.Spliterator<java.time.ZoneId> zoneIdSpliterator12 = zoneIdSet10.spliterator();
        java.security.KeyException keyException13 = new java.security.KeyException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException((java.lang.Throwable) keyException13);
        java.lang.Throwable[] throwableArray15 = keyException13.getSuppressed();
        boolean boolean16 = zoneIdSet10.remove((java.lang.Object) throwableArray15);
        boolean boolean17 = zoneIdSet10.isEmpty();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneIdArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(zoneIdSpliterator12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        int int0 = java.util.Spliterator.SIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 64 + "'", int0 == 64);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology3);
        java.time.format.DateTimeFormatter dateTimeFormatter10 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology11 = dateTimeFormatter10.getChronology();
        java.time.format.TextStyle textStyle12 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getISO3Language();
        java.time.format.DecimalStyle decimalStyle15 = java.time.format.DecimalStyle.of(locale13);
        java.lang.String str16 = chronology11.getDisplayName(textStyle12, locale13);
        java.time.OffsetTime offsetTime17 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime19 = offsetTime17.withSecond(16);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int21 = offsetTime19.get((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.ValueRange valueRange22 = chronology11.range(chronoField20);
        java.time.Instant instant24 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.Clock clock29 = java.time.Clock.fixed(instant24, (java.time.ZoneId) zoneOffset27);
        java.time.chrono.ChronoLocalDate chronoLocalDate30 = chronology11.dateNow(clock29);
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = chronology3.date((java.time.temporal.TemporalAccessor) chronoLocalDate30);
        java.time.Duration duration34 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration37 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList38 = duration37.getUnits();
        java.time.Duration duration39 = duration34.minus(duration37);
        java.time.Duration duration41 = duration34.plusNanos((long) 722000000);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit44 = chronoField43.getBaseUnit();
        java.time.Duration duration45 = duration41.minus((long) (byte) 100, temporalUnit44);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate46 = chronoLocalDate31.plus(43200000000000L, temporalUnit44);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Micros");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + textStyle12 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle12.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(decimalStyle15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISO" + "'", str16, "ISO");
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField20.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(valueRange22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(chronoLocalDate30);
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(temporalUnitList38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField43.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit44 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit44.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(duration45);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.lang.String str35 = localDateTime6.toString();
        java.time.LocalTime localTime36 = localDateTime6.toLocalTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit13 = null;
        boolean boolean14 = zonedDateTime12.isSupported(temporalUnit13);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime15 = zonedDateTime12.withEarlierOffsetAtOverlap();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime16 = zonedDateTime12.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime15);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime16);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress1 = java.net.InetAddress.getByName("P0D");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: P0D: Name or service not known");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file7 = file1.getParentFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = doubleBuffer5.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("", 'a');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now();
        boolean boolean4 = decimalStyle2.equals((java.lang.Object) offsetDateTime3);
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle2.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withPositiveSign('\uffff');
        char char9 = decimalStyle8.getNegativeSign();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '-' + "'", char9 == '-');
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("Chinese", "MinuteOfHour", (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.stream.LongStream longStream4 = longStream3.sorted();
        java.util.function.LongUnaryOperator longUnaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = longStream3.map(longUnaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.withSecond((int) (byte) 0);
        java.time.LocalDate localDate9 = offsetDateTime6.toLocalDate();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean11 = offsetDateTime6.isSupported((java.time.temporal.TemporalField) chronoField10);
        boolean boolean12 = localDate0.isSupported((java.time.temporal.TemporalField) chronoField10);
        java.time.LocalDate localDate14 = localDate0.minusMonths(32L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate16 = localDate0.withDayOfMonth(52);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 52");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField10.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("/");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: / [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("zonerules[currentstandardoffset=z]");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: zonerules[currentstandardoffset=z]");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.stream.LongStream longStream4 = longStream3.sorted();
        java.util.function.LongConsumer longConsumer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = longStream3.peek(longConsumer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        java.util.stream.IntStream.Builder builder4 = java.util.stream.IntStream.builder();
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder4);
        java.util.Spliterator<java.lang.Integer> intSpliterator6 = ofInt2.trySplit();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(intSpliterator6);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.util.Optional<java.nio.CharBuffer> charBufferOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(charBufferOptional0);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant7 = instant5.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime8 = java.nio.file.attribute.FileTime.from(instant5);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = instant5.query(periodTemporalQuery9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit12 = chronoField11.getBaseUnit();
        boolean boolean13 = instant5.isSupported(temporalUnit12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusNanos((long) (short) 100);
        boolean boolean22 = temporalUnit12.isSupportedBy((java.time.temporal.Temporal) localDateTime15);
        boolean boolean23 = temporalUnit12.isTimeBased();
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = localDate1.plus((long) 495000000, temporalUnit12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime28 = localDate1.atTime((int) (byte) 100, 12, 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField11.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit12 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit12.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.DoubleBuffer doubleBuffer15 = doubleBuffer11.put((double) 31);
        double[] doubleArray20 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer21 = java.nio.DoubleBuffer.wrap(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer22 = doubleBuffer11.put(doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer21);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer18.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer25 = byteBuffer24.asDoubleBuffer();
        int int26 = doubleBuffer19.compareTo(doubleBuffer25);
        int int27 = doubleBuffer25.remaining();
        java.nio.DoubleBuffer doubleBuffer28 = doubleBuffer11.put(doubleBuffer25);
        double[] doubleArray33 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer34 = java.nio.DoubleBuffer.wrap(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer37 = doubleBuffer25.get(doubleArray33, 4096, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(doubleBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer34);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.security.cert.CertificateEncodingException certificateEncodingException0 = new java.security.cert.CertificateEncodingException();
        java.lang.String str1 = certificateEncodingException0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.security.cert.CertificateEncodingException" + "'", str1, "java.security.cert.CertificateEncodingException");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str7 = localDate1.format(dateTimeFormatter6);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        int int21 = zonedDateTime20.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime20.withDayOfYear(10);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.ZonedDateTime zonedDateTime35 = offsetDateTime27.atZoneSameInstant((java.time.ZoneId) zoneOffset32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime35.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long38 = zonedDateTime35.getLong((java.time.temporal.TemporalField) chronoField37);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery39 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period40 = zonedDateTime35.query(periodTemporalQuery39);
        java.time.Period period41 = zonedDateTime20.query(periodTemporalQuery39);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period42 = dateTimeFormatter6.parse((java.lang.CharSequence) "java.nio.HeapShortBuffer[pos=64 lim=64 cap=64]", periodTemporalQuery39);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.nio.HeapShortBuffer[pos=64 lim=64 cap=64]' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-999999999-01-01" + "'", str7, "-999999999-01-01");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField37.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 999999999L + "'", long38 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = chronoField4.getDisplayName(locale5);
        java.lang.String str8 = locale0.getDisplayCountry(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = locale0.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GBR" + "'", str1, "GBR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Minute" + "'", str7, "Minute");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "United Kingdom" + "'", str8, "United Kingdom");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterType("hi!");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.util.Comparator<java.nio.ShortBuffer> shortBufferComparator0 = java.util.Comparator.reverseOrder();
        org.junit.Assert.assertNotNull(shortBufferComparator0);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("name:lo (lo)", "ISO");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        boolean boolean7 = byteBuffer6.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer9 = byteBuffer6.limit(533000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException("+999999999-12-31");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime3.minusHours((long) 'a');
        java.time.chrono.IsoEra isoEra43 = java.time.chrono.IsoEra.BCE;
        int int44 = isoEra43.getValue();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap46 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.zone.ZoneRules zoneRules52 = zoneOffset50.getRules();
        java.time.zone.ZoneRules zoneRules53 = zoneIdMap46.getOrDefault((java.lang.Object) 1.0d, zoneRules52);
        java.lang.String str54 = zoneRules52.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList55 = zoneRules52.getTransitions();
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        int int61 = localDateTime56.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime57);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        int int66 = localDateTime57.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime62);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        int int72 = localDateTime67.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime68);
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime76 = localDateTime73.atOffset(zoneOffset75);
        int int77 = localDateTime68.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime73);
        boolean boolean78 = localDateTime57.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime73);
        java.time.format.DateTimeFormatter dateTimeFormatter79 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str80 = localDateTime73.format(dateTimeFormatter79);
        java.time.ZoneOffset zoneOffset81 = zoneRules52.getOffset(localDateTime73);
        java.time.LocalDateTime localDateTime83 = localDateTime73.minusMinutes(13L);
        java.time.temporal.Temporal temporal84 = isoEra43.adjustInto((java.time.temporal.Temporal) localDateTime83);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime85 = offsetTime42.with((java.time.temporal.TemporalAdjuster) isoEra43);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Era");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertTrue("'" + isoEra43 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra43.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(zoneRules52);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str54, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str80, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(temporal84);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.LocalDate localDate14 = zonedDateTime11.toLocalDate();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime18.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime34 = localDateTime30.minus((long) (-999999999), temporalUnit33);
        java.lang.String str35 = temporalUnit33.toString();
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime22.plus((long) (byte) 100, temporalUnit33);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime22.withMinute((int) '\000');
        java.time.temporal.Temporal temporal39 = localDate14.adjustInto((java.time.temporal.Temporal) offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField32.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Weeks" + "'", str35, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(temporal39);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.security.AccessControlException accessControlException3 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException4 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException3);
        java.security.cert.CertificateEncodingException certificateEncodingException5 = new java.security.cert.CertificateEncodingException("1 Jan 1970 00:00:32 GMT", (java.lang.Throwable) signatureException4);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.Instant instant5 = instant3.minusMillis((long) 399000000);
        java.time.Month month6 = java.time.Month.OCTOBER;
        java.time.Month month8 = month6.plus(0L);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.temporal.Temporal temporal20 = month8.adjustInto((java.time.temporal.Temporal) localDateTime10);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate22 = localDateTime21.toLocalDate();
        java.time.LocalDateTime localDateTime24 = localDateTime21.plusWeeks(0L);
        boolean boolean25 = localDateTime10.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime27 = localDateTime10.minusHours((long) '\n');
        java.time.format.DateTimeFormatter dateTimeFormatter28 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str29 = localDateTime10.format(dateTimeFormatter28);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant30 = instant3.with((java.time.temporal.TemporalAdjuster) localDateTime10);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + month6 + "' != '" + java.time.Month.OCTOBER + "'", month6.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.OCTOBER + "'", month8.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(temporal20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+999999999-12-31" + "'", str29, "+999999999-12-31");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics0.accept((double) 0);
        double double3 = doubleSummaryStatistics0.getMin();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=1, sum=0.000000, min=0.000000, average=0.000000, max=0.000000}");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        float[] floatArray5 = floatBuffer3.array();
        java.lang.String str6 = floatBuffer3.toString();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[16.0, 21.0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.nio.HeapFloatBuffer[pos=0 lim=2 cap=2]" + "'", str6, "java.nio.HeapFloatBuffer[pos=0 lim=2 cap=2]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.security.cert.CertPath certPath0 = null;
        java.security.Timestamp timestamp1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.CodeSigner codeSigner2 = new java.security.CodeSigner(certPath0, timestamp1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.function.LongBinaryOperator longBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = longStream2.reduce(32000L, longBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.minusNanos((long) (short) 100);
        java.time.LocalDateTime localDateTime9 = localDateTime1.minusYears((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths((long) 1024);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000084");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList67);
        boolean boolean70 = zoneIdSet46.removeAll((java.util.Collection<java.lang.String>) strList69);
        strList69.clear();
        java.io.File file73 = new java.io.File("GBR");
        boolean boolean74 = file73.mkdirs();
        java.nio.file.Path path75 = file73.toPath();
        boolean boolean76 = strList69.contains((java.lang.Object) path75);
        int int77 = path4.compareTo(path75);
        boolean boolean79 = path75.startsWith("");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path82 = path75.subpath(722000000, 878000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull("file73.getParent() == null", file73.getParent());
        org.junit.Assert.assertEquals(file73.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(path75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.lang.String str7 = path6.toString();
        java.io.File file8 = path6.toFile();
        file8.deleteOnExit();
        long long10 = file8.lastModified();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str7, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "ZoneRules[currentStandardOffset=Z]");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645434891000L + "'", long10 == 1645434891000L);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = fileChannel11.lock((long) 533000000, 0L, true);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate(33237);
        java.nio.ByteOrder byteOrder22 = byteBuffer21.order();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = fileChannel11.read(byteBuffer21);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteOrder22);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException();
        java.security.InvalidKeyException invalidKeyException2 = new java.security.InvalidKeyException((java.lang.Throwable) noSuchProviderException1);
        java.security.cert.CertificateEncodingException certificateEncodingException3 = new java.security.cert.CertificateEncodingException("\u4e0b\u5348\u65f6\u5206\u79d2", (java.lang.Throwable) invalidKeyException2);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CodingErrorAction codingErrorAction8 = charsetEncoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder9 = charsetEncoder7.reset();
        java.nio.charset.CodingErrorAction codingErrorAction10 = java.nio.charset.CodingErrorAction.REPLACE;
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder9.onUnmappableCharacter(codingErrorAction10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 100, (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetEncoder charsetEncoder19 = charsetEncoder9.replaceWith(byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 100, -1, 100, 1, 100]");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration4 = duration2.abs();
        java.time.Duration duration6 = duration2.minusMinutes((long) 385000000);
        java.time.Duration duration8 = duration6.minusHours((long) 0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.security.AccessControlException accessControlException1 = new java.security.AccessControlException("");
        java.security.Permission permission2 = accessControlException1.getPermission();
        java.security.PrivilegedActionException privilegedActionException3 = new java.security.PrivilegedActionException((java.lang.Exception) accessControlException1);
        java.security.KeyException keyException4 = new java.security.KeyException((java.lang.Throwable) privilegedActionException3);
        org.junit.Assert.assertNull(permission2);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        boolean boolean3 = intStream1.isParallel();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt5 = intStream1.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.function.DoublePredicate doublePredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = doubleStream2.noneMatch(doublePredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("+999999999-12-24", "\ufffd");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+999999999-12-24" + "'", str2, "+999999999-12-24");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.minusNanos((long) 100);
        java.time.LocalTime localTime4 = localTime0.withNano((int) 'G');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset9);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset9.getRules();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset17);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition20 = zoneRules12.getTransition(localDateTime19);
        int int21 = localDateTime19.getSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime22 = localTime0.with((java.time.temporal.TemporalAdjuster) localDateTime19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNull(zoneOffsetTransition20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.Locale locale2 = new java.util.Locale("", "Minute");
        java.lang.String str3 = locale2.getScript();
        java.lang.String str4 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "_MINUTE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_MINUTE" + "'", str4, "_MINUTE");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.LocalTime localTime2 = java.time.LocalTime.now();
        java.time.LocalTime localTime4 = localTime2.plusHours(0L);
        java.time.temporal.TemporalUnit temporalUnit5 = null;
        boolean boolean6 = localTime2.isSupported(temporalUnit5);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime7 = chronology1.zonedDateTime((java.time.temporal.TemporalAccessor) localTime2);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: 09:14:53.408 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.io.File file1 = new java.io.File("GBR");
        java.io.File file3 = new java.io.File(file1, "5");
        boolean boolean5 = file3.setReadable(false);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertEquals(file3.getParent(), "GBR");
        org.junit.Assert.assertEquals(file3.toString(), "GBR/5");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        int int6 = offsetDateTime3.getMonthValue();
        java.time.Instant instant8 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant10 = instant8.minusNanos((long) 'a');
        long long11 = instant8.getEpochSecond();
        java.time.Instant instant13 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.Clock clock18 = java.time.Clock.fixed(instant13, (java.time.ZoneId) zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = instant8.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.plusSeconds((long) 371000000);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime19.plusYears((long) 284000000);
        java.time.temporal.TemporalUnit temporalUnit24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = offsetDateTime3.until((java.time.temporal.Temporal) offsetDateTime19, temporalUnit24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime4 = offsetTime2.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        boolean boolean17 = instant9.isSupported(temporalUnit16);
        boolean boolean18 = offsetTime5.isSupported(temporalUnit16);
        boolean boolean19 = offsetTime4.isEqual(offsetTime5);
        int int20 = offsetTime5.getNano();
        java.time.OffsetTime offsetTime22 = offsetTime5.withNano((int) '\000');
        int int23 = offsetTime22.getNano();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime35.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        int int45 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime46.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        int int56 = localDateTime47.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        boolean boolean57 = localDateTime36.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        java.time.temporal.Temporal temporal58 = localDateTime30.adjustInto((java.time.temporal.Temporal) localDateTime36);
        java.lang.String str59 = localDateTime30.toString();
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate61 = localDateTime60.toLocalDate();
        java.time.LocalDateTime localDateTime63 = localDateTime60.plusWeeks(0L);
        int int64 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.LocalDateTime localDateTime66 = localDateTime63.minusHours((long) 999999999);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.Period period69 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period70 = period69.normalized();
        long long71 = period69.toTotalMonths();
        java.time.Period period73 = period69.minusMonths((long) 256);
        java.time.LocalDateTime localDateTime74 = localDateTime67.plus((java.time.temporal.TemporalAmount) period69);
        java.time.Duration duration75 = java.time.Duration.between((java.time.temporal.Temporal) localDateTime66, (java.time.temporal.Temporal) localDateTime74);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal76 = offsetTime22.adjustInto((java.time.temporal.Temporal) localDateTime66);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 470000000 + "'", int20 == 470000000);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(temporal58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str59, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(duration75);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("tsohlacol", "/experiment/GBR/", 16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalTime localTime1 = java.time.LocalTime.NOON;
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate4 = localDateTime3.toLocalDate();
        java.time.LocalDateTime localDateTime6 = localDateTime3.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange7 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime3);
        int int8 = localTime1.get((java.time.temporal.TemporalField) chronoField2);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange9 = localDate0.range((java.time.temporal.TemporalField) chronoField2);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfAmPm");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField2.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(valueRange7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "MINUTE");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        java.time.Duration duration45 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList46 = duration45.getUnits();
        java.time.Duration duration48 = duration45.plusDays((-1L));
        java.time.Duration duration50 = duration45.withSeconds(0L);
        java.time.Duration duration51 = duration50.abs();
        java.time.OffsetTime offsetTime52 = offsetTime42.plus((java.time.temporal.TemporalAmount) duration51);
        java.time.OffsetTime offsetTime54 = offsetTime42.minusHours((long) 33237);
        java.time.Period period58 = java.time.Period.of((int) '#', (int) '\uffff', 4);
        java.time.Period period60 = period58.minusMonths((long) 227000000);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime61 = offsetTime54.plus((java.time.temporal.TemporalAmount) period58);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Months");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(temporalUnitList46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(offsetTime54);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        char char0 = java.io.File.pathSeparatorChar;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + ':' + "'", char0 == ':');
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.function.LongBinaryOperator longBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = longStream3.reduce((long) 41, longBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("US-ASCII");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer8 = doubleBuffer5.put(1999999998, (double) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Integer> intStream4 = intStream1.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiControl('\r');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Language();
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ofPattern("/", locale1);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.zone.ZoneRules zoneRules14 = zoneOffset12.getRules();
        java.time.ZonedDateTime zonedDateTime15 = offsetDateTime7.atZoneSameInstant((java.time.ZoneId) zoneOffset12);
        int int16 = zonedDateTime15.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime15.withDayOfYear(10);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset27.getRules();
        java.time.ZonedDateTime zonedDateTime30 = offsetDateTime22.atZoneSameInstant((java.time.ZoneId) zoneOffset27);
        java.time.ZoneId zoneId31 = zonedDateTime30.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime32 = zonedDateTime30.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.zone.ZoneRules zoneRules43 = zoneOffset41.getRules();
        java.time.ZonedDateTime zonedDateTime44 = offsetDateTime36.atZoneSameInstant((java.time.ZoneId) zoneOffset41);
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime44.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long47 = zonedDateTime44.getLong((java.time.temporal.TemporalField) chronoField46);
        long long48 = zonedDateTime30.getLong((java.time.temporal.TemporalField) chronoField46);
        int int49 = zonedDateTime18.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit51 = chronoField50.getBaseUnit();
        java.time.temporal.ValueRange valueRange52 = zonedDateTime18.range((java.time.temporal.TemporalField) chronoField50);
        java.time.Instant instant54 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant56 = instant54.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime57 = java.nio.file.attribute.FileTime.from(instant54);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery58 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period59 = instant54.query(periodTemporalQuery58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit61 = chronoField60.getBaseUnit();
        boolean boolean62 = instant54.isSupported(temporalUnit61);
        java.time.Instant instant64 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant66 = instant64.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime70 = localDateTime67.atOffset(zoneOffset69);
        java.time.zone.ZoneRules zoneRules71 = zoneOffset69.getRules();
        java.time.ZonedDateTime zonedDateTime72 = java.time.ZonedDateTime.ofInstant(instant64, (java.time.ZoneId) zoneOffset69);
        java.time.ZoneId zoneId73 = zonedDateTime72.getZone();
        java.time.Clock clock74 = java.time.Clock.fixed(instant54, zoneId73);
        java.time.ZonedDateTime zonedDateTime75 = zonedDateTime18.with((java.time.temporal.TemporalAdjuster) instant54);
        java.nio.CharBuffer charBuffer77 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer78 = charBuffer77.flip();
        java.nio.CharBuffer charBuffer80 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer81 = charBuffer80.flip();
        int int82 = charBuffer77.compareTo(charBuffer80);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.formatTo((java.time.temporal.TemporalAccessor) zonedDateTime75, (java.lang.Appendable) charBuffer77);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField46.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 999999999L + "'", long47 == 999999999L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 999999999L + "'", long48 == 999999999L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField50.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit51 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit51.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(fileTime57);
        org.junit.Assert.assertNotNull(periodTemporalQuery58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField60.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit61 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit61.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertNotNull(zonedDateTime72);
        org.junit.Assert.assertNotNull(zoneId73);
        org.junit.Assert.assertNotNull(clock74);
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertNotNull(charBuffer77);
        org.junit.Assert.assertNotNull(buffer78);
        org.junit.Assert.assertNotNull(charBuffer80);
        org.junit.Assert.assertNotNull(buffer81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit7 = chronoField6.getBaseUnit();
        boolean boolean8 = temporalUnit7.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime9 = offsetDateTime3.truncatedTo(temporalUnit7);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField6.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit7 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit7.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        boolean boolean1 = coderResult0.isMalformed();
        boolean boolean2 = coderResult0.isOverflow();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(399000000);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putChar('-');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.lang.String[] strArray7 = new java.lang.String[] { "United Kingdom", "KOR", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "\u4e2d\u6587", "GBR", "DIRECT" };
        boolean boolean8 = org.apache.commons.lang3.StringUtils.endsWithAny("zh_CN", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        // The following exception was thrown during execution in test generation
        try {
            java.time.DayOfWeek dayOfWeek1 = java.time.DayOfWeek.of(59);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek: 59");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("OVERFLOW", "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder8 = charsetEncoder7.reset();
        java.net.InetAddress inetAddress9 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean10 = inetAddress9.isMCLinkLocal();
        byte[] byteArray11 = inetAddress9.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetEncoder charsetEncoder12 = charsetEncoder7.replaceWith(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(inetAddress9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[127, 0, 0, 1]");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.lang.String[] strArray26 = new java.lang.String[] { "1 Jan 1970 00:00:00 GMT", "zonerules[currentstandardoffset=z]", "+999999999-12-31", "\u4e2d\u6587", "{}", "/experiment/GBR/", "ISO", "MINUTEMINU", "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]", "1 Jan 1970 00:00:32 GMT", "5", "09:14:52.125Z", "/", "DIRECT", "Eng", "", "+999999999-12-31T23:59:59.999999999Z", "\\u0061", "/experiment/GBR/", "ISO", "\u4e2d\u56fd", "/experiment/GBR/", "\u4e2d\u6587", "Eng", "\u4e2d\u56fd", "Minute" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        int int29 = strList27.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = strList27.remove(812000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 812000000, Size: 26");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 26 + "'", int29 == 26);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        boolean boolean3 = byteBuffer1.hasArray();
        java.lang.Object obj4 = byteBuffer1.array();
        double double5 = byteBuffer1.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.security.SignatureException signatureException0 = new java.security.SignatureException();
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.format.TextStyle textStyle2 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getISO3Language();
        java.time.format.DecimalStyle decimalStyle5 = java.time.format.DecimalStyle.of(locale3);
        java.lang.String str6 = chronology1.getDisplayName(textStyle2, locale3);
        java.lang.String str7 = chronology1.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + textStyle2 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle2.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISO" + "'", str7, "ISO");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putInt(399000000, (int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) zoneOffset9);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalTime from TemporalAccessor: Z of type java.time.ZoneOffset");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Z", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.util.Set<java.time.ZoneId> zoneIdSet14 = zoneIdMap6.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList26);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList54);
        boolean boolean57 = strList40.removeAll((java.util.Collection<java.lang.String>) strList56);
        boolean boolean58 = strList28.retainAll((java.util.Collection<java.lang.String>) strList56);
        boolean boolean59 = zoneIdSet14.removeAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Spliterator<java.lang.String> strSpliterator60 = strList28.spliterator();
        boolean boolean62 = strList28.add("+999999999-12-31T23:59:59.999999999");
        int int63 = strList28.size();
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList28);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneIdSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSpliterator60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.util.Comparator<java.time.chrono.ChronoLocalDate> chronoLocalDateComparator0 = java.util.Comparator.reverseOrder();
        org.junit.Assert.assertNotNull(chronoLocalDateComparator0);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("1 - 53", "MinuteG(null <no signer certificates>)G");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, (-999999999), (int) 'a', 0, 31, 4);
        int int7 = date6.getMinutes();
        org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 05 00:31:04 UTC 83331334");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        boolean boolean4 = codeSource2.equals((java.lang.Object) 4);
        java.security.cert.Certificate[] certificateArray5 = codeSource2.getCertificates();
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(certificateArray5);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.plusHours((long) 16384);
        java.time.LocalTime localTime4 = localTime0.plusMinutes(0L);
        int int5 = localTime0.getMinute();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) zonedDateTime11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime16 = localTime14.withHour((int) '/');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 47");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        int int6 = localDateTime1.getNano();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 999999999 + "'", int6 == 999999999);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime7.plusWeeks((long) '4');
        int int24 = offsetDateTime23.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 29 + "'", int24 == 29);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        java.time.Duration duration45 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList46 = duration45.getUnits();
        java.time.Duration duration48 = duration45.plusDays((-1L));
        java.time.Duration duration50 = duration45.withSeconds(0L);
        java.time.Duration duration51 = duration50.abs();
        java.time.OffsetTime offsetTime52 = offsetTime42.plus((java.time.temporal.TemporalAmount) duration51);
        int int53 = offsetTime42.getMinute();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(temporalUnitList46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(offsetTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 14 + "'", int53 == 14);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MINUTES;
        java.nio.file.attribute.FileTime fileTime2 = java.nio.file.attribute.FileTime.from((-365243219162L), timeUnit1);
        java.lang.String str3 = fileTime2.toString();
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertNotNull(fileTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-692477-03-10T13:58:00Z" + "'", str3, "-692477-03-10T13:58:00Z");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay(":", "", 0, 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle4.withNegativeSign('+');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withDecimalSeparator('a');
        java.lang.String str9 = decimalStyle6.toString();
        char char10 = decimalStyle6.getZeroDigit();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DecimalStyle[0a+.]" + "'", str9, "DecimalStyle[0a+.]");
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '0' + "'", char10 == '0');
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        java.nio.DoubleBuffer doubleBuffer13 = doubleBuffer5.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer15 = doubleBuffer13.put((double) 11);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleBuffer13);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        boolean boolean77 = inetAddress72.isMCOrgLocal();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) charBuffer20);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer23 = charBuffer20.position((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        int int2 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer4 = byteBuffer3.asDoubleBuffer();
        boolean boolean5 = byteBuffer3.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("OVERFLOW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "OVERFLOW" + "'", str1, "OVERFLOW");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        java.util.stream.IntStream intStream10 = charBuffer9.chars();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = intStream10.spliterator();
        java.util.function.IntPredicate intPredicate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream13 = intStream10.filter(intPredicate12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intSpliterator11);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics0.accept((double) 0);
        doubleSummaryStatistics0.accept((double) 100L);
        java.lang.String str5 = doubleSummaryStatistics0.toString();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000}" + "'", str5, "DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000}");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.OptionalDouble optionalDouble3 = doubleStream2.average();
        java.util.function.DoublePredicate doublePredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = doubleStream2.noneMatch(doublePredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setScript("\u4e2d\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        boolean boolean11 = zoneIdEnumeration10.hasMoreElements();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        boolean boolean7 = file1.exists();
        java.io.File file8 = file1.getParentFile();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = file8.setLastModified((long) 29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.nio.ByteOrder byteOrder0 = java.nio.ByteOrder.BIG_ENDIAN;
        org.junit.Assert.assertNotNull(byteOrder0);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.time.LocalTime localTime5 = java.time.LocalTime.now();
        int int6 = localTime5.getNano();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long8 = localTime5.getLong((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.withSecond((int) (byte) 0);
        boolean boolean15 = chronoField7.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime12);
        boolean boolean16 = longBuffer4.equals((java.lang.Object) chronoField7);
        boolean boolean17 = longBuffer4.hasArray();
        java.nio.ByteOrder byteOrder18 = longBuffer4.order();
        java.lang.String str19 = byteOrder18.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 744000000 + "'", int6 == 744000000);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField7.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 14L + "'", long8 == 14L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteOrder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "BIG_ENDIAN" + "'", str19, "BIG_ENDIAN");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        boolean boolean5 = longBuffer2.isDirect();
        long long6 = longBuffer2.get();
        java.nio.ByteOrder byteOrder7 = longBuffer2.order();
        boolean boolean8 = longBuffer2.hasArray();
        boolean boolean9 = longBuffer2.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteOrder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        java.util.stream.IntStream intStream5 = intStream1.sequential();
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Integer> intStream7 = intStream6.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.plusDays((long) 31);
        java.time.chrono.Chronology chronology24 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        java.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange5 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.withMonth(4);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        boolean boolean26 = zonedDateTime11.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime25);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.UTC;
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime25.withZoneSameInstant((java.time.ZoneId) zoneOffset27);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        int int42 = zonedDateTime41.getDayOfYear();
        boolean boolean43 = localDateChronoZonedDateTime28.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime41);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 365 + "'", int42 == 365);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.time.Month month0 = java.time.Month.MARCH;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.Month month2 = month1.firstMonthOfQuarter();
        java.time.Instant instant4 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant6 = instant4.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime7 = java.nio.file.attribute.FileTime.from(instant4);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery8 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period9 = instant4.query(periodTemporalQuery8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit11 = chronoField10.getBaseUnit();
        boolean boolean12 = instant4.isSupported(temporalUnit11);
        java.time.Instant instant14 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant16 = instant14.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.ofInstant(instant14, (java.time.ZoneId) zoneOffset19);
        java.time.ZoneId zoneId23 = zonedDateTime22.getZone();
        java.time.Clock clock24 = java.time.Clock.fixed(instant4, zoneId23);
        java.time.LocalTime localTime25 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime27 = localTime25.plusHours((long) 16384);
        java.time.LocalTime localTime29 = localTime25.plusMinutes(0L);
        boolean boolean30 = clock24.equals((java.lang.Object) localTime25);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate33 = localDateTime32.toLocalDate();
        java.time.LocalDateTime localDateTime35 = localDateTime32.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange36 = chronoField31.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime32);
        int int37 = localTime25.get((java.time.temporal.TemporalField) chronoField31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange38 = month1.range((java.time.temporal.TemporalField) chronoField31);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfAmPm");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.MARCH + "'", month0.equals(java.time.Month.MARCH));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fileTime7);
        org.junit.Assert.assertNotNull(periodTemporalQuery8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField10.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit11 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit11.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(clock24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField31.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(valueRange36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.OptionalDouble optionalDouble3 = doubleStream2.average();
        java.lang.String str4 = optionalDouble3.toString();
        double double6 = optionalDouble3.orElse((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble.empty" + "'", str4, "OptionalDouble.empty");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.range(10000, (int) (short) 10);
        java.util.function.IntToLongFunction intToLongFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = intStream2.mapToLong(intToLongFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId13 = zonedDateTime11.getZone();
        int int14 = zonedDateTime11.getHour();
        java.time.Month month15 = zonedDateTime11.getMonth();
        java.time.DayOfWeek dayOfWeek16 = zonedDateTime11.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime18 = zonedDateTime11.withMonth(0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.DECEMBER + "'", month15.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + dayOfWeek16 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek16.equals(java.time.DayOfWeek.FRIDAY));
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.SUNDAY;
        int int1 = dayOfWeek0.getValue();
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.SUNDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.SUNDAY));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        java.time.LocalTime localTime21 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.of(localDate6, localTime21, (java.time.ZoneId) zoneOffset24);
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime30 = offsetTime28.withSecond(16);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = instant32.query(periodTemporalQuery36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        boolean boolean40 = instant32.isSupported(temporalUnit39);
        boolean boolean41 = offsetTime28.isSupported(temporalUnit39);
        java.time.OffsetDateTime offsetDateTime42 = localDate6.atTime(offsetTime28);
        java.time.DayOfWeek dayOfWeek43 = localDate6.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + dayOfWeek43 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek43.equals(java.time.DayOfWeek.FRIDAY));
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.net.InetAddress inetAddress7 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean8 = inetAddress7.isMCLinkLocal();
        byte[] byteArray9 = inetAddress7.getAddress();
        java.net.InetAddress inetAddress10 = java.net.InetAddress.getByAddress(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer13 = byteBuffer6.put(byteArray9, 834000000, 437000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(inetAddress7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[127, 0, 0, 1]");
        org.junit.Assert.assertNotNull(inetAddress10);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.ZonedDateTime zonedDateTime18 = offsetDateTime10.atZoneSameInstant((java.time.ZoneId) zoneOffset15);
        java.time.ZoneId zoneId19 = zonedDateTime18.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime20 = zonedDateTime18.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime32.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long35 = zonedDateTime32.getLong((java.time.temporal.TemporalField) chronoField34);
        long long36 = zonedDateTime18.getLong((java.time.temporal.TemporalField) chronoField34);
        java.time.Duration duration38 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration41 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList42 = duration41.getUnits();
        java.time.Duration duration43 = duration38.minus(duration41);
        int int44 = duration38.getNano();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime45 = zonedDateTime18.minus((java.time.temporal.TemporalAmount) duration38);
        java.time.temporal.Temporal temporal46 = zoneOffset4.adjustInto((java.time.temporal.Temporal) zonedDateTime18);
        java.security.ProtectionDomain[] protectionDomainArray47 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext48 = new java.security.AccessControlContext(protectionDomainArray47);
        java.time.LocalDate localDate49 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery50 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period51 = localDate49.query(periodTemporalQuery50);
        boolean boolean52 = accessControlContext48.equals((java.lang.Object) periodTemporalQuery50);
        java.time.Period period53 = zonedDateTime18.query(periodTemporalQuery50);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime55 = zonedDateTime18.plusHours(31556889832175999L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 3600992907928");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField34.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 999999999L + "'", long35 == 999999999L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 999999999L + "'", long36 == 999999999L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(temporalUnitList42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime45);
        org.junit.Assert.assertNotNull(temporal46);
        org.junit.Assert.assertNotNull(protectionDomainArray47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(periodTemporalQuery50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.util.Locale locale2 = new java.util.Locale("", "Minute");
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.lang.String str6 = locale3.getDisplayScript(locale5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getISO3Country();
        java.lang.String str10 = chronoField7.getDisplayName(locale8);
        java.lang.String str11 = locale3.getDisplayCountry(locale8);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        int int17 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime13.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        int int33 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime13.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.DayOfWeek dayOfWeek35 = localDateTime29.getDayOfWeek();
        java.time.format.TextStyle textStyle36 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale37 = java.util.Locale.UK;
        java.lang.String str38 = locale37.getISO3Country();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.lang.String str40 = locale37.getDisplayScript(locale39);
        java.lang.String str41 = dayOfWeek35.getDisplayName(textStyle36, locale37);
        java.lang.String str42 = locale3.getDisplayName(locale37);
        java.lang.String str43 = locale2.getDisplayScript(locale37);
        org.junit.Assert.assertEquals(locale2.toString(), "_MINUTE");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GBR" + "'", str4, "GBR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField7.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GBR" + "'", str9, "GBR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Minute" + "'", str10, "Minute");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "United Kingdom" + "'", str11, "United Kingdom");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek35 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek35.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle36 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle36.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GBR" + "'", str38, "GBR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "5" + "'", str41, "5");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English (United Kingdom)" + "'", str42, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = null; // flaky: java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = null; // flaky: fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null; // flaky: fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = null; // flaky: fileChannel11.lock((long) 533000000, 0L, true);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        short short23 = byteBuffer21.getShort();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putChar('G');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer21.putChar('\n');
        // The following exception was thrown during execution in test generation
        try {
            int int29 = 0; // flaky: fileChannel11.write(byteBuffer21, (long) (-999999999));
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative position");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
// flaky:         org.junit.Assert.assertNotNull(fileChannel11);
// flaky:         org.junit.Assert.assertNotNull(fileChannel13);
// flaky:         org.junit.Assert.assertNotNull(seekableByteChannel15);
// flaky:         org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.time.Duration duration1 = java.time.Duration.ofSeconds((-365243219162L));
        java.time.Duration duration3 = duration1.minusMillis((long) 437000000);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        java.util.stream.LongStream longStream5 = longStream4.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong6 = longStream5.max();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.time.Month month0 = java.time.Month.OCTOBER;
        java.time.Month month2 = month0.plus(0L);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        int int8 = localDateTime3.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        int int13 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.temporal.Temporal temporal14 = month2.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.withSecond((int) (byte) 0);
        int int21 = offsetDateTime20.getNano();
        java.time.Month month22 = offsetDateTime20.getMonth();
        java.time.Instant instant24 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant26 = instant24.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime27 = java.nio.file.attribute.FileTime.from(instant24);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery28 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period29 = instant24.query(periodTemporalQuery28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit31 = chronoField30.getBaseUnit();
        boolean boolean32 = instant24.isSupported(temporalUnit31);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime40 = localDateTime34.minusNanos((long) (short) 100);
        boolean boolean41 = temporalUnit31.isSupportedBy((java.time.temporal.Temporal) localDateTime34);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.withSecond((int) (byte) 0);
        java.time.LocalDate localDate48 = offsetDateTime45.toLocalDate();
        java.time.Month month49 = localDate48.getMonth();
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime53.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.zone.ZoneRules zoneRules60 = zoneOffset58.getRules();
        java.time.ZonedDateTime zonedDateTime61 = offsetDateTime53.atZoneSameInstant((java.time.ZoneId) zoneOffset58);
        int int62 = zonedDateTime61.getDayOfMonth();
        int int63 = zonedDateTime61.getHour();
        java.time.ZonedDateTime zonedDateTime65 = zonedDateTime61.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        java.time.OffsetDateTime offsetDateTime71 = offsetDateTime69.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime75 = localDateTime72.atOffset(zoneOffset74);
        java.time.zone.ZoneRules zoneRules76 = zoneOffset74.getRules();
        java.time.ZonedDateTime zonedDateTime77 = offsetDateTime69.atZoneSameInstant((java.time.ZoneId) zoneOffset74);
        java.time.ZonedDateTime zonedDateTime78 = zonedDateTime77.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long80 = zonedDateTime77.getLong((java.time.temporal.TemporalField) chronoField79);
        long long81 = zonedDateTime65.getLong((java.time.temporal.TemporalField) chronoField79);
        boolean boolean82 = month49.isSupported((java.time.temporal.TemporalField) chronoField79);
        long long83 = localDateTime34.getLong((java.time.temporal.TemporalField) chronoField79);
        boolean boolean84 = chronoField79.isTimeBased();
        boolean boolean85 = month22.isSupported((java.time.temporal.TemporalField) chronoField79);
        int int86 = localDateTime4.get((java.time.temporal.TemporalField) chronoField79);
        java.time.Instant instant88 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant90 = instant88.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime91 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset93 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime94 = localDateTime91.atOffset(zoneOffset93);
        java.time.zone.ZoneRules zoneRules95 = zoneOffset93.getRules();
        java.time.ZonedDateTime zonedDateTime96 = java.time.ZonedDateTime.ofInstant(instant88, (java.time.ZoneId) zoneOffset93);
        java.time.ZoneId zoneId97 = zonedDateTime96.getZone();
        java.time.temporal.Temporal temporal98 = localDateTime4.adjustInto((java.time.temporal.Temporal) zonedDateTime96);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.OCTOBER + "'", month0.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.OCTOBER + "'", month2.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999999999 + "'", int21 == 999999999);
        org.junit.Assert.assertTrue("'" + month22 + "' != '" + java.time.Month.DECEMBER + "'", month22.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(fileTime27);
        org.junit.Assert.assertNotNull(periodTemporalQuery28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField30.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit31 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit31.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + month49 + "' != '" + java.time.Month.DECEMBER + "'", month49.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 23 + "'", int63 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(zoneRules76);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(zonedDateTime78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField79.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 999999999L + "'", long80 == 999999999L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 999999999L + "'", long81 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 999999999L + "'", long83 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 999999999 + "'", int86 == 999999999);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(zoneOffset93);
        org.junit.Assert.assertNotNull(offsetDateTime94);
        org.junit.Assert.assertNotNull(zoneRules95);
        org.junit.Assert.assertNotNull(zonedDateTime96);
        org.junit.Assert.assertNotNull(zoneId97);
        org.junit.Assert.assertNotNull(temporal98);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2) (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Set<java.time.ZoneId> zoneIdSet2 = zoneIdMap1.keySet();
        java.time.format.FormatStyle formatStyle3 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter4 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle3);
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology6 = dateTimeFormatter5.getChronology();
        java.time.format.TextStyle textStyle7 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getISO3Language();
        java.time.format.DecimalStyle decimalStyle10 = java.time.format.DecimalStyle.of(locale8);
        java.lang.String str11 = chronology6.getDisplayName(textStyle7, locale8);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter4.withChronology(chronology6);
        boolean boolean13 = zoneIdSet2.contains((java.lang.Object) dateTimeFormatter12);
        boolean boolean14 = zoneIdSet2.isEmpty();
        org.junit.Assert.assertNotNull(zoneIdSet2);
        org.junit.Assert.assertTrue("'" + formatStyle3 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle3.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + textStyle7 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle7.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertNotNull(decimalStyle10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISO" + "'", str11, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = null; // flaky: java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = null; // flaky: fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null; // flaky: fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = null; // flaky: fileChannel11.lock((long) 533000000, 0L, true);
// flaky:         fileLock19.release();
        java.nio.channels.FileChannel fileChannel21 = null; // flaky: fileLock19.channel();
        long long22 = 0L; // flaky: fileLock19.position();
        long long23 = 0L; // flaky: fileLock19.position();
        boolean boolean24 = false; // flaky: fileLock19.isShared();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
// flaky:         org.junit.Assert.assertNotNull(fileChannel11);
// flaky:         org.junit.Assert.assertNotNull(fileChannel13);
// flaky:         org.junit.Assert.assertNotNull(seekableByteChannel15);
// flaky:         org.junit.Assert.assertNotNull(fileLock19);
// flaky:         org.junit.Assert.assertNotNull(fileChannel21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 533000000L + "'", long22 == 533000000L);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 533000000L + "'", long23 == 533000000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = null; // flaky: path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = null; // flaky: java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        java.nio.channels.SeekableByteChannel seekableByteChannel20 = null; // flaky: fileChannel18.position((long) 861000000);
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        // The following exception was thrown during execution in test generation
        try {
            long long24 = 0L; // flaky: fileChannel18.read(byteBufferArray21, 100, 277998031);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
// flaky:         org.junit.Assert.assertNotNull(path17);
// flaky:         org.junit.Assert.assertNotNull(fileChannel18);
// flaky:         org.junit.Assert.assertNotNull(seekableByteChannel20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        java.security.PermissionCollection permissionCollection3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.security.Principal principal5 = null;
        java.security.Principal[] principalArray6 = new java.security.Principal[] { principal5 };
        java.security.ProtectionDomain protectionDomain7 = new java.security.ProtectionDomain(codeSource2, permissionCollection3, classLoader4, principalArray6);
        java.security.Principal[] principalArray8 = protectionDomain7.getPrincipals();
        java.security.Permission permission9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = protectionDomain7.implies(permission9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertNotNull(principalArray6);
        org.junit.Assert.assertNotNull(principalArray8);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.security.KeyException keyException0 = new java.security.KeyException();
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException((java.lang.Throwable) keyException0);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("+999999999-12-31T23:59:59.999999999", "\u4e2d\u6587               ");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Set<java.time.ZoneId> zoneIdSet9 = zoneIdMap1.keySet();
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant13 = instant11.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.ZoneId zoneId20 = zonedDateTime19.getZone();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset25);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset25.getRules();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset33);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition36 = zoneRules28.getTransition(localDateTime35);
        java.time.zone.ZoneRules zoneRules37 = zoneIdMap1.replace(zoneId20, zoneRules28);
        java.time.Instant instant39 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant41 = instant39.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime42 = java.nio.file.attribute.FileTime.from(instant39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery43 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period44 = instant39.query(periodTemporalQuery43);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition45 = zoneRules28.previousTransition(instant39);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime49.withSecond((int) (byte) 0);
        java.time.LocalDate localDate52 = offsetDateTime49.toLocalDate();
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean54 = offsetDateTime49.isSupported((java.time.temporal.TemporalField) chronoField53);
        boolean boolean55 = instant39.isSupported((java.time.temporal.TemporalField) chronoField53);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdSet9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNull(zoneOffsetTransition36);
        org.junit.Assert.assertNull(zoneRules37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(fileTime42);
        org.junit.Assert.assertNotNull(periodTemporalQuery43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNull(zoneOffsetTransition45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField53.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("name:lo (lo)", "iso8601", 44000, "\u4e94");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: name:lo (lo)");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        java.util.stream.IntStream.Builder builder4 = java.util.stream.IntStream.builder();
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder4);
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt8 = intStream7.spliterator();
        java.util.stream.IntStream.Builder builder9 = java.util.stream.IntStream.builder();
        boolean boolean10 = ofInt8.tryAdvance((java.util.function.IntConsumer) builder9);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt13 = intStream12.spliterator();
        java.util.stream.IntStream.Builder builder14 = java.util.stream.IntStream.builder();
        boolean boolean15 = ofInt13.tryAdvance((java.util.function.IntConsumer) builder14);
        ofInt8.forEachRemaining((java.util.function.IntConsumer) builder14);
        java.util.stream.IntStream intStream18 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt19 = intStream18.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = ofInt19.trySplit();
        java.util.stream.IntStream.Builder builder21 = java.util.stream.IntStream.builder();
        ofInt19.forEachRemaining((java.util.function.IntConsumer) builder21);
        java.util.function.IntConsumer intConsumer23 = builder14.andThen((java.util.function.IntConsumer) builder21);
        boolean boolean24 = ofInt2.tryAdvance(intConsumer23);
        long long25 = ofInt2.estimateSize();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Integer> wildcardComparator26 = ofInt2.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(ofInt8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(ofInt13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(intStream18);
        org.junit.Assert.assertNotNull(ofInt19);
        org.junit.Assert.assertNull(intSpliterator20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(intConsumer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.SECONDS;
        java.util.concurrent.TimeUnit timeUnit3 = java.util.concurrent.TimeUnit.MINUTES;
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from((-365243219162L), timeUnit3);
        long long6 = timeUnit3.toHours((long) (short) 100);
        long long7 = timeUnit0.convert((long) (byte) 0, timeUnit3);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertNotNull(timeUnit3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long30 = zonedDateTime27.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = zonedDateTime27.query(periodTemporalQuery31);
        boolean boolean33 = zonedDateTime11.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime27);
        java.lang.String str34 = zonedDateTime11.toString();
        java.time.LocalTime localTime35 = zonedDateTime11.toLocalTime();
        int int36 = zonedDateTime11.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999999999L + "'", long30 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+999999999-12-31T23:59:59.999999999Z" + "'", str34, "+999999999-12-31T23:59:59.999999999Z");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer4 = charBuffer3.flip();
        int int5 = charBuffer3.capacity();
        boolean boolean6 = charBuffer3.hasArray();
        boolean boolean7 = chronology1.equals((java.lang.Object) charBuffer3);
        java.util.List<java.time.chrono.Era> eraList8 = chronology1.eras();
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.BCE;
        int int10 = isoEra9.getValue();
        java.time.chrono.ChronoLocalDate chronoLocalDate13 = chronology1.dateYearDay((java.time.chrono.Era) isoEra9, 794000000, 59);
        java.time.LocalDate localDate15 = java.time.LocalDate.now();
        java.time.LocalDate localDate16 = java.time.LocalDate.MIN;
        boolean boolean17 = localDate15.isEqual((java.time.chrono.ChronoLocalDate) localDate16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean19 = localDate16.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.OffsetTime offsetTime20 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime22 = offsetTime20.withSecond(16);
        java.time.OffsetDateTime offsetDateTime23 = localDate16.atTime(offsetTime22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime35.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        int int45 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        boolean boolean46 = localDateTime25.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        int int52 = localDateTime47.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        boolean boolean57 = localDateTime47.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        boolean boolean58 = localDateTime41.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDate localDate59 = localDateTime41.toLocalDate();
        java.time.LocalDate localDate60 = java.time.LocalDate.now();
        java.time.LocalDate localDate61 = java.time.LocalDate.MIN;
        boolean boolean62 = localDate60.isEqual((java.time.chrono.ChronoLocalDate) localDate61);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean64 = localDate61.isSupported((java.time.temporal.TemporalField) chronoField63);
        int int65 = localDate61.getDayOfYear();
        int int66 = localDate59.compareTo((java.time.chrono.ChronoLocalDate) localDate61);
        java.time.Period period67 = localDate16.until((java.time.chrono.ChronoLocalDate) localDate61);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit70 = chronoField69.getBaseUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = localDate16.plus(999999999L, temporalUnit70);
        java.time.chrono.ChronoLocalDate chronoLocalDate72 = chronoLocalDate13.plus((long) (-1000002021), temporalUnit70);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(eraList8);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra9.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField18.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField63.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1999999998 + "'", int66 == 1999999998);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField69.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit70 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit70.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertNotNull(chronoLocalDate72);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(writer0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.LocalDateTime localDateTime14 = zonedDateTime11.toLocalDateTime();
        java.time.LocalTime localTime15 = localDateTime14.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths((long) (-999999999));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1083333333");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset11);
        java.time.Clock clock14 = clock6.withZone((java.time.ZoneId) zoneOffset11);
        java.time.ZoneId zoneId15 = clock14.getZone();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(clock14);
        org.junit.Assert.assertNotNull(zoneId15);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        int int2 = org.apache.commons.lang3.StringUtils.countMatches("\\u0020", "\u5206\u949f");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((int) '4', 997000000);
        java.util.stream.LongStream longStream3 = intStream2.asLongStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream5 = intStream2.skip((long) 33237);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long29 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField28);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery30 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period31 = zonedDateTime26.query(periodTemporalQuery30);
        java.time.ZoneId zoneId32 = zonedDateTime26.getZone();
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime26.plusWeeks((long) (-1));
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.minusMinutes(43200000000000L);
        boolean boolean37 = localDateChronoZonedDateTime14.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime36);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField28.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.LocalTime localTime11 = localTime9.plusHours((long) 4096);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getISO3Language();
        java.time.format.DecimalStyle decimalStyle15 = java.time.format.DecimalStyle.of(locale13);
        java.time.OffsetDateTime offsetDateTime16 = java.time.OffsetDateTime.now();
        boolean boolean17 = decimalStyle15.equals((java.lang.Object) offsetDateTime16);
        java.time.format.DecimalStyle decimalStyle19 = decimalStyle15.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle21 = decimalStyle19.withPositiveSign('\uffff');
        java.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter12.withDecimalStyle(decimalStyle21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = localTime9.format(dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(decimalStyle15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(decimalStyle19);
        org.junit.Assert.assertNotNull(decimalStyle21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = null; // flaky: java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = null; // flaky: fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null; // flaky: fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = null; // flaky: fileChannel11.lock((long) 533000000, 0L, true);
// flaky:         fileLock19.release();
        java.nio.channels.FileChannel fileChannel21 = null; // flaky: fileLock19.channel();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileLock fileLock22 = null; // flaky: fileChannel21.lock();
// flaky:             org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
// flaky:         org.junit.Assert.assertNotNull(fileChannel11);
// flaky:         org.junit.Assert.assertNotNull(fileChannel13);
// flaky:         org.junit.Assert.assertNotNull(seekableByteChannel15);
// flaky:         org.junit.Assert.assertNotNull(fileLock19);
// flaky:         org.junit.Assert.assertNotNull(fileChannel21);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder5 = charset4.newDecoder();
        boolean boolean6 = charsetDecoder5.isAutoDetecting();
        float float7 = charsetDecoder5.maxCharsPerByte();
        java.nio.charset.Charset charset8 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset9 = java.nio.charset.Charset.defaultCharset();
        boolean boolean10 = charset8.contains(charset9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charset8.newEncoder();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.wrap(byteArray13);
        java.nio.charset.CharsetEncoder charsetEncoder15 = charsetEncoder11.replaceWith(byteArray13);
        java.nio.charset.CodingErrorAction codingErrorAction16 = charsetEncoder15.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder17 = charsetDecoder5.onUnmappableCharacter(codingErrorAction16);
        java.nio.charset.CharsetDecoder charsetDecoder18 = charsetDecoder1.onMalformedInput(codingErrorAction16);
        float float19 = charsetDecoder1.maxCharsPerByte();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charsetDecoder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(codingErrorAction16);
        org.junit.Assert.assertNotNull(charsetDecoder17);
        org.junit.Assert.assertNotNull(charsetDecoder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.temporal.TemporalUnit temporalUnit6 = null;
        boolean boolean7 = localDate1.isSupported(temporalUnit6);
        long long8 = localDate1.toEpochDay();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate10 = localDate1.plusWeeks((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-365243219162L) + "'", long8 == (-365243219162L));
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer1.asReadOnlyBuffer();
        java.nio.ShortBuffer shortBuffer4 = shortBuffer3.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = shortBuffer3.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer4);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = charBuffer1.hasArray();
        boolean boolean5 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) charBuffer1);
        boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) charBuffer1, "java.nio.HeapFloatBuffer[pos=0 lim=2 cap=2]");
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.Buffer buffer3 = charBuffer1.mark();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(buffer3);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap15 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.zone.ZoneRules zoneRules22 = zoneIdMap15.getOrDefault((java.lang.Object) 1.0d, zoneRules21);
        java.time.zone.ZoneRules zoneRules23 = zoneIdMap11.put((java.time.ZoneId) zoneOffset13, zoneRules21);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime9.withZoneSameLocal((java.time.ZoneId) zoneOffset13);
        int int25 = zonedDateTime9.getHour();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime27 = zonedDateTime9.withHour(52);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 52");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutesSeconds(676000000, (-1000002021), 781000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 676000000 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        boolean boolean7 = byteBuffer1.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar(794000000, '-');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.temporal.TemporalAmount temporalAmount20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime21 = zonedDateTime19.plus(temporalAmount20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: amountToAdd");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.lang.String str6 = date5.toGMTString();
        date5.setYear(437000000);
        java.lang.Object obj9 = date5.clone();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jul 27 09:34:40 UTC 147549121");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str6, "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "Mon Jul 27 09:34:40 UTC 147549121");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "Mon Jul 27 09:34:40 UTC 147549121");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "Mon Jul 27 09:34:40 UTC 147549121");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset17);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap21 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.zone.ZoneRules zoneRules28 = zoneIdMap21.getOrDefault((java.lang.Object) 1.0d, zoneRules27);
        java.lang.String str29 = zoneRules27.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = zoneRules27.getTransitions();
        java.time.zone.ZoneRules zoneRules31 = zoneIdMap5.putIfAbsent((java.time.ZoneId) zoneOffset17, zoneRules27);
        java.time.Clock clock32 = java.time.Clock.systemUTC();
        java.time.Instant instant33 = clock32.instant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition34 = zoneRules27.nextTransition(instant33);
        java.util.Locale locale35 = java.util.Locale.US;
        boolean boolean36 = zoneRules27.equals((java.lang.Object) locale35);
        java.time.Instant instant38 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant40 = instant38.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime41 = java.nio.file.attribute.FileTime.from(instant38);
        java.time.ZoneOffset zoneOffset42 = zoneRules27.getOffset(instant38);
        java.time.OffsetDateTime offsetDateTime43 = instant3.atOffset(zoneOffset42);
        java.time.LocalTime localTime44 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime46 = localTime44.plusHours((long) 16384);
        java.time.LocalTime localTime48 = localTime44.plusMinutes(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal49 = instant3.adjustInto((java.time.temporal.Temporal) localTime44);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str29, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList30);
        org.junit.Assert.assertNull(zoneRules31);
        org.junit.Assert.assertNotNull(clock32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNull(zoneOffsetTransition34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(fileTime41);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.lang.String[] strArray4 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray6 = org.apache.commons.lang3.StringUtils.stripAll(strArray4, "GBR");
        boolean boolean7 = org.apache.commons.lang3.StringUtils.startsWithAny("\u7f8e\u56fd", strArray6);
        java.lang.String str8 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray6);
        java.lang.String str12 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray6, 'a', 861000000, 125000000);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray4 = intStream1.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.Clock clock28 = java.time.Clock.systemUTC();
        java.time.Instant instant29 = clock28.instant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition30 = zoneRules23.nextTransition(instant29);
        java.util.Locale locale31 = java.util.Locale.US;
        boolean boolean32 = zoneRules23.equals((java.lang.Object) locale31);
        java.time.Instant instant34 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant36 = instant34.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime37 = java.nio.file.attribute.FileTime.from(instant34);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery38 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period39 = instant34.query(periodTemporalQuery38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        boolean boolean42 = instant34.isSupported(temporalUnit41);
        java.time.Instant instant44 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant46 = instant44.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.zone.ZoneRules zoneRules51 = zoneOffset49.getRules();
        java.time.ZonedDateTime zonedDateTime52 = java.time.ZonedDateTime.ofInstant(instant44, (java.time.ZoneId) zoneOffset49);
        java.time.ZoneId zoneId53 = zonedDateTime52.getZone();
        java.time.Clock clock54 = java.time.Clock.fixed(instant34, zoneId53);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset59);
        java.time.zone.ZoneRules zoneRules62 = zoneOffset59.getRules();
        java.time.OffsetDateTime offsetDateTime63 = instant34.atOffset(zoneOffset59);
        java.time.Instant instant65 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant67 = instant65.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime68 = java.nio.file.attribute.FileTime.from(instant65);
        java.time.Instant instant70 = instant65.plusMillis((long) 10);
        boolean boolean71 = instant34.isAfter(instant65);
        java.time.ZoneOffset zoneOffset72 = zoneRules23.getOffset(instant65);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(clock28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNull(zoneOffsetTransition30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(fileTime37);
        org.junit.Assert.assertNotNull(periodTemporalQuery38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zoneId53);
        org.junit.Assert.assertNotNull(clock54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(fileTime68);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(zoneOffset72);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = offsetDateTime25.atZoneSameInstant((java.time.ZoneId) zoneOffset30);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime33.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit35 = null;
        boolean boolean36 = zonedDateTime34.isSupported(temporalUnit35);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime34.withMonth((int) (short) 1);
        java.time.Instant instant39 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime38);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant41 = temporalUnit18.addTo(instant39, (long) 29);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        java.util.stream.IntStream intStream5 = intStream4.parallel();
        java.util.function.IntPredicate intPredicate6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = intStream5.allMatch(intPredicate6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "/tmp/United Kingdom1613207169082904107aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 97 + "'", int1 == 97);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("java.nio.ByteBufferAsIntBufferRB[pos=0 lim=7 cap=7]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.nio.bytebufferasintbufferrb[pos=0lim=7cap=7]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology3);
        java.text.Format format10 = dateTimeFormatter1.toFormat();
        java.time.LocalDate localDate11 = java.time.LocalDate.now();
        java.time.LocalDate localDate12 = java.time.LocalDate.MIN;
        boolean boolean13 = localDate11.isEqual((java.time.chrono.ChronoLocalDate) localDate12);
        int int14 = localDate12.getYear();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.temporal.Temporal temporal19 = localDate12.adjustInto((java.time.temporal.Temporal) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap29 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap29.getOrDefault((java.lang.Object) 1.0d, zoneRules35);
        java.lang.String str37 = zoneRules35.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList38 = zoneRules35.getTransitions();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        int int44 = localDateTime39.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        int int49 = localDateTime40.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime45);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        int int55 = localDateTime50.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        int int60 = localDateTime51.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime56);
        boolean boolean61 = localDateTime40.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime56);
        java.time.format.DateTimeFormatter dateTimeFormatter62 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str63 = localDateTime56.format(dateTimeFormatter62);
        java.time.ZoneOffset zoneOffset64 = zoneRules35.getOffset(localDateTime56);
        java.time.OffsetDateTime offsetDateTime65 = offsetDateTime27.withOffsetSameLocal(zoneOffset64);
        long long66 = localDateTime15.toEpochSecond(zoneOffset64);
        java.lang.String str67 = zoneOffset64.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator68 = format10.formatToCharacterIterator((java.lang.Object) str67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format target must implement TemporalAccessor");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(format10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-999999999) + "'", int14 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(temporal19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str37, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str63, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 31556889832780799L + "'", long66 == 31556889832780799L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Z" + "'", str67, "Z");
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.Period period7 = java.time.Period.from((java.time.temporal.TemporalAmount) period6);
        java.time.Period period9 = period7.withYears(722000000);
        java.time.Period period10 = period9.negated();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.time.format.FormatStyle formatStyle0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: timeStyle");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("etuniM", "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "etuniM" + "'", str2, "etuniM");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.LocalDateTime localDateTime3 = localDateTime0.plusWeeks(0L);
        java.time.LocalDateTime localDateTime5 = localDateTime3.withHour(14);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration77 = networkInterface76.getInetAddresses();
        java.lang.String str78 = networkInterface76.getDisplayName();
        java.net.NetworkInterface networkInterface79 = networkInterface76.getParent();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertNotNull(inetAddressEnumeration77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "lo" + "'", str78, "lo");
        org.junit.Assert.assertNull(networkInterface79);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder8 = charsetEncoder7.reset();
        java.nio.charset.CodingErrorAction codingErrorAction9 = charsetEncoder8.malformedInputAction();
        java.nio.charset.CharsetEncoder charsetEncoder10 = charsetEncoder8.reset();
        boolean boolean12 = charsetEncoder8.canEncode((java.lang.CharSequence) "zh_TW");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(codingErrorAction9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getHour();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.plusDays((long) 43200);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000118");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = zoneRules7.getTransitions();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str35 = localDateTime28.format(dateTimeFormatter34);
        java.time.ZoneOffset zoneOffset36 = zoneRules7.getOffset(localDateTime28);
        java.time.LocalDateTime localDateTime38 = localDateTime28.minusMinutes(13L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime40 = localDateTime38.plusMinutes(999999L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000001");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList67);
        boolean boolean70 = zoneIdSet46.removeAll((java.util.Collection<java.lang.String>) strList69);
        strList69.clear();
        java.io.File file73 = new java.io.File("GBR");
        boolean boolean74 = file73.mkdirs();
        java.nio.file.Path path75 = file73.toPath();
        boolean boolean76 = strList69.contains((java.lang.Object) path75);
        int int77 = path4.compareTo(path75);
        java.io.File file79 = new java.io.File("GBR");
        boolean boolean81 = file79.setWritable(true);
        java.nio.file.Path path82 = file79.toPath();
        java.nio.file.Path path84 = path82.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.lang.String str85 = path84.toString();
        boolean boolean86 = path84.isAbsolute();
        boolean boolean87 = path75.endsWith(path84);
        java.nio.file.WatchService watchService88 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind89 = null;
        java.nio.file.WatchEvent.Kind[] kindArray91 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray92 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray91;
        wildcardKindArray92[0] = wildcardKind89;
        java.nio.file.WatchEvent.Modifier[] modifierArray95 = new java.nio.file.WatchEvent.Modifier[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey96 = path75.register(watchService88, wildcardKindArray92, modifierArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull("file73.getParent() == null", file73.getParent());
        org.junit.Assert.assertEquals(file73.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(path75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNull("file79.getParent() == null", file79.getParent());
        org.junit.Assert.assertEquals(file79.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(path82);
        org.junit.Assert.assertNotNull(path84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str85, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(kindArray91);
        org.junit.Assert.assertNotNull(wildcardKindArray92);
        org.junit.Assert.assertNotNull(modifierArray95);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        java.util.stream.IntStream.Builder builder4 = java.util.stream.IntStream.builder();
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder4);
        boolean boolean7 = ofInt2.hasCharacteristics(829000000);
        java.util.stream.IntStream intStream9 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt10 = intStream9.spliterator();
        java.util.stream.IntStream.Builder builder11 = java.util.stream.IntStream.builder();
        boolean boolean12 = ofInt10.tryAdvance((java.util.function.IntConsumer) builder11);
        java.util.stream.IntStream intStream14 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt15 = intStream14.spliterator();
        java.util.stream.IntStream.Builder builder16 = java.util.stream.IntStream.builder();
        boolean boolean17 = ofInt15.tryAdvance((java.util.function.IntConsumer) builder16);
        ofInt10.forEachRemaining((java.util.function.IntConsumer) builder16);
        java.util.stream.IntStream intStream20 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt21 = intStream20.min();
        java.lang.String str22 = optionalInt21.toString();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate24 = localDateTime23.toLocalDate();
        boolean boolean25 = optionalInt21.equals((java.lang.Object) localDate24);
        int int27 = optionalInt21.orElse(59);
        java.util.stream.IntStream intStream29 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt30 = intStream29.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator31 = ofInt30.trySplit();
        java.util.stream.IntStream.Builder builder32 = java.util.stream.IntStream.builder();
        ofInt30.forEachRemaining((java.util.function.IntConsumer) builder32);
        optionalInt21.ifPresent((java.util.function.IntConsumer) builder32);
        boolean boolean35 = ofInt10.tryAdvance((java.util.function.IntConsumer) builder32);
        java.util.stream.IntStream.Builder builder37 = builder32.add(12);
        java.util.stream.IntStream.Builder builder39 = builder37.add(371000000);
        boolean boolean40 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder39);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(ofInt10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertNotNull(ofInt15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNotNull(optionalInt21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OptionalInt[10]" + "'", str22, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intStream29);
        org.junit.Assert.assertNotNull(ofInt30);
        org.junit.Assert.assertNull(intSpliterator31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.TUESDAY;
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.TUESDAY));
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("+999999999-12-31T23:59:59.999999999", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=+999999999-12-31t23:59:59.999999999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.WEDNESDAY;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.temporal.Temporal temporal7 = dayOfWeek0.adjustInto((java.time.temporal.Temporal) offsetDateTime4);
        java.lang.Object obj8 = null;
        boolean boolean9 = offsetDateTime4.equals(obj8);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime13.minusYears((long) 722000000);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.plusHours((long) 21);
        boolean boolean20 = offsetDateTime4.isBefore(offsetDateTime19);
        java.time.Duration duration23 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.lang.String str24 = duration23.toString();
        java.time.temporal.Temporal temporal25 = offsetDateTime19.minus((java.time.temporal.TemporalAmount) duration23);
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(temporal7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT10S" + "'", str24, "PT10S");
        org.junit.Assert.assertNotNull(temporal25);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        boolean boolean56 = clock6.equals((java.lang.Object) zoneIdSet46);
        java.nio.channels.FileChannel.MapMode[] mapModeArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileChannel.MapMode[] mapModeArray58 = zoneIdSet46.toArray(mapModeArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR G...", 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR G..." + "'", str2, "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR G...");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.time.LocalTime localTime4 = java.time.LocalTime.of(7, 59, 29, 794000000);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDate localDate4 = java.time.LocalDate.now();
        java.time.LocalDate localDate5 = java.time.LocalDate.MIN;
        boolean boolean6 = localDate4.isEqual((java.time.chrono.ChronoLocalDate) localDate5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.withSecond((int) (byte) 0);
        java.time.LocalDate localDate13 = offsetDateTime10.toLocalDate();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean15 = offsetDateTime10.isSupported((java.time.temporal.TemporalField) chronoField14);
        boolean boolean16 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField14);
        java.time.Period period17 = java.time.Period.between(localDate1, localDate4);
        long long18 = localDate4.toEpochDay();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset27.getRules();
        java.time.ZonedDateTime zonedDateTime30 = offsetDateTime22.atZoneSameInstant((java.time.ZoneId) zoneOffset27);
        int int31 = zonedDateTime30.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime30.withDayOfYear(10);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.ZonedDateTime zonedDateTime45 = offsetDateTime37.atZoneSameInstant((java.time.ZoneId) zoneOffset42);
        java.time.ZoneId zoneId46 = zonedDateTime45.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime47 = zonedDateTime45.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.OffsetDateTime offsetDateTime53 = offsetDateTime51.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        java.time.zone.ZoneRules zoneRules58 = zoneOffset56.getRules();
        java.time.ZonedDateTime zonedDateTime59 = offsetDateTime51.atZoneSameInstant((java.time.ZoneId) zoneOffset56);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime59.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long62 = zonedDateTime59.getLong((java.time.temporal.TemporalField) chronoField61);
        long long63 = zonedDateTime45.getLong((java.time.temporal.TemporalField) chronoField61);
        int int64 = zonedDateTime33.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime45);
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit66 = chronoField65.getBaseUnit();
        java.time.temporal.ValueRange valueRange67 = zonedDateTime33.range((java.time.temporal.TemporalField) chronoField65);
        boolean boolean69 = valueRange67.isValidValue((long) 1);
        java.time.LocalDate localDate70 = java.time.LocalDate.now();
        java.time.LocalDate localDate71 = java.time.LocalDate.MIN;
        boolean boolean72 = localDate70.isEqual((java.time.chrono.ChronoLocalDate) localDate71);
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean74 = localDate71.isSupported((java.time.temporal.TemporalField) chronoField73);
        int int75 = localDate71.getDayOfYear();
        java.time.LocalDate localDate76 = java.time.LocalDate.now();
        java.time.LocalDate localDate77 = java.time.LocalDate.MIN;
        boolean boolean78 = localDate76.isEqual((java.time.chrono.ChronoLocalDate) localDate77);
        int int79 = localDate77.getYear();
        java.lang.String str80 = localDate77.toString();
        java.time.chrono.ChronoPeriod chronoPeriod81 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate71, (java.time.chrono.ChronoLocalDate) localDate77);
        boolean boolean82 = valueRange67.equals((java.lang.Object) localDate77);
        boolean boolean83 = localDate4.isBefore((java.time.chrono.ChronoLocalDate) localDate77);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField14.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(zoneId46);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(zoneRules58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField61.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 999999999L + "'", long62 == 999999999L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 999999999L + "'", long63 == 999999999L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField65.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit66 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit66.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField73.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-999999999) + "'", int79 == (-999999999));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "-999999999-01-01" + "'", str80, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean1 = inetAddress0.isMCLinkLocal();
        byte[] byteArray2 = inetAddress0.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.wrap(byteArray2, 29, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[127, 0, 0, 1]");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("etuniM", "name:lo (lo)", 14);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.util.stream.LongStream longStream0 = null;
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream3 = java.util.stream.LongStream.concat(longStream1, longStream2);
        java.util.stream.LongStream longStream4 = longStream3.sorted();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = java.util.stream.LongStream.concat(longStream0, longStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiPrintable('/');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.LocalDateTime localDateTime3 = localDateTime0.plusWeeks(0L);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant7 = instant5.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime8 = java.nio.file.attribute.FileTime.from(instant5);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = instant5.query(periodTemporalQuery9);
        java.time.Period period11 = localDateTime0.query(periodTemporalQuery9);
        int int12 = period11.getYears();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.withSecond((int) (byte) 0);
        java.time.LocalDate localDate20 = offsetDateTime17.toLocalDate();
        java.time.Month month21 = localDate20.getMonth();
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = offsetDateTime25.atZoneSameInstant((java.time.ZoneId) zoneOffset30);
        int int34 = zonedDateTime33.getDayOfMonth();
        int int35 = zonedDateTime33.getHour();
        java.time.ZonedDateTime zonedDateTime37 = zonedDateTime33.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.OffsetDateTime offsetDateTime43 = offsetDateTime41.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.zone.ZoneRules zoneRules48 = zoneOffset46.getRules();
        java.time.ZonedDateTime zonedDateTime49 = offsetDateTime41.atZoneSameInstant((java.time.ZoneId) zoneOffset46);
        java.time.ZonedDateTime zonedDateTime50 = zonedDateTime49.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long52 = zonedDateTime49.getLong((java.time.temporal.TemporalField) chronoField51);
        long long53 = zonedDateTime37.getLong((java.time.temporal.TemporalField) chronoField51);
        boolean boolean54 = month21.isSupported((java.time.temporal.TemporalField) chronoField51);
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField51.getRangeUnit();
        java.time.Duration duration56 = java.time.Duration.of((long) '/', temporalUnit55);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = period11.get(temporalUnit55);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Seconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + month21 + "' != '" + java.time.Month.DECEMBER + "'", month21.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 31 + "'", int34 == 31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 23 + "'", int35 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField51.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 999999999L + "'", long52 == 999999999L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 999999999L + "'", long53 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertNotNull(duration56);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        int int21 = charBuffer1.length();
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) charBuffer1, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.util.Locale locale1 = new java.util.Locale("etuniM");
        org.junit.Assert.assertEquals(locale1.toString(), "etunim");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = java.nio.charset.Charset.isSupported("1 - 53");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 1 - 53");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap15 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.zone.ZoneRules zoneRules22 = zoneIdMap15.getOrDefault((java.lang.Object) 1.0d, zoneRules21);
        java.time.zone.ZoneRules zoneRules23 = zoneIdMap11.put((java.time.ZoneId) zoneOffset13, zoneRules21);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime9.withZoneSameLocal((java.time.ZoneId) zoneOffset13);
        java.time.format.FormatStyle formatStyle25 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle25);
        java.lang.String str27 = zonedDateTime24.format(dateTimeFormatter26);
        java.util.Locale locale28 = dateTimeFormatter26.getLocale();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + formatStyle25 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle25.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e0a\u5348\u65f6\u5206\u79d2" + "'", str27, "\u4e0a\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(10);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        boolean boolean3 = floatBuffer2.hasArray();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        int int4 = ofDouble3.characteristics();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics5 = new java.util.DoubleSummaryStatistics();
        boolean boolean6 = ofDouble3.tryAdvance((java.util.function.DoubleConsumer) doubleSummaryStatistics5);
        double double7 = doubleSummaryStatistics5.getAverage();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(doubleSummaryStatistics5.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        int int9 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        int int20 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        boolean boolean26 = localDateTime5.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.format.DateTimeFormatter dateTimeFormatter27 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str28 = localDateTime21.format(dateTimeFormatter27);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime29 = java.time.OffsetDateTime.parse((java.lang.CharSequence) charBuffer1, dateTimeFormatter27);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str28, "+999999999-12-31T23:59:59.999999999");
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap31 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap34 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.zone.ZoneRules zoneRules40 = zoneOffset38.getRules();
        java.time.zone.ZoneRules zoneRules41 = zoneIdMap34.getOrDefault((java.lang.Object) 1.0d, zoneRules40);
        java.lang.String str42 = zoneRules40.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = zoneRules40.getTransitions();
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        int int49 = localDateTime44.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime45);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        int int54 = localDateTime45.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        int int60 = localDateTime55.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime56);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        int int65 = localDateTime56.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        boolean boolean66 = localDateTime45.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        java.time.format.DateTimeFormatter dateTimeFormatter67 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str68 = localDateTime61.format(dateTimeFormatter67);
        java.time.ZoneOffset zoneOffset69 = zoneRules40.getOffset(localDateTime61);
        java.time.zone.ZoneRules zoneRules70 = zoneIdMap31.getOrDefault((java.lang.Object) '\n', zoneRules40);
        java.time.zone.ZoneRules zoneRules71 = zoneIdMap1.put((java.time.ZoneId) zoneOffset29, zoneRules40);
        int int72 = zoneIdMap1.size();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(zoneRules40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str42, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str68, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneRules70);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Set<java.time.ZoneId> zoneIdSet2 = zoneIdMap1.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strList28.removeAll((java.util.Collection<java.lang.String>) strList44);
        boolean boolean46 = strList16.retainAll((java.util.Collection<java.lang.String>) strList44);
        java.io.File file48 = new java.io.File("GBR");
        boolean boolean50 = file48.setWritable(true);
        boolean boolean52 = file48.setWritable(true);
        java.net.URI uRI53 = file48.toURI();
        java.io.File file55 = new java.io.File("GBR");
        boolean boolean57 = file55.setWritable(true);
        java.nio.file.Path path58 = file55.toPath();
        java.nio.file.Path path60 = path58.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI61 = path58.toUri();
        java.net.URI uRI62 = uRI53.relativize(uRI61);
        boolean boolean63 = strList16.equals((java.lang.Object) uRI53);
        boolean boolean64 = zoneIdSet2.retainAll((java.util.Collection<java.lang.String>) strList16);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer67 = byteBuffer66.asLongBuffer();
        java.nio.LongBuffer longBuffer69 = longBuffer67.put(0L);
        java.nio.ByteBuffer byteBuffer71 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer72 = byteBuffer71.asLongBuffer();
        float float74 = byteBuffer71.getFloat(4);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer71.putChar('\r');
        java.nio.LongBuffer longBuffer77 = byteBuffer76.asLongBuffer();
        java.nio.LongBuffer longBuffer78 = longBuffer67.put(longBuffer77);
        java.lang.String str79 = longBuffer67.toString();
        java.nio.LongBuffer longBuffer80 = longBuffer67.asReadOnlyBuffer();
        java.nio.Buffer[] bufferArray81 = new java.nio.Buffer[] { longBuffer80 };
        java.nio.Buffer[] bufferArray82 = zoneIdSet2.toArray(bufferArray81);
        org.junit.Assert.assertNotNull(zoneIdSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(uRI53);
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(path58);
        org.junit.Assert.assertNotNull(path60);
        org.junit.Assert.assertNotNull(uRI61);
        org.junit.Assert.assertNotNull(uRI62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(longBuffer67);
        org.junit.Assert.assertNotNull(longBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(longBuffer72);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(longBuffer77);
        org.junit.Assert.assertNotNull(longBuffer78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str79, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(longBuffer80);
        org.junit.Assert.assertNotNull(bufferArray81);
        org.junit.Assert.assertNotNull(bufferArray82);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "\u4e0a\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.lang.String str77 = networkInterface76.getDisplayName();
        byte[] byteArray78 = networkInterface76.getHardwareAddress();
        byte[] byteArray79 = networkInterface76.getHardwareAddress();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "lo" + "'", str77, "lo");
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNull(byteArray79);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate3 = localDateTime2.toLocalDate();
        java.time.LocalDateTime localDateTime5 = localDateTime2.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange6 = chronoField1.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime2);
        boolean boolean7 = localDate0.equals((java.lang.Object) valueRange6);
        java.time.LocalDate localDate8 = java.time.LocalDate.now();
        java.time.LocalDate localDate9 = java.time.LocalDate.MIN;
        boolean boolean10 = localDate8.isEqual((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean12 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField11);
        int int13 = localDate9.getDayOfYear();
        java.time.Period period14 = java.time.Period.between(localDate0, localDate9);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.time.chrono.Chronology chronology17 = java.time.chrono.Chronology.ofLocale(locale15);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime31 = zonedDateTime29.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.ZonedDateTime zonedDateTime43 = offsetDateTime35.atZoneSameInstant((java.time.ZoneId) zoneOffset40);
        java.time.ZonedDateTime zonedDateTime44 = zonedDateTime43.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long46 = zonedDateTime43.getLong((java.time.temporal.TemporalField) chronoField45);
        long long47 = zonedDateTime29.getLong((java.time.temporal.TemporalField) chronoField45);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime29.minusSeconds((long) 999999999);
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime50 = chronology17.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime49);
        boolean boolean51 = localDate9.equals((java.lang.Object) chronology17);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField11.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField45.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 999999999L + "'", long46 == 999999999L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 999999999L + "'", long47 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = intStream3.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.ZonedDateTime zonedDateTime13 = offsetDateTime5.atZoneSameInstant((java.time.ZoneId) zoneOffset10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime13.withLaterOffsetAtOverlap();
        java.time.Period period16 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period17 = java.time.Period.from((java.time.temporal.TemporalAmount) period16);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str19 = dateTimeFormatter18.toString();
        boolean boolean20 = period17.equals((java.lang.Object) dateTimeFormatter18);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime21 = zonedDateTime14.plus((java.time.temporal.TemporalAmount) period17);
        boolean boolean22 = duration1.equals((java.lang.Object) period17);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList23 = period17.getUnits();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str19, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(temporalUnitList23);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.Month month7 = localDate6.getMonth();
        java.time.Month month8 = localDate6.getMonth();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        java.time.ZoneId zoneId21 = zonedDateTime20.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime22 = zonedDateTime20.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.OffsetDateTime offsetDateTime28 = offsetDateTime26.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.zone.ZoneRules zoneRules33 = zoneOffset31.getRules();
        java.time.ZonedDateTime zonedDateTime34 = offsetDateTime26.atZoneSameInstant((java.time.ZoneId) zoneOffset31);
        java.time.ZonedDateTime zonedDateTime35 = zonedDateTime34.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long37 = zonedDateTime34.getLong((java.time.temporal.TemporalField) chronoField36);
        long long38 = zonedDateTime20.getLong((java.time.temporal.TemporalField) chronoField36);
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime20.minusSeconds((long) 999999999);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime40.plusHours((-1L));
        boolean boolean43 = localDate6.equals((java.lang.Object) zonedDateTime42);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.DECEMBER + "'", month7.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.DECEMBER + "'", month8.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField36.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 999999999L + "'", long37 == 999999999L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 999999999L + "'", long38 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset4.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset4.newEncoder();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder7.replaceWith(byteArray9);
        java.nio.charset.CodingErrorAction codingErrorAction12 = charsetEncoder11.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charsetDecoder1.onUnmappableCharacter(codingErrorAction12);
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder15 = charset14.newDecoder();
        boolean boolean16 = charsetDecoder15.isAutoDetecting();
        java.nio.charset.CodingErrorAction codingErrorAction17 = charsetDecoder15.malformedInputAction();
        java.nio.charset.CharsetDecoder charsetDecoder18 = charsetDecoder1.onMalformedInput(codingErrorAction17);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetDecoder charsetDecoder20 = charsetDecoder1.replaceWith("+999999998-365");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(codingErrorAction12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charsetDecoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(codingErrorAction17);
        org.junit.Assert.assertNotNull(charsetDecoder18);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(locale1);
        java.lang.String str3 = locale1.toLanguageTag();
        java.lang.String str4 = locale1.getDisplayScript();
        java.lang.String str5 = org.apache.commons.lang3.StringUtils.lowerCase("iso8601", locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-CN" + "'", str3, "zh-CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "iso8601" + "'", str5, "iso8601");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusDays((long) 5);
        int int8 = offsetDateTime7.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 360 + "'", int8 == 360);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit1 = chronoField0.getBaseUnit();
        boolean boolean2 = temporalUnit1.isTimeBased();
        java.time.Duration duration3 = temporalUnit1.getDuration();
        java.time.Duration duration4 = java.time.Duration.from((java.time.temporal.TemporalAmount) duration3);
        java.time.Duration duration6 = duration3.minusNanos((long) ' ');
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit1 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit1.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month2 = month0.minus((long) (short) -1);
        java.time.Month month4 = month2.minus(32000L);
        int int5 = month4.minLength();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.FEBRUARY + "'", month2.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.JUNE + "'", month4.equals(java.time.Month.JUNE));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30 + "'", int5 == 30);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.of("\u4e0b\u5348\u65f6\u5206\u79d2");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unknown chronology: ??11?59?59?");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        java.security.SignatureException signatureException1 = new java.security.SignatureException("java.nio.HeapShortBuffer[pos=64 lim=64 cap=64]");
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        int int16 = localDateTime14.getSecond();
        java.time.Duration duration19 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int20 = duration19.getNano();
        java.time.Duration duration21 = duration19.abs();
        java.time.LocalDateTime localDateTime22 = localDateTime14.minus((java.time.temporal.TemporalAmount) duration21);
        java.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((long) (short) 0);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String str27 = locale26.getISO3Country();
        java.lang.String str28 = chronoField25.getDisplayName(locale26);
        boolean boolean29 = localDateTime24.isSupported((java.time.temporal.TemporalField) chronoField25);
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.lang.String str31 = chronoField25.getDisplayName(locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = locale30.getUnicodeLocaleType("\u4e2d\u56fd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField25.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GBR" + "'", str27, "GBR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Minute" + "'", str28, "Minute");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u5206\u949f" + "'", str31, "\u5206\u949f");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.util.concurrent.TimeoutException timeoutException1 = new java.util.concurrent.TimeoutException("");
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.io.File file6 = new java.io.File("GBR");
        boolean boolean8 = file6.setWritable(true);
        boolean boolean10 = file6.setWritable(true);
        java.lang.String str11 = file6.getPath();
        long long12 = file6.length();
        java.io.File file13 = file6.getAbsoluteFile();
        boolean boolean14 = fileTime4.equals((java.lang.Object) file13);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter15 = new java.io.PrintWriter(file13);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/GBR (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4096L + "'", long12 == 4096L);
        org.junit.Assert.assertNotNull(file13);
// flaky:         org.junit.Assert.assertEquals(file13.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        int int1 = isoEra0.getValue();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap3 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        java.time.zone.ZoneRules zoneRules9 = zoneOffset7.getRules();
        java.time.zone.ZoneRules zoneRules10 = zoneIdMap3.getOrDefault((java.lang.Object) 1.0d, zoneRules9);
        java.lang.String str11 = zoneRules9.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList12 = zoneRules9.getTransitions();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        int int18 = localDateTime13.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        int int23 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        boolean boolean35 = localDateTime14.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.format.DateTimeFormatter dateTimeFormatter36 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str37 = localDateTime30.format(dateTimeFormatter36);
        java.time.ZoneOffset zoneOffset38 = zoneRules9.getOffset(localDateTime30);
        java.time.LocalDateTime localDateTime40 = localDateTime30.minusMinutes(13L);
        java.time.temporal.Temporal temporal41 = isoEra0.adjustInto((java.time.temporal.Temporal) localDateTime40);
        int int42 = isoEra0.getValue();
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str11, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str37, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(temporal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zho");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap2 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.time.zone.ZoneRules zoneRules14 = zoneIdMap2.put((java.time.ZoneId) zoneOffset4, zoneRules12);
        char[] charArray22 = new char[] { 'a', '#', '4', '#' };
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsAny("", charArray22);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray22);
        boolean boolean25 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray22);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap27 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.zone.ZoneRules zoneRules33 = zoneOffset31.getRules();
        java.time.zone.ZoneRules zoneRules34 = zoneIdMap27.getOrDefault((java.lang.Object) 1.0d, zoneRules33);
        java.lang.String str35 = zoneRules33.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList36 = zoneRules33.getTransitions();
        java.time.zone.ZoneRules zoneRules37 = zoneIdMap2.getOrDefault((java.lang.Object) charArray22, zoneRules33);
        boolean boolean38 = org.apache.commons.lang3.StringUtils.containsAny("/experiment/GBR/", charArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.wrap(charArray22, (int) '-', 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNull(zoneRules14);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str35, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList36);
        org.junit.Assert.assertNotNull(zoneRules37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        java.security.GeneralSecurityException generalSecurityException5 = new java.security.GeneralSecurityException((java.lang.Throwable) accessControlException2);
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.time.chrono.Chronology chronology30 = java.time.chrono.Chronology.ofLocale(locale28);
        java.time.zone.ZoneRules zoneRules31 = zoneIdMap1.get((java.lang.Object) locale28);
        java.util.Locale locale32 = java.util.Locale.JAPAN;
        java.lang.String str33 = locale28.getDisplayLanguage(locale32);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNull(zoneRules31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str33, "\u4e2d\u56fd\u8a9e");
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("OVERFLOW", "GBR", (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        boolean boolean20 = localDateTime17.equals((java.lang.Object) charset19);
        boolean boolean21 = charset19.canEncode();
        boolean boolean22 = charset19.canEncode();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(outputStream0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        long long1 = longSummaryStatistics0.getSum();
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt4 = intStream3.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = ofInt4.trySplit();
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt8 = intStream7.spliterator();
        java.util.stream.IntStream.Builder builder9 = java.util.stream.IntStream.builder();
        boolean boolean10 = ofInt8.tryAdvance((java.util.function.IntConsumer) builder9);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt13 = intStream12.spliterator();
        java.util.stream.IntStream.Builder builder14 = java.util.stream.IntStream.builder();
        boolean boolean15 = ofInt13.tryAdvance((java.util.function.IntConsumer) builder14);
        ofInt8.forEachRemaining((java.util.function.IntConsumer) builder14);
        boolean boolean17 = ofInt4.tryAdvance((java.util.function.IntConsumer) builder14);
        java.util.function.IntConsumer intConsumer18 = longSummaryStatistics0.andThen((java.util.function.IntConsumer) builder14);
        long long19 = longSummaryStatistics0.getCount();
        java.lang.String str20 = longSummaryStatistics0.toString();
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(ofInt4);
        org.junit.Assert.assertNull(intSpliterator5);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(ofInt8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(ofInt13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intConsumer18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}" + "'", str20, "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.lang.String str1 = dateTimeFormatter0.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ParseCaseSensitive(false)Value(Year,4,10,EXCEEDS_PAD)'-'Value(DayOfYear,3)[Offset(+HH:MM:ss,'Z')]" + "'", str1, "ParseCaseSensitive(false)Value(Year,4,10,EXCEEDS_PAD)'-'Value(DayOfYear,3)[Offset(+HH:MM:ss,'Z')]");
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) charBuffer3);
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        int int8 = charBuffer6.capacity();
        boolean boolean9 = charBuffer6.hasArray();
        java.nio.CharBuffer charBuffer11 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer12 = charBuffer11.flip();
        java.nio.CharBuffer charBuffer13 = charBuffer11.duplicate();
        java.nio.CharBuffer charBuffer14 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer6, charBuffer13);
        int int15 = charBuffer14.capacity();
        int int16 = charBuffer3.read(charBuffer14);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter("ISO");
        printWriter18.print(385000000);
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        java.nio.CharBuffer charBuffer24 = charBuffer22.duplicate();
        char[] charArray32 = new char[] { 'a', '#', '4', '#' };
        boolean boolean33 = org.apache.commons.lang3.StringUtils.containsAny("", charArray32);
        boolean boolean34 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray32);
        boolean boolean35 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray32);
        int int36 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer24, charArray32);
        java.nio.CharBuffer charBuffer37 = java.nio.CharBuffer.wrap(charArray32);
        java.nio.CharBuffer charBuffer38 = java.nio.CharBuffer.wrap(charArray32);
        printWriter18.println(charArray32);
        boolean boolean40 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) charBuffer14, charArray32);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.util.stream.IntStream intStream4 = charBuffer3.codePoints();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.LocalTime localTime12 = java.time.LocalTime.now(clock11);
        java.time.LocalTime localTime14 = localTime12.plusMinutes((long) 10);
        int int15 = localTime12.getHour();
        boolean boolean16 = charBuffer3.equals((java.lang.Object) int15);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.plusHours((-1L));
        java.util.Set<java.lang.String> strSet34 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month35 = java.time.Month.OCTOBER;
        java.time.Month month37 = month35.plus(0L);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime38.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        int int48 = localDateTime39.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.temporal.Temporal temporal49 = month37.adjustInto((java.time.temporal.Temporal) localDateTime39);
        boolean boolean50 = strSet34.equals((java.lang.Object) month37);
        java.security.ProtectionDomain[] protectionDomainArray51 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext52 = new java.security.AccessControlContext(protectionDomainArray51);
        java.time.LocalDate localDate53 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = localDate53.query(periodTemporalQuery54);
        boolean boolean56 = accessControlContext52.equals((java.lang.Object) periodTemporalQuery54);
        java.time.Period period57 = month37.query(periodTemporalQuery54);
        java.time.Period period58 = zonedDateTime33.query(periodTemporalQuery54);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        java.time.temporal.ValueRange valueRange60 = zonedDateTime33.range((java.time.temporal.TemporalField) chronoField59);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + month35 + "' != '" + java.time.Month.OCTOBER + "'", month35.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month37 + "' != '" + java.time.Month.OCTOBER + "'", month37.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(temporal49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField59.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
        org.junit.Assert.assertNotNull(valueRange60);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.lang.String str3 = optionalInt2.toString();
        int int5 = optionalInt2.orElse((int) ' ');
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalInt[10]" + "'", str3, "OptionalInt[10]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = charBuffer1.hasArray();
        int int5 = charBuffer1.position();
        boolean boolean6 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of(0, (int) '/', (int) '\000', (int) (short) 1, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 47");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.wrap(charArray11);
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.wrap(charArray11);
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray11, (int) '\n', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("localhostish (United Kingdom)", "\u4e94", (int) '-', "tsohlacol", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: localhostish (united kingdom)");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.function.DoublePredicate doublePredicate1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream2 = doubleStream0.filter(doublePredicate1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        char[] charArray19 = new char[] { 'a', '#', '4', '#' };
        boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny("", charArray19);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray19);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray19);
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer11, charArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer26 = byteBuffer25.asLongBuffer();
        java.nio.charset.CoderResult coderResult28 = charsetEncoder7.encode(charBuffer11, byteBuffer25, false);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer25.putShort((short) 10);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putInt((int) (byte) 0);
        int int33 = byteBuffer30.position();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertNotNull(coderResult28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u6587" + "'", str2, "\u4e2d\u6587");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        long long11 = ofInt2.getExactSizeIfKnown();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("\u82f1\u6587", "zh_TW", "+999999998-365", 371000000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u6587" + "'", str4, "\u82f1\u6587");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("MinuteOfHour", "1 - 53");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long29 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField28);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery30 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period31 = zonedDateTime26.query(periodTemporalQuery30);
        java.time.Period period32 = zonedDateTime11.query(periodTemporalQuery30);
        java.time.Duration duration35 = java.time.Duration.ofSeconds((long) 10, 0L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime36 = zonedDateTime11.plus((java.time.temporal.TemporalAmount) duration35);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField28.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond(32000L, (long) 64);
        java.time.Instant instant4 = instant2.minusNanos((-52177397210L));
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        java.time.OffsetDateTime offsetDateTime10 = offsetDateTime8.withSecond((int) (byte) 0);
        java.time.LocalDate localDate11 = offsetDateTime8.toLocalDate();
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime8.withDayOfYear((int) '+');
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology15 = dateTimeFormatter14.getChronology();
        java.time.format.TextStyle textStyle16 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getISO3Language();
        java.time.format.DecimalStyle decimalStyle19 = java.time.format.DecimalStyle.of(locale17);
        java.lang.String str20 = chronology15.getDisplayName(textStyle16, locale17);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime23 = offsetTime21.withSecond(16);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int25 = offsetTime23.get((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.ValueRange valueRange26 = chronology15.range(chronoField24);
        boolean boolean27 = offsetDateTime13.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime13.withMinute(0);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField31.getBaseUnit();
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime29.plus(0L, temporalUnit32);
        java.time.Instant instant35 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant37 = instant35.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime38 = java.nio.file.attribute.FileTime.from(instant35);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery39 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period40 = instant35.query(periodTemporalQuery39);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit42 = chronoField41.getBaseUnit();
        boolean boolean43 = instant35.isSupported(temporalUnit42);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        int int49 = localDateTime44.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime45);
        java.time.LocalDateTime localDateTime51 = localDateTime45.minusNanos((long) (short) 100);
        boolean boolean52 = temporalUnit42.isSupportedBy((java.time.temporal.Temporal) localDateTime45);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = instant2.until((java.time.temporal.Temporal) offsetDateTime33, temporalUnit42);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + textStyle16 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle16.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eng" + "'", str18, "eng");
        org.junit.Assert.assertNotNull(decimalStyle19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISO" + "'", str20, "ISO");
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField24.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(valueRange26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField31.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(fileTime38);
        org.junit.Assert.assertNotNull(periodTemporalQuery39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField41.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit42 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit42.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long29 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField28);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery30 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period31 = zonedDateTime26.query(periodTemporalQuery30);
        java.time.Period period32 = zonedDateTime11.query(periodTemporalQuery30);
        java.time.ZoneOffset zoneOffset33 = zonedDateTime11.getOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime35 = zonedDateTime11.plusYears((long) 4);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000003");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField28.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(zoneOffset33);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(11);
        org.junit.Assert.assertNotNull(longBuffer1);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.LocalDate localDate32 = zonedDateTime31.toLocalDate();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.zone.ZoneRules zoneRules43 = zoneOffset41.getRules();
        java.time.ZonedDateTime zonedDateTime44 = offsetDateTime36.atZoneSameInstant((java.time.ZoneId) zoneOffset41);
        int int45 = zonedDateTime44.getDayOfMonth();
        int int46 = zonedDateTime44.getMinute();
        java.time.LocalDateTime localDateTime47 = zonedDateTime44.toLocalDateTime();
        boolean boolean48 = zonedDateTime31.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime44);
        java.lang.String str49 = zonedDateTime44.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 31 + "'", int45 == 31);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+999999999-12-31T23:59:59.999999999Z" + "'", str49, "+999999999-12-31T23:59:59.999999999Z");
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration4 = duration2.abs();
        java.time.Duration duration6 = duration2.minusMinutes((long) 385000000);
        long long7 = duration6.getSeconds();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-23099999990L) + "'", long7 == (-23099999990L));
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.ofHours(26);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 26 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("java.security.cert.CertificateEncodingException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.security.cert.certificateencodingexception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.chrono.Era era20 = localDate19.getEra();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        boolean boolean31 = localDateTime21.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.temporal.Temporal temporal32 = localDate19.adjustInto((java.time.temporal.Temporal) localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(temporal32);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = localDateTime26.withHour(4);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime36.with((java.time.temporal.TemporalField) chronoField39, (long) 31);
        boolean boolean42 = localDateTime32.isSupported((java.time.temporal.TemporalField) chronoField39);
        long long43 = zonedDateTime17.getLong((java.time.temporal.TemporalField) chronoField39);
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime17.plusNanos((long) 744000000);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 86399999999L + "'", long43 == 86399999999L);
        org.junit.Assert.assertNotNull(zonedDateTime45);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate1 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.net.URL uRL2 = null;
        java.security.CodeSigner[] codeSignerArray3 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource4 = new java.security.CodeSource(uRL2, codeSignerArray3);
        java.security.PermissionCollection permissionCollection5 = null;
        java.lang.ClassLoader classLoader6 = null;
        java.security.Principal principal7 = null;
        java.security.Principal[] principalArray8 = new java.security.Principal[] { principal7 };
        java.security.ProtectionDomain protectionDomain9 = new java.security.ProtectionDomain(codeSource4, permissionCollection5, classLoader6, principalArray8);
        boolean boolean10 = cloneablePredicate1.test((java.lang.Cloneable) principalArray8);
        org.junit.Assert.assertNotNull(cloneablePredicate1);
        org.junit.Assert.assertNotNull(codeSignerArray3);
        org.junit.Assert.assertNotNull(principalArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDate localDate44 = localDate35.minusYears(32000L);
        java.time.LocalDate localDate46 = localDate35.minusWeeks((long) (short) 1);
        java.time.Instant instant48 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        java.time.Clock clock53 = java.time.Clock.fixed(instant48, (java.time.ZoneId) zoneOffset51);
        java.time.LocalTime localTime54 = java.time.LocalTime.now(clock53);
        java.time.LocalTime localTime56 = localTime54.plusHours((long) 16384);
        long long57 = localTime56.toNanoOfDay();
        java.time.LocalTime localTime59 = localTime56.minusHours((long) 'G');
        boolean boolean60 = localDate35.equals((java.lang.Object) 'G');
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate62 = localDate35.withMonth((int) '#');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 35");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(clock53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 57632000000000L + "'", long57 == 57632000000000L);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate2 = localDate0.withDayOfMonth((int) (byte) 1);
        int int3 = localDate2.lengthOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 28 + "'", int3 == 28);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        java.util.stream.IntStream intStream5 = intStream1.sequential();
        java.util.function.IntConsumer intConsumer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream7 = intStream5.peek(intConsumer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.DayOfWeek dayOfWeek23 = localDateTime17.getDayOfWeek();
        java.time.format.TextStyle textStyle24 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.lang.String str29 = dayOfWeek23.getDisplayName(textStyle24, locale25);
        java.lang.Class<?> wildcardClass30 = locale25.getClass();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle24 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle24.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GBR" + "'", str26, "GBR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5" + "'", str29, "5");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) zonedDateTime11);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        int int27 = zonedDateTime11.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime29 = zonedDateTime11.plusNanos(86399999999L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.util.Hashtable<java.io.PrintWriter, java.util.function.DoubleConsumer> printWriterMap2 = new java.util.Hashtable<java.io.PrintWriter, java.util.function.DoubleConsumer>(316000000, (float) 781000000);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        int int18 = instant15.getNano();
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime13.with((java.time.temporal.TemporalAdjuster) instant15);
        java.time.Duration duration20 = zoneRules7.getDaylightSavings(instant15);
        java.time.Duration duration21 = java.time.Duration.ZERO;
        boolean boolean23 = duration21.equals((java.lang.Object) (short) 0);
        java.time.Duration duration24 = duration21.abs();
        java.time.Duration duration26 = duration24.plusMinutes((long) 'G');
        int int27 = duration20.compareTo(duration26);
        boolean boolean28 = duration26.isNegative();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        char[] charArray19 = new char[] { 'a', '#', '4', '#' };
        boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny("", charArray19);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray19);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray19);
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer11, charArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer26 = byteBuffer25.asLongBuffer();
        java.nio.charset.CoderResult coderResult28 = charsetEncoder7.encode(charBuffer11, byteBuffer25, false);
        // The following exception was thrown during execution in test generation
        try {
            coderResult28.throwException();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertNotNull(coderResult28);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) charBuffer3);
        int int17 = charBuffer3.arrayOffset();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        boolean boolean56 = clock6.equals((java.lang.Object) zoneIdSet46);
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.now(clock6);
        java.time.Duration duration58 = java.time.Duration.ZERO;
        boolean boolean60 = duration58.equals((java.lang.Object) (short) 0);
        java.time.Duration duration61 = duration58.abs();
        java.time.Duration duration63 = duration61.plusMinutes((long) 'G');
        java.time.Duration duration65 = duration61.plusMinutes(1434414441700000L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime66 = zonedDateTime57.plus((java.time.temporal.TemporalAmount) duration65);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 2727289019");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.lang.String[] strArray5 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray7 = org.apache.commons.lang3.StringUtils.stripAll(strArray5, "GBR");
        java.lang.String str11 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray5, 'a', 31, 31);
        java.lang.String[] strArray15 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("eng", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", (int) (byte) -1);
        java.lang.String str16 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("ZoneRules[currentStandardOffset=Z]", strArray5, strArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.startsWithAny("ZoneRules[currentStandardOffset=Z]", strArray15);
        java.lang.String str19 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray15, 'M');
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str16, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MMg" + "'", str19, "MMg");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetTime offsetTime6 = offsetDateTime5.toOffsetTime();
        int int7 = offsetTime6.getSecond();
        java.time.OffsetTime offsetTime9 = offsetTime6.minusHours(364740218880L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(offsetTime9);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        long long12 = period10.toTotalMonths();
        java.time.Period period14 = period10.minusMonths((long) 256);
        java.time.LocalDateTime localDateTime15 = localDateTime8.plus((java.time.temporal.TemporalAmount) period10);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate17 = localDateTime16.toLocalDate();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset22);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset22.getRules();
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset30);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition33 = zoneRules25.getTransition(localDateTime32);
        int int34 = localDateTime32.getSecond();
        java.time.Duration duration37 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int38 = duration37.getNano();
        java.time.Duration duration39 = duration37.abs();
        java.time.LocalDateTime localDateTime40 = localDateTime32.minus((java.time.temporal.TemporalAmount) duration39);
        java.time.LocalDate localDate41 = java.time.LocalDate.now();
        java.time.LocalDate localDate42 = java.time.LocalDate.MIN;
        boolean boolean43 = localDate41.isEqual((java.time.chrono.ChronoLocalDate) localDate42);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime48.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime48.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset58);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField62.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime64 = localDateTime60.minus((long) (-999999999), temporalUnit63);
        java.lang.String str65 = temporalUnit63.toString();
        java.time.OffsetDateTime offsetDateTime66 = offsetDateTime52.plus((long) (byte) 100, temporalUnit63);
        java.time.LocalDate localDate67 = localDate41.minus((long) (-1), temporalUnit63);
        long long68 = localDateTime16.until((java.time.temporal.Temporal) localDateTime32, temporalUnit63);
        long long69 = localDate7.until((java.time.temporal.Temporal) localDateTime15, temporalUnit63);
        boolean boolean70 = temporalUnit63.isDurationEstimated();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNull(zoneOffsetTransition33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField62.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Weeks" + "'", str65, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-52177397210L) + "'", long68 == (-52177397210L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 52177497285L + "'", long69 == 52177497285L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) 5);
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit3 = chronoField2.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant4 = instant1.truncatedTo(temporalUnit3);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField2.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit3 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit3.equals(java.time.temporal.ChronoUnit.WEEKS));
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.plusDays((long) 31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.withHour(33237);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 33237");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.DayOfWeek dayOfWeek23 = localDateTime17.getDayOfWeek();
        java.time.format.TextStyle textStyle24 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.lang.String str29 = dayOfWeek23.getDisplayName(textStyle24, locale25);
        java.lang.String str30 = locale25.getScript();
        java.security.AccessControlException accessControlException32 = new java.security.AccessControlException("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        boolean boolean33 = locale25.equals((java.lang.Object) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle24 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle24.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GBR" + "'", str26, "GBR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5" + "'", str29, "5");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray15);
        printWriter1.println(charArray15);
        char[] charArray29 = new char[] { '#', '\n', '\uffff', '\n', '\uffff', '-' };
        printWriter1.println(charArray29);
        printWriter1.println((long) 4096);
        printWriter1.print((double) (-999999999));
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#\n\uffff\n\uffff-");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#\n\uffff\n\uffff-");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, \n\uffff, \n\uffff, -]");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long30 = zonedDateTime27.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = zonedDateTime27.query(periodTemporalQuery31);
        boolean boolean33 = zonedDateTime11.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime27);
        java.time.format.FormatStyle formatStyle34 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter35 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle34);
        java.lang.String str36 = zonedDateTime27.format(dateTimeFormatter35);
        java.time.format.FormatStyle formatStyle37 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle37);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology40 = dateTimeFormatter39.getChronology();
        java.time.format.TextStyle textStyle41 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getISO3Language();
        java.time.format.DecimalStyle decimalStyle44 = java.time.format.DecimalStyle.of(locale42);
        java.lang.String str45 = chronology40.getDisplayName(textStyle41, locale42);
        java.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter38.withChronology(chronology40);
        java.lang.String str47 = chronology40.getId();
        java.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter35.withChronology(chronology40);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999999999L + "'", long30 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + formatStyle34 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle34.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e0b\u5348\u65f6\u5206\u79d2" + "'", str36, "\u4e0b\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertTrue("'" + formatStyle37 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle37.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + textStyle41 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle41.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNotNull(decimalStyle44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISO" + "'", str45, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISO" + "'", str47, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToEmpty("\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u56fd" + "'", str1, "\u4e2d\u56fd");
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = chronoField0.getDisplayName(locale1);
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) (short) 10, (long) (byte) 0);
        boolean boolean7 = chronoField0.isSupportedBy((java.time.temporal.TemporalAccessor) instant6);
        java.net.URL uRL8 = null;
        java.security.CodeSigner[] codeSignerArray9 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource10 = new java.security.CodeSource(uRL8, codeSignerArray9);
        boolean boolean12 = codeSource10.equals((java.lang.Object) 4);
        java.time.Instant instant14 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.Clock clock19 = java.time.Clock.fixed(instant14, (java.time.ZoneId) zoneOffset17);
        java.time.LocalTime localTime20 = java.time.LocalTime.now(clock19);
        java.time.LocalTime localTime22 = localTime20.plusHours((long) 16384);
        java.time.LocalTime localTime24 = localTime20.minusNanos(0L);
        boolean boolean25 = codeSource10.equals((java.lang.Object) localTime24);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant26 = instant6.with((java.time.temporal.TemporalAdjuster) localTime24);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField0.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GBR" + "'", str2, "GBR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Minute" + "'", str3, "Minute");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(codeSignerArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = zoneRules7.getTransitions();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str35 = localDateTime28.format(dateTimeFormatter34);
        java.time.ZoneOffset zoneOffset36 = zoneRules7.getOffset(localDateTime28);
        java.time.LocalDateTime localDateTime38 = localDateTime28.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        boolean boolean42 = temporalUnit41.isTimeBased();
        java.time.LocalDateTime localDateTime43 = localDateTime28.minus((long) 829000000, temporalUnit41);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate45 = localDateTime44.toLocalDate();
        java.time.LocalDateTime localDateTime47 = localDateTime44.plusWeeks(0L);
        java.time.Instant instant49 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant51 = instant49.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime52 = java.nio.file.attribute.FileTime.from(instant49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery53 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period54 = instant49.query(periodTemporalQuery53);
        java.time.Period period55 = localDateTime44.query(periodTemporalQuery53);
        java.time.Period period56 = localDateTime28.query(periodTemporalQuery53);
        java.time.format.DateTimeFormatter dateTimeFormatter57 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.lang.String str58 = localDateTime28.format(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(fileTime52);
        org.junit.Assert.assertNotNull(periodTemporalQuery53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+999999999-365" + "'", str58, "+999999999-365");
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            builder0.accept(10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("tsohlacol", "java.security.cert.CertificateEncodingException");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tsohlacol" + "'", str2, "tsohlacol");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("United Kingdom");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime3.minusMinutes((long) 100);
        java.time.Instant instant13 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.Clock clock18 = java.time.Clock.fixed(instant13, (java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime19 = offsetDateTime11.atZoneSameInstant((java.time.ZoneId) zoneOffset16);
        java.time.temporal.Temporal temporal20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal21 = zoneOffset16.adjustInto(temporal20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.OptionalLong optionalLong1 = longStream0.max();
        java.lang.String str2 = optionalLong1.toString();
        boolean boolean3 = optionalLong1.isPresent();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalLong.empty" + "'", str2, "OptionalLong.empty");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("English (United Kingdom)");
        java.util.Optional<java.io.UnsupportedEncodingException> unsupportedEncodingExceptionOptional2 = java.util.Optional.of(unsupportedEncodingException1);
        java.security.GeneralSecurityException generalSecurityException3 = new java.security.GeneralSecurityException((java.lang.Throwable) unsupportedEncodingException1);
        org.junit.Assert.assertNotNull(unsupportedEncodingExceptionOptional2);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        boolean boolean13 = fileChannel11.isOpen();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        float float18 = byteBuffer15.getFloat(4);
        double double20 = byteBuffer15.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder21 = null;
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.order(byteOrder21);
        java.nio.ByteOrder byteOrder23 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer24 = byteBuffer15.order(byteOrder23);
        java.nio.IntBuffer intBuffer25 = byteBuffer24.asIntBuffer();
        java.net.InetAddress inetAddress27 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str28 = inetAddress27.getHostName();
        byte[] byteArray29 = inetAddress27.getAddress();
        java.net.InetAddress inetAddress30 = java.net.InetAddress.getByAddress("zh_CN", byteArray29);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer24.get(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer34 = byteBuffer33.asLongBuffer();
        short short35 = byteBuffer33.getShort();
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putChar('G');
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer40 = byteBuffer39.asLongBuffer();
        short short41 = byteBuffer39.getShort();
        boolean boolean42 = byteBuffer33.equals((java.lang.Object) byteBuffer39);
        java.nio.ShortBuffer shortBuffer43 = byteBuffer39.asShortBuffer();
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer46 = byteBuffer45.asLongBuffer();
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.duplicate();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer50 = byteBuffer49.asLongBuffer();
        float float52 = byteBuffer49.getFloat(4);
        double double54 = byteBuffer49.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder55 = null;
        java.nio.ByteBuffer byteBuffer56 = byteBuffer49.order(byteOrder55);
        java.nio.ByteOrder byteOrder57 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer58 = byteBuffer49.order(byteOrder57);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer61 = byteBuffer60.asLongBuffer();
        short short62 = byteBuffer60.getShort();
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putChar('G');
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer67 = byteBuffer66.asLongBuffer();
        short short68 = byteBuffer66.getShort();
        boolean boolean69 = byteBuffer60.equals((java.lang.Object) byteBuffer66);
        java.nio.IntBuffer intBuffer70 = byteBuffer60.asIntBuffer();
        boolean boolean71 = byteBuffer60.hasArray();
        long long72 = byteBuffer60.getLong();
        java.nio.ByteBuffer[] byteBufferArray73 = new java.nio.ByteBuffer[] { byteBuffer24, byteBuffer39, byteBuffer45, byteBuffer58, byteBuffer60 };
        // The following exception was thrown during execution in test generation
        try {
            long long74 = fileChannel11.write(byteBufferArray73);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(intBuffer25);
        org.junit.Assert.assertNotNull(inetAddress27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "localhost" + "'", str28, "localhost");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(longBuffer34);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 0 + "'", short35 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(longBuffer40);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(shortBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(longBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(longBuffer50);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteOrder57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(longBuffer61);
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 0 + "'", short62 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(longBuffer67);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) 0 + "'", short68 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intBuffer70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(byteBufferArray73);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        java.util.stream.IntStream intStream5 = intStream4.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt6 = intStream4.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        doubleStream1.close();
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfDouble ofDouble4 = doubleStream1.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        int int18 = localDateTime13.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        int int23 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime35.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        int int45 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        boolean boolean46 = localDateTime25.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.temporal.Temporal temporal47 = localDateTime19.adjustInto((java.time.temporal.Temporal) localDateTime25);
        java.time.LocalDateTime localDateTime49 = localDateTime19.minusWeeks((long) (short) 0);
        java.time.Month month50 = java.time.Month.OCTOBER;
        java.time.Month month52 = month50.plus(0L);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        int int58 = localDateTime53.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        int int63 = localDateTime54.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        java.time.temporal.Temporal temporal64 = month52.adjustInto((java.time.temporal.Temporal) localDateTime54);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate66 = localDateTime65.toLocalDate();
        java.time.LocalDateTime localDateTime68 = localDateTime65.plusWeeks(0L);
        boolean boolean69 = localDateTime54.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        java.time.LocalDateTime localDateTime71 = localDateTime54.minusHours((long) '\n');
        java.time.format.DateTimeFormatter dateTimeFormatter72 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str73 = localDateTime54.format(dateTimeFormatter72);
        java.lang.String str74 = localDateTime49.format(dateTimeFormatter72);
        java.lang.String str75 = zonedDateTime12.format(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(temporal47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + month50 + "' != '" + java.time.Month.OCTOBER + "'", month50.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month52 + "' != '" + java.time.Month.OCTOBER + "'", month52.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(temporal64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+999999999-12-31" + "'", str73, "+999999999-12-31");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+999999999-12-31" + "'", str74, "+999999999-12-31");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+999999999-12-31" + "'", str75, "+999999999-12-31");
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.minusNanos((long) 100);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.PROLEPTIC_MONTH;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = localTime0.get((java.time.temporal.TemporalField) chronoField3);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ProlepticMonth");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.PROLEPTIC_MONTH + "'", chronoField3.equals(java.time.temporal.ChronoField.PROLEPTIC_MONTH));
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.time.Clock clock0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now(clock0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: clock");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        byte byte11 = byteBuffer1.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
        java.util.function.DoubleToIntFunction doubleToIntFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = doubleStream2.mapToInt(doubleToIntFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.DAYS;
        org.junit.Assert.assertNotNull(timeUnit0);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        java.time.Month month0 = java.time.Month.OCTOBER;
        java.time.Month month2 = month0.plus(0L);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        int int8 = localDateTime3.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        int int13 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.temporal.Temporal temporal14 = month2.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        java.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks(0L);
        boolean boolean19 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime4.minusHours((long) '\n');
        java.time.Instant instant23 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant25 = instant23.minusNanos((long) 'a');
        long long26 = instant23.toEpochMilli();
        java.util.Date date27 = java.util.Date.from(instant23);
        java.lang.String str28 = date27.toGMTString();
        long long29 = date27.getTime();
        int int30 = date27.getDate();
        int int31 = date27.getSeconds();
        boolean boolean32 = localDateTime21.equals((java.lang.Object) int31);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.OCTOBER + "'", month0.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.OCTOBER + "'", month2.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32000L + "'", long26 == 32000L);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str28, "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32000L + "'", long29 == 32000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        boolean boolean9 = path4.startsWith("/experiment/GBR/");
        java.io.File file11 = new java.io.File("GBR");
        boolean boolean13 = file11.setWritable(true);
        java.nio.file.Path path14 = file11.toPath();
        java.nio.file.Path path16 = path14.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption17 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption18 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray19 = new java.nio.file.LinkOption[] { linkOption17, linkOption18 };
        java.nio.file.Path path20 = path14.toRealPath(linkOptionArray19);
        java.nio.file.Path path21 = path4.resolveSibling(path14);
        java.io.File file23 = new java.io.File("GBR");
        boolean boolean25 = file23.setWritable(true);
        java.nio.file.Path path26 = file23.toPath();
        java.nio.file.Path path28 = path26.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI29 = path26.toUri();
        boolean boolean31 = path26.startsWith("/experiment/GBR/");
        java.nio.file.Path path32 = path4.resolveSibling(path26);
        java.nio.file.WatchService watchService33 = null;
        java.nio.file.WatchEvent.Kind[] kindArray35 = new java.nio.file.WatchEvent.Kind[0];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray36 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray35;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey37 = path26.register(watchService33, wildcardKindArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertTrue("'" + linkOption17 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption17.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption18 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption18.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertNotNull(uRI29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(kindArray35);
        org.junit.Assert.assertNotNull(wildcardKindArray36);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean8 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.DayOfWeek dayOfWeek9 = offsetDateTime3.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime11 = offsetDateTime3.withSecond(199000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 199000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField7.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek9 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek9.equals(java.time.DayOfWeek.FRIDAY));
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        // The following exception was thrown during execution in test generation
        try {
            java.time.DayOfWeek dayOfWeek1 = java.time.DayOfWeek.of(125000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek: 125000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) charBuffer3);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer7 = charBuffer3.put(14, 'M');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset32);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField36.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime38 = localDateTime34.minus((long) (-999999999), temporalUnit37);
        java.util.List<java.time.ZoneOffset> zoneOffsetList39 = zoneRules23.getValidOffsets(localDateTime34);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        int int45 = localDateTime40.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        int int50 = localDateTime41.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.ZoneOffset zoneOffset51 = zoneRules23.getOffset(localDateTime41);
        java.time.LocalDateTime localDateTime53 = localDateTime41.withHour(13);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField36.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime38);
        org.junit.Assert.assertNotNull(zoneOffsetList39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("United Kingdom", "/tmp/United Kingdom6608063242857218135aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.LongBuffer longBuffer5 = longBuffer2.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer8 = longBuffer2.put((int) (byte) 100, (long) 399000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(longBuffer5);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getSum();
        double double2 = doubleSummaryStatistics0.getMin();
        double double3 = doubleSummaryStatistics0.getMax();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics4 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics4.accept((double) 0);
        doubleSummaryStatistics0.combine(doubleSummaryStatistics4);
        doubleSummaryStatistics4.accept((double) 19044L);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics10 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleSummaryStatistics4.combine(doubleSummaryStatistics10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=1, sum=0.000000, min=0.000000, average=0.000000, max=0.000000}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.NEGATIVE_INFINITY + "'", double3 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertEquals(doubleSummaryStatistics4.toString(), "DoubleSummaryStatistics{count=2, sum=19044.000000, min=0.000000, average=9522.000000, max=19044.000000}");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        boolean boolean4 = charsetDecoder1.isAutoDetecting();
        java.lang.String str5 = charsetDecoder1.replacement();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ufffd" + "'", str5, "\ufffd");
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        boolean boolean3 = intStream1.isParallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = intStream1.asLongStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        boolean boolean5 = file1.setReadOnly();
        boolean boolean7 = file1.setReadable(true);
        boolean boolean8 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap0 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>();
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean1 = coderResult0.isUnmappable();
        boolean boolean2 = coderResult0.isUnmappable();
        boolean boolean3 = coderResult0.isUnderflow();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.security.Permission permission1 = null;
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]", permission1);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.withSecond((int) (byte) 0);
        java.time.LocalDate localDate19 = offsetDateTime16.toLocalDate();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime16.withDayOfYear((int) '+');
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology23 = dateTimeFormatter22.getChronology();
        java.time.format.TextStyle textStyle24 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getISO3Language();
        java.time.format.DecimalStyle decimalStyle27 = java.time.format.DecimalStyle.of(locale25);
        java.lang.String str28 = chronology23.getDisplayName(textStyle24, locale25);
        java.time.OffsetTime offsetTime29 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime31 = offsetTime29.withSecond(16);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int33 = offsetTime31.get((java.time.temporal.TemporalField) chronoField32);
        java.time.temporal.ValueRange valueRange34 = chronology23.range(chronoField32);
        boolean boolean35 = offsetDateTime21.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime21.withMinute(0);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit40 = chronoField39.getBaseUnit();
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime37.plus(0L, temporalUnit40);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime11.minus((long) 43200, temporalUnit40);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + textStyle24 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle24.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(decimalStyle27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISO" + "'", str28, "ISO");
        org.junit.Assert.assertNotNull(offsetTime29);
        org.junit.Assert.assertNotNull(offsetTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField32.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertNotNull(valueRange34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField39.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit40 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit40.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("", "_MINUTE", "+999999999-12-31T23:59:59.999999999Z");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime15 = zonedDateTime14.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime15);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        int int7 = offsetDateTime3.getNano();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime9 = offsetDateTime3.plusMinutes((long) 4096);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 999999999 + "'", int7 == 999999999);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray9 = new java.nio.file.LinkOption[] { linkOption7, linkOption8 };
        java.nio.file.Path path10 = path4.toRealPath(linkOptionArray9);
        java.nio.file.FileSystem fileSystem11 = path10.getFileSystem();
        java.nio.file.Path path13 = path10.resolveSibling("MINUTEMINU");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray9);
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(fileSystem11);
        org.junit.Assert.assertNotNull(path13);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "\u4e2d\u56fd\u8a9e", (java.lang.CharSequence) "Z");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.nio.LongBuffer longBuffer10 = longBuffer7.put((int) (byte) 0, 0L);
        long[] longArray16 = new long[] { 100L, '\uffff', 28, 64, 14 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer17 = longBuffer7.get(longArray16);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[100, 65535, 28, 64, 14]");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("\u4e2d\u56fd", "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putChar('\n');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putChar(41, 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.io.InputStream inputStream11 = uRL7.openStream();
        int int12 = inputStream11.available();
        int int13 = inputStream11.available();
        inputStream11.close();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.wrap(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = inputStream11.read(byteArray16, 97, (int) '+');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom3113831867032563525aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom3113831867032563525aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom8973070023994614593aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom8973070023994614593aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Collection<java.time.zone.ZoneRules> zoneRulesCollection9 = zoneIdMap1.values();
        java.util.stream.LongStream longStream10 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream11 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream12 = java.util.stream.LongStream.concat(longStream10, longStream11);
        java.util.stream.LongStream longStream13 = longStream10.unordered();
        java.util.stream.LongStream longStream14 = longStream10.parallel();
        boolean boolean15 = zoneIdMap1.equals((java.lang.Object) longStream14);
        java.util.function.LongUnaryOperator longUnaryOperator16 = java.util.function.LongUnaryOperator.identity();
        long long18 = longUnaryOperator16.applyAsLong((long) (-15888074));
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream19 = longStream14.map(longUnaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneRulesCollection9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longUnaryOperator16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-15888074L) + "'", long18 == (-15888074L));
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        java.lang.CharSequence charSequence0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime1 = java.time.OffsetTime.parse(charSequence0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: text");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.lang.String str4 = localDateTime0.toString();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        java.time.OffsetDateTime offsetDateTime10 = offsetDateTime8.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = offsetDateTime14.atZoneSameInstant((java.time.ZoneId) zoneOffset19);
        int int23 = zonedDateTime22.getDayOfMonth();
        int int24 = zonedDateTime22.getHour();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime22.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime30.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.zone.ZoneRules zoneRules37 = zoneOffset35.getRules();
        java.time.ZonedDateTime zonedDateTime38 = offsetDateTime30.atZoneSameInstant((java.time.ZoneId) zoneOffset35);
        java.time.ZonedDateTime zonedDateTime39 = zonedDateTime38.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long41 = zonedDateTime38.getLong((java.time.temporal.TemporalField) chronoField40);
        long long42 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField40);
        boolean boolean43 = offsetDateTime8.isSupported((java.time.temporal.TemporalField) chronoField40);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime45 = localDateTime0.with((java.time.temporal.TemporalField) chronoField40, (long) '/');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str4, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(zoneRules37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField40.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 999999999L + "'", long41 == 999999999L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 999999999L + "'", long42 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime45);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.util.stream.LongStream longStream76 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream77 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream78 = java.util.stream.LongStream.concat(longStream76, longStream77);
        java.util.OptionalLong optionalLong79 = longStream78.min();
        java.time.LocalTime localTime80 = java.time.LocalTime.MIN;
        boolean boolean81 = zoneIdMap1.remove((java.lang.Object) longStream78, (java.lang.Object) localTime80);
        java.lang.Runnable runnable82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream83 = longStream78.onClose(runnable82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(longStream76);
        org.junit.Assert.assertNotNull(longStream77);
        org.junit.Assert.assertNotNull(longStream78);
        org.junit.Assert.assertNotNull(optionalLong79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate1 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate4 = cloneablePredicate1.or(cloneablePredicate3);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate5 = cloneablePredicate4.negate();
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate6 = cloneablePredicate4.negate();
        org.junit.Assert.assertNotNull(cloneablePredicate1);
        org.junit.Assert.assertNotNull(cloneablePredicate3);
        org.junit.Assert.assertNotNull(cloneablePredicate4);
        org.junit.Assert.assertNotNull(cloneablePredicate5);
        org.junit.Assert.assertNotNull(cloneablePredicate6);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.minusWeeks((long) 0);
        java.time.chrono.Chronology chronology8 = localDateTime1.getChronology();
        java.lang.String str9 = chronology8.getCalendarType();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "iso8601" + "'", str9, "iso8601");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("+999999999-12-31T00:00:00.000031Z", "hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: +999999999-12-31t00:00:00.000031z");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        java.util.Date date13 = java.util.Date.from(instant1);
        int int14 = date13.getDay();
        java.time.Instant instant16 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant18 = instant16.minusNanos((long) 'a');
        long long19 = instant16.getEpochSecond();
        java.util.Date date20 = java.util.Date.from(instant16);
        java.time.Instant instant21 = date20.toInstant();
        int int22 = date13.compareTo(date20);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.of("tsohlacol");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unknown chronology: tsohlacol");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException("localhost");
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.time.format.FormatStyle formatStyle0 = null;
        java.time.format.FormatStyle formatStyle1 = java.time.format.FormatStyle.MEDIUM;
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: dateStyle");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + formatStyle1 + "' != '" + java.time.format.FormatStyle.MEDIUM + "'", formatStyle1.equals(java.time.format.FormatStyle.MEDIUM));
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.unordered();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream4 = doubleStream0.map(doubleUnaryOperator3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = intBuffer11.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            builder0.accept((double) 16.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.time.LocalTime localTime6 = java.time.LocalTime.parse((java.lang.CharSequence) "+999999999-12-31T23:59:59.999999999Z", dateTimeFormatter5);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.parse((java.lang.CharSequence) charBuffer3, dateTimeFormatter5);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.Optional<java.io.ObjectStreamException> objectStreamExceptionOptional1 = java.util.Optional.empty();
        boolean boolean2 = attribute0.equals((java.lang.Object) objectStreamExceptionOptional1);
        java.lang.String str3 = attribute0.toString();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(objectStreamExceptionOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(input_method_segment)" + "'", str3, "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        char char1 = org.apache.commons.lang3.CharUtils.toChar("0");
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '0' + "'", char1 == '0');
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        boolean boolean14 = fileChannel11.isOpen();
        long long15 = fileChannel11.position();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 120L + "'", long15 == 120L);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CodingErrorAction codingErrorAction8 = charsetEncoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder9 = charsetEncoder7.reset();
        java.nio.charset.CodingErrorAction codingErrorAction10 = java.nio.charset.CodingErrorAction.REPLACE;
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder9.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.CodingErrorAction codingErrorAction12 = charsetEncoder9.unmappableCharacterAction();
        java.nio.charset.CodingErrorAction codingErrorAction13 = charsetEncoder9.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction14 = charsetEncoder9.malformedInputAction();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(codingErrorAction12);
        org.junit.Assert.assertNotNull(codingErrorAction13);
        org.junit.Assert.assertNotNull(codingErrorAction14);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime7.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean28 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime29.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        boolean boolean39 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean40 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDate localDate41 = localDateTime23.toLocalDate();
        java.time.LocalDate localDate42 = java.time.LocalDate.now();
        java.time.LocalDate localDate43 = java.time.LocalDate.MIN;
        boolean boolean44 = localDate42.isEqual((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean46 = localDate43.isSupported((java.time.temporal.TemporalField) chronoField45);
        int int47 = localDate43.getDayOfYear();
        int int48 = localDate41.compareTo((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.Clock clock55 = java.time.Clock.fixed(instant50, (java.time.ZoneId) zoneOffset53);
        java.time.LocalTime localTime56 = java.time.LocalTime.now(clock55);
        java.time.LocalTime localTime58 = localTime56.plusHours((long) 16384);
        java.time.LocalTime localTime60 = localTime56.minusNanos(0L);
        java.time.LocalDate localDate61 = java.time.LocalDate.now();
        java.time.LocalDate localDate62 = java.time.LocalDate.MIN;
        boolean boolean63 = localDate61.isEqual((java.time.chrono.ChronoLocalDate) localDate62);
        int int64 = localDate62.getYear();
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        java.time.temporal.Temporal temporal69 = localDate62.adjustInto((java.time.temporal.Temporal) localDateTime65);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.Clock clock74 = java.time.Clock.systemUTC();
        java.time.Instant instant75 = clock74.instant();
        java.time.ZoneId zoneId76 = clock74.getZone();
        java.time.ZonedDateTime zonedDateTime77 = java.time.ZonedDateTime.ofInstant(localDateTime65, zoneOffset72, zoneId76);
        java.time.OffsetDateTime offsetDateTime78 = java.time.OffsetDateTime.of(localDate43, localTime60, zoneOffset72);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.ofLocal(localDateTime0, (java.time.ZoneId) zoneOffset72, zoneOffset80);
        java.time.Period period83 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period84 = java.time.Period.from((java.time.temporal.TemporalAmount) period83);
        java.time.format.DateTimeFormatter dateTimeFormatter85 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str86 = dateTimeFormatter85.toString();
        boolean boolean87 = period84.equals((java.lang.Object) dateTimeFormatter85);
        java.lang.String str88 = localDateTime0.format(dateTimeFormatter85);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime90 = localDateTime0.plusSeconds(4096L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField45.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1999999998 + "'", int48 == 1999999998);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-999999999) + "'", int64 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(temporal69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(clock74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(zoneId76);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str86, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+999999999-12-31" + "'", str88, "+999999999-12-31");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("localhost", "1 Jan 1970 00:00:32 GMT", (int) '\000');
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.format.FormatStyle formatStyle20 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle20);
        java.lang.String str22 = localDateTime0.format(dateTimeFormatter21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond(0L, (int) '\r', zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.of(localDateTime0, zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + formatStyle20 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle20.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e0b\u5348\u65f6\u5206\u79d2" + "'", str22, "\u4e0b\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer4 = charBuffer3.flip();
        int int5 = charBuffer3.capacity();
        boolean boolean6 = charBuffer3.hasArray();
        boolean boolean7 = chronology1.equals((java.lang.Object) charBuffer3);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.LocalDateTime localDateTime13 = localDateTime8.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        boolean boolean36 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        int int42 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        boolean boolean47 = localDateTime37.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        boolean boolean48 = localDateTime31.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.LocalDate localDate49 = localDateTime31.toLocalDate();
        java.time.LocalDate localDate50 = java.time.LocalDate.now();
        java.time.LocalDate localDate51 = java.time.LocalDate.MIN;
        boolean boolean52 = localDate50.isEqual((java.time.chrono.ChronoLocalDate) localDate51);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean54 = localDate51.isSupported((java.time.temporal.TemporalField) chronoField53);
        int int55 = localDate51.getDayOfYear();
        int int56 = localDate49.compareTo((java.time.chrono.ChronoLocalDate) localDate51);
        java.time.Instant instant58 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.Clock clock63 = java.time.Clock.fixed(instant58, (java.time.ZoneId) zoneOffset61);
        java.time.LocalTime localTime64 = java.time.LocalTime.now(clock63);
        java.time.LocalTime localTime66 = localTime64.plusHours((long) 16384);
        java.time.LocalTime localTime68 = localTime64.minusNanos(0L);
        java.time.LocalDate localDate69 = java.time.LocalDate.now();
        java.time.LocalDate localDate70 = java.time.LocalDate.MIN;
        boolean boolean71 = localDate69.isEqual((java.time.chrono.ChronoLocalDate) localDate70);
        int int72 = localDate70.getYear();
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime76 = localDateTime73.atOffset(zoneOffset75);
        java.time.temporal.Temporal temporal77 = localDate70.adjustInto((java.time.temporal.Temporal) localDateTime73);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime81 = localDateTime78.atOffset(zoneOffset80);
        java.time.Clock clock82 = java.time.Clock.systemUTC();
        java.time.Instant instant83 = clock82.instant();
        java.time.ZoneId zoneId84 = clock82.getZone();
        java.time.ZonedDateTime zonedDateTime85 = java.time.ZonedDateTime.ofInstant(localDateTime73, zoneOffset80, zoneId84);
        java.time.OffsetDateTime offsetDateTime86 = java.time.OffsetDateTime.of(localDate51, localTime68, zoneOffset80);
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime89 = java.time.ZonedDateTime.ofLocal(localDateTime8, (java.time.ZoneId) zoneOffset80, zoneOffset88);
        java.time.Clock clock90 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset88);
        java.time.chrono.ChronoLocalDate chronoLocalDate91 = chronology1.dateNow(clock90);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField53.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1999999998 + "'", int56 == 1999999998);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(clock63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-999999999) + "'", int72 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertNotNull(temporal77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(clock82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(zoneId84);
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertNotNull(clock90);
        org.junit.Assert.assertNotNull(chronoLocalDate91);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble2 = doubleStream1.min();
        boolean boolean3 = optionalDouble2.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder4 = optionalDoubleBuilder0.add(optionalDouble2);
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.distinct();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.parallel();
        java.util.OptionalDouble optionalDouble8 = doubleStream7.average();
        optionalDoubleBuilder0.accept(optionalDouble8);
        java.lang.String str10 = optionalDouble8.toString();
        java.lang.String str11 = optionalDouble8.toString();
        org.junit.Assert.assertNotNull(optionalDoubleBuilder0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OptionalDouble.empty" + "'", str10, "OptionalDouble.empty");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OptionalDouble.empty" + "'", str11, "OptionalDouble.empty");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.LocalTime localTime15 = localTime13.plusMinutes((long) 'x');
        java.time.LocalTime localTime17 = localTime15.minusHours((long) 653000000);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Set<java.time.ZoneId> zoneIdSet9 = zoneIdMap1.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList49);
        boolean boolean52 = strList35.removeAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean53 = strList23.retainAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean54 = zoneIdSet9.removeAll((java.util.Collection<java.lang.String>) strList23);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strList23.spliterator();
        boolean boolean57 = strList23.add("+999999999-12-31T23:59:59.999999999");
        int int58 = strList23.size();
        java.lang.String[] strArray62 = org.apache.commons.lang3.StringUtils.split("1 - 53", "localhost");
        boolean boolean63 = org.apache.commons.lang3.StringUtils.startsWithAny("Eng", strArray62);
        boolean boolean64 = strList23.contains((java.lang.Object) "Eng");
        java.util.Iterator<java.lang.String> strItor65 = strList23.iterator();
        boolean boolean66 = strItor65.hasNext();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdSet9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress1 = java.net.InetAddress.getByName("+999999999-12-31T00:00:00.000031Z");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: +999999999-12-31T00:00:00.000031Z: Name or service not known");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        java.io.File file8 = file1.getAbsoluteFile();
        boolean boolean10 = file1.setReadable(false);
        java.io.File file12 = new java.io.File("GBR");
        boolean boolean14 = file12.setExecutable(true);
        boolean boolean15 = file1.renameTo(file12);
        file12.deleteOnExit();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.plusDays((long) 31);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.Clock clock30 = java.time.Clock.fixed(instant25, (java.time.ZoneId) zoneOffset28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset35);
        java.time.Clock clock38 = clock30.withZone((java.time.ZoneId) zoneOffset35);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime21.withOffsetSameInstant(zoneOffset35);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        java.time.temporal.ValueRange valueRange42 = offsetDateTime39.range((java.time.temporal.TemporalField) chronoField40);
        java.time.LocalDate localDate43 = offsetDateTime39.toLocalDate();
        java.time.LocalDate localDate44 = java.time.LocalDate.now();
        java.time.LocalDate localDate45 = java.time.LocalDate.MIN;
        boolean boolean46 = localDate44.isEqual((java.time.chrono.ChronoLocalDate) localDate45);
        int int47 = localDate45.getYear();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.temporal.Temporal temporal52 = localDate45.adjustInto((java.time.temporal.Temporal) localDateTime48);
        java.time.Period period54 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period55 = period54.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod56 = period54.negated();
        java.time.LocalDate localDate57 = localDate45.plus((java.time.temporal.TemporalAmount) chronoPeriod56);
        java.time.chrono.Era era58 = localDate57.getEra();
        boolean boolean59 = localDate43.isEqual((java.time.chrono.ChronoLocalDate) localDate57);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-999999999) + "'", int47 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(temporal52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + era58 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era58.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.io.InputStream inputStream11 = uRL7.openStream();
        java.lang.String str12 = java.net.URLConnection.guessContentTypeFromStream(inputStream11);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom8880022273942621414aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom8880022273942621414aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom624462690771087211aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom624462690771087211aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.util.Date date5 = java.util.Date.from(instant1);
        int int6 = date5.getDay();
        date5.setMonth(234000000);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 19501970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        java.time.Month month1 = java.time.Month.OCTOBER;
        java.time.Month month3 = month1.minus((long) 64);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.of(3, month3, (int) (short) 100, 0, 12, 1999999998, 125000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.JUNE + "'", month3.equals(java.time.Month.JUNE));
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("23:59:59.999999999", "+999999998-365");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999" + "'", str2, "23:59:59.999999999");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDate localDate15 = localDate13.plusYears((long) 'u');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.Month month20 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime33 = localDateTime27.withHour(4);
        int int34 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDate localDate35 = localDateTime16.toLocalDate();
        java.time.Instant instant37 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.Clock clock42 = java.time.Clock.fixed(instant37, (java.time.ZoneId) zoneOffset40);
        java.time.LocalTime localTime43 = java.time.LocalTime.now(clock42);
        java.time.LocalTime localTime45 = localTime43.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.of(localDate35, localTime45);
        java.time.LocalTime localTime48 = localTime45.plusNanos(13L);
        java.time.LocalDateTime localDateTime49 = localDate13.atTime(localTime48);
        int int50 = localDate13.lengthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.DECEMBER + "'", month20.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(clock42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 365 + "'", int50 == 365);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer18.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer25 = byteBuffer24.asDoubleBuffer();
        int int26 = doubleBuffer19.compareTo(doubleBuffer25);
        int int27 = doubleBuffer25.remaining();
        java.nio.DoubleBuffer doubleBuffer28 = doubleBuffer11.put(doubleBuffer25);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = doubleBuffer11.get((int) '0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 48");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(doubleBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer28);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer1.asReadOnlyBuffer();
        java.nio.ShortBuffer shortBuffer4 = shortBuffer3.duplicate();
        boolean boolean5 = shortBuffer3.isDirect();
        java.lang.String str6 = shortBuffer3.toString();
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.nio.HeapShortBufferR[pos=64 lim=64 cap=64]" + "'", str6, "java.nio.HeapShortBufferR[pos=64 lim=64 cap=64]");
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration3 = duration1.plusDays(100L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Collection<java.time.zone.ZoneRules> zoneRulesCollection9 = zoneIdMap1.values();
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream11 = doubleStream10.distinct();
        java.util.OptionalDouble optionalDouble12 = doubleStream11.findAny();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.get((java.lang.Object) optionalDouble12);
        java.time.Month month14 = java.time.Month.MARCH;
        java.time.Month month15 = month14.firstMonthOfQuarter();
        java.time.zone.ZoneRules zoneRules16 = zoneIdMap1.remove((java.lang.Object) month14);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate18 = localDateTime17.toLocalDate();
        java.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks(0L);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean22 = localDateTime17.isSupported((java.time.temporal.TemporalField) chronoField21);
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField21.getRangeUnit();
        boolean boolean24 = chronoField21.isDateBased();
        boolean boolean25 = month14.isSupported((java.time.temporal.TemporalField) chronoField21);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneRulesCollection9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.MARCH + "'", month14.equals(java.time.Month.MARCH));
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.JANUARY + "'", month15.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNull(zoneRules16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField21.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.plusDays((long) 14);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("eng", "Minute");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        java.util.function.IntToDoubleFunction intToDoubleFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream6 = intStream4.mapToDouble(intToDoubleFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer18.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer25 = byteBuffer24.asDoubleBuffer();
        int int26 = doubleBuffer19.compareTo(doubleBuffer25);
        int int27 = doubleBuffer25.remaining();
        java.nio.DoubleBuffer doubleBuffer28 = doubleBuffer11.put(doubleBuffer25);
        double[] doubleArray32 = new double[] { 6603384152749567654L, 1645434891000L, 11L };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer33 = doubleBuffer25.put(doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(doubleBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[6.603384152749568E18, 1.645434891E12, 11.0]");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        boolean boolean50 = valueRange48.isValidValue((long) 1);
        boolean boolean52 = valueRange48.isValidIntValue((long) 'u');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long29 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField28);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery30 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period31 = zonedDateTime26.query(periodTemporalQuery30);
        java.time.Period period32 = zonedDateTime11.query(periodTemporalQuery30);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.withSecond((int) (byte) 0);
        java.time.LocalDate localDate39 = offsetDateTime36.toLocalDate();
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        boolean boolean42 = offsetDateTime36.isSupported((java.time.temporal.TemporalField) chronoField40);
        java.time.Period period43 = periodTemporalQuery30.queryFrom((java.time.temporal.TemporalAccessor) offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField28.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.plusYears((long) 33237);
        java.io.File file7 = new java.io.File("GBR");
        boolean boolean9 = file7.setWritable(true);
        boolean boolean11 = file7.setWritable(true);
        java.lang.String str12 = file7.getPath();
        long long13 = file7.length();
        java.io.File file14 = file7.getAbsoluteFile();
        boolean boolean15 = period5.equals((java.lang.Object) file14);
        boolean boolean18 = file14.setWritable(false, false);
        boolean boolean19 = file14.canExecute();
        java.lang.String str20 = file14.getAbsolutePath();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter21 = new java.io.PrintWriter(file14);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /experiment/GBR (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GBR" + "'", str12, "GBR");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4096L + "'", long13 == 4096L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/experiment/GBR" + "'", str20, "/experiment/GBR");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.TemporalUnit temporalUnit47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime48 = zonedDateTime26.minus((-1439L), temporalUnit47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        java.util.stream.Stream<java.util.stream.LongStream> longStreamStream0 = java.util.stream.Stream.empty();
        org.junit.Assert.assertNotNull(longStreamStream0);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        java.io.InvalidObjectException invalidObjectException1 = new java.io.InvalidObjectException("\\u0061");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        boolean boolean12 = file8.setWritable(true);
        java.net.URI uRI13 = file8.toURI();
        java.net.URI uRI14 = uRI6.relativize(uRI13);
        java.lang.String str15 = uRI6.getRawSchemeSpecificPart();
        java.net.URI uRI16 = uRI6.normalize();
        java.lang.String str17 = uRI6.getRawSchemeSpecificPart();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(uRI14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment/GBR/" + "'", str15, "/experiment/GBR/");
        org.junit.Assert.assertNotNull(uRI16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/experiment/GBR/" + "'", str17, "/experiment/GBR/");
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalDate localDate1 = java.time.LocalDate.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.MIN;
        boolean boolean3 = localDate1.isEqual((java.time.chrono.ChronoLocalDate) localDate2);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean5 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField4);
        int int6 = localDate2.getDayOfYear();
        java.time.LocalDate localDate8 = localDate2.withYear((int) '4');
        java.time.LocalTime localTime9 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime11 = localTime9.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime12 = localDate2.atTime(localTime9);
        java.time.LocalTime localTime14 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int15 = localTime9.compareTo(localTime14);
        java.time.Duration duration16 = java.time.Duration.ZERO;
        java.time.Duration duration18 = duration16.minusDays((long) (-1));
        java.time.LocalTime localTime19 = localTime14.minus((java.time.temporal.TemporalAmount) duration18);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.zone.ZoneRules zoneRules30 = zoneOffset28.getRules();
        java.time.ZonedDateTime zonedDateTime31 = offsetDateTime23.atZoneSameInstant((java.time.ZoneId) zoneOffset28);
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime31.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long34 = zonedDateTime31.getLong((java.time.temporal.TemporalField) chronoField33);
        boolean boolean35 = localTime19.isSupported((java.time.temporal.TemporalField) chronoField33);
        boolean boolean36 = localTime0.isBefore(localTime19);
        boolean boolean38 = localTime0.equals((java.lang.Object) 32);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField33.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 999999999L + "'", long34 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        java.security.PermissionCollection permissionCollection3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.security.Principal principal5 = null;
        java.security.Principal[] principalArray6 = new java.security.Principal[] { principal5 };
        java.security.ProtectionDomain protectionDomain7 = new java.security.ProtectionDomain(codeSource2, permissionCollection3, classLoader4, principalArray6);
        java.security.Principal[] principalArray8 = protectionDomain7.getPrincipals();
        java.security.PermissionCollection permissionCollection9 = protectionDomain7.getPermissions();
        java.lang.ClassLoader classLoader10 = protectionDomain7.getClassLoader();
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertNotNull(principalArray6);
        org.junit.Assert.assertNotNull(principalArray8);
        org.junit.Assert.assertNull(permissionCollection9);
        org.junit.Assert.assertNull(classLoader10);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.Period period2 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period3 = period2.normalized();
        long long4 = period2.toTotalMonths();
        java.time.Period period6 = period2.minusMonths((long) 256);
        java.time.LocalDateTime localDateTime7 = localDateTime0.plus((java.time.temporal.TemporalAmount) period2);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime9 = localDateTime0.plusSeconds((long) 4);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "BIG_ENDIAN");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime12.withDayOfYear(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime38.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        int int48 = localDateTime39.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        boolean boolean49 = localDateTime28.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.format.DateTimeFormatter dateTimeFormatter50 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str51 = localDateTime44.format(dateTimeFormatter50);
        java.time.ZoneOffset zoneOffset52 = zoneRules23.getOffset(localDateTime44);
        java.time.LocalDateTime localDateTime54 = localDateTime44.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        boolean boolean58 = temporalUnit57.isTimeBased();
        java.time.LocalDateTime localDateTime59 = localDateTime44.minus((long) 829000000, temporalUnit57);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime15.with((java.time.temporal.TemporalAdjuster) localDateTime44);
        java.time.temporal.Temporal temporal61 = localDate0.adjustInto((java.time.temporal.Temporal) zonedDateTime60);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str51, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(temporal61);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay(31556889832780799L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -39863844283495");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.LocalDate localDate21 = localDate19.minusWeeks((long) '/');
        java.time.format.DateTimeFormatter dateTimeFormatter22 = java.time.format.DateTimeFormatter.ISO_TIME;
        java.time.format.DecimalStyle decimalStyle23 = dateTimeFormatter22.getDecimalStyle();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = localDate21.format(dateTimeFormatter22);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(decimalStyle23);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        fileChannel11.force(true);
        java.nio.ByteBuffer byteBuffer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = fileChannel11.read(byteBuffer18, (-7981810L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = localDateTime0.withHour(28);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 28");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        double double4 = doubleSummaryStatistics3.getSum();
        double double5 = doubleSummaryStatistics3.getMin();
        double double6 = doubleSummaryStatistics3.getMax();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics7 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics7.accept((double) 0);
        doubleSummaryStatistics3.combine(doubleSummaryStatistics7);
        doubleStream1.forEachOrdered((java.util.function.DoubleConsumer) doubleSummaryStatistics7);
        java.lang.Runnable runnable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream13 = doubleStream1.onClose(runnable12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=1, sum=0.000000, min=0.000000, average=0.000000, max=0.000000}");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.NEGATIVE_INFINITY + "'", double6 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertEquals(doubleSummaryStatistics7.toString(), "DoubleSummaryStatistics{count=1, sum=0.000000, min=0.000000, average=0.000000, max=0.000000}");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset1.contains(charset2);
        java.util.Set<java.lang.String> strSet4 = charset1.aliases();
        boolean boolean5 = charset0.contains(charset1);
        boolean boolean6 = charset1.canEncode();
        boolean boolean7 = charset1.isRegistered();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterType("PT10S");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        java.time.Month month0 = java.time.Month.OCTOBER;
        java.time.Month month2 = month0.plus(533000000L);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.OCTOBER + "'", month0.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JUNE + "'", month2.equals(java.time.Month.JUNE));
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR G...");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR G...");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        java.util.stream.IntStream.Builder builder4 = java.util.stream.IntStream.builder();
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder4);
        boolean boolean7 = ofInt2.hasCharacteristics(829000000);
        boolean boolean9 = ofInt2.hasCharacteristics((int) '\r');
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.net.URI uRI1 = new java.net.URI("\u82f1\u6587");
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(INPUT_METHOD_SEGMENT)", "0");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator5 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator6 = intUnaryOperator4.compose(intUnaryOperator5);
        int int8 = intUnaryOperator6.applyAsInt(385000000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = intStream3.map(intUnaryOperator6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intUnaryOperator5);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 385000000 + "'", int8 == 385000000);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("java.text.ParsePosition[index=29,errorIndex=-1]", "             +999999999-12-31", 794000000, "\u4e2d\u56fd", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: java.text.parseposition[index=29,errorindex=-1]");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.time.Month month0 = java.time.Month.MAY;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.MAY + "'", month0.equals(java.time.Month.MAY));
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        java.lang.RuntimeException runtimeException5 = runtimeExceptionOptional4.get();
        boolean boolean6 = runtimeExceptionOptional4.isPresent();
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
        org.junit.Assert.assertNotNull(runtimeException5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.chrono.Chronology chronology3 = java.time.chrono.Chronology.ofLocale(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Era era5 = chronology3.eraOf(70);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid era: 70");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        boolean boolean43 = localDate35.isLeapYear();
        java.time.LocalDate localDate44 = java.time.LocalDate.now();
        java.time.LocalDate localDate45 = java.time.LocalDate.MIN;
        boolean boolean46 = localDate44.isEqual((java.time.chrono.ChronoLocalDate) localDate45);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean48 = localDate45.isSupported((java.time.temporal.TemporalField) chronoField47);
        int int49 = localDate45.getDayOfYear();
        java.time.LocalDate localDate51 = localDate45.withYear((int) '4');
        java.time.LocalTime localTime52 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime54 = localTime52.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime55 = localDate45.atTime(localTime52);
        java.time.LocalTime localTime57 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int58 = localTime52.compareTo(localTime57);
        java.time.Duration duration59 = java.time.Duration.ZERO;
        java.time.Duration duration61 = duration59.minusDays((long) (-1));
        java.time.LocalTime localTime62 = localTime57.minus((java.time.temporal.TemporalAmount) duration61);
        java.time.LocalTime localTime64 = localTime62.plusMinutes(100L);
        java.time.Instant instant66 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant68 = instant66.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime69 = java.nio.file.attribute.FileTime.from(instant66);
        java.time.Instant instant71 = instant66.plusMillis((long) 10);
        java.time.Instant instant73 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant75 = instant73.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime76 = java.nio.file.attribute.FileTime.from(instant73);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery77 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period78 = instant73.query(periodTemporalQuery77);
        java.time.Period period79 = instant71.query(periodTemporalQuery77);
        java.time.Period period80 = localTime64.query(periodTemporalQuery77);
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.of(localDate35, localTime64);
        java.time.temporal.TemporalAdjuster temporalAdjuster82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime83 = localDateTime81.with(temporalAdjuster82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField47.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(fileTime69);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(fileTime76);
        org.junit.Assert.assertNotNull(periodTemporalQuery77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = java.time.Instant.now(clock0);
        java.time.LocalDate localDate2 = java.time.LocalDate.now(clock0);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("hi!", "/tmp/United Kingdom6608063242857218135aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "\\u0023");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        printWriter1.print((float) 'a');
        java.io.File file7 = new java.io.File("GBR");
        boolean boolean9 = file7.setWritable(true);
        boolean boolean11 = file7.setWritable(true);
        java.net.URI uRI12 = file7.toURI();
        java.io.File file14 = new java.io.File("GBR");
        boolean boolean16 = file14.setWritable(true);
        boolean boolean18 = file14.setWritable(true);
        java.net.URI uRI19 = file14.toURI();
        java.net.URI uRI20 = uRI12.relativize(uRI19);
        java.lang.String str21 = uRI12.getRawSchemeSpecificPart();
        java.io.File file23 = new java.io.File("GBR");
        boolean boolean25 = file23.setWritable(true);
        boolean boolean27 = file23.setWritable(true);
        java.net.URI uRI28 = file23.toURI();
        java.io.File file30 = new java.io.File("GBR");
        boolean boolean32 = file30.setWritable(true);
        boolean boolean34 = file30.setWritable(true);
        java.net.URI uRI35 = file30.toURI();
        java.net.URI uRI36 = uRI28.relativize(uRI35);
        java.net.URI uRI37 = uRI12.relativize(uRI36);
        printWriter1.println((java.lang.Object) uRI37);
        printWriter1.print("+999999999-12-31T23:59:59.999999999");
        printWriter1.print(false);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(uRI19);
        org.junit.Assert.assertNotNull(uRI20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/experiment/GBR/" + "'", str21, "/experiment/GBR/");
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(uRI28);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(uRI35);
        org.junit.Assert.assertNotNull(uRI36);
        org.junit.Assert.assertNotNull(uRI37);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 10);
        java.util.stream.DoubleStream doubleStream2 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.skip((long) (byte) 10);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics5 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream6 = doubleStream4.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics5);
        doubleSummaryStatistics5.accept((double) 385000000);
        optionalDouble1.ifPresent((java.util.function.DoubleConsumer) doubleSummaryStatistics5);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertEquals(doubleSummaryStatistics5.toString(), "DoubleSummaryStatistics{count=2, sum=385000010.000000, min=10.000000, average=192500005.000000, max=385000000.000000}");
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        long long3 = intStream2.count();
        java.util.function.BinaryOperator<java.lang.Integer> intBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.Integer> intOptional5 = intStream2.reduce(intBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList41.spliterator();
        strList41.clear();
        java.io.InvalidObjectException invalidObjectException47 = new java.io.InvalidObjectException("1 - 53");
        boolean boolean48 = strList41.contains((java.lang.Object) invalidObjectException47);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.util.Locale.setDefault(locale13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset20);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset20.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap1.getOrDefault((java.lang.Object) locale13, zoneRules23);
        float[] floatArray27 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer28 = java.nio.FloatBuffer.wrap(floatArray27);
        java.nio.FloatBuffer floatBuffer29 = floatBuffer28.compact();
        boolean boolean30 = zoneRules24.equals((java.lang.Object) floatBuffer28);
        java.time.Month month31 = java.time.Month.FEBRUARY;
        boolean boolean32 = floatBuffer28.equals((java.lang.Object) month31);
        int int33 = month31.getValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GBR" + "'", str12, "GBR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertNotNull(floatBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + month31 + "' != '" + java.time.Month.FEBRUARY + "'", month31.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getAuthority();
        java.security.cert.Certificate certificate10 = null;
        java.security.cert.Certificate[] certificateArray11 = new java.security.cert.Certificate[] { certificate10 };
        java.security.CodeSource codeSource12 = new java.security.CodeSource(uRL7, certificateArray11);
        java.net.URL uRL13 = null;
        java.security.CodeSigner[] codeSignerArray14 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource15 = new java.security.CodeSource(uRL13, codeSignerArray14);
        java.security.PermissionCollection permissionCollection16 = null;
        java.lang.ClassLoader classLoader17 = null;
        java.security.Principal principal18 = null;
        java.security.Principal[] principalArray19 = new java.security.Principal[] { principal18 };
        java.security.ProtectionDomain protectionDomain20 = new java.security.ProtectionDomain(codeSource15, permissionCollection16, classLoader17, principalArray19);
        java.security.CodeSigner[] codeSignerArray21 = codeSource15.getCodeSigners();
        java.lang.String str22 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) codeSignerArray21);
        java.security.CodeSource codeSource23 = new java.security.CodeSource(uRL7, codeSignerArray21);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom5456920207164161762aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom5456920207164161762aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom8024775313397169725aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom8024775313397169725aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(certificateArray11);
        org.junit.Assert.assertNotNull(codeSignerArray14);
        org.junit.Assert.assertNotNull(principalArray19);
        org.junit.Assert.assertNotNull(codeSignerArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.plusSeconds((long) 371000000);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime16 = offsetDateTime12.minusYears(9223372036854775807L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -9223372036854773837");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CharsetEncoder charsetEncoder2 = charset0.newEncoder();
        java.net.InetAddress inetAddress3 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean4 = inetAddress3.isMCLinkLocal();
        byte[] byteArray5 = inetAddress3.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetEncoder charsetEncoder6 = charsetEncoder2.replaceWith(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertNotNull(inetAddress3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[127, 0, 0, 1]");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("Eng");
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = chronoField9.getDisplayName(locale10);
        java.lang.String str13 = locale5.getDisplayCountry(locale10);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder0.setUnicodeLocaleKeyword("DIRECT", "DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000}");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: DIRECT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Minute" + "'", str12, "Minute");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United Kingdom" + "'", str13, "United Kingdom");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        java.time.OffsetTime offsetTime43 = java.time.OffsetTime.MAX;
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.OffsetDateTime offsetDateTime49 = offsetDateTime47.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.zone.ZoneRules zoneRules54 = zoneOffset52.getRules();
        java.time.ZonedDateTime zonedDateTime55 = offsetDateTime47.atZoneSameInstant((java.time.ZoneId) zoneOffset52);
        java.time.ZonedDateTime zonedDateTime56 = zonedDateTime55.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long58 = zonedDateTime55.getLong((java.time.temporal.TemporalField) chronoField57);
        int int59 = offsetTime43.get((java.time.temporal.TemporalField) chronoField57);
        boolean boolean60 = offsetTime42.isBefore(offsetTime43);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(offsetTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField57.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 999999999L + "'", long58 == 999999999L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 999999999 + "'", int59 == 999999999);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        int int2 = org.apache.commons.lang3.CharUtils.toIntValue('x', 52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.net.URI uRI1 = java.net.URI.create("PT10S");
        java.lang.String str2 = uRI1.toString();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT10S" + "'", str2, "PT10S");
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("CHN", "0");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(29);
        java.lang.String str2 = parsePosition1.toString();
        parsePosition1.setErrorIndex(495000000);
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.LocalTime localTime12 = java.time.LocalTime.now(clock11);
        java.time.Instant instant14 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant16 = instant14.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.ofInstant(instant14, (java.time.ZoneId) zoneOffset19);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.OffsetDateTime offsetDateTime28 = offsetDateTime26.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.zone.ZoneRules zoneRules33 = zoneOffset31.getRules();
        java.time.ZonedDateTime zonedDateTime34 = offsetDateTime26.atZoneSameInstant((java.time.ZoneId) zoneOffset31);
        java.time.ZoneId zoneId35 = zonedDateTime34.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap37 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap41 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.zone.ZoneRules zoneRules48 = zoneIdMap41.getOrDefault((java.lang.Object) 1.0d, zoneRules47);
        java.time.zone.ZoneRules zoneRules49 = zoneIdMap37.put((java.time.ZoneId) zoneOffset39, zoneRules47);
        java.time.ZoneId[] zoneIdArray50 = new java.time.ZoneId[] { zoneOffset19, zoneId35, zoneOffset39 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet51 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet51, zoneIdArray50);
        java.lang.String[] strArray56 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray58 = org.apache.commons.lang3.StringUtils.stripAll(strArray56, "GBR");
        java.lang.String str59 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray58);
        boolean boolean60 = zoneIdSet51.remove((java.lang.Object) strArray58);
        boolean boolean61 = clock11.equals((java.lang.Object) zoneIdSet51);
        java.time.ZonedDateTime zonedDateTime62 = java.time.ZonedDateTime.now(clock11);
        boolean boolean63 = parsePosition1.equals((java.lang.Object) clock11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=29,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=29,errorIndex=-1]");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zoneId35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNull(zoneRules49);
        org.junit.Assert.assertNotNull(zoneIdArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Minute(null <no signer certificates>)" + "'", str59, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.util.Date date5 = java.util.Date.from(instant1);
        int int6 = date5.getDay();
        java.time.Instant instant7 = date5.toInstant();
        int int8 = date5.getYear();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime4 = localDateTime2.plusDays((long) (-7));
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = zoneIdMap1.remove((java.lang.Object) (-7), (java.lang.Object) locale5);
        boolean boolean7 = zoneIdMap1.isEmpty();
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.Clock clock14 = java.time.Clock.fixed(instant9, (java.time.ZoneId) zoneOffset12);
        java.lang.String str15 = zoneOffset12.getId();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.now((java.time.ZoneId) zoneOffset12);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap18 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.zone.ZoneRules zoneRules25 = zoneIdMap18.getOrDefault((java.lang.Object) 1.0d, zoneRules24);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset30);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap34 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.zone.ZoneRules zoneRules40 = zoneOffset38.getRules();
        java.time.zone.ZoneRules zoneRules41 = zoneIdMap34.getOrDefault((java.lang.Object) 1.0d, zoneRules40);
        java.lang.String str42 = zoneRules40.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = zoneRules40.getTransitions();
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap18.putIfAbsent((java.time.ZoneId) zoneOffset30, zoneRules40);
        java.time.Clock clock45 = java.time.Clock.systemUTC();
        java.time.Instant instant46 = clock45.instant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition47 = zoneRules40.nextTransition(instant46);
        java.util.Locale locale48 = java.util.Locale.US;
        boolean boolean49 = zoneRules40.equals((java.lang.Object) locale48);
        java.time.Instant instant51 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant53 = instant51.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime54 = java.nio.file.attribute.FileTime.from(instant51);
        java.time.ZoneOffset zoneOffset55 = zoneRules40.getOffset(instant51);
        java.time.zone.ZoneRules zoneRules56 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset12, zoneRules40);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(clock14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Z" + "'", str15, "Z");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(zoneRules40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str42, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(clock45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNull(zoneOffsetTransition47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(fileTime54);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNull(zoneRules56);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.DoubleBuffer doubleBuffer6 = doubleBuffer5.compact();
        java.nio.ByteOrder byteOrder7 = doubleBuffer6.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(byteOrder7);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.CE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        int int6 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime2);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime2.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime13 = localDateTime7.withHour(4);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime17.with((java.time.temporal.TemporalField) chronoField20, (long) 31);
        boolean boolean23 = localDateTime13.isSupported((java.time.temporal.TemporalField) chronoField20);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = isoEra0.get((java.time.temporal.TemporalField) chronoField20);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MicroOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra0.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.LocalDateTime localDateTime14 = zonedDateTime11.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfMonth(10000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 10000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDate localDate44 = localDate35.minusYears(32000L);
        int int45 = localDate35.lengthOfMonth();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime49.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.ZonedDateTime zonedDateTime57 = offsetDateTime49.atZoneSameInstant((java.time.ZoneId) zoneOffset54);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime57.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long60 = zonedDateTime57.getLong((java.time.temporal.TemporalField) chronoField59);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery61 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period62 = zonedDateTime57.query(periodTemporalQuery61);
        java.time.ZoneId zoneId63 = zonedDateTime57.getZone();
        java.time.Instant instant64 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime57);
        java.util.Set<java.lang.String> strSet65 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month66 = java.time.Month.OCTOBER;
        java.time.Month month68 = month66.plus(0L);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        int int74 = localDateTime69.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime70);
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime78 = localDateTime75.atOffset(zoneOffset77);
        int int79 = localDateTime70.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime75);
        java.time.temporal.Temporal temporal80 = month68.adjustInto((java.time.temporal.Temporal) localDateTime70);
        boolean boolean81 = strSet65.equals((java.lang.Object) month68);
        java.security.ProtectionDomain[] protectionDomainArray82 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext83 = new java.security.AccessControlContext(protectionDomainArray82);
        java.time.LocalDate localDate84 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery85 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period86 = localDate84.query(periodTemporalQuery85);
        boolean boolean87 = accessControlContext83.equals((java.lang.Object) periodTemporalQuery85);
        java.time.Period period88 = month68.query(periodTemporalQuery85);
        java.time.Period period89 = instant64.query(periodTemporalQuery85);
        java.util.function.Predicate<java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdMapPredicate90 = java.util.function.Predicate.isEqual((java.lang.Object) periodTemporalQuery85);
        java.time.Period period91 = localDate35.query(periodTemporalQuery85);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 31 + "'", int45 == 31);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField59.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 999999999L + "'", long60 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(zoneId63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + month66 + "' != '" + java.time.Month.OCTOBER + "'", month66.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month68 + "' != '" + java.time.Month.OCTOBER + "'", month68.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(temporal80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(periodTemporalQuery85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(zoneIdMapPredicate90);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        java.util.OptionalInt optionalInt0 = java.util.OptionalInt.empty();
        int int2 = optionalInt0.orElse((int) 'a');
        boolean boolean3 = optionalInt0.isPresent();
        org.junit.Assert.assertNotNull(optionalInt0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) charBuffer20);
        java.nio.CharBuffer charBuffer22 = charBuffer20.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate23 = java.time.LocalDate.parse((java.lang.CharSequence) charBuffer22);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charBuffer22);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.Instant instant10 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant12 = instant10.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime13 = java.nio.file.attribute.FileTime.from(instant10);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery14 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period15 = instant10.query(periodTemporalQuery14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = instant10.isSupported(temporalUnit17);
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.ofInstant(instant20, (java.time.ZoneId) zoneOffset25);
        java.time.ZoneId zoneId29 = zonedDateTime28.getZone();
        java.time.Clock clock30 = java.time.Clock.fixed(instant10, zoneId29);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField31.getBaseUnit();
        java.time.Instant instant33 = instant10.truncatedTo(temporalUnit32);
        java.time.Duration duration34 = zoneRules7.getDaylightSavings(instant33);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate36 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate38 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate39 = cloneablePredicate36.or(cloneablePredicate38);
        boolean boolean40 = zoneRules7.equals((java.lang.Object) cloneablePredicate36);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap42 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.zone.ZoneRules zoneRules48 = zoneOffset46.getRules();
        java.time.zone.ZoneRules zoneRules49 = zoneIdMap42.getOrDefault((java.lang.Object) 1.0d, zoneRules48);
        java.time.Instant instant51 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant53 = instant51.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime54 = java.nio.file.attribute.FileTime.from(instant51);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery55 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period56 = instant51.query(periodTemporalQuery55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit58 = chronoField57.getBaseUnit();
        boolean boolean59 = instant51.isSupported(temporalUnit58);
        java.time.Instant instant61 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant63 = instant61.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.zone.ZoneRules zoneRules68 = zoneOffset66.getRules();
        java.time.ZonedDateTime zonedDateTime69 = java.time.ZonedDateTime.ofInstant(instant61, (java.time.ZoneId) zoneOffset66);
        java.time.ZoneId zoneId70 = zonedDateTime69.getZone();
        java.time.Clock clock71 = java.time.Clock.fixed(instant51, zoneId70);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit73 = chronoField72.getBaseUnit();
        java.time.Instant instant74 = instant51.truncatedTo(temporalUnit73);
        java.time.Duration duration75 = zoneRules48.getDaylightSavings(instant74);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate77 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate79 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate80 = cloneablePredicate77.or(cloneablePredicate79);
        boolean boolean81 = zoneRules48.equals((java.lang.Object) cloneablePredicate77);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate82 = cloneablePredicate36.or(cloneablePredicate77);
        char[] charArray89 = new char[] { 'a', '#', '4', '#' };
        boolean boolean90 = org.apache.commons.lang3.StringUtils.containsAny("", charArray89);
        boolean boolean91 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray89);
        boolean boolean92 = cloneablePredicate82.test((java.lang.Cloneable) charArray89);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(periodTemporalQuery14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField31.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(cloneablePredicate36);
        org.junit.Assert.assertNotNull(cloneablePredicate38);
        org.junit.Assert.assertNotNull(cloneablePredicate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(fileTime54);
        org.junit.Assert.assertNotNull(periodTemporalQuery55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField57.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit58 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit58.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNotNull(clock71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField72.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit73 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit73.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(cloneablePredicate77);
        org.junit.Assert.assertNotNull(cloneablePredicate79);
        org.junit.Assert.assertNotNull(cloneablePredicate80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(cloneablePredicate82);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDateTime localDateTime36 = localDateTime6.minusWeeks((long) (short) 0);
        java.time.LocalDateTime localDateTime38 = localDateTime6.minusMinutes((long) 12);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getDisplayScript();
        java.lang.String str5 = locale1.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet6 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charSet6);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.chrono.Chronology chronology20 = localDateTime0.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.ISO_TIME;
        java.lang.String str22 = localDateTime0.format(dateTimeFormatter21);
        java.time.LocalTime localTime23 = java.time.LocalTime.now();
        java.time.LocalTime localTime25 = localTime23.plusHours(0L);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        java.time.temporal.ValueRange valueRange28 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        int int41 = zonedDateTime40.getDayOfMonth();
        int int42 = zonedDateTime40.getHour();
        java.time.Instant instant43 = zonedDateTime40.toInstant();
        long long44 = chronoField26.getFrom((java.time.temporal.TemporalAccessor) instant43);
        java.time.LocalTime localTime45 = java.time.LocalTime.now();
        int int46 = localTime45.getNano();
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long48 = localTime45.getLong((java.time.temporal.TemporalField) chronoField47);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        java.time.OffsetDateTime offsetDateTime54 = offsetDateTime52.withSecond((int) (byte) 0);
        boolean boolean55 = chronoField47.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime52);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.OffsetDateTime offsetDateTime62 = offsetDateTime60.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime64 = offsetDateTime60.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset70);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField74.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime76 = localDateTime72.minus((long) (-999999999), temporalUnit75);
        java.lang.String str77 = temporalUnit75.toString();
        java.time.OffsetDateTime offsetDateTime78 = offsetDateTime64.plus((long) (byte) 100, temporalUnit75);
        java.time.OffsetDateTime offsetDateTime80 = offsetDateTime64.plusWeeks((long) '4');
        java.time.temporal.ValueRange valueRange81 = chronoField56.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime80);
        java.time.temporal.ChronoField chronoField82 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime83 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate84 = localDateTime83.toLocalDate();
        java.time.LocalDateTime localDateTime86 = localDateTime83.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange87 = chronoField82.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime83);
        java.time.temporal.ChronoField chronoField88 = java.time.temporal.ChronoField.ERA;
        java.time.temporal.TemporalField[] temporalFieldArray89 = new java.time.temporal.TemporalField[] { chronoField26, chronoField47, chronoField56, chronoField82, chronoField88 };
        java.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter21.withResolverFields(temporalFieldArray89);
        java.text.Format format91 = dateTimeFormatter21.toFormat();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "23:59:59.999999999" + "'", str22, "23:59:59.999999999");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField26.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 23 + "'", int42 == 23);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999L + "'", long44 == 999999L);
        org.junit.Assert.assertNotNull(localTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 186000000 + "'", int46 == 186000000);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField47.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 15L + "'", long48 == 15L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField56.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField74.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Weeks" + "'", str77, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(valueRange81);
        org.junit.Assert.assertTrue("'" + chronoField82 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField82.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(valueRange87);
        org.junit.Assert.assertTrue("'" + chronoField88 + "' != '" + java.time.temporal.ChronoField.ERA + "'", chronoField88.equals(java.time.temporal.ChronoField.ERA));
        org.junit.Assert.assertNotNull(temporalFieldArray89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNotNull(format91);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now();
        boolean boolean4 = decimalStyle2.equals((java.lang.Object) offsetDateTime3);
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle2.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withPositiveSign('\uffff');
        java.lang.String str9 = decimalStyle6.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DecimalStyle[G+-.]" + "'", str9, "DecimalStyle[G+-.]");
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.DoubleBuffer doubleBuffer15 = doubleBuffer11.put((double) 31);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer18 = doubleBuffer15.put(100, (double) 'M');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer15);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        long long6 = java.util.Date.UTC(781000000, 334, (int) ' ', (int) 'a', (int) '+', 399000000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 6199234509587828384L + "'", long6 == 6199234509587828384L);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        long long3 = intStream2.count();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray4 = intStream2.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) charBuffer3);
        java.nio.CharBuffer charBuffer17 = charBuffer3.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer19 = charBuffer17.put('a');
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charBuffer17);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.time.ZonedDateTime zonedDateTime50 = zonedDateTime14.minusDays((long) 12);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertNotNull(zonedDateTime50);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("MMg", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MMg" + "'", str2, "MMg");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "GBR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime7.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset17);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime23 = localDateTime19.minus((long) (-999999999), temporalUnit22);
        java.lang.String str24 = temporalUnit22.toString();
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime11.plus((long) (byte) 100, temporalUnit22);
        boolean boolean26 = temporalUnit22.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration27 = duration2.plus((long) 13, temporalUnit22);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Weeks" + "'", str24, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder8 = charsetEncoder7.reset();
        java.nio.charset.CodingErrorAction codingErrorAction9 = charsetEncoder8.malformedInputAction();
        java.nio.charset.CharsetEncoder charsetEncoder10 = charsetEncoder8.reset();
        java.nio.charset.CodingErrorAction codingErrorAction11 = java.nio.charset.CodingErrorAction.REPLACE;
        java.nio.charset.CharsetEncoder charsetEncoder12 = charsetEncoder10.onUnmappableCharacter(codingErrorAction11);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(codingErrorAction9);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(codingErrorAction11);
        org.junit.Assert.assertNotNull(charsetEncoder12);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap15 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.zone.ZoneRules zoneRules22 = zoneIdMap15.getOrDefault((java.lang.Object) 1.0d, zoneRules21);
        java.time.zone.ZoneRules zoneRules23 = zoneIdMap11.put((java.time.ZoneId) zoneOffset13, zoneRules21);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime9.withZoneSameLocal((java.time.ZoneId) zoneOffset13);
        int int25 = zonedDateTime9.getHour();
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime9.minusSeconds((long) ' ');
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime27);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("hi!", ":", "/", (int) '\r');
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer3 = longBuffer2.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer3);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle4.withNegativeSign('+');
        char char7 = decimalStyle4.getNegativeSign();
        char char8 = decimalStyle4.getNegativeSign();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '-' + "'", char7 == '-');
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '-' + "'", char8 == '-');
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.Instant instant4 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant6 = instant4.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime7 = java.nio.file.attribute.FileTime.from(instant4);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery8 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period9 = instant4.query(periodTemporalQuery8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit11 = chronoField10.getBaseUnit();
        boolean boolean12 = instant4.isSupported(temporalUnit11);
        boolean boolean13 = offsetTime0.isSupported(temporalUnit11);
        java.time.OffsetTime offsetTime15 = offsetTime0.minusNanos((long) '\n');
        java.time.OffsetTime offsetTime17 = offsetTime0.minusHours((long) 41);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fileTime7);
        org.junit.Assert.assertNotNull(periodTemporalQuery8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField10.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit11 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit11.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(offsetTime17);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator2 = intStream1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = intStream1.skip((long) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intSpliterator2);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = offsetDateTime9.atZoneSameInstant((java.time.ZoneId) zoneOffset14);
        int int18 = zonedDateTime17.getDayOfMonth();
        int int19 = zonedDateTime17.getHour();
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime17.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = offsetDateTime25.atZoneSameInstant((java.time.ZoneId) zoneOffset30);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime33.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long36 = zonedDateTime33.getLong((java.time.temporal.TemporalField) chronoField35);
        long long37 = zonedDateTime21.getLong((java.time.temporal.TemporalField) chronoField35);
        boolean boolean38 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField35);
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime3.minusYears((long) 41);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime44.withSecond((int) (byte) 0);
        int int47 = offsetDateTime46.getMinute();
        java.time.OffsetDateTime offsetDateTime49 = offsetDateTime46.plusNanos((long) 227000000);
        boolean boolean50 = offsetDateTime3.isBefore(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 999999999L + "'", long36 == 999999999L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 999999999L + "'", long37 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = fileChannel11.lock((long) 533000000, 0L, true);
        fileLock19.release();
        java.nio.channels.FileChannel fileChannel21 = fileLock19.channel();
        long long22 = fileLock19.position();
        long long23 = fileLock19.position();
        boolean boolean26 = fileLock19.overlaps((long) (-3), (long) 0);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(fileChannel21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 533000000L + "'", long22 == 533000000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 533000000L + "'", long23 == 533000000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        java.util.function.LongConsumer longConsumer4 = null;
        optionalLong3.ifPresent(longConsumer4);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        boolean boolean8 = duration6.equals((java.lang.Object) (short) 0);
        java.time.Duration duration9 = duration6.abs();
        java.time.Duration duration11 = duration9.plusMinutes((long) 'G');
        java.time.Duration duration13 = duration9.plusMinutes(1434414441700000L);
        boolean boolean14 = optionalLong3.equals((java.lang.Object) duration9);
        java.time.Duration duration16 = duration9.minusMillis(59L);
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.function.DoubleBinaryOperator doubleBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = doubleStream2.reduce(0.0d, doubleBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        java.time.LocalTime localTime21 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.of(localDate6, localTime21, (java.time.ZoneId) zoneOffset24);
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime30 = offsetTime28.withSecond(16);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = instant32.query(periodTemporalQuery36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        boolean boolean40 = instant32.isSupported(temporalUnit39);
        boolean boolean41 = offsetTime28.isSupported(temporalUnit39);
        java.time.OffsetDateTime offsetDateTime42 = localDate6.atTime(offsetTime28);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusDays((long) (-7));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(offsetDateTime42);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime28 = zonedDateTime26.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime29 = zonedDateTime26.withEarlierOffsetAtOverlap();
        boolean boolean30 = zonedDateTime11.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime34.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.zone.ZoneRules zoneRules41 = zoneOffset39.getRules();
        java.time.ZonedDateTime zonedDateTime42 = offsetDateTime34.atZoneSameInstant((java.time.ZoneId) zoneOffset39);
        int int43 = zonedDateTime42.getDayOfMonth();
        boolean boolean44 = zonedDateTime26.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime42);
        java.time.ZoneOffset zoneOffset45 = zonedDateTime26.getOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime46 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) zoneOffset45);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetDateTime from TemporalAccessor: Z of type java.time.ZoneOffset");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffset45);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        boolean boolean2 = inetAddress0.isMulticastAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime28 = zonedDateTime26.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime29 = zonedDateTime26.withEarlierOffsetAtOverlap();
        boolean boolean30 = zonedDateTime11.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime34.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.zone.ZoneRules zoneRules41 = zoneOffset39.getRules();
        java.time.ZonedDateTime zonedDateTime42 = offsetDateTime34.atZoneSameInstant((java.time.ZoneId) zoneOffset39);
        int int43 = zonedDateTime42.getDayOfMonth();
        boolean boolean44 = zonedDateTime26.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime42);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = zonedDateTime42.compareTo(localDateChronoZonedDateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray9 = new java.nio.file.LinkOption[] { linkOption7, linkOption8 };
        java.nio.file.Path path10 = path4.toRealPath(linkOptionArray9);
        java.nio.file.FileSystem fileSystem11 = path10.getFileSystem();
        java.lang.Iterable<java.nio.file.FileStore> fileStoreIterable12 = fileSystem11.getFileStores();
        // The following exception was thrown during execution in test generation
        try {
            fileSystem11.close();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray9);
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(fileSystem11);
        org.junit.Assert.assertNotNull(fileStoreIterable12);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}", "Weeks");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}" + "'", str2, "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        java.lang.String str3 = codeSource2.toString();
        java.security.PermissionCollection permissionCollection4 = null;
        java.security.ProtectionDomain protectionDomain5 = new java.security.ProtectionDomain(codeSource2, permissionCollection4);
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(null <no signer certificates>)" + "'", str3, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals(protectionDomain5.toString(), "ProtectionDomain  (null <no signer certificates>)\n null\n <no principals>\n null\n");
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration77 = networkInterface76.getInetAddresses();
        java.util.List<java.net.InterfaceAddress> interfaceAddressList78 = networkInterface76.getInterfaceAddresses();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertNotNull(inetAddressEnumeration77);
        org.junit.Assert.assertNotNull(interfaceAddressList78);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate3 = localDateTime2.toLocalDate();
        java.time.LocalDateTime localDateTime5 = localDateTime2.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange6 = chronoField1.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime2);
        boolean boolean7 = localDate0.equals((java.lang.Object) valueRange6);
        java.time.LocalDate localDate8 = java.time.LocalDate.now();
        java.time.LocalDate localDate9 = java.time.LocalDate.MIN;
        boolean boolean10 = localDate8.isEqual((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean12 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField11);
        int int13 = localDate9.getDayOfYear();
        java.time.Period period14 = java.time.Period.between(localDate0, localDate9);
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str16 = dateTimeFormatter15.toString();
        java.lang.String str17 = localDate0.format(dateTimeFormatter15);
        java.time.chrono.ChronoLocalDate chronoLocalDate18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDate0.compareTo(chronoLocalDate18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField11.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str16, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-999999999-01-01" + "'", str17, "-999999999-01-01");
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.lang.Object obj3 = charBuffer1.array();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.apache.commons.lang3.CharUtils.toIntValue((java.lang.Character) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The character   is not in the range '0' - '9'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiAlpha('a');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        boolean boolean56 = clock6.equals((java.lang.Object) zoneIdSet46);
        java.time.OffsetTime offsetTime57 = java.time.OffsetTime.now(clock6);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.now(clock6);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter("ISO");
        printWriter42.println(false);
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.OffsetDateTime offsetDateTime53 = offsetDateTime51.withSecond((int) (byte) 0);
        java.time.LocalDate localDate54 = offsetDateTime51.toLocalDate();
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean56 = offsetDateTime51.isSupported((java.time.temporal.TemporalField) chronoField55);
        boolean boolean57 = localDate45.isSupported((java.time.temporal.TemporalField) chronoField55);
        java.time.LocalDate localDate59 = localDate45.minusMonths(32L);
        printWriter42.println((java.lang.Object) localDate45);
        java.time.Instant instant62 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.Clock clock67 = java.time.Clock.fixed(instant62, (java.time.ZoneId) zoneOffset65);
        java.time.LocalTime localTime68 = java.time.LocalTime.now(clock67);
        java.time.LocalTime localTime70 = localTime68.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean72 = localTime70.isSupported((java.time.temporal.TemporalField) chronoField71);
        java.time.temporal.TemporalUnit temporalUnit73 = chronoField71.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            long long74 = offsetTime3.until((java.time.temporal.Temporal) localDate45, temporalUnit73);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetTime from TemporalAccessor: 2022-02-21 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField55.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(clock67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField71.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit73 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit73.equals(java.time.temporal.ChronoUnit.HOURS));
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.net.NetworkInterface networkInterface77 = networkInterface76.getParent();
        boolean boolean78 = networkInterface76.supportsMulticast();
        boolean boolean79 = networkInterface76.supportsMulticast();
        java.lang.String str80 = networkInterface76.getDisplayName();
        boolean boolean81 = networkInterface76.isVirtual();
        int int82 = networkInterface76.getIndex();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertNull(networkInterface77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "lo" + "'", str80, "lo");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (short) 100);
        fieldPosition2.setBeginIndex(91);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.OffsetDateTime offsetDateTime8 = localDate1.atTime(offsetTime7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        boolean boolean31 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        boolean boolean42 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDate localDate44 = localDateTime26.toLocalDate();
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean49 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField48);
        int int50 = localDate46.getDayOfYear();
        int int51 = localDate44.compareTo((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.Period period52 = localDate1.until((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.Instant instant54 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.Clock clock59 = java.time.Clock.fixed(instant54, (java.time.ZoneId) zoneOffset57);
        java.time.LocalTime localTime60 = java.time.LocalTime.now(clock59);
        java.time.LocalTime localTime62 = localTime60.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean64 = localTime62.isSupported((java.time.temporal.TemporalField) chronoField63);
        java.time.temporal.ValueRange valueRange65 = chronoField63.range();
        boolean boolean66 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField63);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1999999998 + "'", int51 == 1999999998);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(clock59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField63.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(valueRange65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.lang.String str77 = networkInterface76.getDisplayName();
        boolean boolean78 = networkInterface76.isVirtual();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "lo" + "'", str77, "lo");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("lo", (int) (short) 10, '/');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "lo////////" + "'", str3, "lo////////");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long14 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery15 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period16 = zonedDateTime11.query(periodTemporalQuery15);
        java.time.ZoneId zoneId17 = zonedDateTime11.getZone();
        java.time.Instant instant18 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime11);
        java.time.Instant instant20 = instant18.minusMillis((long) 385000000);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 999999999L + "'", long14 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) zonedDateTime11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate15 = java.time.LocalDate.from((java.time.temporal.TemporalAccessor) localTime14);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDate from TemporalAccessor: 23:59:59.999999999 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 jan 1970 00:00:00 gmt" + "'", str1, "1 jan 1970 00:00:00 gmt");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.format.FormatStyle formatStyle20 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle20);
        java.lang.String str22 = localDateTime0.format(dateTimeFormatter21);
        java.time.LocalDate localDate23 = java.time.LocalDate.now();
        java.time.LocalDate localDate24 = java.time.LocalDate.MIN;
        boolean boolean25 = localDate23.isEqual((java.time.chrono.ChronoLocalDate) localDate24);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime30.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime30.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset40);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit45 = chronoField44.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime46 = localDateTime42.minus((long) (-999999999), temporalUnit45);
        java.lang.String str47 = temporalUnit45.toString();
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime34.plus((long) (byte) 100, temporalUnit45);
        java.time.LocalDate localDate49 = localDate23.minus((long) (-1), temporalUnit45);
        java.time.LocalDate localDate50 = java.time.LocalDate.now();
        java.time.LocalDate localDate51 = java.time.LocalDate.MIN;
        boolean boolean52 = localDate50.isEqual((java.time.chrono.ChronoLocalDate) localDate51);
        java.time.chrono.ChronoPeriod chronoPeriod53 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate49, (java.time.chrono.ChronoLocalDate) localDate50);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime54 = localDateTime0.with((java.time.temporal.TemporalAdjuster) localDate49);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime56 = localDateTime0.plusHours(365241780464L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1041666584");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + formatStyle20 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle20.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e0b\u5348\u65f6\u5206\u79d2" + "'", str22, "\u4e0b\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField44.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit45 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit45.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Weeks" + "'", str47, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronoPeriod53);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime54);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHN" + "'", str3, "CHN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh_CN" + "'", str4, "zh_CN");
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.UTC;
        java.time.Clock clock1 = java.time.Clock.system((java.time.ZoneId) zoneOffset0);
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.MILLI_OF_DAY;
        boolean boolean3 = clock1.equals((java.lang.Object) chronoField2);
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertNotNull(clock1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.MILLI_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        java.nio.charset.CoderResult coderResult1 = java.nio.charset.CoderResult.unmappableForLength(676000000);
        org.junit.Assert.assertNotNull(coderResult1);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        int int4 = ofDouble3.characteristics();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics5 = new java.util.DoubleSummaryStatistics();
        boolean boolean6 = ofDouble3.tryAdvance((java.util.function.DoubleConsumer) doubleSummaryStatistics5);
        double double7 = doubleSummaryStatistics5.getMax();
        double double8 = doubleSummaryStatistics5.getSum();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(doubleSummaryStatistics5.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.NEGATIVE_INFINITY + "'", double7 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.io.InputStream inputStream11 = uRL7.openStream();
        boolean boolean12 = inputStream11.markSupported();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.wrap(byteArray14);
        int int16 = inputStream11.read(byteArray14);
        long long18 = inputStream11.skip(0L);
        // The following exception was thrown during execution in test generation
        try {
            inputStream11.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Resetting to invalid mark");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom350625348059109844aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom350625348059109844aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom1242741797504944009aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom1242741797504944009aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.println(false);
        java.io.PrintWriter printWriter5 = printWriter1.append((java.lang.CharSequence) "\u82f1\u6587");
        printWriter5.close();
        printWriter5.println();
        org.junit.Assert.assertNotNull(printWriter5);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt6 = intStream5.spliterator();
        java.util.stream.IntStream.Builder builder7 = java.util.stream.IntStream.builder();
        boolean boolean8 = ofInt6.tryAdvance((java.util.function.IntConsumer) builder7);
        java.util.stream.IntStream intStream10 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt11 = intStream10.spliterator();
        java.util.stream.IntStream.Builder builder12 = java.util.stream.IntStream.builder();
        boolean boolean13 = ofInt11.tryAdvance((java.util.function.IntConsumer) builder12);
        ofInt6.forEachRemaining((java.util.function.IntConsumer) builder12);
        java.util.stream.IntStream intStream16 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt17 = intStream16.min();
        java.lang.String str18 = optionalInt17.toString();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate20 = localDateTime19.toLocalDate();
        boolean boolean21 = optionalInt17.equals((java.lang.Object) localDate20);
        int int23 = optionalInt17.orElse(59);
        java.util.stream.IntStream intStream25 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt26 = intStream25.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator27 = ofInt26.trySplit();
        java.util.stream.IntStream.Builder builder28 = java.util.stream.IntStream.builder();
        ofInt26.forEachRemaining((java.util.function.IntConsumer) builder28);
        optionalInt17.ifPresent((java.util.function.IntConsumer) builder28);
        boolean boolean31 = ofInt6.tryAdvance((java.util.function.IntConsumer) builder28);
        java.util.stream.IntStream.Builder builder33 = builder28.add(12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream34 = intStream1.peek((java.util.function.IntConsumer) builder33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(ofInt6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(ofInt11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(optionalInt17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OptionalInt[10]" + "'", str18, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(ofInt26);
        org.junit.Assert.assertNull(intSpliterator27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.Period period14 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period15 = java.time.Period.from((java.time.temporal.TemporalAmount) period14);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str17 = dateTimeFormatter16.toString();
        boolean boolean18 = period15.equals((java.lang.Object) dateTimeFormatter16);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime19 = zonedDateTime12.plus((java.time.temporal.TemporalAmount) period15);
        java.time.Period period21 = period15.minusMonths((-1L));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str17, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("CHN", 878000000, (int) '4');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalTime localTime8 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime10 = localTime8.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime11 = localDate1.atTime(localTime8);
        java.time.LocalTime localTime13 = localTime8.plusHours(52177497285L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        longStream3.close();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = longStream3.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("/tmp/United Kingdom6608063242857218135aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: /tmp/United Kingdom6608063242857218135aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str1 = inetAddress0.getHostName();
        boolean boolean2 = inetAddress0.isLoopbackAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "localhost" + "'", str1, "localhost");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) 1024);
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        java.security.Permission permission1 = null;
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("1 Jan 1970 00:00:00 GMT", permission1);
        java.util.concurrent.ExecutionException executionException3 = new java.util.concurrent.ExecutionException((java.lang.Throwable) accessControlException2);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("java.nio.HeapShortBufferR[pos=64 lim=64 cap=64]", (-999999999));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.nio.HeapShortBufferR[pos=64 lim=64 cap=64]" + "'", str2, "java.nio.HeapShortBufferR[pos=64 lim=64 cap=64]");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.time.Month month0 = java.time.Month.NOVEMBER;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean2 = chronoField1.isDateBased();
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.withSecond((int) (byte) 0);
        java.time.LocalDate localDate9 = offsetDateTime6.toLocalDate();
        java.time.LocalDate localDate11 = localDate9.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.zone.ZoneRules zoneRules22 = zoneOffset20.getRules();
        java.time.ZonedDateTime zonedDateTime23 = offsetDateTime15.atZoneSameInstant((java.time.ZoneId) zoneOffset20);
        java.time.LocalTime localTime24 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset27.getRules();
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDate9, localTime24, (java.time.ZoneId) zoneOffset27);
        boolean boolean31 = chronoField1.isSupportedBy((java.time.temporal.TemporalAccessor) localTime24);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = month0.getLong((java.time.temporal.TemporalField) chronoField1);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfAmPm");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.NOVEMBER + "'", month0.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.Collection<java.nio.charset.Charset> charsetCollection1 = strMap0.values();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(charsetCollection1);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet10 = zoneIdMap1.entrySet();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration11 = zoneIdMap1.keys();
        java.util.OptionalLong optionalLong13 = java.util.OptionalLong.of((long) 91);
        boolean boolean14 = zoneIdMap1.equals((java.lang.Object) 91);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset19);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = offsetDateTime25.atZoneSameInstant((java.time.ZoneId) zoneOffset30);
        java.time.ZoneId zoneId34 = zonedDateTime33.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime35 = zonedDateTime33.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.zone.ZoneRules zoneRules46 = zoneOffset44.getRules();
        java.time.ZonedDateTime zonedDateTime47 = offsetDateTime39.atZoneSameInstant((java.time.ZoneId) zoneOffset44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime47.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long50 = zonedDateTime47.getLong((java.time.temporal.TemporalField) chronoField49);
        long long51 = zonedDateTime33.getLong((java.time.temporal.TemporalField) chronoField49);
        java.time.Duration duration53 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration56 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList57 = duration56.getUnits();
        java.time.Duration duration58 = duration53.minus(duration56);
        int int59 = duration53.getNano();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime60 = zonedDateTime33.minus((java.time.temporal.TemporalAmount) duration53);
        java.time.temporal.Temporal temporal61 = zoneOffset19.adjustInto((java.time.temporal.Temporal) zonedDateTime33);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap63 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap67 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        java.time.zone.ZoneRules zoneRules73 = zoneOffset71.getRules();
        java.time.zone.ZoneRules zoneRules74 = zoneIdMap67.getOrDefault((java.lang.Object) 1.0d, zoneRules73);
        java.time.zone.ZoneRules zoneRules75 = zoneIdMap63.put((java.time.ZoneId) zoneOffset65, zoneRules73);
        char[] charArray83 = new char[] { 'a', '#', '4', '#' };
        boolean boolean84 = org.apache.commons.lang3.StringUtils.containsAny("", charArray83);
        boolean boolean85 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray83);
        boolean boolean86 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray83);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap88 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime90 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset92 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime93 = localDateTime90.atOffset(zoneOffset92);
        java.time.zone.ZoneRules zoneRules94 = zoneOffset92.getRules();
        java.time.zone.ZoneRules zoneRules95 = zoneIdMap88.getOrDefault((java.lang.Object) 1.0d, zoneRules94);
        java.lang.String str96 = zoneRules94.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList97 = zoneRules94.getTransitions();
        java.time.zone.ZoneRules zoneRules98 = zoneIdMap63.getOrDefault((java.lang.Object) charArray83, zoneRules94);
        java.time.zone.ZoneRules zoneRules99 = zoneIdMap1.put((java.time.ZoneId) zoneOffset19, zoneRules94);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEntrySet10);
        org.junit.Assert.assertNotNull(zoneIdEnumeration11);
        org.junit.Assert.assertNotNull(optionalLong13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 999999999L + "'", long50 == 999999999L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 999999999L + "'", long51 == 999999999L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(temporalUnitList57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime60);
        org.junit.Assert.assertNotNull(temporal61);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(zoneRules73);
        org.junit.Assert.assertNotNull(zoneRules74);
        org.junit.Assert.assertNull(zoneRules75);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(zoneOffset92);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(zoneRules94);
        org.junit.Assert.assertNotNull(zoneRules95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str96, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList97);
        org.junit.Assert.assertNotNull(zoneRules98);
        org.junit.Assert.assertNull(zoneRules99);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.util.concurrent.TimeoutException timeoutException1 = new java.util.concurrent.TimeoutException();
        java.security.AccessControlException accessControlException4 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException5 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException4);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional6 = java.util.Optional.of((java.lang.RuntimeException) accessControlException4);
        java.lang.RuntimeException runtimeException7 = runtimeExceptionOptional6.get();
        timeoutException1.addSuppressed((java.lang.Throwable) runtimeException7);
        java.util.concurrent.ExecutionException executionException9 = new java.util.concurrent.ExecutionException("Weeks", (java.lang.Throwable) runtimeException7);
        org.junit.Assert.assertNotNull(runtimeExceptionOptional6);
        org.junit.Assert.assertNotNull(runtimeException7);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration4 = duration2.abs();
        java.time.Duration duration5 = duration4.abs();
        java.time.Duration duration7 = duration4.plusDays((long) 17488);
        java.time.Duration duration10 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList11 = duration10.getUnits();
        java.time.Duration duration13 = duration10.plusDays((-1L));
        java.time.Duration duration15 = duration10.withSeconds(0L);
        java.time.Duration duration16 = duration15.abs();
        int int17 = duration4.compareTo(duration16);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(temporalUnitList11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer9 = byteBuffer8.asLongBuffer();
        java.nio.LongBuffer longBuffer11 = longBuffer9.put(0L);
        boolean boolean12 = longBuffer9.isDirect();
        java.nio.Buffer buffer13 = longBuffer9.clear();
        boolean boolean14 = localDateTime6.equals((java.lang.Object) buffer13);
        java.time.LocalDate localDate15 = localDateTime6.toLocalDate();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(longBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("\u5206\u949f", "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u5206\u949f" + "'", str2, "\u5206\u949f");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.withDayOfYear((int) '+');
        java.time.format.DateTimeFormatter dateTimeFormatter9 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology10 = dateTimeFormatter9.getChronology();
        java.time.format.TextStyle textStyle11 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = locale12.getISO3Language();
        java.time.format.DecimalStyle decimalStyle14 = java.time.format.DecimalStyle.of(locale12);
        java.lang.String str15 = chronology10.getDisplayName(textStyle11, locale12);
        java.time.OffsetTime offsetTime16 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime18 = offsetTime16.withSecond(16);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int20 = offsetTime18.get((java.time.temporal.TemporalField) chronoField19);
        java.time.temporal.ValueRange valueRange21 = chronology10.range(chronoField19);
        boolean boolean22 = offsetDateTime8.isSupported((java.time.temporal.TemporalField) chronoField19);
        java.lang.String str23 = offsetDateTime8.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + textStyle11 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle11.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(decimalStyle14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISO" + "'", str15, "ISO");
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField19.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(valueRange21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+999999999-02-12T23:59:59.999999999Z" + "'", str23, "+999999999-02-12T23:59:59.999999999Z");
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList41.spliterator();
        boolean boolean45 = strList41.isEmpty();
        java.time.LocalDate localDate46 = java.time.LocalDate.now();
        java.time.LocalDate localDate47 = java.time.LocalDate.MIN;
        boolean boolean48 = localDate46.isEqual((java.time.chrono.ChronoLocalDate) localDate47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean50 = localDate47.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.LocalDate localDate52 = localDate47.plusWeeks((long) 10);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology54 = dateTimeFormatter53.getChronology();
        java.time.format.TextStyle textStyle55 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.lang.String str57 = locale56.getISO3Language();
        java.time.format.DecimalStyle decimalStyle58 = java.time.format.DecimalStyle.of(locale56);
        java.lang.String str59 = chronology54.getDisplayName(textStyle55, locale56);
        java.time.OffsetTime offsetTime60 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime62 = offsetTime60.withSecond(16);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int64 = offsetTime62.get((java.time.temporal.TemporalField) chronoField63);
        java.time.temporal.ValueRange valueRange65 = chronology54.range(chronoField63);
        boolean boolean66 = localDate47.isSupported((java.time.temporal.TemporalField) chronoField63);
        boolean boolean67 = strList41.remove((java.lang.Object) localDate47);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField49.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + textStyle55 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle55.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "eng" + "'", str57, "eng");
        org.junit.Assert.assertNotNull(decimalStyle58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISO" + "'", str59, "ISO");
        org.junit.Assert.assertNotNull(offsetTime60);
        org.junit.Assert.assertNotNull(offsetTime62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField63.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 16 + "'", int64 == 16);
        org.junit.Assert.assertNotNull(valueRange65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Month month1 = java.time.Month.of((int) 'M');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear: 77");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean2 = file1.mkdirs();
        java.nio.file.Path path3 = file1.toPath();
        java.io.File file5 = new java.io.File("GBR");
        boolean boolean7 = file5.setWritable(true);
        java.nio.file.Path path8 = file5.toPath();
        java.nio.file.Path path10 = path8.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI11 = path8.toUri();
        boolean boolean13 = path8.startsWith("/experiment/GBR/");
        java.io.File file15 = new java.io.File("GBR");
        boolean boolean17 = file15.setWritable(true);
        java.nio.file.Path path18 = file15.toPath();
        java.nio.file.Path path20 = path18.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption21 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption22 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray23 = new java.nio.file.LinkOption[] { linkOption21, linkOption22 };
        java.nio.file.Path path24 = path18.toRealPath(linkOptionArray23);
        java.nio.file.Path path25 = path8.resolveSibling(path18);
        java.io.File file27 = new java.io.File("GBR");
        boolean boolean29 = file27.setWritable(true);
        java.nio.file.Path path30 = file27.toPath();
        java.nio.file.Path path32 = path30.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI33 = path30.toUri();
        boolean boolean35 = path30.startsWith("/experiment/GBR/");
        java.nio.file.Path path36 = path8.resolveSibling(path30);
        boolean boolean37 = path3.startsWith(path8);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(path3);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(path8);
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertTrue("'" + linkOption21 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption21.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption22 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption22.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray23);
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(path30);
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(uRI33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(path36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        java.time.Period period1 = java.time.Period.ofDays(0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 14);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        java.io.File file4 = file1.getCanonicalFile();
        long long5 = file1.getTotalSpace();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream7 = new java.io.PrintStream(file1, "P0D");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: P0D");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 364740218880L + "'", long5 == 364740218880L);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.parse((java.lang.CharSequence) "BIG_ENDIAN");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'BIG_ENDIAN' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDate localDate15 = localDate13.plusYears((long) 'u');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.Month month20 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime33 = localDateTime27.withHour(4);
        int int34 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDate localDate35 = localDateTime16.toLocalDate();
        java.time.Instant instant37 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.Clock clock42 = java.time.Clock.fixed(instant37, (java.time.ZoneId) zoneOffset40);
        java.time.LocalTime localTime43 = java.time.LocalTime.now(clock42);
        java.time.LocalTime localTime45 = localTime43.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.of(localDate35, localTime45);
        java.time.LocalTime localTime48 = localTime45.plusNanos(13L);
        java.time.LocalDateTime localDateTime49 = localDate13.atTime(localTime48);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate51 = localDate13.minusDays((long) 199000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -1000544843");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.DECEMBER + "'", month20.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(clock42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField0.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.lang.String str6 = date5.toGMTString();
        date5.setYear(437000000);
        long long9 = date5.getTime();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jul 27 09:34:40 UTC 147549121");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str6, "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-4656358258698319616L) + "'", long9 == (-4656358258698319616L));
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.withSecond((int) (byte) 0);
        java.time.LocalDate localDate25 = offsetDateTime22.toLocalDate();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = offsetDateTime22.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime22.minusMinutes((long) 100);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.Clock clock37 = java.time.Clock.fixed(instant32, (java.time.ZoneId) zoneOffset35);
        java.time.ZonedDateTime zonedDateTime38 = offsetDateTime30.atZoneSameInstant((java.time.ZoneId) zoneOffset35);
        java.time.LocalDate localDate39 = isoChronology0.dateNow((java.time.ZoneId) zoneOffset35);
        java.lang.String str40 = isoChronology0.toString();
        java.time.Instant instant43 = java.time.Instant.ofEpochSecond((long) (short) 10, (long) (byte) 0);
        boolean boolean44 = isoChronology0.equals((java.lang.Object) instant43);
        java.time.temporal.TemporalAccessor temporalAccessor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate46 = isoChronology0.date(temporalAccessor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISO" + "'", str40, "ISO");
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        java.util.Date date0 = new java.util.Date();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 09:16:02 UTC 2022");
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.security.cert.CertificateEncodingException certificateEncodingException1 = new java.security.cert.CertificateEncodingException("DecimalStyle[G+-.]");
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month1 = java.time.Month.OCTOBER;
        java.time.Month month3 = month1.plus(0L);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        int int9 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.temporal.Temporal temporal15 = month3.adjustInto((java.time.temporal.Temporal) localDateTime5);
        boolean boolean16 = strSet0.equals((java.lang.Object) month3);
        java.security.ProtectionDomain[] protectionDomainArray17 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext18 = new java.security.AccessControlContext(protectionDomainArray17);
        java.time.LocalDate localDate19 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery20 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period21 = localDate19.query(periodTemporalQuery20);
        boolean boolean22 = accessControlContext18.equals((java.lang.Object) periodTemporalQuery20);
        java.time.Period period23 = month3.query(periodTemporalQuery20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime36 = localDateTime30.withHour(4);
        java.util.stream.DoubleStream doubleStream37 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream38 = doubleStream37.distinct();
        java.util.stream.DoubleStream doubleStream39 = doubleStream38.parallel();
        boolean boolean40 = localDateTime36.equals((java.lang.Object) doubleStream38);
        java.time.Period period41 = periodTemporalQuery20.queryFrom((java.time.temporal.TemporalAccessor) localDateTime36);
        java.time.Month month42 = java.time.Month.OCTOBER;
        java.time.Month month44 = month42.plus(0L);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        int int50 = localDateTime45.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        int int55 = localDateTime46.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.temporal.Temporal temporal56 = month44.adjustInto((java.time.temporal.Temporal) localDateTime46);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate58 = localDateTime57.toLocalDate();
        java.time.LocalDateTime localDateTime60 = localDateTime57.plusWeeks(0L);
        boolean boolean61 = localDateTime46.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime57);
        java.time.LocalDateTime localDateTime63 = localDateTime57.minusMinutes((long) 256);
        boolean boolean64 = localDateTime36.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime57);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.OCTOBER + "'", month3.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(temporal15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(periodTemporalQuery20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + month42 + "' != '" + java.time.Month.OCTOBER + "'", month42.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month44 + "' != '" + java.time.Month.OCTOBER + "'", month44.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(temporal56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) charBuffer3);
        java.nio.CharBuffer charBuffer17 = charBuffer3.asReadOnlyBuffer();
        boolean boolean18 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getDisplayScript();
        java.lang.String str5 = locale1.getDisplayVariant();
        java.lang.String str6 = locale1.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        java.time.Period period1 = java.time.Period.ofDays((-1000002021));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalTime localTime8 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime10 = localTime8.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime11 = localDate1.atTime(localTime8);
        java.time.Instant instant13 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant15 = instant13.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime16 = java.nio.file.attribute.FileTime.from(instant13);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery17 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period18 = instant13.query(periodTemporalQuery17);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        boolean boolean21 = instant13.isSupported(temporalUnit20);
        java.time.Instant instant23 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant25 = instant23.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.zone.ZoneRules zoneRules30 = zoneOffset28.getRules();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.ofInstant(instant23, (java.time.ZoneId) zoneOffset28);
        java.time.ZoneId zoneId32 = zonedDateTime31.getZone();
        java.time.Clock clock33 = java.time.Clock.fixed(instant13, zoneId32);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate34 = localDate1.with((java.time.temporal.TemporalAdjuster) instant13);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(fileTime16);
        org.junit.Assert.assertNotNull(periodTemporalQuery17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField19.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNotNull(clock33);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.time.Instant instant8 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.Clock clock13 = java.time.Clock.fixed(instant8, (java.time.ZoneId) zoneOffset11);
        java.lang.String str14 = zoneOffset11.getId();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now((java.time.ZoneId) zoneOffset11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime16 = java.time.OffsetDateTime.of(234000000, (int) 'G', (int) (byte) 100, 64, (-1000002021), 277998031, (int) (byte) 100, zoneOffset11);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 71");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Z" + "'", str14, "Z");
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate2 = java.time.LocalDate.ofYearDay(989000000, (-7));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): -7");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("+999999999-12-31");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        int int6 = localDateTime0.getMinute();
        java.time.LocalDate localDate7 = java.time.LocalDate.now();
        java.time.LocalDate localDate8 = java.time.LocalDate.MIN;
        boolean boolean9 = localDate7.isEqual((java.time.chrono.ChronoLocalDate) localDate8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean11 = localDate8.isSupported((java.time.temporal.TemporalField) chronoField10);
        java.time.LocalDate localDate13 = localDate8.plusWeeks((long) 10);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        boolean boolean36 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        int int42 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        boolean boolean47 = localDateTime37.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        boolean boolean48 = localDateTime31.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.LocalDate localDate49 = localDateTime31.toLocalDate();
        java.time.LocalDate localDate50 = java.time.LocalDate.now();
        java.time.LocalDate localDate51 = java.time.LocalDate.MIN;
        boolean boolean52 = localDate50.isEqual((java.time.chrono.ChronoLocalDate) localDate51);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean54 = localDate51.isSupported((java.time.temporal.TemporalField) chronoField53);
        int int55 = localDate51.getDayOfYear();
        int int56 = localDate49.compareTo((java.time.chrono.ChronoLocalDate) localDate51);
        java.time.LocalDate localDate58 = localDate49.minusYears(32000L);
        java.time.LocalDate localDate60 = localDate49.minusWeeks((long) (short) 1);
        boolean boolean61 = localDate13.isEqual((java.time.chrono.ChronoLocalDate) localDate49);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal62 = localDateTime0.adjustInto((java.time.temporal.Temporal) localDate49);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField10.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField53.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1999999998 + "'", int56 == 1999999998);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusWeeks((long) 1);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = offsetDateTime20.atZoneSameInstant((java.time.ZoneId) zoneOffset25);
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime28.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long31 = zonedDateTime28.getLong((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery32 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period33 = zonedDateTime28.query(periodTemporalQuery32);
        boolean boolean34 = zonedDateTime12.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime28);
        java.time.format.FormatStyle formatStyle35 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter36 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle35);
        java.lang.String str37 = zonedDateTime28.format(dateTimeFormatter36);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.parse((java.lang.CharSequence) "+999999999-02-12T23:59:59.999999999Z", dateTimeFormatter36);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '+999999999-02-12T23:59:59.999999999Z' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 999999999L + "'", long31 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + formatStyle35 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle35.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e0b\u5348\u65f6\u5206\u79d2" + "'", str37, "\u4e0b\u5348\u65f6\u5206\u79d2");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        int int16 = localDateTime14.getSecond();
        java.time.Duration duration19 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int20 = duration19.getNano();
        java.time.Duration duration21 = duration19.abs();
        java.time.LocalDateTime localDateTime22 = localDateTime14.minus((java.time.temporal.TemporalAmount) duration21);
        java.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((long) (short) 0);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String str27 = locale26.getISO3Country();
        java.lang.String str28 = chronoField25.getDisplayName(locale26);
        boolean boolean29 = localDateTime24.isSupported((java.time.temporal.TemporalField) chronoField25);
        java.time.LocalDate localDate30 = java.time.LocalDate.now();
        java.time.LocalDate localDate31 = java.time.LocalDate.MIN;
        boolean boolean32 = localDate30.isEqual((java.time.chrono.ChronoLocalDate) localDate31);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean34 = localDate31.isSupported((java.time.temporal.TemporalField) chronoField33);
        int int35 = localDate31.getDayOfYear();
        java.time.LocalDate localDate37 = localDate31.withYear((int) '4');
        java.time.LocalTime localTime38 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime40 = localTime38.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime41 = localDate31.atTime(localTime38);
        java.time.LocalTime localTime43 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int44 = localTime38.compareTo(localTime43);
        java.time.Duration duration45 = java.time.Duration.ZERO;
        java.time.Duration duration47 = duration45.minusDays((long) (-1));
        java.time.LocalTime localTime48 = localTime43.minus((java.time.temporal.TemporalAmount) duration47);
        java.time.LocalTime localTime50 = localTime48.plusMinutes(100L);
        java.time.Instant instant52 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant54 = instant52.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime55 = java.nio.file.attribute.FileTime.from(instant52);
        java.time.Instant instant57 = instant52.plusMillis((long) 10);
        java.time.Instant instant59 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant61 = instant59.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime62 = java.nio.file.attribute.FileTime.from(instant59);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery63 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period64 = instant59.query(periodTemporalQuery63);
        java.time.Period period65 = instant57.query(periodTemporalQuery63);
        java.time.Period period66 = localTime50.query(periodTemporalQuery63);
        java.time.Period period67 = localDateTime24.query(periodTemporalQuery63);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField25.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GBR" + "'", str27, "GBR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Minute" + "'", str28, "Minute");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField33.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(fileTime55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(fileTime62);
        org.junit.Assert.assertNotNull(periodTemporalQuery63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.time.ZoneId zoneId49 = zonedDateTime14.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime51 = zonedDateTime14.withMonth((int) '/');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 47");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertNotNull(zoneId49);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology3);
        java.time.format.DateTimeFormatter dateTimeFormatter10 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology11 = dateTimeFormatter10.getChronology();
        java.time.format.TextStyle textStyle12 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getISO3Language();
        java.time.format.DecimalStyle decimalStyle15 = java.time.format.DecimalStyle.of(locale13);
        java.lang.String str16 = chronology11.getDisplayName(textStyle12, locale13);
        java.time.OffsetTime offsetTime17 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime19 = offsetTime17.withSecond(16);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int21 = offsetTime19.get((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.ValueRange valueRange22 = chronology11.range(chronoField20);
        java.time.Instant instant24 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.Clock clock29 = java.time.Clock.fixed(instant24, (java.time.ZoneId) zoneOffset27);
        java.time.chrono.ChronoLocalDate chronoLocalDate30 = chronology11.dateNow(clock29);
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = chronology3.date((java.time.temporal.TemporalAccessor) chronoLocalDate30);
        java.time.LocalTime localTime32 = java.time.LocalTime.NOON;
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate35 = localDateTime34.toLocalDate();
        java.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange38 = chronoField33.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime34);
        int int39 = localTime32.get((java.time.temporal.TemporalField) chronoField33);
        boolean boolean40 = chronoLocalDate30.isSupported((java.time.temporal.TemporalField) chronoField33);
        java.lang.String str41 = chronoLocalDate30.toString();
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + textStyle12 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle12.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(decimalStyle15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISO" + "'", str16, "ISO");
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField20.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(valueRange22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(chronoLocalDate30);
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField33.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01" + "'", str41, "1970-01-01");
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        char[] charArray21 = new char[] { 'a', '#', '4', '#' };
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsAny("", charArray21);
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray21);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray21);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap26 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap26.getOrDefault((java.lang.Object) 1.0d, zoneRules32);
        java.lang.String str34 = zoneRules32.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = zoneRules32.getTransitions();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap1.getOrDefault((java.lang.Object) charArray21, zoneRules32);
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = zoneRules36.getTransitions();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str34, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList37);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant52 = instant50.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime53 = java.nio.file.attribute.FileTime.from(instant50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = instant50.query(periodTemporalQuery54);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        boolean boolean58 = instant50.isSupported(temporalUnit57);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant62 = instant60.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.zone.ZoneRules zoneRules67 = zoneOffset65.getRules();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(instant60, (java.time.ZoneId) zoneOffset65);
        java.time.ZoneId zoneId69 = zonedDateTime68.getZone();
        java.time.Clock clock70 = java.time.Clock.fixed(instant50, zoneId69);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime14.with((java.time.temporal.TemporalAdjuster) instant50);
        java.time.Instant instant72 = zonedDateTime14.toInstant();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime73 = zonedDateTime14.toLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime73);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.FRIDAY;
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.FRIDAY));
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusNanos((long) 10000);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = offsetDateTime25.atZoneSameInstant((java.time.ZoneId) zoneOffset30);
        int int34 = zonedDateTime33.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime33.withDayOfYear(10);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.ZonedDateTime zonedDateTime48 = offsetDateTime40.atZoneSameInstant((java.time.ZoneId) zoneOffset45);
        java.time.ZoneId zoneId49 = zonedDateTime48.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime50 = zonedDateTime48.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime54.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.zone.ZoneRules zoneRules61 = zoneOffset59.getRules();
        java.time.ZonedDateTime zonedDateTime62 = offsetDateTime54.atZoneSameInstant((java.time.ZoneId) zoneOffset59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime62.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long65 = zonedDateTime62.getLong((java.time.temporal.TemporalField) chronoField64);
        long long66 = zonedDateTime48.getLong((java.time.temporal.TemporalField) chronoField64);
        int int67 = zonedDateTime36.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime48);
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit69 = chronoField68.getBaseUnit();
        java.time.temporal.ValueRange valueRange70 = zonedDateTime36.range((java.time.temporal.TemporalField) chronoField68);
        java.time.LocalTime localTime71 = java.time.LocalTime.NOON;
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate74 = localDateTime73.toLocalDate();
        java.time.LocalDateTime localDateTime76 = localDateTime73.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange77 = chronoField72.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime73);
        int int78 = localTime71.get((java.time.temporal.TemporalField) chronoField72);
        long long79 = zonedDateTime36.getLong((java.time.temporal.TemporalField) chronoField72);
        boolean boolean80 = zonedDateTime21.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime36);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 31 + "'", int34 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(zoneId49);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(zoneRules61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField64.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 999999999L + "'", long65 == 999999999L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 999999999L + "'", long66 == 999999999L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField68.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit69 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit69.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField72.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(valueRange77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 11L + "'", long79 == 11L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.Month month7 = localDate6.getMonth();
        java.time.Month month8 = localDate6.getMonth();
        java.time.temporal.TemporalAdjuster temporalAdjuster9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate10 = localDate6.with(temporalAdjuster9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.DECEMBER + "'", month7.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.DECEMBER + "'", month8.equals(java.time.Month.DECEMBER));
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        strItor5.add("");
        strItor5.add("x-windows-iso2022jp");
        boolean boolean10 = strItor5.hasNext();
        strItor5.add("java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
        boolean boolean13 = strItor5.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            strItor5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        boolean boolean12 = file8.setWritable(true);
        java.net.URI uRI13 = file8.toURI();
        java.net.URI uRI14 = uRI6.relativize(uRI13);
        boolean boolean15 = uRI6.isAbsolute();
        java.lang.String str16 = uRI6.getRawSchemeSpecificPart();
        java.lang.String str17 = uRI6.getRawAuthority();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/experiment/GBR/" + "'", str16, "/experiment/GBR/");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        longStream3.close();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("             +999999999-12-31");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod5 = chronology1.period(30, (int) (byte) 0, 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(chronoPeriod5);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.time.chrono.IsoEra isoEra1 = java.time.chrono.IsoEra.BCE;
        int int2 = isoEra1.getValue();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap4 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.zone.ZoneRules zoneRules11 = zoneIdMap4.getOrDefault((java.lang.Object) 1.0d, zoneRules10);
        java.lang.String str12 = zoneRules10.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList13 = zoneRules10.getTransitions();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        boolean boolean36 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.format.DateTimeFormatter dateTimeFormatter37 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str38 = localDateTime31.format(dateTimeFormatter37);
        java.time.ZoneOffset zoneOffset39 = zoneRules10.getOffset(localDateTime31);
        java.time.LocalDateTime localDateTime41 = localDateTime31.minusMinutes(13L);
        java.time.temporal.Temporal temporal42 = isoEra1.adjustInto((java.time.temporal.Temporal) localDateTime41);
        java.time.format.TextStyle textStyle43 = java.time.format.TextStyle.FULL_STANDALONE;
        java.util.Locale locale44 = java.util.Locale.UK;
        java.lang.String str45 = locale44.getISO3Country();
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.lang.String str47 = locale44.getDisplayScript(locale46);
        java.util.Locale.setDefault(locale46);
        java.lang.String str49 = isoEra1.getDisplayName(textStyle43, locale46);
        java.lang.String str50 = locale0.getDisplayVariant(locale46);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + isoEra1 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra1.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str12, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str38, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(temporal42);
        org.junit.Assert.assertTrue("'" + textStyle43 + "' != '" + java.time.format.TextStyle.FULL_STANDALONE + "'", textStyle43.equals(java.time.format.TextStyle.FULL_STANDALONE));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GBR" + "'", str45, "GBR");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator2 = intStream1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Integer> intStream3 = intStream1.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intSpliterator2);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.util.Date date5 = java.util.Date.from(instant1);
        int int6 = date5.getDay();
        java.time.Instant instant7 = date5.toInstant();
        int int8 = date5.getMonth();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.plusHours((-1L));
        java.time.Instant instant36 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.Clock clock41 = java.time.Clock.fixed(instant36, (java.time.ZoneId) zoneOffset39);
        java.time.LocalTime localTime42 = java.time.LocalTime.now(clock41);
        java.time.LocalTime localTime44 = localTime42.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean46 = localTime44.isSupported((java.time.temporal.TemporalField) chronoField45);
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField45.getBaseUnit();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime48 = zonedDateTime31.plus(0L, temporalUnit47);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(clock41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField45.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime48);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        java.lang.String str5 = file1.getCanonicalPath();
        java.io.File file6 = file1.getCanonicalFile();
        boolean boolean8 = file6.setExecutable(true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/GBR" + "'", str5, "/experiment/GBR");
        org.junit.Assert.assertNotNull(file6);
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        java.lang.String str1 = proxy0.toString();
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocate((int) ' ');
        int int4 = byteBuffer3.position();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer6 = byteBuffer5.asDoubleBuffer();
        boolean boolean7 = proxy0.equals((java.lang.Object) byteBuffer5);
        int int9 = byteBuffer5.getInt(12);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putShort((short) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DIRECT" + "'", str1, "DIRECT");
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.util.function.UnaryOperator<java.util.function.LongUnaryOperator> longUnaryOperatorUnaryOperator0 = java.util.function.UnaryOperator.identity();
        org.junit.Assert.assertNotNull(longUnaryOperatorUnaryOperator0);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        boolean boolean4 = charsetDecoder1.isAutoDetecting();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetDecoder charsetDecoder6 = charsetDecoder1.replaceWith("eng");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        java.lang.Throwable throwable0 = null;
        java.security.InvalidKeyException invalidKeyException1 = new java.security.InvalidKeyException(throwable0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        java.util.stream.IntStream intStream5 = intStream4.parallel();
        java.util.stream.IntStream intStream6 = intStream5.sequential();
        java.util.function.IntPredicate intPredicate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = intStream5.anyMatch(intPredicate7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 999999999);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException("");
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.lang.CharSequence charSequence0 = null;
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank(charSequence0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusMinutes((long) 31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime17 = zonedDateTime11.withSecond(199000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 199000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        java.net.NetworkInterface networkInterface1 = java.net.NetworkInterface.getByIndex(495000000);
        org.junit.Assert.assertNull(networkInterface1);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        int int7 = duration1.getNano();
        int int8 = duration1.getNano();
        java.time.Duration duration10 = duration1.plusSeconds(999999L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period11 = java.time.Period.from((java.time.temporal.TemporalAmount) duration10);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration10);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        java.util.MissingResourceException missingResourceException8 = new java.util.MissingResourceException("-999999999-01-01", "zonerules[currentstandardoffset=z]", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        java.lang.String str9 = missingResourceException8.getClassName();
        java.lang.RuntimeException runtimeException10 = runtimeExceptionOptional4.orElse((java.lang.RuntimeException) missingResourceException8);
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zonerules[currentstandardoffset=z]" + "'", str9, "zonerules[currentstandardoffset=z]");
        org.junit.Assert.assertNotNull(runtimeException10);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.OffsetDateTime offsetDateTime8 = localDate1.atTime(offsetTime7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        boolean boolean31 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        boolean boolean42 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDate localDate44 = localDateTime26.toLocalDate();
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean49 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField48);
        int int50 = localDate46.getDayOfYear();
        int int51 = localDate44.compareTo((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.Period period52 = localDate1.until((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.chrono.ChronoPeriod chronoPeriod53 = period52.normalized();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1999999998 + "'", int51 == 1999999998);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(chronoPeriod53);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        long long1 = longSummaryStatistics0.getSum();
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt4 = intStream3.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = ofInt4.trySplit();
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt8 = intStream7.spliterator();
        java.util.stream.IntStream.Builder builder9 = java.util.stream.IntStream.builder();
        boolean boolean10 = ofInt8.tryAdvance((java.util.function.IntConsumer) builder9);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt13 = intStream12.spliterator();
        java.util.stream.IntStream.Builder builder14 = java.util.stream.IntStream.builder();
        boolean boolean15 = ofInt13.tryAdvance((java.util.function.IntConsumer) builder14);
        ofInt8.forEachRemaining((java.util.function.IntConsumer) builder14);
        boolean boolean17 = ofInt4.tryAdvance((java.util.function.IntConsumer) builder14);
        java.util.function.IntConsumer intConsumer18 = longSummaryStatistics0.andThen((java.util.function.IntConsumer) builder14);
        builder14.accept(0);
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(ofInt4);
        org.junit.Assert.assertNull(intSpliterator5);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(ofInt8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(ofInt13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intConsumer18);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble1 = doubleStream0.max();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics2 = new java.util.DoubleSummaryStatistics();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        double double4 = doubleSummaryStatistics3.getSum();
        double double5 = doubleSummaryStatistics3.getMin();
        long long6 = doubleSummaryStatistics3.getCount();
        double double7 = doubleSummaryStatistics3.getAverage();
        double double8 = doubleSummaryStatistics3.getMin();
        java.util.function.DoubleConsumer doubleConsumer9 = doubleSummaryStatistics2.andThen((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
        // The following exception was thrown during execution in test generation
        try {
            doubleStream0.forEachOrdered(doubleConsumer9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals(doubleSummaryStatistics2.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleConsumer9);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        java.util.stream.IntStream intStream10 = charBuffer9.chars();
        java.util.OptionalInt optionalInt11 = intStream10.findFirst();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(optionalInt11);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.zone.ZoneRules zoneRules4 = zoneOffset2.getRules();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.lang.String str14 = zoneRules12.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = zoneRules12.getTransitions();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        boolean boolean38 = localDateTime17.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str40 = localDateTime33.format(dateTimeFormatter39);
        java.time.ZoneOffset zoneOffset41 = zoneRules12.getOffset(localDateTime33);
        java.time.LocalDateTime localDateTime43 = localDateTime33.minusMinutes(13L);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition44 = zoneRules4.getTransition(localDateTime33);
        java.time.LocalDateTime localDateTime46 = localDateTime33.plusNanos(0L);
        java.time.Instant instant48 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant50 = instant48.minusNanos((long) 'a');
        long long51 = instant48.toEpochMilli();
        boolean boolean52 = localDateTime46.equals((java.lang.Object) instant48);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(zoneRules4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str14, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str40, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNull(zoneOffsetTransition44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 32000L + "'", long51 == 32000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 9223372036854775807L);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strList11.removeAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList11.spliterator();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList11.replaceAll(strUnaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.OffsetDateTime offsetDateTime8 = localDate1.atTime(offsetTime7);
        int int9 = offsetDateTime8.getDayOfMonth();
        int int10 = offsetDateTime8.getMonthValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        int int30 = zonedDateTime29.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime29.withDayOfYear(10);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.zone.ZoneRules zoneRules43 = zoneOffset41.getRules();
        java.time.ZonedDateTime zonedDateTime44 = offsetDateTime36.atZoneSameInstant((java.time.ZoneId) zoneOffset41);
        java.time.ZoneId zoneId45 = zonedDateTime44.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime46 = zonedDateTime44.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime50.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.zone.ZoneRules zoneRules57 = zoneOffset55.getRules();
        java.time.ZonedDateTime zonedDateTime58 = offsetDateTime50.atZoneSameInstant((java.time.ZoneId) zoneOffset55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime58.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long61 = zonedDateTime58.getLong((java.time.temporal.TemporalField) chronoField60);
        long long62 = zonedDateTime44.getLong((java.time.temporal.TemporalField) chronoField60);
        int int63 = zonedDateTime32.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime44);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.temporal.ValueRange valueRange66 = zonedDateTime32.range((java.time.temporal.TemporalField) chronoField64);
        java.time.Instant instant68 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant70 = instant68.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime71 = java.nio.file.attribute.FileTime.from(instant68);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery72 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period73 = instant68.query(periodTemporalQuery72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField74.getBaseUnit();
        boolean boolean76 = instant68.isSupported(temporalUnit75);
        java.time.Instant instant78 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant80 = instant78.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime84 = localDateTime81.atOffset(zoneOffset83);
        java.time.zone.ZoneRules zoneRules85 = zoneOffset83.getRules();
        java.time.ZonedDateTime zonedDateTime86 = java.time.ZonedDateTime.ofInstant(instant78, (java.time.ZoneId) zoneOffset83);
        java.time.ZoneId zoneId87 = zonedDateTime86.getZone();
        java.time.Clock clock88 = java.time.Clock.fixed(instant68, zoneId87);
        java.time.ZonedDateTime zonedDateTime89 = zonedDateTime32.with((java.time.temporal.TemporalAdjuster) instant68);
        java.time.Instant instant90 = instant9.with((java.time.temporal.TemporalAdjuster) instant68);
        boolean boolean91 = byteBuffer6.equals((java.lang.Object) instant90);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer6.putLong((long) (short) 100);
        java.nio.ByteOrder byteOrder94 = byteBuffer93.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 999999999L + "'", long61 == 999999999L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 999999999L + "'", long62 == 999999999L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField64.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(fileTime71);
        org.junit.Assert.assertNotNull(periodTemporalQuery72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField74.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(zoneId87);
        org.junit.Assert.assertNotNull(clock88);
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteOrder94);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond(32000L, (long) 64);
        java.time.Instant instant4 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        java.time.Clock clock9 = java.time.Clock.fixed(instant4, (java.time.ZoneId) zoneOffset7);
        java.time.LocalTime localTime10 = java.time.LocalTime.now(clock9);
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        boolean boolean59 = clock9.equals((java.lang.Object) zoneIdSet49);
        java.time.OffsetTime offsetTime60 = java.time.OffsetTime.now(clock9);
        int int61 = offsetTime60.getNano();
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer64 = byteBuffer63.asLongBuffer();
        java.nio.LongBuffer longBuffer66 = longBuffer64.put(0L);
        boolean boolean67 = longBuffer64.isDirect();
        long long68 = longBuffer64.get();
        java.nio.ByteOrder byteOrder69 = longBuffer64.order();
        java.nio.LongBuffer longBuffer71 = longBuffer64.put((long) 12);
        boolean boolean72 = offsetTime60.equals((java.lang.Object) longBuffer71);
        java.time.OffsetTime offsetTime74 = offsetTime60.minusNanos((long) 'a');
        java.time.OffsetTime offsetTime76 = offsetTime60.plusHours((long) 256);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant77 = instant2.with((java.time.temporal.TemporalAdjuster) offsetTime76);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(clock9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(offsetTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(longBuffer64);
        org.junit.Assert.assertNotNull(longBuffer66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteOrder69);
        org.junit.Assert.assertNotNull(longBuffer71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(offsetTime74);
        org.junit.Assert.assertNotNull(offsetTime76);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList67);
        boolean boolean70 = zoneIdSet46.removeAll((java.util.Collection<java.lang.String>) strList69);
        strList69.clear();
        java.io.File file73 = new java.io.File("GBR");
        boolean boolean74 = file73.mkdirs();
        java.nio.file.Path path75 = file73.toPath();
        boolean boolean76 = strList69.contains((java.lang.Object) path75);
        int int77 = path4.compareTo(path75);
        java.io.File file79 = new java.io.File("GBR");
        boolean boolean81 = file79.setWritable(true);
        java.nio.file.Path path82 = file79.toPath();
        java.nio.file.Path path84 = path82.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.lang.String str85 = path84.toString();
        boolean boolean86 = path84.isAbsolute();
        boolean boolean87 = path75.endsWith(path84);
        int int88 = path75.getNameCount();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull("file73.getParent() == null", file73.getParent());
        org.junit.Assert.assertEquals(file73.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(path75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNull("file79.getParent() == null", file79.getParent());
        org.junit.Assert.assertEquals(file79.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(path82);
        org.junit.Assert.assertNotNull(path84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str85, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        java.security.PermissionCollection permissionCollection3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.security.Principal principal5 = null;
        java.security.Principal[] principalArray6 = new java.security.Principal[] { principal5 };
        java.security.ProtectionDomain protectionDomain7 = new java.security.ProtectionDomain(codeSource2, permissionCollection3, classLoader4, principalArray6);
        java.security.Principal[] principalArray8 = protectionDomain7.getPrincipals();
        java.security.PermissionCollection permissionCollection9 = protectionDomain7.getPermissions();
        java.net.URL uRL10 = null;
        java.security.CodeSigner[] codeSignerArray11 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource12 = new java.security.CodeSource(uRL10, codeSignerArray11);
        java.security.PermissionCollection permissionCollection13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.security.Principal principal15 = null;
        java.security.Principal[] principalArray16 = new java.security.Principal[] { principal15 };
        java.security.ProtectionDomain protectionDomain17 = new java.security.ProtectionDomain(codeSource12, permissionCollection13, classLoader14, principalArray16);
        java.security.Principal[] principalArray18 = protectionDomain17.getPrincipals();
        java.net.URL uRL19 = null;
        java.security.CodeSigner[] codeSignerArray20 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource21 = new java.security.CodeSource(uRL19, codeSignerArray20);
        java.security.PermissionCollection permissionCollection22 = null;
        java.lang.ClassLoader classLoader23 = null;
        java.security.Principal principal24 = null;
        java.security.Principal[] principalArray25 = new java.security.Principal[] { principal24 };
        java.security.ProtectionDomain protectionDomain26 = new java.security.ProtectionDomain(codeSource21, permissionCollection22, classLoader23, principalArray25);
        java.security.Principal[] principalArray27 = protectionDomain26.getPrincipals();
        java.net.URL uRL28 = null;
        java.security.CodeSigner[] codeSignerArray29 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource30 = new java.security.CodeSource(uRL28, codeSignerArray29);
        java.security.PermissionCollection permissionCollection31 = null;
        java.lang.ClassLoader classLoader32 = null;
        java.security.Principal principal33 = null;
        java.security.Principal[] principalArray34 = new java.security.Principal[] { principal33 };
        java.security.ProtectionDomain protectionDomain35 = new java.security.ProtectionDomain(codeSource30, permissionCollection31, classLoader32, principalArray34);
        java.security.Principal[] principalArray36 = protectionDomain35.getPrincipals();
        java.net.URL uRL37 = null;
        java.security.CodeSigner[] codeSignerArray38 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource39 = new java.security.CodeSource(uRL37, codeSignerArray38);
        java.security.PermissionCollection permissionCollection40 = null;
        java.lang.ClassLoader classLoader41 = null;
        java.security.Principal principal42 = null;
        java.security.Principal[] principalArray43 = new java.security.Principal[] { principal42 };
        java.security.ProtectionDomain protectionDomain44 = new java.security.ProtectionDomain(codeSource39, permissionCollection40, classLoader41, principalArray43);
        java.net.URL uRL45 = null;
        java.security.CodeSigner[] codeSignerArray46 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource47 = new java.security.CodeSource(uRL45, codeSignerArray46);
        java.security.PermissionCollection permissionCollection48 = null;
        java.lang.ClassLoader classLoader49 = null;
        java.security.Principal principal50 = null;
        java.security.Principal[] principalArray51 = new java.security.Principal[] { principal50 };
        java.security.ProtectionDomain protectionDomain52 = new java.security.ProtectionDomain(codeSource47, permissionCollection48, classLoader49, principalArray51);
        java.security.ProtectionDomain[] protectionDomainArray53 = new java.security.ProtectionDomain[] { protectionDomain7, protectionDomain17, protectionDomain26, protectionDomain35, protectionDomain44, protectionDomain52 };
        java.security.AccessControlContext accessControlContext54 = new java.security.AccessControlContext(protectionDomainArray53);
        java.security.DomainCombiner domainCombiner55 = null;
        java.security.AccessControlContext accessControlContext56 = new java.security.AccessControlContext(accessControlContext54, domainCombiner55);
        javax.security.auth.Subject subject57 = javax.security.auth.Subject.getSubject(accessControlContext56);
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertNotNull(principalArray6);
        org.junit.Assert.assertNotNull(principalArray8);
        org.junit.Assert.assertNull(permissionCollection9);
        org.junit.Assert.assertNotNull(codeSignerArray11);
        org.junit.Assert.assertNotNull(principalArray16);
        org.junit.Assert.assertNotNull(principalArray18);
        org.junit.Assert.assertNotNull(codeSignerArray20);
        org.junit.Assert.assertNotNull(principalArray25);
        org.junit.Assert.assertNotNull(principalArray27);
        org.junit.Assert.assertNotNull(codeSignerArray29);
        org.junit.Assert.assertNotNull(principalArray34);
        org.junit.Assert.assertNotNull(principalArray36);
        org.junit.Assert.assertNotNull(codeSignerArray38);
        org.junit.Assert.assertNotNull(principalArray43);
        org.junit.Assert.assertNotNull(codeSignerArray46);
        org.junit.Assert.assertNotNull(principalArray51);
        org.junit.Assert.assertNotNull(protectionDomainArray53);
        org.junit.Assert.assertNull(subject57);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId13 = zonedDateTime11.getZone();
        int int14 = zonedDateTime11.getHour();
        java.time.Month month15 = zonedDateTime11.getMonth();
        java.time.DayOfWeek dayOfWeek16 = zonedDateTime11.getDayOfWeek();
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.Clock clock23 = java.time.Clock.fixed(instant18, (java.time.ZoneId) zoneOffset21);
        java.time.LocalTime localTime24 = java.time.LocalTime.now(clock23);
        java.time.LocalTime localTime26 = localTime24.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean28 = localTime26.isSupported((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.plusSeconds((long) (short) 0);
        java.time.OffsetTime offsetTime32 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime34 = offsetTime32.withSecond(16);
        java.time.OffsetTime offsetTime35 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime37 = offsetTime35.withSecond(16);
        java.time.Instant instant39 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant41 = instant39.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime42 = java.nio.file.attribute.FileTime.from(instant39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery43 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period44 = instant39.query(periodTemporalQuery43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField45.getBaseUnit();
        boolean boolean47 = instant39.isSupported(temporalUnit46);
        boolean boolean48 = offsetTime35.isSupported(temporalUnit46);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant52 = instant50.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime53 = java.nio.file.attribute.FileTime.from(instant50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = instant50.query(periodTemporalQuery54);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        boolean boolean58 = instant50.isSupported(temporalUnit57);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant62 = instant60.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.zone.ZoneRules zoneRules67 = zoneOffset65.getRules();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(instant60, (java.time.ZoneId) zoneOffset65);
        java.time.ZoneId zoneId69 = zonedDateTime68.getZone();
        java.time.Clock clock70 = java.time.Clock.fixed(instant50, zoneId69);
        boolean boolean71 = offsetTime35.equals((java.lang.Object) zoneId69);
        int int72 = offsetTime32.compareTo(offsetTime35);
        java.time.OffsetTime offsetTime74 = offsetTime32.plusNanos((long) '\n');
        java.time.Duration duration77 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList78 = duration77.getUnits();
        java.time.Duration duration80 = duration77.plusDays((-1L));
        java.time.Duration duration82 = duration77.withSeconds(0L);
        java.time.Duration duration83 = duration82.abs();
        java.time.OffsetTime offsetTime84 = offsetTime74.plus((java.time.temporal.TemporalAmount) duration83);
        java.time.OffsetTime offsetTime86 = offsetTime74.minusHours((long) 33237);
        java.time.temporal.ChronoField chronoField87 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean88 = offsetTime86.isSupported((java.time.temporal.TemporalField) chronoField87);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime90 = zonedDateTime31.with((java.time.temporal.TemporalField) chronoField87, (long) 997000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MicroOfSecond (valid values 0 - 999999): 997000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.DECEMBER + "'", month15.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + dayOfWeek16 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek16.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 11L + "'", long29 == 11L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(offsetTime32);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(offsetTime35);
        org.junit.Assert.assertNotNull(offsetTime37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(fileTime42);
        org.junit.Assert.assertNotNull(periodTemporalQuery43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField45.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(offsetTime74);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(temporalUnitList78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(offsetTime84);
        org.junit.Assert.assertNotNull(offsetTime86);
        org.junit.Assert.assertTrue("'" + chronoField87 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField87.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("P-7D", "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withDecimalSeparator('\000');
        short[] shortArray10 = new short[] { (byte) 100, (byte) 0, (short) 1, (short) 10, (byte) 10 };
        java.nio.ShortBuffer shortBuffer11 = java.nio.ShortBuffer.wrap(shortArray10);
        boolean boolean12 = decimalStyle2.equals((java.lang.Object) shortBuffer11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[100, 0, 1, 10, 10]");
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.MONDAY;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getHour();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = offsetDateTime20.atZoneSameInstant((java.time.ZoneId) zoneOffset25);
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime28.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long31 = zonedDateTime28.getLong((java.time.temporal.TemporalField) chronoField30);
        long long32 = zonedDateTime16.getLong((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField30.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit34 = chronoField30.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange35 = dayOfWeek0.range((java.time.temporal.TemporalField) chronoField30);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 999999999L + "'", long31 == 999999999L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 999999999L + "'", long32 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit34 + "' != '" + java.time.temporal.ChronoUnit.NANOS + "'", temporalUnit34.equals(java.time.temporal.ChronoUnit.NANOS));
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.lang.String str7 = path6.toString();
        boolean boolean8 = path6.isAbsolute();
        java.lang.String str10 = org.apache.commons.lang3.StringUtils.join((java.lang.Iterable<java.nio.file.Path>) path6, '4');
        java.util.Iterator<java.nio.file.Path> pathItor11 = path6.iterator();
        java.nio.file.WatchService watchService12 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind13 = null;
        java.nio.file.WatchEvent.Kind[] kindArray15 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray16 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray15;
        wildcardKindArray16[0] = wildcardKind13;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey19 = path6.register(watchService12, wildcardKindArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str7, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str10, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(pathItor11);
        org.junit.Assert.assertNotNull(kindArray15);
        org.junit.Assert.assertNotNull(wildcardKindArray16);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        boolean boolean5 = file1.setReadOnly();
        boolean boolean6 = file1.createNewFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("zh_CN");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        long long5 = instant1.toEpochMilli();
        long long6 = instant1.toEpochMilli();
        java.time.Instant instant8 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant10 = instant8.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime11 = java.nio.file.attribute.FileTime.from(instant8);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery12 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period13 = instant8.query(periodTemporalQuery12);
        java.time.Period period14 = instant1.query(periodTemporalQuery12);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap16 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap20 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap20.getOrDefault((java.lang.Object) 1.0d, zoneRules26);
        java.time.zone.ZoneRules zoneRules28 = zoneIdMap16.put((java.time.ZoneId) zoneOffset18, zoneRules26);
        char[] charArray36 = new char[] { 'a', '#', '4', '#' };
        boolean boolean37 = org.apache.commons.lang3.StringUtils.containsAny("", charArray36);
        boolean boolean38 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray36);
        boolean boolean39 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray36);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap41 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.zone.ZoneRules zoneRules48 = zoneIdMap41.getOrDefault((java.lang.Object) 1.0d, zoneRules47);
        java.lang.String str49 = zoneRules47.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = zoneRules47.getTransitions();
        java.time.zone.ZoneRules zoneRules51 = zoneIdMap16.getOrDefault((java.lang.Object) charArray36, zoneRules47);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.ofEpochSecond(0L, (int) '\r', zoneOffset55);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition57 = zoneRules51.getTransition(localDateTime56);
        java.time.Instant instant59 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant61 = instant59.minusNanos((long) 'a');
        long long62 = instant59.getEpochSecond();
        java.time.Instant instant64 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        java.time.Clock clock69 = java.time.Clock.fixed(instant64, (java.time.ZoneId) zoneOffset67);
        java.time.OffsetDateTime offsetDateTime70 = instant59.atOffset(zoneOffset67);
        boolean boolean71 = zoneRules51.isDaylightSavings(instant59);
        boolean boolean72 = instant1.isAfter(instant59);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer75 = byteBuffer74.asLongBuffer();
        java.nio.LongBuffer longBuffer77 = longBuffer75.put(0L);
        java.time.LocalTime localTime78 = java.time.LocalTime.now();
        int int79 = localTime78.getNano();
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long81 = localTime78.getLong((java.time.temporal.TemporalField) chronoField80);
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime85 = localDateTime82.atOffset(zoneOffset84);
        java.time.OffsetDateTime offsetDateTime87 = offsetDateTime85.withSecond((int) (byte) 0);
        boolean boolean88 = chronoField80.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime85);
        boolean boolean89 = longBuffer77.equals((java.lang.Object) chronoField80);
        java.lang.String str90 = chronoField80.toString();
        java.time.temporal.TemporalUnit temporalUnit91 = chronoField80.getRangeUnit();
        boolean boolean92 = instant59.isSupported(temporalUnit91);
        java.lang.String str93 = temporalUnit91.toString();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32000L + "'", long5 == 32000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32000L + "'", long6 == 32000L);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNotNull(periodTemporalQuery12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNull(zoneRules28);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str49, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNull(zoneOffsetTransition57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(clock69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(longBuffer75);
        org.junit.Assert.assertNotNull(longBuffer77);
        org.junit.Assert.assertNotNull(localTime78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 446000000 + "'", int79 == 446000000);
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField80.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 16L + "'", long81 == 16L);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(offsetDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "MinuteOfHour" + "'", str90, "MinuteOfHour");
        org.junit.Assert.assertTrue("'" + temporalUnit91 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit91.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Hours" + "'", str93, "Hours");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        java.util.function.IntUnaryOperator intUnaryOperator1 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.iterate(23, intUnaryOperator1);
        java.util.function.IntToLongFunction intToLongFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = intStream2.mapToLong(intToLongFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intUnaryOperator1);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.now(clock6);
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(clock6);
        java.time.chrono.Chronology chronology10 = zonedDateTime9.getChronology();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond(0L, (int) '\r', zoneOffset14);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime16 = zonedDateTime9.with((java.time.temporal.TemporalAdjuster) zoneOffset14);
        java.time.temporal.TemporalField temporalField17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime19 = zonedDateTime9.with(temporalField17, (long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime16);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("1 jan 1970 00:00:00 gmt", "+999999999-12-31T23:59:59.999999999Z");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.ZonedDateTime zonedDateTime13 = offsetDateTime5.atZoneSameInstant((java.time.ZoneId) zoneOffset10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime13.withLaterOffsetAtOverlap();
        java.time.Period period16 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period17 = java.time.Period.from((java.time.temporal.TemporalAmount) period16);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str19 = dateTimeFormatter18.toString();
        boolean boolean20 = period17.equals((java.lang.Object) dateTimeFormatter18);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime21 = zonedDateTime14.plus((java.time.temporal.TemporalAmount) period17);
        boolean boolean22 = duration1.equals((java.lang.Object) period17);
        java.time.Duration duration24 = duration1.minusDays((long) 0);
        long long25 = duration24.getSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str19, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 399000L + "'", long25 == 399000L);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.withSecond((int) (byte) 0);
        java.time.LocalDate localDate25 = offsetDateTime22.toLocalDate();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = offsetDateTime22.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime22.minusMinutes((long) 100);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.Clock clock37 = java.time.Clock.fixed(instant32, (java.time.ZoneId) zoneOffset35);
        java.time.ZonedDateTime zonedDateTime38 = offsetDateTime30.atZoneSameInstant((java.time.ZoneId) zoneOffset35);
        java.time.LocalDate localDate39 = isoChronology0.dateNow((java.time.ZoneId) zoneOffset35);
        boolean boolean41 = isoChronology0.isLeapYear((long) (-3));
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology43 = dateTimeFormatter42.getChronology();
        java.time.format.TextStyle textStyle44 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale45 = java.util.Locale.UK;
        java.lang.String str46 = locale45.getISO3Language();
        java.time.format.DecimalStyle decimalStyle47 = java.time.format.DecimalStyle.of(locale45);
        java.lang.String str48 = chronology43.getDisplayName(textStyle44, locale45);
        java.time.format.DateTimeFormatter dateTimeFormatter49 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology50 = dateTimeFormatter49.getChronology();
        java.time.format.TextStyle textStyle51 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = locale52.getISO3Language();
        java.time.format.DecimalStyle decimalStyle54 = java.time.format.DecimalStyle.of(locale52);
        java.lang.String str55 = chronology50.getDisplayName(textStyle51, locale52);
        java.time.OffsetTime offsetTime56 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime58 = offsetTime56.withSecond(16);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int60 = offsetTime58.get((java.time.temporal.TemporalField) chronoField59);
        java.time.temporal.ValueRange valueRange61 = chronology50.range(chronoField59);
        java.time.Instant instant63 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.Clock clock68 = java.time.Clock.fixed(instant63, (java.time.ZoneId) zoneOffset66);
        java.time.chrono.ChronoLocalDate chronoLocalDate69 = chronology50.dateNow(clock68);
        int int70 = chronology43.compareTo(chronology50);
        java.time.LocalDate localDate71 = java.time.LocalDate.now();
        java.time.LocalDate localDate72 = java.time.LocalDate.MIN;
        boolean boolean73 = localDate71.isEqual((java.time.chrono.ChronoLocalDate) localDate72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean75 = localDate72.isSupported((java.time.temporal.TemporalField) chronoField74);
        int int76 = localDate72.getDayOfYear();
        java.time.LocalDate localDate78 = localDate72.withYear((int) '4');
        java.time.LocalTime localTime79 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime81 = localTime79.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime82 = localDate72.atTime(localTime79);
        java.time.chrono.Era era83 = localDate72.getEra();
        int int85 = chronology50.prolepticYear(era83, 794000000);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate88 = isoChronology0.dateYearDay(era83, 186000000, 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + textStyle44 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle44.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eng" + "'", str46, "eng");
        org.junit.Assert.assertNotNull(decimalStyle47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISO" + "'", str48, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + textStyle51 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle51.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertNotNull(decimalStyle54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISO" + "'", str55, "ISO");
        org.junit.Assert.assertNotNull(offsetTime56);
        org.junit.Assert.assertNotNull(offsetTime58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField59.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16 + "'", int60 == 16);
        org.junit.Assert.assertNotNull(valueRange61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(clock68);
        org.junit.Assert.assertNotNull(chronoLocalDate69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField74.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + era83 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era83.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-793999999) + "'", int85 == (-793999999));
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.lang.String str35 = localDateTime6.toString();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate37 = localDateTime36.toLocalDate();
        java.time.LocalDateTime localDateTime39 = localDateTime36.plusWeeks(0L);
        int int40 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime42 = localDateTime39.withDayOfYear(44000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 44000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month1 = java.time.Month.OCTOBER;
        java.time.Month month3 = month1.plus(0L);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        int int9 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.temporal.Temporal temporal15 = month3.adjustInto((java.time.temporal.Temporal) localDateTime5);
        boolean boolean16 = strSet0.equals((java.lang.Object) month3);
        java.security.ProtectionDomain[] protectionDomainArray17 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext18 = new java.security.AccessControlContext(protectionDomainArray17);
        java.time.LocalDate localDate19 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery20 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period21 = localDate19.query(periodTemporalQuery20);
        boolean boolean22 = accessControlContext18.equals((java.lang.Object) periodTemporalQuery20);
        java.time.Period period23 = month3.query(periodTemporalQuery20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime36 = localDateTime30.withHour(4);
        java.util.stream.DoubleStream doubleStream37 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream38 = doubleStream37.distinct();
        java.util.stream.DoubleStream doubleStream39 = doubleStream38.parallel();
        boolean boolean40 = localDateTime36.equals((java.lang.Object) doubleStream38);
        java.time.Period period41 = periodTemporalQuery20.queryFrom((java.time.temporal.TemporalAccessor) localDateTime36);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime43 = localDateTime36.plusMinutes((long) 812000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000001543");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.OCTOBER + "'", month3.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(temporal15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(periodTemporalQuery20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer2.compact();
        java.nio.ShortBuffer shortBuffer5 = shortBuffer2.put((short) -1);
        java.nio.ShortBuffer shortBuffer6 = shortBuffer2.compact();
        int int7 = shortBuffer6.arrayOffset();
        java.nio.Buffer buffer9 = shortBuffer6.limit((int) (short) 10);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(buffer9);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strList11.removeAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList11.spliterator();
        java.io.File file31 = new java.io.File("GBR");
        boolean boolean33 = file31.setExecutable(true);
        java.io.File file34 = file31.getCanonicalFile();
        java.io.File file35 = file31.getParentFile();
        int int36 = strList11.lastIndexOf((java.lang.Object) file35);
        java.util.Spliterator<java.lang.String> strSpliterator37 = strList11.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(file34);
// flaky:         org.junit.Assert.assertEquals(file34.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/experiment/GBR");
        org.junit.Assert.assertNull(file35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator37);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.lang.String str77 = networkInterface76.getDisplayName();
        byte[] byteArray78 = networkInterface76.getHardwareAddress();
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration79 = networkInterface76.getInetAddresses();
        java.util.Enumeration<java.net.NetworkInterface> networkInterfaceEnumeration80 = networkInterface76.getSubInterfaces();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "lo" + "'", str77, "lo");
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(inetAddressEnumeration79);
        org.junit.Assert.assertNotNull(networkInterfaceEnumeration80);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        java.util.InvalidPropertiesFormatException invalidPropertiesFormatException1 = new java.util.InvalidPropertiesFormatException("P-7D");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        float[] floatArray7 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer8 = java.nio.FloatBuffer.wrap(floatArray7);
        java.nio.ByteOrder byteOrder9 = floatBuffer8.order();
        java.nio.ByteOrder byteOrder10 = floatBuffer8.order();
        float float11 = floatBuffer8.get();
        int int12 = floatBuffer3.compareTo(floatBuffer8);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 16.0f + "'", float11 == 16.0f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getISO3Country();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(locale4);
        java.lang.String str7 = locale0.getDisplayCountry(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GBR" + "'", str3, "GBR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str7, "\u53f0\u6e7e\u5730\u533a");
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        java.util.Hashtable<java.nio.channels.InterruptibleChannel, java.time.DayOfWeek> interruptibleChannelMap1 = new java.util.Hashtable<java.nio.channels.InterruptibleChannel, java.time.DayOfWeek>(97);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        int int1 = offsetTime0.getNano();
        java.lang.String str2 = offsetTime0.toString();
        java.time.OffsetTime offsetTime4 = offsetTime0.withNano(277998031);
        org.junit.Assert.assertNotNull(offsetTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 971000000 + "'", int1 == 971000000);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "09:16:27.971Z" + "'", str2, "09:16:27.971Z");
        org.junit.Assert.assertNotNull(offsetTime4);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.UTC;
        java.time.ZoneId[] zoneIdArray9 = new java.time.ZoneId[] { zoneOffset4, zoneOffset8 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet10 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet10, zoneIdArray9);
        java.util.Spliterator<java.time.ZoneId> zoneIdSpliterator12 = zoneIdSet10.spliterator();
        java.security.KeyException keyException13 = new java.security.KeyException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException((java.lang.Throwable) keyException13);
        java.lang.Throwable[] throwableArray15 = keyException13.getSuppressed();
        boolean boolean16 = zoneIdSet10.remove((java.lang.Object) throwableArray15);
        java.lang.Object[] objArray17 = zoneIdSet10.toArray();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap19 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.zone.ZoneRules zoneRules26 = zoneIdMap19.getOrDefault((java.lang.Object) 1.0d, zoneRules25);
        java.util.Set<java.time.ZoneId> zoneIdSet27 = zoneIdMap19.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strList53);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList67);
        boolean boolean70 = strList53.removeAll((java.util.Collection<java.lang.String>) strList69);
        boolean boolean71 = strList41.retainAll((java.util.Collection<java.lang.String>) strList69);
        boolean boolean72 = zoneIdSet27.removeAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList41.spliterator();
        java.util.Set<java.lang.String> strSet74 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month75 = java.time.Month.OCTOBER;
        java.time.Month month77 = month75.plus(0L);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime82 = localDateTime79.atOffset(zoneOffset81);
        int int83 = localDateTime78.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime79);
        java.time.LocalDateTime localDateTime84 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset86 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime87 = localDateTime84.atOffset(zoneOffset86);
        int int88 = localDateTime79.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime84);
        java.time.temporal.Temporal temporal89 = month77.adjustInto((java.time.temporal.Temporal) localDateTime79);
        boolean boolean90 = strSet74.equals((java.lang.Object) month77);
        boolean boolean91 = strList41.containsAll((java.util.Collection<java.lang.String>) strSet74);
        boolean boolean92 = zoneIdSet10.removeAll((java.util.Collection<java.lang.String>) strList41);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneIdArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(zoneIdSpliterator12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[Z]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[Z]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zoneIdSet27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + month75 + "' != '" + java.time.Month.OCTOBER + "'", month75.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month77 + "' != '" + java.time.Month.OCTOBER + "'", month77.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertNotNull(offsetDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(temporal89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad(" ", (-7), ' ');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " ");
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = fileChannel11.lock((long) 533000000, 0L, true);
        fileLock19.release();
        java.nio.channels.FileChannel fileChannel21 = fileLock19.channel();
        long long22 = fileLock19.position();
        long long23 = fileLock19.position();
        fileLock19.release();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(fileChannel21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 533000000L + "'", long22 == 533000000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 533000000L + "'", long23 == 533000000L);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("zonerules[currentstandardoffset=z]");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        java.io.File file4 = file1.getCanonicalFile();
        long long5 = file4.length();
        boolean boolean6 = file4.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(file4);
// flaky:         org.junit.Assert.assertEquals(file4.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4096L + "'", long5 == 4096L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        int int7 = charBuffer2.compareTo(charBuffer5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (byte) -1);
        java.time.temporal.TemporalAccessor temporalAccessor10 = dateTimeFormatter0.parseUnresolved((java.lang.CharSequence) charBuffer2, parsePosition9);
        java.time.LocalDate localDate11 = java.time.LocalDate.now();
        java.time.LocalDate localDate12 = java.time.LocalDate.MIN;
        boolean boolean13 = localDate11.isEqual((java.time.chrono.ChronoLocalDate) localDate12);
        java.time.Instant instant16 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant18 = instant16.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime19 = java.nio.file.attribute.FileTime.from(instant16);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery20 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period21 = instant16.query(periodTemporalQuery20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField22.getBaseUnit();
        boolean boolean24 = instant16.isSupported(temporalUnit23);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = localDateTime26.minusNanos((long) (short) 100);
        boolean boolean33 = temporalUnit23.isSupportedBy((java.time.temporal.Temporal) localDateTime26);
        boolean boolean34 = temporalUnit23.isTimeBased();
        java.time.chrono.ChronoLocalDate chronoLocalDate35 = localDate12.plus((long) 495000000, temporalUnit23);
        boolean boolean36 = charBuffer2.equals((java.lang.Object) localDate12);
        java.time.DayOfWeek dayOfWeek37 = localDate12.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(temporalAccessor10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(periodTemporalQuery20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField22.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek37 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek37.equals(java.time.DayOfWeek.MONDAY));
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 495000000, (long) 277998031);
        long[] longArray3 = longStream2.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray3, (int) 'x', 812000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        java.util.stream.IntStream intStream5 = intStream1.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator6 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator7 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator8 = intUnaryOperator6.compose(intUnaryOperator7);
        int int10 = intUnaryOperator8.applyAsInt(385000000);
        java.util.function.IntUnaryOperator intUnaryOperator11 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator12 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator13 = intUnaryOperator11.compose(intUnaryOperator12);
        java.util.function.IntUnaryOperator intUnaryOperator14 = intUnaryOperator8.andThen(intUnaryOperator12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream15 = intStream1.map(intUnaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertNotNull(intUnaryOperator7);
        org.junit.Assert.assertNotNull(intUnaryOperator8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 385000000 + "'", int10 == 385000000);
        org.junit.Assert.assertNotNull(intUnaryOperator11);
        org.junit.Assert.assertNotNull(intUnaryOperator12);
        org.junit.Assert.assertNotNull(intUnaryOperator13);
        org.junit.Assert.assertNotNull(intUnaryOperator14);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.net.InetAddress inetAddress44 = java.net.InetAddress.getLoopbackAddress();
        java.net.InetAddress inetAddress45 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean46 = inetAddress45.isMCLinkLocal();
        java.net.InetAddress inetAddress47 = java.net.InetAddress.getLoopbackAddress();
        java.net.InetAddress inetAddress48 = java.net.InetAddress.getLoopbackAddress();
        java.net.InetAddress inetAddress49 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean50 = inetAddress49.isMulticastAddress();
        java.net.InetAddress inetAddress51 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean52 = inetAddress51.isMCLinkLocal();
        java.net.InetAddress[] inetAddressArray53 = new java.net.InetAddress[] { inetAddress44, inetAddress45, inetAddress47, inetAddress48, inetAddress49, inetAddress51 };
        java.net.InetAddress[] inetAddressArray54 = strList41.toArray(inetAddressArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) inetAddressArray54, 'x', (int) (short) 1, 794000000);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(inetAddress44);
        org.junit.Assert.assertNotNull(inetAddress45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(inetAddress47);
        org.junit.Assert.assertNotNull(inetAddress48);
        org.junit.Assert.assertNotNull(inetAddress49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(inetAddress51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(inetAddressArray53);
        org.junit.Assert.assertNotNull(inetAddressArray54);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.LocalDate localDate21 = localDate19.minusWeeks((long) '/');
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = localDate21.isBefore(chronoLocalDate22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        boolean boolean8 = file1.setReadOnly();
        long long9 = file1.getFreeSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 299104976896L + "'", long9 == 299104976896L);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("English (United Kingdom)");
        java.security.PrivilegedActionException privilegedActionException2 = new java.security.PrivilegedActionException((java.lang.Exception) unsupportedEncodingException1);
        java.lang.Throwable[] throwableArray3 = unsupportedEncodingException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.OffsetTime offsetTime1 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime3 = offsetTime1.withSecond(16);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int5 = offsetTime3.get((java.time.temporal.TemporalField) chronoField4);
        java.time.temporal.ValueRange valueRange6 = isoChronology0.range(chronoField4);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate9 = isoChronology0.dateYearDay((-3), 861000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 861000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(offsetTime1);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(valueRange6);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        boolean boolean8 = file1.setReadable(false);
        java.lang.String str9 = file1.getCanonicalPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/GBR" + "'", str9, "/experiment/GBR");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.plusSeconds((long) 31);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Set<java.time.ZoneId> zoneIdSet9 = zoneIdMap1.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList49);
        boolean boolean52 = strList35.removeAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean53 = strList23.retainAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean54 = zoneIdSet9.removeAll((java.util.Collection<java.lang.String>) strList23);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strList23.spliterator();
        java.util.Set<java.lang.String> strSet56 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month57 = java.time.Month.OCTOBER;
        java.time.Month month59 = month57.plus(0L);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        int int65 = localDateTime60.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        int int70 = localDateTime61.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime66);
        java.time.temporal.Temporal temporal71 = month59.adjustInto((java.time.temporal.Temporal) localDateTime61);
        boolean boolean72 = strSet56.equals((java.lang.Object) month59);
        boolean boolean73 = strList23.containsAll((java.util.Collection<java.lang.String>) strSet56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList76 = strList23.subList(31, 360);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 360");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdSet9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + month57 + "' != '" + java.time.Month.OCTOBER + "'", month57.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month59 + "' != '" + java.time.Month.OCTOBER + "'", month59.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(temporal71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        long long5 = file1.length();
        boolean boolean6 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4096L + "'", long5 == 4096L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusNanos((long) 10000);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = localDateTime23.minusNanos((long) (short) 100);
        java.time.LocalDateTime localDateTime31 = localDateTime23.minusYears((long) (short) 1);
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime19.with((java.time.temporal.TemporalAdjuster) localDateTime31);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime45 = localDateTime39.withHour(4);
        java.util.stream.DoubleStream doubleStream46 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream47 = doubleStream46.distinct();
        java.util.stream.DoubleStream doubleStream48 = doubleStream47.parallel();
        boolean boolean49 = localDateTime45.equals((java.lang.Object) doubleStream47);
        java.time.chrono.Chronology chronology50 = localDateTime45.getChronology();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime54.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.zone.ZoneRules zoneRules61 = zoneOffset59.getRules();
        java.time.ZonedDateTime zonedDateTime62 = offsetDateTime54.atZoneSameInstant((java.time.ZoneId) zoneOffset59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime62.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.ValueRange valueRange65 = zonedDateTime62.range((java.time.temporal.TemporalField) chronoField64);
        long long67 = chronoField64.checkValidValue((long) 539000000);
        boolean boolean68 = localDateTime45.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime69 = localDateTime31.with((java.time.temporal.TemporalAdjuster) localDateTime45);
        java.time.Month month70 = java.time.Month.OCTOBER;
        java.time.Month month72 = month70.plus(0L);
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        int int78 = localDateTime73.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime74);
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime82 = localDateTime79.atOffset(zoneOffset81);
        int int83 = localDateTime74.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime79);
        java.time.temporal.Temporal temporal84 = month72.adjustInto((java.time.temporal.Temporal) localDateTime74);
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate86 = localDateTime85.toLocalDate();
        java.time.LocalDateTime localDateTime88 = localDateTime85.plusWeeks(0L);
        boolean boolean89 = localDateTime74.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime85);
        java.time.LocalDateTime localDateTime91 = localDateTime74.minusHours((long) '\n');
        java.time.format.DateTimeFormatter dateTimeFormatter92 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str93 = localDateTime74.format(dateTimeFormatter92);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime94 = localDateTime45.with((java.time.temporal.TemporalAdjuster) localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(doubleStream46);
        org.junit.Assert.assertNotNull(doubleStream47);
        org.junit.Assert.assertNotNull(doubleStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(zoneRules61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField64.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(valueRange65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 539000000L + "'", long67 == 539000000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime69);
        org.junit.Assert.assertTrue("'" + month70 + "' != '" + java.time.Month.OCTOBER + "'", month70.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month72 + "' != '" + java.time.Month.OCTOBER + "'", month72.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(temporal84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+999999999-12-31" + "'", str93, "+999999999-12-31");
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime94);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_DATE;
        boolean boolean2 = attribute0.equals((java.lang.Object) dateTimeFormatter1);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.io.InputStream inputStream11 = uRL7.openStream();
        inputStream11.mark(781000000);
        inputStream11.mark(32);
        long long17 = inputStream11.skip((long) 'G');
        java.io.File file20 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL21 = file20.toURL();
        java.io.File file24 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL25 = file24.toURL();
        boolean boolean26 = uRL21.sameFile(uRL25);
        java.lang.String str27 = uRL25.getQuery();
        java.lang.String str28 = uRL25.getHost();
        java.io.InputStream inputStream29 = uRL25.openStream();
        boolean boolean30 = inputStream29.markSupported();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.wrap(byteArray32);
        int int34 = inputStream29.read(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = inputStream11.read(byteArray32, 29, 533000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom8817835703627865214aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom8817835703627865214aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom4591710845029271382aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom4591710845029271382aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertEquals(file20.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file20.toString(), "/tmp/United Kingdom4202653073194752494aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/tmp/United Kingdom4202653073194752494aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertEquals(file24.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file24.toString(), "/tmp/United Kingdom3934770798050400129aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL25);
// flaky:         org.junit.Assert.assertEquals(uRL25.toString(), "file:/tmp/United Kingdom3934770798050400129aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) zonedDateTime11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime16 = zonedDateTime11.plusHours(32000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000003");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        boolean boolean7 = file1.exists();
        java.lang.String str8 = file1.getName();
        boolean boolean9 = file1.setReadOnly();
        java.lang.String str10 = file1.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GBR" + "'", str8, "GBR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        java.security.KeyException keyException1 = new java.security.KeyException();
        java.security.InvalidKeyException invalidKeyException2 = new java.security.InvalidKeyException(" ", (java.lang.Throwable) keyException1);
        java.lang.Throwable[] throwableArray3 = keyException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        int int6 = strItor5.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = strItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDateTime localDateTime36 = localDateTime6.withYear((-999999999));
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int39 = zoneOffset38.getTotalSeconds();
        java.time.LocalTime localTime40 = java.time.LocalTime.now();
        int int41 = localTime40.getNano();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long43 = localTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        boolean boolean44 = zoneOffset38.isSupported((java.time.temporal.TemporalField) chronoField42);
        java.time.ZonedDateTime zonedDateTime45 = localDateTime36.atZone((java.time.ZoneId) zoneOffset38);
        int int46 = localDateTime36.getHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 968000000 + "'", int41 == 968000000);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField42.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 16L + "'", long43 == 16L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 23 + "'", int46 == 23);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.range((-3), 64);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator0 = java.util.Comparator.reverseOrder();
        org.junit.Assert.assertNotNull(byteBufferComparator0);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(10);
        int int3 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) charBuffer1, (java.lang.CharSequence) "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt13 = intStream12.min();
        java.lang.String str14 = optionalInt13.toString();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        boolean boolean17 = optionalInt13.equals((java.lang.Object) localDate16);
        int int19 = optionalInt13.orElse(59);
        java.util.stream.IntStream intStream21 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt22 = intStream21.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = ofInt22.trySplit();
        java.util.stream.IntStream.Builder builder24 = java.util.stream.IntStream.builder();
        ofInt22.forEachRemaining((java.util.function.IntConsumer) builder24);
        optionalInt13.ifPresent((java.util.function.IntConsumer) builder24);
        boolean boolean27 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder24);
        java.util.stream.IntStream intStream28 = builder24.build();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(optionalInt13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalInt[10]" + "'", str14, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertNotNull(ofInt22);
        org.junit.Assert.assertNull(intSpliterator23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intStream28);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("United Kingdom");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United Kingdom" + "'", str1, "United Kingdom");
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("file:/tmp/United Kingdom2266976126535835110aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: file:/tmp/United Kingdom2266976126535835110aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        char[] charArray27 = new char[] { 'a', '#', '4', '#' };
        boolean boolean28 = org.apache.commons.lang3.StringUtils.containsAny("", charArray27);
        boolean boolean29 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer30 = charBuffer1.get(charArray27);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.minusMonths((long) 256);
        long long6 = period1.toTotalMonths();
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime9 = offsetTime7.withSecond(16);
        java.time.OffsetTime offsetTime11 = offsetTime9.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime12 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime14 = offsetTime12.withSecond(16);
        java.time.Instant instant16 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant18 = instant16.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime19 = java.nio.file.attribute.FileTime.from(instant16);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery20 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period21 = instant16.query(periodTemporalQuery20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField22.getBaseUnit();
        boolean boolean24 = instant16.isSupported(temporalUnit23);
        boolean boolean25 = offsetTime12.isSupported(temporalUnit23);
        boolean boolean26 = offsetTime11.isEqual(offsetTime12);
        int int27 = offsetTime12.getNano();
        java.time.OffsetTime offsetTime29 = offsetTime12.withNano((int) '\000');
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal30 = period1.addTo((java.time.temporal.Temporal) offsetTime29);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Days");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(offsetTime12);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(periodTemporalQuery20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField22.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9000000 + "'", int27 == 9000000);
        org.junit.Assert.assertNotNull(offsetTime29);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer18.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer25 = byteBuffer24.asDoubleBuffer();
        int int26 = doubleBuffer19.compareTo(doubleBuffer25);
        int int27 = doubleBuffer25.remaining();
        java.nio.DoubleBuffer doubleBuffer28 = doubleBuffer11.put(doubleBuffer25);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer11.put((double) 334);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(doubleBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer28);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getHour();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusDays((long) 385000000);
        long long16 = zonedDateTime11.toEpochSecond();
        java.time.temporal.Temporal temporal17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration18 = java.time.Duration.between((java.time.temporal.Temporal) zonedDateTime11, temporal17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 31556889832780799L + "'", long16 == 31556889832780799L);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress[] inetAddressArray1 = java.net.InetAddress.getAllByName("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: ??: Name or service not known");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        java.net.InetAddress inetAddress13 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str14 = inetAddress13.getHostName();
        byte[] byteArray15 = inetAddress13.getAddress();
        java.net.InetAddress inetAddress16 = java.net.InetAddress.getByAddress("zh_CN", byteArray15);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.get(byteArray15);
        double double18 = byteBuffer17.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(inetAddress13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "localhost" + "'", str14, "localhost");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long14 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery15 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period16 = zonedDateTime11.query(periodTemporalQuery15);
        java.time.ZoneId zoneId17 = zonedDateTime11.getZone();
        java.time.ZoneOffset zoneOffset18 = zonedDateTime11.getOffset();
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        long long23 = instant20.getEpochSecond();
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.Clock clock30 = java.time.Clock.fixed(instant25, (java.time.ZoneId) zoneOffset28);
        java.time.OffsetDateTime offsetDateTime31 = instant20.atOffset(zoneOffset28);
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime31.plusSeconds((long) 371000000);
        java.time.OffsetDateTime offsetDateTime35 = offsetDateTime31.plusYears((long) 284000000);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime43 = offsetDateTime39.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset49);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit54 = chronoField53.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime55 = localDateTime51.minus((long) (-999999999), temporalUnit54);
        java.lang.String str56 = temporalUnit54.toString();
        java.time.OffsetDateTime offsetDateTime57 = offsetDateTime43.plus((long) (byte) 100, temporalUnit54);
        java.time.OffsetDateTime offsetDateTime59 = offsetDateTime57.plusDays((long) 31);
        java.time.Instant instant61 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.Clock clock66 = java.time.Clock.fixed(instant61, (java.time.ZoneId) zoneOffset64);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset71);
        java.time.Clock clock74 = clock66.withZone((java.time.ZoneId) zoneOffset71);
        java.time.OffsetDateTime offsetDateTime75 = offsetDateTime57.withOffsetSameInstant(zoneOffset71);
        java.time.Instant instant77 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime81 = localDateTime78.atOffset(zoneOffset80);
        java.time.Clock clock82 = java.time.Clock.fixed(instant77, (java.time.ZoneId) zoneOffset80);
        java.time.LocalTime localTime83 = java.time.LocalTime.now(clock82);
        java.time.OffsetDateTime offsetDateTime84 = java.time.OffsetDateTime.now(clock82);
        int int85 = offsetDateTime84.getSecond();
        int int86 = offsetDateTime75.compareTo(offsetDateTime84);
        boolean boolean87 = offsetDateTime31.isBefore(offsetDateTime75);
        int int88 = offsetDateTime31.getHour();
        java.time.temporal.Temporal temporal89 = zoneOffset18.adjustInto((java.time.temporal.Temporal) offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 999999999L + "'", long14 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField53.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit54 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit54.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Weeks" + "'", str56, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(clock66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(clock74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(clock82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 32 + "'", int85 == 32);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 277998031 + "'", int86 == 277998031);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(temporal89);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        java.util.Date date13 = java.util.Date.from(instant1);
        int int14 = date13.getTimezoneOffset();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        boolean boolean3 = zoneIdMap1.equals((java.lang.Object) 0);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration4 = zoneIdMap1.keys();
        java.time.Duration duration6 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration9 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList10 = duration9.getUnits();
        java.time.Duration duration11 = duration6.minus(duration9);
        java.time.Duration duration13 = duration6.plusNanos((long) 722000000);
        java.time.Duration duration15 = duration6.withNanos(413000000);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime38.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        int int48 = localDateTime39.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        boolean boolean49 = localDateTime28.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.temporal.Temporal temporal50 = localDateTime22.adjustInto((java.time.temporal.Temporal) localDateTime28);
        java.lang.String str51 = localDateTime22.toString();
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate53 = localDateTime52.toLocalDate();
        java.time.LocalDateTime localDateTime55 = localDateTime52.plusWeeks(0L);
        int int56 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.time.LocalDateTime localDateTime58 = localDateTime55.minusHours((long) 999999999);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant62 = instant60.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime63 = java.nio.file.attribute.FileTime.from(instant60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery64 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period65 = instant60.query(periodTemporalQuery64);
        java.time.Period period66 = localDateTime58.query(periodTemporalQuery64);
        boolean boolean67 = zoneIdMap1.remove((java.lang.Object) duration6, (java.lang.Object) periodTemporalQuery64);
        long long68 = duration6.toMinutes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneIdEnumeration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(temporalUnitList10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(temporal50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str51, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(fileTime63);
        org.junit.Assert.assertNotNull(periodTemporalQuery64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 6650L + "'", long68 == 6650L);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        strItor5.add("");
        strItor5.add("x-windows-iso2022jp");
        boolean boolean10 = strItor5.hasNext();
        strItor5.add("java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
        java.lang.String str13 = strItor5.next();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OptionalInt[10]" + "'", str13, "OptionalInt[10]");
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        boolean boolean12 = byteBuffer1.hasArray();
        long long13 = byteBuffer1.getLong();
        boolean boolean14 = byteBuffer1.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap2 = strMap0.tailMap("/experiment/GBR");
        java.lang.String str3 = strMap2.firstKey();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Big5" + "'", str3, "Big5");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("zho", "/tmp/United Kingdom1613207169082904107aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        boolean boolean8 = duration6.equals((java.lang.Object) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        int int22 = zonedDateTime21.getDayOfMonth();
        int int23 = zonedDateTime21.getHour();
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime21.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.OffsetDateTime offsetDateTime31 = offsetDateTime29.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.zone.ZoneRules zoneRules36 = zoneOffset34.getRules();
        java.time.ZonedDateTime zonedDateTime37 = offsetDateTime29.atZoneSameInstant((java.time.ZoneId) zoneOffset34);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime37.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long40 = zonedDateTime37.getLong((java.time.temporal.TemporalField) chronoField39);
        long long41 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalUnit temporalUnit42 = chronoField39.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime5.with((java.time.temporal.TemporalField) chronoField39, (long) 64);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 999999999L + "'", long40 == 999999999L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 999999999L + "'", long41 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit42 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit42.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertNotNull(offsetDateTime44);
    }
}

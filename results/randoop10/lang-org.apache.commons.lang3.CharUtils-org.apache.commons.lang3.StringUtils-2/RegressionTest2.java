import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Set<java.time.ZoneId> zoneIdSet2 = zoneIdMap1.keySet();
        java.time.format.FormatStyle formatStyle3 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter4 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle3);
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology6 = dateTimeFormatter5.getChronology();
        java.time.format.TextStyle textStyle7 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getISO3Language();
        java.time.format.DecimalStyle decimalStyle10 = java.time.format.DecimalStyle.of(locale8);
        java.lang.String str11 = chronology6.getDisplayName(textStyle7, locale8);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter4.withChronology(chronology6);
        boolean boolean13 = zoneIdSet2.contains((java.lang.Object) dateTimeFormatter12);
        zoneIdSet2.clear();
        org.junit.Assert.assertNotNull(zoneIdSet2);
        org.junit.Assert.assertTrue("'" + formatStyle3 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle3.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + textStyle7 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle7.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertNotNull(decimalStyle10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISO" + "'", str11, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime7.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean28 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str30 = localDateTime23.format(dateTimeFormatter29);
        int int31 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str30, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIDNIGHT;
        org.junit.Assert.assertNotNull(localTime0);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.withSecond((int) (byte) 0);
        int int20 = offsetDateTime19.getNano();
        java.time.Month month21 = offsetDateTime19.getMonth();
        boolean boolean22 = zonedDateTime11.equals((java.lang.Object) month21);
        java.util.Set<java.lang.String> strSet23 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month24 = java.time.Month.OCTOBER;
        java.time.Month month26 = month24.plus(0L);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.temporal.Temporal temporal38 = month26.adjustInto((java.time.temporal.Temporal) localDateTime28);
        boolean boolean39 = strSet23.equals((java.lang.Object) month26);
        java.security.ProtectionDomain[] protectionDomainArray40 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext41 = new java.security.AccessControlContext(protectionDomainArray40);
        java.time.LocalDate localDate42 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery43 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period44 = localDate42.query(periodTemporalQuery43);
        boolean boolean45 = accessControlContext41.equals((java.lang.Object) periodTemporalQuery43);
        java.time.Period period46 = month26.query(periodTemporalQuery43);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        int int52 = localDateTime47.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        int int57 = localDateTime48.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime59 = localDateTime53.withHour(4);
        java.util.stream.DoubleStream doubleStream60 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream61 = doubleStream60.distinct();
        java.util.stream.DoubleStream doubleStream62 = doubleStream61.parallel();
        boolean boolean63 = localDateTime59.equals((java.lang.Object) doubleStream61);
        java.time.Period period64 = periodTemporalQuery43.queryFrom((java.time.temporal.TemporalAccessor) localDateTime59);
        java.time.Period period65 = zonedDateTime11.query(periodTemporalQuery43);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 999999999 + "'", int20 == 999999999);
        org.junit.Assert.assertTrue("'" + month21 + "' != '" + java.time.Month.DECEMBER + "'", month21.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + month24 + "' != '" + java.time.Month.OCTOBER + "'", month24.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.OCTOBER + "'", month26.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(temporal38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(periodTemporalQuery43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(doubleStream60);
        org.junit.Assert.assertNotNull(doubleStream61);
        org.junit.Assert.assertNotNull(doubleStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        boolean boolean3 = intStream1.isParallel();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.util.Set<java.time.ZoneId> zoneIdSet14 = zoneIdMap6.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList26);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList54);
        boolean boolean57 = strList40.removeAll((java.util.Collection<java.lang.String>) strList56);
        boolean boolean58 = strList28.retainAll((java.util.Collection<java.lang.String>) strList56);
        boolean boolean59 = zoneIdSet14.removeAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Spliterator<java.lang.String> strSpliterator60 = strList28.spliterator();
        java.util.stream.IntStream intStream62 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream63 = intStream62.boxed();
        boolean boolean64 = strList28.equals((java.lang.Object) intStream62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream65 = java.util.stream.IntStream.concat(intStream1, intStream62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneIdSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSpliterator60);
        org.junit.Assert.assertNotNull(intStream62);
        org.junit.Assert.assertNotNull(intStream63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException(":");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        boolean boolean7 = file1.exists();
        long long8 = file1.getTotalSpace();
        long long9 = file1.lastModified();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 364740218880L + "'", long8 == 364740218880L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 284000000L + "'", long9 == 284000000L);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        boolean boolean4 = codeSource2.equals((java.lang.Object) 4);
        java.lang.String str5 = codeSource2.toString();
        java.lang.String str6 = codeSource2.toString();
        java.net.URL uRL7 = null;
        java.security.CodeSigner[] codeSignerArray8 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource9 = new java.security.CodeSource(uRL7, codeSignerArray8);
        boolean boolean11 = codeSource9.equals((java.lang.Object) 4);
        java.lang.String str12 = codeSource9.toString();
        java.lang.String str13 = codeSource9.toString();
        boolean boolean14 = codeSource2.implies(codeSource9);
        java.security.PermissionCollection permissionCollection15 = null;
        java.security.ProtectionDomain protectionDomain16 = new java.security.ProtectionDomain(codeSource2, permissionCollection15);
        java.security.Permission permission17 = null;
        boolean boolean18 = protectionDomain16.implies(permission17);
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(null <no signer certificates>)" + "'", str5, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(null <no signer certificates>)" + "'", str6, "(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(codeSignerArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(null <no signer certificates>)" + "'", str12, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(null <no signer certificates>)" + "'", str13, "(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals(protectionDomain16.toString(), "ProtectionDomain  (null <no signer certificates>)\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        java.lang.Object obj14 = null;
        boolean boolean15 = zoneIdMap1.equals(obj14);
        int int16 = zoneIdMap1.size();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.withSecond((int) (byte) 0);
        int int23 = offsetDateTime22.getMinute();
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime22.plusNanos((long) 227000000);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.OffsetDateTime offsetDateTime31 = offsetDateTime29.withSecond((int) (byte) 0);
        java.time.LocalDate localDate32 = offsetDateTime29.toLocalDate();
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit34 = chronoField33.getBaseUnit();
        boolean boolean35 = offsetDateTime29.isSupported((java.time.temporal.TemporalField) chronoField33);
        java.time.temporal.ValueRange valueRange36 = offsetDateTime25.range((java.time.temporal.TemporalField) chronoField33);
        boolean boolean37 = zoneIdMap1.contains((java.lang.Object) valueRange36);
        zoneIdMap1.clear();
        int int39 = zoneIdMap1.size();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField33.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit34 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit34.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(valueRange36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.util.stream.LongStream longStream76 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream77 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream78 = java.util.stream.LongStream.concat(longStream76, longStream77);
        java.util.OptionalLong optionalLong79 = longStream78.min();
        java.time.LocalTime localTime80 = java.time.LocalTime.MIN;
        boolean boolean81 = zoneIdMap1.remove((java.lang.Object) longStream78, (java.lang.Object) localTime80);
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet82 = zoneIdMap1.entrySet();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(longStream76);
        org.junit.Assert.assertNotNull(longStream77);
        org.junit.Assert.assertNotNull(longStream78);
        org.junit.Assert.assertNotNull(optionalLong79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(zoneIdEntrySet82);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        printWriter1.print((float) 999999);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh_TW" + "'", str2, "zh_TW");
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.util.Locale locale1 = new java.util.Locale("DIRECT");
        org.junit.Assert.assertEquals(locale1.toString(), "direct");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "MicroOfSecond");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
        doubleSummaryStatistics3.accept((double) 385000000);
        java.lang.String str7 = doubleSummaryStatistics3.toString();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=1, sum=385000000.000000, min=385000000.000000, average=385000000.000000, max=385000000.000000}");
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DoubleSummaryStatistics{count=1, sum=385000000.000000, min=385000000.000000, average=385000000.000000, max=385000000.000000}" + "'", str7, "DoubleSummaryStatistics{count=1, sum=385000000.000000, min=385000000.000000, average=385000000.000000, max=385000000.000000}");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        int int6 = charBuffer1.compareTo(charBuffer4);
        // The following exception was thrown during execution in test generation
        try {
            char char8 = charBuffer1.get(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 41");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.plusDays((long) 31);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.Clock clock30 = java.time.Clock.fixed(instant25, (java.time.ZoneId) zoneOffset28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset35);
        java.time.Clock clock38 = clock30.withZone((java.time.ZoneId) zoneOffset35);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime21.withOffsetSameInstant(zoneOffset35);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        java.time.temporal.ValueRange valueRange42 = offsetDateTime39.range((java.time.temporal.TemporalField) chronoField40);
        boolean boolean44 = valueRange42.isValidValue((long) 4);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        int int0 = java.util.Spliterator.ORDERED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16 + "'", int0 == 16);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle4.withNegativeSign('+');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withDecimalSeparator('a');
        java.time.format.DecimalStyle decimalStyle10 = decimalStyle8.withZeroDigit('M');
        char char11 = decimalStyle10.getPositiveSign();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(decimalStyle10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'a' + "'", char11 == 'a');
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI1 = new java.net.URI("+999999999-12-31T23:59:59.999999999");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Illegal character in scheme name at index 0: +999999999-12-31T23:59:59.999999999");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream5 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream6 = java.util.stream.LongStream.concat(longStream4, longStream5);
        java.util.stream.LongStream longStream7 = longStream6.sorted();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream8 = java.util.stream.LongStream.concat(longStream2, longStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        boolean boolean8 = duration6.equals((java.lang.Object) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime5.plus((java.time.temporal.TemporalAmount) duration6);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime11 = offsetDateTime5.plusSeconds((long) 16384);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(offsetDateTime9);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange2 = java.time.temporal.ValueRange.of(999999999L, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value must be less than maximum value");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.net.URI uRI1 = java.net.URI.create("PT10S");
        java.lang.String str2 = uRI1.toASCIIString();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT10S" + "'", str2, "PT10S");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.normalizeSpace("\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.function.LongPredicate longPredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = longStream2.allMatch(longPredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime11.minusSeconds(31556889832780799L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.lang.String str7 = uRI6.getSchemeSpecificPart();
        java.io.File file9 = new java.io.File("GBR");
        boolean boolean11 = file9.setWritable(true);
        boolean boolean13 = file9.setWritable(true);
        java.net.URI uRI14 = file9.toURI();
        java.lang.String str15 = uRI14.getPath();
        java.net.URI uRI16 = uRI6.relativize(uRI14);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/GBR/" + "'", str7, "/experiment/GBR/");
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(uRI14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment/GBR/" + "'", str15, "/experiment/GBR/");
        org.junit.Assert.assertNotNull(uRI16);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 495000000, (long) 277998031);
        longStream2.close();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = longStream2.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.average();
        boolean boolean4 = doubleStream2.isParallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble5 = doubleStream2.average();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("name:lo (lo)", (double) 277998031);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.77998031E8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.withSecond((int) (byte) 0);
        java.time.LocalDate localDate9 = offsetDateTime6.toLocalDate();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean11 = offsetDateTime6.isSupported((java.time.temporal.TemporalField) chronoField10);
        boolean boolean12 = localDate0.isSupported((java.time.temporal.TemporalField) chronoField10);
        java.time.LocalDate localDate14 = localDate0.minusMonths(32L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId15 = java.time.ZoneId.from((java.time.temporal.TemporalAccessor) localDate0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZoneId from TemporalAccessor: 2022-02-21 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField10.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.security.KeyException keyException11 = new java.security.KeyException("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        boolean boolean12 = zoneIdMap1.containsValue((java.lang.Object) keyException11);
        zoneIdMap1.clear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        char char2 = org.apache.commons.lang3.CharUtils.toChar((java.lang.Character) 'u', '#');
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + 'u' + "'", char2 == 'u');
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.time.Period period3 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period4 = period3.normalized();
        long long5 = period3.toTotalMonths();
        java.time.Period period7 = period3.plusYears((long) 33237);
        java.io.File file9 = new java.io.File("GBR");
        boolean boolean11 = file9.setWritable(true);
        boolean boolean13 = file9.setWritable(true);
        java.lang.String str14 = file9.getPath();
        long long15 = file9.length();
        java.io.File file16 = file9.getAbsoluteFile();
        boolean boolean17 = period7.equals((java.lang.Object) file16);
        boolean boolean20 = file16.setWritable(false, false);
        boolean boolean21 = file16.canExecute();
        java.lang.String str22 = file16.getAbsolutePath();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file23 = java.io.File.createTempFile("1969-12-31T23:59:59.999Z", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", file16);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File name too long");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GBR" + "'", str14, "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4096L + "'", long15 == 4096L);
        org.junit.Assert.assertNotNull(file16);
// flaky:         org.junit.Assert.assertEquals(file16.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/experiment/GBR" + "'", str22, "/experiment/GBR");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.lang.String str6 = date5.toGMTString();
        long long7 = date5.getTime();
        date5.setSeconds(274);
        date5.setMonth(2);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 01 00:04:34 UTC 1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str6, "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32000L + "'", long7 == 32000L);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(10000, (-793999999), (int) (byte) 10, 284000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 10000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        java.util.stream.IntStream intStream5 = intStream1.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt6 = intStream5.min();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        printWriter1.print((float) 'a');
        printWriter1.flush();
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        int int30 = zonedDateTime29.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime29.withDayOfYear(10);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.zone.ZoneRules zoneRules43 = zoneOffset41.getRules();
        java.time.ZonedDateTime zonedDateTime44 = offsetDateTime36.atZoneSameInstant((java.time.ZoneId) zoneOffset41);
        java.time.ZoneId zoneId45 = zonedDateTime44.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime46 = zonedDateTime44.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime50.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.zone.ZoneRules zoneRules57 = zoneOffset55.getRules();
        java.time.ZonedDateTime zonedDateTime58 = offsetDateTime50.atZoneSameInstant((java.time.ZoneId) zoneOffset55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime58.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long61 = zonedDateTime58.getLong((java.time.temporal.TemporalField) chronoField60);
        long long62 = zonedDateTime44.getLong((java.time.temporal.TemporalField) chronoField60);
        int int63 = zonedDateTime32.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime44);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.temporal.ValueRange valueRange66 = zonedDateTime32.range((java.time.temporal.TemporalField) chronoField64);
        java.time.Instant instant68 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant70 = instant68.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime71 = java.nio.file.attribute.FileTime.from(instant68);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery72 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period73 = instant68.query(periodTemporalQuery72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField74.getBaseUnit();
        boolean boolean76 = instant68.isSupported(temporalUnit75);
        java.time.Instant instant78 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant80 = instant78.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime84 = localDateTime81.atOffset(zoneOffset83);
        java.time.zone.ZoneRules zoneRules85 = zoneOffset83.getRules();
        java.time.ZonedDateTime zonedDateTime86 = java.time.ZonedDateTime.ofInstant(instant78, (java.time.ZoneId) zoneOffset83);
        java.time.ZoneId zoneId87 = zonedDateTime86.getZone();
        java.time.Clock clock88 = java.time.Clock.fixed(instant68, zoneId87);
        java.time.ZonedDateTime zonedDateTime89 = zonedDateTime32.with((java.time.temporal.TemporalAdjuster) instant68);
        java.time.Instant instant90 = instant9.with((java.time.temporal.TemporalAdjuster) instant68);
        boolean boolean91 = byteBuffer6.equals((java.lang.Object) instant90);
        java.time.temporal.ChronoField chronoField93 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit94 = chronoField93.getBaseUnit();
        boolean boolean95 = temporalUnit94.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant96 = instant90.plus(1434414441700000L, temporalUnit94);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 999999999L + "'", long61 == 999999999L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 999999999L + "'", long62 == 999999999L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField64.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(fileTime71);
        org.junit.Assert.assertNotNull(periodTemporalQuery72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField74.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(zoneId87);
        org.junit.Assert.assertNotNull(clock88);
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + chronoField93 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField93.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit94 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit94.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.net.URI uRI1 = new java.net.URI("Z");
        java.lang.String str2 = uRI1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Z" + "'", str2, "Z");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = null; // flaky: java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = null; // flaky: fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null; // flaky: fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = null; // flaky: fileChannel11.lock((long) 533000000, 0L, true);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        short short23 = byteBuffer21.getShort();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putChar('G');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer28 = byteBuffer27.asLongBuffer();
        short short29 = byteBuffer27.getShort();
        boolean boolean30 = byteBuffer21.equals((java.lang.Object) byteBuffer27);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = 0; // flaky: fileChannel11.write(byteBuffer27);
// flaky:             org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
// flaky:         org.junit.Assert.assertNotNull(fileChannel11);
// flaky:         org.junit.Assert.assertNotNull(fileChannel13);
// flaky:         org.junit.Assert.assertNotNull(seekableByteChannel15);
// flaky:         org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(longBuffer28);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 0 + "'", short29 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.lang.CharSequence charSequence0 = null;
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace(charSequence0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Iterator<java.lang.String> strItor14 = strList11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = strList11.get(10000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10000, Size: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strItor14);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("\u4e0b\u5348\u65f6\u5206\u79d2", 0, '\uffff');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u4e0b\u5348\u65f6\u5206\u79d2" + "'", str3, "\u4e0b\u5348\u65f6\u5206\u79d2");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.ValueRange valueRange14 = zonedDateTime11.range((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = temporalUnit17.isTimeBased();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime11.minus(0L, temporalUnit17);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime11.withYear((int) '\n');
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime22 = zonedDateTime11.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(valueRange14);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime22);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.LocalDate localDate6 = localDate1.plusWeeks((long) 10);
        java.time.LocalTime localTime7 = null;
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap9 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.zone.ZoneRules zoneRules15 = zoneOffset13.getRules();
        java.time.zone.ZoneRules zoneRules16 = zoneIdMap9.getOrDefault((java.lang.Object) 1.0d, zoneRules15);
        java.lang.String str17 = zoneRules15.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = zoneRules15.getTransitions();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime19.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        boolean boolean41 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str43 = localDateTime36.format(dateTimeFormatter42);
        java.time.ZoneOffset zoneOffset44 = zoneRules15.getOffset(localDateTime36);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime45 = java.time.OffsetDateTime.of(localDate1, localTime7, zoneOffset44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: time");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(zoneRules15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str17, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str43, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset44);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        boolean boolean20 = localDateTime17.equals((java.lang.Object) charset19);
        java.nio.charset.CharsetEncoder charsetEncoder21 = charset19.newEncoder();
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer24 = charBuffer23.flip();
        java.nio.CharBuffer charBuffer26 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer27 = charBuffer26.flip();
        int int28 = charBuffer23.compareTo(charBuffer26);
        int int29 = charBuffer26.length();
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer32 = byteBuffer31.asLongBuffer();
        float float34 = byteBuffer31.getFloat(4);
        double double36 = byteBuffer31.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder37 = null;
        java.nio.ByteBuffer byteBuffer38 = byteBuffer31.order(byteOrder37);
        java.nio.charset.CoderResult coderResult40 = charsetEncoder21.encode(charBuffer26, byteBuffer31, false);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(buffer24);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(buffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(longBuffer32);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(coderResult40);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = instant1.isSupported(temporalUnit8);
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant13 = instant11.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.ZoneId zoneId20 = zonedDateTime19.getZone();
        java.time.Clock clock21 = java.time.Clock.fixed(instant1, zoneId20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField22.getBaseUnit();
        java.time.Instant instant24 = instant1.truncatedTo(temporalUnit23);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant36 = instant24.with((java.time.temporal.TemporalAdjuster) localDateTime31);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField22.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream4 = doubleStream1.map(doubleUnaryOperator3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.Clock clock28 = java.time.Clock.systemUTC();
        java.time.Instant instant29 = clock28.instant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition30 = zoneRules23.nextTransition(instant29);
        java.util.Locale locale31 = java.util.Locale.US;
        boolean boolean32 = zoneRules23.equals((java.lang.Object) locale31);
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList33 = zoneRules23.getTransitions();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(clock28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNull(zoneOffsetTransition30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList33);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        strItor5.add("");
        strItor5.add("x-windows-iso2022jp");
        boolean boolean10 = strItor5.hasNext();
        int int11 = strItor5.nextIndex();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        java.nio.Buffer buffer16 = charBuffer3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer3, (-1), 781000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(buffer16);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        boolean boolean7 = duration1.isNegative();
        java.time.Duration duration9 = duration1.minusMinutes((long) (byte) 100);
        java.time.Duration duration11 = duration9.multipliedBy((long) 284000000);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration5 = duration2.minusNanos((-1L));
        java.time.Duration duration6 = duration2.abs();
        long long7 = duration6.toMinutes();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        boolean boolean5 = longBuffer2.isDirect();
        long long6 = longBuffer2.get();
        java.nio.ByteOrder byteOrder7 = longBuffer2.order();
        java.nio.LongBuffer longBuffer9 = longBuffer2.put((long) 12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = longBuffer9.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteOrder7);
        org.junit.Assert.assertNotNull(longBuffer9);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.ZonedDateTime zonedDateTime18 = offsetDateTime10.atZoneSameInstant((java.time.ZoneId) zoneOffset15);
        java.time.ZoneId zoneId19 = zonedDateTime18.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime20 = zonedDateTime18.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime32.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long35 = zonedDateTime32.getLong((java.time.temporal.TemporalField) chronoField34);
        long long36 = zonedDateTime18.getLong((java.time.temporal.TemporalField) chronoField34);
        java.time.Duration duration38 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration41 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList42 = duration41.getUnits();
        java.time.Duration duration43 = duration38.minus(duration41);
        int int44 = duration38.getNano();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime45 = zonedDateTime18.minus((java.time.temporal.TemporalAmount) duration38);
        java.time.temporal.Temporal temporal46 = zoneOffset4.adjustInto((java.time.temporal.Temporal) zonedDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime48 = zonedDateTime18.withHour(32);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 32");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField34.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 999999999L + "'", long35 == 999999999L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 999999999L + "'", long36 == 999999999L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(temporalUnitList42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime45);
        org.junit.Assert.assertNotNull(temporal46);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime12 = localDateTime6.withHour(4);
        java.util.stream.DoubleStream doubleStream13 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream14 = doubleStream13.distinct();
        java.util.stream.DoubleStream doubleStream15 = doubleStream14.parallel();
        boolean boolean16 = localDateTime12.equals((java.lang.Object) doubleStream14);
        java.util.function.DoublePredicate doublePredicate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = doubleStream14.anyMatch(doublePredicate17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str1 = charset0.toString();
        java.util.Set<java.lang.String> strSet2 = charset0.aliases();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "US-ASCII" + "'", str1, "US-ASCII");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("\\u0023", "ISO");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate3 = localDateTime2.toLocalDate();
        java.time.LocalDateTime localDateTime5 = localDateTime2.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange6 = chronoField1.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime2);
        boolean boolean7 = localDate0.equals((java.lang.Object) valueRange6);
        java.time.LocalDate localDate8 = java.time.LocalDate.now();
        java.time.LocalDate localDate9 = java.time.LocalDate.MIN;
        boolean boolean10 = localDate8.isEqual((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean12 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField11);
        int int13 = localDate9.getDayOfYear();
        java.time.Period period14 = java.time.Period.between(localDate0, localDate9);
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str16 = dateTimeFormatter15.toString();
        java.lang.String str17 = localDate0.format(dateTimeFormatter15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate19 = localDate0.minusDays((long) 722000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -1001976768");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField11.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str16, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-999999999-01-01" + "'", str17, "-999999999-01-01");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.Instant instant44 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant46 = instant44.minusNanos((long) 'a');
        long long47 = instant44.getEpochSecond();
        java.time.Instant instant49 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.Clock clock54 = java.time.Clock.fixed(instant49, (java.time.ZoneId) zoneOffset52);
        java.time.OffsetDateTime offsetDateTime55 = instant44.atOffset(zoneOffset52);
        java.time.LocalDate localDate56 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset52);
        boolean boolean57 = localDate37.isBefore((java.time.chrono.ChronoLocalDate) localDate56);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
        boolean boolean59 = localDate56.isSupported((java.time.temporal.TemporalField) chronoField58);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(clock54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH + "'", chronoField58.equals(java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("+999999999-12-31", 29);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "             +999999999-12-31" + "'", str2, "             +999999999-12-31");
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GBR" + "'", str1, "GBR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e2d\u6587" + "'", str4, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CHN" + "'", str5, "CHN");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.util.function.Function<java.util.concurrent.ExecutionException, java.util.concurrent.ExecutionException> executionExceptionFunction0 = java.util.function.Function.identity();
        org.junit.Assert.assertNotNull(executionExceptionFunction0);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime3.minusMinutes((long) 100);
        java.time.Instant instant13 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.Clock clock18 = java.time.Clock.fixed(instant13, (java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime19 = offsetDateTime11.atZoneSameInstant((java.time.ZoneId) zoneOffset16);
        java.time.LocalDate localDate21 = java.time.LocalDate.now();
        java.time.LocalDate localDate22 = java.time.LocalDate.MIN;
        boolean boolean23 = localDate21.isEqual((java.time.chrono.ChronoLocalDate) localDate22);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime28.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime28.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset38);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField42.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime44 = localDateTime40.minus((long) (-999999999), temporalUnit43);
        java.lang.String str45 = temporalUnit43.toString();
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime32.plus((long) (byte) 100, temporalUnit43);
        java.time.LocalDate localDate47 = localDate21.minus((long) (-1), temporalUnit43);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal48 = offsetDateTime11.plus(284000000L, temporalUnit43);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1005442959");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Weeks" + "'", str45, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        int int3 = org.apache.commons.lang3.StringUtils.indexOf("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", 3, 539000000);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean1 = inetAddress0.isMCLinkLocal();
        byte[] byteArray2 = inetAddress0.getAddress();
        java.net.InetAddress inetAddress3 = java.net.InetAddress.getByAddress(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray2, (-999999999), 653000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[127, 0, 0, 1]");
        org.junit.Assert.assertNotNull(inetAddress3);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt13 = intStream12.min();
        java.lang.String str14 = optionalInt13.toString();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        boolean boolean17 = optionalInt13.equals((java.lang.Object) localDate16);
        int int19 = optionalInt13.orElse(59);
        java.util.stream.IntStream intStream21 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt22 = intStream21.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = ofInt22.trySplit();
        java.util.stream.IntStream.Builder builder24 = java.util.stream.IntStream.builder();
        ofInt22.forEachRemaining((java.util.function.IntConsumer) builder24);
        optionalInt13.ifPresent((java.util.function.IntConsumer) builder24);
        boolean boolean27 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Integer> wildcardComparator28 = ofInt2.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(optionalInt13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalInt[10]" + "'", str14, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertNotNull(ofInt22);
        org.junit.Assert.assertNull(intSpliterator23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("java.nio.HeapShortBuffer[pos=64 lim=64 cap=64]");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        int int4 = ofDouble3.characteristics();
        long long5 = ofDouble3.getExactSizeIfKnown();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle4.withNegativeSign('+');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withDecimalSeparator('a');
        java.time.format.DecimalStyle decimalStyle10 = decimalStyle8.withZeroDigit('M');
        char char11 = decimalStyle8.getNegativeSign();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(decimalStyle10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '+' + "'", char11 == '+');
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble2 = doubleStream1.min();
        boolean boolean3 = optionalDouble2.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder4 = optionalDoubleBuilder0.add(optionalDouble2);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder5 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble7 = doubleStream6.min();
        boolean boolean8 = optionalDouble7.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder9 = optionalDoubleBuilder5.add(optionalDouble7);
        java.util.function.Consumer<java.util.OptionalDouble> optionalDoubleConsumer10 = optionalDoubleBuilder0.andThen((java.util.function.Consumer<java.util.OptionalDouble>) optionalDoubleBuilder5);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder11 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble13 = doubleStream12.min();
        boolean boolean14 = optionalDouble13.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder15 = optionalDoubleBuilder11.add(optionalDouble13);
        java.util.stream.DoubleStream doubleStream16 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream17 = doubleStream16.distinct();
        java.util.stream.DoubleStream doubleStream18 = doubleStream17.parallel();
        java.util.OptionalDouble optionalDouble19 = doubleStream18.average();
        optionalDoubleBuilder11.accept(optionalDouble19);
        java.util.function.Consumer<java.util.OptionalDouble> optionalDoubleConsumer21 = optionalDoubleConsumer10.andThen((java.util.function.Consumer<java.util.OptionalDouble>) optionalDoubleBuilder11);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder22 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream23 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble24 = doubleStream23.min();
        boolean boolean25 = optionalDouble24.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder26 = optionalDoubleBuilder22.add(optionalDouble24);
        java.util.stream.DoubleStream doubleStream27 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream28 = doubleStream27.distinct();
        java.util.stream.DoubleStream doubleStream29 = doubleStream28.parallel();
        java.util.OptionalDouble optionalDouble30 = doubleStream29.average();
        optionalDoubleBuilder22.accept(optionalDouble30);
        java.util.function.Consumer<java.util.OptionalDouble> optionalDoubleConsumer32 = optionalDoubleBuilder11.andThen((java.util.function.Consumer<java.util.OptionalDouble>) optionalDoubleBuilder22);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder33 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream34 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble35 = doubleStream34.min();
        boolean boolean36 = optionalDouble35.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder37 = optionalDoubleBuilder33.add(optionalDouble35);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder38 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream39 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble40 = doubleStream39.min();
        boolean boolean41 = optionalDouble40.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder42 = optionalDoubleBuilder38.add(optionalDouble40);
        java.util.function.Consumer<java.util.OptionalDouble> optionalDoubleConsumer43 = optionalDoubleBuilder33.andThen((java.util.function.Consumer<java.util.OptionalDouble>) optionalDoubleBuilder38);
        java.util.function.Consumer<java.util.OptionalDouble> optionalDoubleConsumer44 = optionalDoubleBuilder22.andThen((java.util.function.Consumer<java.util.OptionalDouble>) optionalDoubleBuilder38);
        java.util.stream.DoubleStream doubleStream45 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream47 = doubleStream45.skip((long) (byte) 10);
        java.util.OptionalDouble optionalDouble48 = doubleStream47.average();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder49 = optionalDoubleBuilder38.add(optionalDouble48);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder4);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder9);
        org.junit.Assert.assertNotNull(optionalDoubleConsumer10);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(optionalDouble13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder15);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(optionalDouble19);
        org.junit.Assert.assertNotNull(optionalDoubleConsumer21);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder22);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertNotNull(optionalDouble24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder26);
        org.junit.Assert.assertNotNull(doubleStream27);
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertNotNull(optionalDouble30);
        org.junit.Assert.assertNotNull(optionalDoubleConsumer32);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder33);
        org.junit.Assert.assertNotNull(doubleStream34);
        org.junit.Assert.assertNotNull(optionalDouble35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder37);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder38);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertNotNull(optionalDouble40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder42);
        org.junit.Assert.assertNotNull(optionalDoubleConsumer43);
        org.junit.Assert.assertNotNull(optionalDoubleConsumer44);
        org.junit.Assert.assertNotNull(doubleStream45);
        org.junit.Assert.assertNotNull(doubleStream47);
        org.junit.Assert.assertNotNull(optionalDouble48);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder49);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.lang.String str1 = attribute0.toString();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(input_method_segment)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("Chinese", 834000000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        boolean boolean2 = strSet0.add("Chinese");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strList28.removeAll((java.util.Collection<java.lang.String>) strList44);
        boolean boolean46 = strList16.retainAll((java.util.Collection<java.lang.String>) strList44);
        java.util.Spliterator<java.lang.String> strSpliterator47 = strList44.spliterator();
        boolean boolean48 = strList44.isEmpty();
        boolean boolean49 = strSet0.addAll((java.util.Collection<java.lang.String>) strList44);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 31, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        java.nio.charset.Charset charset3 = charsetDecoder1.charset();
        java.util.Set<java.lang.String> strSet4 = charset3.aliases();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = null; // flaky: java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = null; // flaky: fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        short short17 = byteBuffer15.getShort();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putChar('G');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer15.putChar('\n');
        // The following exception was thrown during execution in test generation
        try {
            int int22 = 0; // flaky: fileChannel13.write(byteBuffer15);
// flaky:             org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
// flaky:         org.junit.Assert.assertNotNull(fileChannel11);
// flaky:         org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(INPUT_METHOD_SEGMENT)" + "'", str1, "JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(INPUT_METHOD_SEGMENT)");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream1 = new java.io.PrintStream(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) (short) 10, (long) (byte) 0);
        boolean boolean19 = zoneRules7.isDaylightSavings(instant18);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.zone.ZoneRules zoneRules30 = zoneOffset28.getRules();
        java.time.ZonedDateTime zonedDateTime31 = offsetDateTime23.atZoneSameInstant((java.time.ZoneId) zoneOffset28);
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime31.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long34 = zonedDateTime31.getLong((java.time.temporal.TemporalField) chronoField33);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = zonedDateTime31.query(periodTemporalQuery35);
        java.time.ZoneId zoneId37 = zonedDateTime31.getZone();
        java.time.Instant instant38 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime31);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition39 = zoneRules7.nextTransition(instant38);
        java.time.LocalTime localTime40 = java.time.LocalTime.NOON;
        java.time.LocalTime localTime41 = java.time.LocalTime.now();
        int int42 = localTime41.getNano();
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long44 = localTime41.getLong((java.time.temporal.TemporalField) chronoField43);
        java.time.LocalTime localTime46 = localTime40.with((java.time.temporal.TemporalField) chronoField43, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = instant38.get((java.time.temporal.TemporalField) chronoField43);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MinuteOfHour");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField33.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 999999999L + "'", long34 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNull(zoneOffsetTransition39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 582000000 + "'", int42 == 582000000);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField43.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 15L + "'", long44 == 15L);
        org.junit.Assert.assertNotNull(localTime46);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.ofTotalSeconds(11);
        org.junit.Assert.assertNotNull(zoneOffset1);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean10 = localDate7.isSupported((java.time.temporal.TemporalField) chronoField9);
        int int11 = localDate7.getDayOfYear();
        java.time.LocalDate localDate12 = java.time.LocalDate.now();
        java.time.LocalDate localDate13 = java.time.LocalDate.MIN;
        boolean boolean14 = localDate12.isEqual((java.time.chrono.ChronoLocalDate) localDate13);
        int int15 = localDate13.getYear();
        java.lang.String str16 = localDate13.toString();
        java.time.chrono.ChronoPeriod chronoPeriod17 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate7, (java.time.chrono.ChronoLocalDate) localDate13);
        java.time.Period period18 = java.time.Period.from((java.time.temporal.TemporalAmount) chronoPeriod17);
        java.time.LocalDateTime localDateTime19 = localDateTime1.minus((java.time.temporal.TemporalAmount) chronoPeriod17);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        int int36 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        boolean boolean42 = localDateTime21.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        int int48 = localDateTime43.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        boolean boolean53 = localDateTime43.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        boolean boolean54 = localDateTime37.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.LocalDate localDate55 = localDateTime37.toLocalDate();
        java.time.LocalDate localDate56 = java.time.LocalDate.now();
        java.time.LocalDate localDate57 = java.time.LocalDate.MIN;
        boolean boolean58 = localDate56.isEqual((java.time.chrono.ChronoLocalDate) localDate57);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean60 = localDate57.isSupported((java.time.temporal.TemporalField) chronoField59);
        int int61 = localDate57.getDayOfYear();
        int int62 = localDate55.compareTo((java.time.chrono.ChronoLocalDate) localDate57);
        java.time.LocalDate localDate64 = localDate55.minusYears(32000L);
        int int65 = localDate55.getMonthValue();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal66 = localDateTime19.adjustInto((java.time.temporal.Temporal) localDate55);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-999999999) + "'", int15 == (-999999999));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-999999999-01-01" + "'", str16, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField59.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1999999998 + "'", int62 == 1999999998);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 12 + "'", int65 == 12);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean2 = file1.mkdirs();
        java.nio.file.Path path3 = file1.toPath();
        java.lang.String str4 = file1.getPath();
        boolean boolean5 = file1.canRead();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream6 = new java.io.PrintStream(file1);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: GBR (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(path3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GBR" + "'", str4, "GBR");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.plusWeeks((long) 437000000);
        int int15 = offsetDateTime14.getMinute();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.from((java.time.temporal.TemporalAccessor) localTime7);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 00:00:32 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        boolean boolean1 = chronoField0.isDateBased();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.util.stream.Stream<java.security.AccessControlException> accessControlExceptionStream0 = java.util.stream.Stream.empty();
        org.junit.Assert.assertNotNull(accessControlExceptionStream0);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime7.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean28 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime29.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        boolean boolean39 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean40 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDate localDate41 = localDateTime23.toLocalDate();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime49 = offsetDateTime45.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime53.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime53.with((java.time.temporal.TemporalField) chronoField56, (long) 31);
        boolean boolean59 = offsetDateTime49.isSupported((java.time.temporal.TemporalField) chronoField56);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit61 = chronoField60.getBaseUnit();
        long long62 = localDate41.until((java.time.temporal.Temporal) offsetDateTime49, temporalUnit61);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant63 = instant1.plus(1434414441700000L, temporalUnit61);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField56.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField60.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit61 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit61.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-37672155000L) + "'", long62 == (-37672155000L));
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble5 = intStream4.average();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime1 = java.time.OffsetTime.parse((java.lang.CharSequence) "java.security.cert.CertificateEncodingException");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.security.cert.CertificateEncodingException' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.lang.String str6 = date5.toGMTString();
        int int7 = date5.getYear();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str6, "1 Jan 1970 00:00:32 GMT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        int int0 = java.util.Spliterator.IMMUTABLE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1024 + "'", int0 == 1024);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.OffsetDateTime offsetDateTime8 = localDate1.atTime(offsetTime7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        boolean boolean31 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        boolean boolean42 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDate localDate44 = localDateTime26.toLocalDate();
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean49 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField48);
        int int50 = localDate46.getDayOfYear();
        int int51 = localDate44.compareTo((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.Period period52 = localDate1.until((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField54.getBaseUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate56 = localDate1.plus(999999999L, temporalUnit55);
        java.time.LocalDate localDate57 = java.time.LocalDate.now();
        java.time.LocalDate localDate58 = java.time.LocalDate.MIN;
        boolean boolean59 = localDate57.isEqual((java.time.chrono.ChronoLocalDate) localDate58);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime63 = localDateTime60.atOffset(zoneOffset62);
        java.time.OffsetDateTime offsetDateTime65 = offsetDateTime63.withSecond((int) (byte) 0);
        java.time.LocalDate localDate66 = offsetDateTime63.toLocalDate();
        java.time.temporal.ChronoField chronoField67 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean68 = offsetDateTime63.isSupported((java.time.temporal.TemporalField) chronoField67);
        boolean boolean69 = localDate57.isSupported((java.time.temporal.TemporalField) chronoField67);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = localDate1.get((java.time.temporal.TemporalField) chronoField67);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MicroOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1999999998 + "'", int51 == 1999999998);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField54.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(chronoLocalDate56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + chronoField67 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField67.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalTime localTime6 = java.time.LocalTime.now();
        java.time.LocalTime localTime8 = localTime6.plusHours(0L);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit10 = chronoField9.getBaseUnit();
        java.time.temporal.ValueRange valueRange11 = localTime8.range((java.time.temporal.TemporalField) chronoField9);
        boolean boolean12 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.from((java.time.temporal.TemporalAccessor) offsetDateTime3);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        boolean boolean47 = localDateTime26.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.temporal.Temporal temporal48 = localDateTime20.adjustInto((java.time.temporal.Temporal) localDateTime26);
        java.time.LocalDateTime localDateTime50 = localDateTime20.minusWeeks((long) (short) 0);
        java.time.Month month51 = java.time.Month.OCTOBER;
        java.time.Month month53 = month51.plus(0L);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        int int59 = localDateTime54.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime63 = localDateTime60.atOffset(zoneOffset62);
        int int64 = localDateTime55.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime60);
        java.time.temporal.Temporal temporal65 = month53.adjustInto((java.time.temporal.Temporal) localDateTime55);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate67 = localDateTime66.toLocalDate();
        java.time.LocalDateTime localDateTime69 = localDateTime66.plusWeeks(0L);
        boolean boolean70 = localDateTime55.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime66);
        java.time.LocalDateTime localDateTime72 = localDateTime55.minusHours((long) '\n');
        java.time.format.DateTimeFormatter dateTimeFormatter73 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str74 = localDateTime55.format(dateTimeFormatter73);
        java.lang.String str75 = localDateTime50.format(dateTimeFormatter73);
        java.lang.String str76 = localDateTime13.format(dateTimeFormatter73);
        java.time.format.ResolverStyle resolverStyle77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter73.withResolverStyle(resolverStyle77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: resolverStyle");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField9.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit10 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit10.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(temporal48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + month51 + "' != '" + java.time.Month.OCTOBER + "'", month51.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month53 + "' != '" + java.time.Month.OCTOBER + "'", month53.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(temporal65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+999999999-12-31" + "'", str74, "+999999999-12-31");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+999999999-12-31" + "'", str75, "+999999999-12-31");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+999999999-12-31" + "'", str76, "+999999999-12-31");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        int int2 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer4 = byteBuffer3.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = doubleBuffer4.get(234000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 234000000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(doubleBuffer4);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        java.util.stream.IntStream intStream6 = intStream1.skip(0L);
        java.util.function.IntToDoubleFunction intToDoubleFunction7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream8 = intStream1.mapToDouble(intToDoubleFunction7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("+999999999-12-31T23:59:59.999999999", "/tmp/United Kingdom6608063242857218135aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "Minute");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str3, "+999999999-12-31T23:59:59.999999999");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream4 = doubleStream0.skip((long) 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer10 = byteBuffer9.asLongBuffer();
        float float12 = byteBuffer9.getFloat(4);
        double double14 = byteBuffer9.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder15 = null;
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.order(byteOrder15);
        java.nio.ByteOrder byteOrder17 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer18 = byteBuffer9.order(byteOrder17);
        java.nio.IntBuffer intBuffer19 = byteBuffer18.asIntBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CoderResult coderResult20 = charsetEncoder7.flush(byteBuffer18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current state = RESET, new state = FLUSHED");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteOrder17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(intBuffer19);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.plusHours((-1L));
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.ZonedDateTime zonedDateTime45 = offsetDateTime37.atZoneSameInstant((java.time.ZoneId) zoneOffset42);
        int int46 = zonedDateTime45.getDayOfMonth();
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime50.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.zone.ZoneRules zoneRules57 = zoneOffset55.getRules();
        java.time.ZonedDateTime zonedDateTime58 = offsetDateTime50.atZoneSameInstant((java.time.ZoneId) zoneOffset55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime58.withLaterOffsetAtOverlap();
        boolean boolean60 = zonedDateTime45.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime59);
        java.time.LocalDate localDate61 = java.time.LocalDate.now();
        java.time.LocalDate localDate62 = java.time.LocalDate.MIN;
        boolean boolean63 = localDate61.isEqual((java.time.chrono.ChronoLocalDate) localDate62);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.OffsetDateTime offsetDateTime69 = offsetDateTime67.withSecond((int) (byte) 0);
        java.time.LocalDate localDate70 = offsetDateTime67.toLocalDate();
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean72 = offsetDateTime67.isSupported((java.time.temporal.TemporalField) chronoField71);
        boolean boolean73 = localDate61.isSupported((java.time.temporal.TemporalField) chronoField71);
        java.lang.String str74 = chronoField71.toString();
        int int75 = zonedDateTime45.get((java.time.temporal.TemporalField) chronoField71);
        java.time.temporal.Temporal temporal77 = zonedDateTime31.with((java.time.temporal.TemporalField) chronoField71, (long) '0');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField71.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "MicroOfSecond" + "'", str74, "MicroOfSecond");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 999999 + "'", int75 == 999999);
        org.junit.Assert.assertNotNull(temporal77);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        // The following exception was thrown during execution in test generation
        try {
            fileChannel11.force(true);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        boolean boolean13 = fileChannel11.isOpen();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileChannel fileChannel15 = fileChannel11.position((long) 16);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDateTime localDateTime36 = localDateTime6.minusWeeks((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime38 = localDateTime6.plusMinutes((long) 274);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.plusYears((long) 33237);
        java.lang.String[] strArray9 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", (int) (byte) 10);
        java.lang.String str10 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray9);
        boolean boolean11 = period1.equals((java.lang.Object) str10);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit13 = null;
        boolean boolean14 = zonedDateTime12.isSupported(temporalUnit13);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime15 = zonedDateTime12.withEarlierOffsetAtOverlap();
        java.time.ZoneId zoneId16 = localDateChronoZonedDateTime15.getZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime15);
        org.junit.Assert.assertNotNull(zoneId16);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean2 = file1.mkdirs();
        long long3 = file1.length();
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.Clock clock10 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset8);
        java.time.LocalTime localTime11 = java.time.LocalTime.now(clock10);
        boolean boolean12 = file1.equals((java.lang.Object) clock10);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4096L + "'", long3 == 4096L);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(clock10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology3);
        java.time.format.DateTimeFormatter dateTimeFormatter10 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology11 = dateTimeFormatter10.getChronology();
        java.time.format.TextStyle textStyle12 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getISO3Language();
        java.time.format.DecimalStyle decimalStyle15 = java.time.format.DecimalStyle.of(locale13);
        java.lang.String str16 = chronology11.getDisplayName(textStyle12, locale13);
        java.time.OffsetTime offsetTime17 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime19 = offsetTime17.withSecond(16);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int21 = offsetTime19.get((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.ValueRange valueRange22 = chronology11.range(chronoField20);
        java.time.Instant instant24 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.Clock clock29 = java.time.Clock.fixed(instant24, (java.time.ZoneId) zoneOffset27);
        java.time.chrono.ChronoLocalDate chronoLocalDate30 = chronology11.dateNow(clock29);
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = chronology3.date((java.time.temporal.TemporalAccessor) chronoLocalDate30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap41 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.zone.ZoneRules zoneRules48 = zoneIdMap41.getOrDefault((java.lang.Object) 1.0d, zoneRules47);
        java.lang.String str49 = zoneRules47.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList50 = zoneRules47.getTransitions();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        int int56 = localDateTime51.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        int int61 = localDateTime52.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime57);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        int int67 = localDateTime62.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        int int72 = localDateTime63.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime68);
        boolean boolean73 = localDateTime52.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime68);
        java.time.format.DateTimeFormatter dateTimeFormatter74 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str75 = localDateTime68.format(dateTimeFormatter74);
        java.time.ZoneOffset zoneOffset76 = zoneRules47.getOffset(localDateTime68);
        java.time.OffsetDateTime offsetDateTime77 = offsetDateTime39.withOffsetSameLocal(zoneOffset76);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime81 = localDateTime78.atOffset(zoneOffset80);
        java.time.OffsetDateTime offsetDateTime83 = offsetDateTime81.withSecond((int) (byte) 0);
        int int84 = offsetDateTime83.getMinute();
        java.time.OffsetDateTime offsetDateTime86 = offsetDateTime83.plusNanos((long) 227000000);
        java.time.LocalDateTime localDateTime87 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset89 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime90 = localDateTime87.atOffset(zoneOffset89);
        java.time.OffsetDateTime offsetDateTime92 = offsetDateTime90.withSecond((int) (byte) 0);
        java.time.LocalDate localDate93 = offsetDateTime90.toLocalDate();
        java.time.temporal.ChronoField chronoField94 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit95 = chronoField94.getBaseUnit();
        boolean boolean96 = offsetDateTime90.isSupported((java.time.temporal.TemporalField) chronoField94);
        java.time.temporal.ValueRange valueRange97 = offsetDateTime86.range((java.time.temporal.TemporalField) chronoField94);
        boolean boolean98 = offsetDateTime77.isAfter(offsetDateTime86);
        java.time.chrono.ChronoLocalDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoLocalDateTime99 = chronology3.localDateTime((java.time.temporal.TemporalAccessor) offsetDateTime77);
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + textStyle12 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle12.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(decimalStyle15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISO" + "'", str16, "ISO");
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField20.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertNotNull(valueRange22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(chronoLocalDate30);
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str49, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str75, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 59 + "'", int84 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(zoneOffset89);
        org.junit.Assert.assertNotNull(offsetDateTime90);
        org.junit.Assert.assertNotNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertTrue("'" + chronoField94 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField94.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit95 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit95.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(valueRange97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime99);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.time.Month month0 = java.time.Month.SEPTEMBER;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.SEPTEMBER + "'", month0.equals(java.time.Month.SEPTEMBER));
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        int int2 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer6 = byteBuffer5.asLongBuffer();
        float float8 = byteBuffer5.getFloat(4);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('\r');
        java.lang.Object obj11 = byteBuffer10.array();
        boolean boolean12 = byteBuffer3.equals(obj11);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDate localDate15 = localDate13.plusYears((long) 'u');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.Month month20 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime33 = localDateTime27.withHour(4);
        int int34 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDate localDate35 = localDateTime16.toLocalDate();
        java.time.Instant instant37 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.Clock clock42 = java.time.Clock.fixed(instant37, (java.time.ZoneId) zoneOffset40);
        java.time.LocalTime localTime43 = java.time.LocalTime.now(clock42);
        java.time.LocalTime localTime45 = localTime43.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.of(localDate35, localTime45);
        java.time.LocalTime localTime48 = localTime45.plusNanos(13L);
        java.time.LocalDateTime localDateTime49 = localDate13.atTime(localTime48);
        java.time.Period period51 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period52 = period51.normalized();
        java.time.Period period54 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period55 = period54.normalized();
        long long56 = period54.toTotalMonths();
        java.time.chrono.ChronoPeriod chronoPeriod58 = period54.multipliedBy((int) (short) 100);
        java.time.chrono.ChronoPeriod chronoPeriod59 = period51.plus((java.time.temporal.TemporalAmount) period54);
        java.time.chrono.ChronoPeriod chronoPeriod60 = period51.negated();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime61 = localTime48.minus((java.time.temporal.TemporalAmount) chronoPeriod60);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Days");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.DECEMBER + "'", month20.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(clock42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertNotNull(chronoPeriod59);
        org.junit.Assert.assertNotNull(chronoPeriod60);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        boolean boolean4 = codeSource2.equals((java.lang.Object) 4);
        java.lang.String str5 = codeSource2.toString();
        java.lang.String str6 = codeSource2.toString();
        java.net.URL uRL7 = null;
        java.security.CodeSigner[] codeSignerArray8 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource9 = new java.security.CodeSource(uRL7, codeSignerArray8);
        boolean boolean11 = codeSource9.equals((java.lang.Object) 4);
        java.lang.String str12 = codeSource9.toString();
        java.lang.String str13 = codeSource9.toString();
        boolean boolean14 = codeSource2.implies(codeSource9);
        java.security.PermissionCollection permissionCollection15 = null;
        java.security.ProtectionDomain protectionDomain16 = new java.security.ProtectionDomain(codeSource2, permissionCollection15);
        java.net.URL uRL17 = codeSource2.getLocation();
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(null <no signer certificates>)" + "'", str5, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(null <no signer certificates>)" + "'", str6, "(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(codeSignerArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(null <no signer certificates>)" + "'", str12, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(null <no signer certificates>)" + "'", str13, "(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals(protectionDomain16.toString(), "ProtectionDomain  (null <no signer certificates>)\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(uRL17);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        boolean boolean4 = codeSource2.equals((java.lang.Object) 4);
        java.lang.String str5 = codeSource2.toString();
        java.lang.String str6 = codeSource2.toString();
        java.net.URL uRL7 = null;
        java.security.CodeSigner[] codeSignerArray8 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource9 = new java.security.CodeSource(uRL7, codeSignerArray8);
        boolean boolean11 = codeSource9.equals((java.lang.Object) 4);
        java.lang.String str12 = codeSource9.toString();
        java.lang.String str13 = codeSource9.toString();
        boolean boolean14 = codeSource2.implies(codeSource9);
        java.security.cert.Certificate[] certificateArray15 = codeSource9.getCertificates();
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(null <no signer certificates>)" + "'", str5, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(null <no signer certificates>)" + "'", str6, "(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(codeSignerArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(null <no signer certificates>)" + "'", str12, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(null <no signer certificates>)" + "'", str13, "(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(certificateArray15);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel13.truncate((long) '+');
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime14 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) localTime13);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetDateTime from TemporalAccessor: 23:59:59.999999999 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        boolean boolean3 = optionalInt2.isPresent();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        char[] charArray19 = new char[] { 'a', '#', '4', '#' };
        boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny("", charArray19);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray19);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray19);
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer11, charArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer26 = byteBuffer25.asLongBuffer();
        java.nio.charset.CoderResult coderResult28 = charsetEncoder7.encode(charBuffer11, byteBuffer25, false);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer32 = charBuffer11.put("+999999999-12-31T23:59:59.999999999", (-3), 234000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertNotNull(coderResult28);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        long long0 = java.security.PublicKey.serialVersionUID;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 7187392471159151072L + "'", long0 == 7187392471159151072L);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant1 = java.time.Instant.parse((java.lang.CharSequence) "java.security.cert.CertificateEncodingException");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'java.security.cert.CertificateEncodingException' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime3 = offsetDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 999999998);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MilliOfSecond (valid values 0 - 999): 999999998");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField1.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        java.util.Set<java.lang.String> strSet1 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month2 = java.time.Month.OCTOBER;
        java.time.Month month4 = month2.plus(0L);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.temporal.Temporal temporal16 = month4.adjustInto((java.time.temporal.Temporal) localDateTime6);
        boolean boolean17 = strSet1.equals((java.lang.Object) month4);
        java.security.ProtectionDomain[] protectionDomainArray18 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext19 = new java.security.AccessControlContext(protectionDomainArray18);
        java.time.LocalDate localDate20 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery21 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period22 = localDate20.query(periodTemporalQuery21);
        boolean boolean23 = accessControlContext19.equals((java.lang.Object) periodTemporalQuery21);
        java.time.Period period24 = month4.query(periodTemporalQuery21);
        java.time.Period period25 = isoEra0.query(periodTemporalQuery21);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            long long27 = isoEra0.getLong((java.time.temporal.TemporalField) chronoField26);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.OCTOBER + "'", month2.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.OCTOBER + "'", month4.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(temporal16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodTemporalQuery21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        int[] intArray6 = new int[] { 1024, (byte) 1, 125000000, 17488, '4', 829000000 };
        java.nio.IntBuffer intBuffer7 = java.nio.IntBuffer.wrap(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = intBuffer7.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1024, 1, 125000000, 17488, 52, 829000000]");
        org.junit.Assert.assertNotNull(intBuffer7);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("09:14:52.125Z", "zh_CN", "US-ASCII", 829000000);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "09:14:52.125Z" + "'", str4, "09:14:52.125Z");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        java.security.PermissionCollection permissionCollection3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.security.Principal principal5 = null;
        java.security.Principal[] principalArray6 = new java.security.Principal[] { principal5 };
        java.security.ProtectionDomain protectionDomain7 = new java.security.ProtectionDomain(codeSource2, permissionCollection3, classLoader4, principalArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = protectionDomain7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertNotNull(principalArray6);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.lastKey();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = strMap0.tailMap("Minute(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "x-windows-iso2022jp" + "'", str1, "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("", "OptionalLong.empty");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.util.Set<java.time.ZoneId> zoneIdSet14 = zoneIdMap6.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList26);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList54);
        boolean boolean57 = strList40.removeAll((java.util.Collection<java.lang.String>) strList56);
        boolean boolean58 = strList28.retainAll((java.util.Collection<java.lang.String>) strList56);
        boolean boolean59 = zoneIdSet14.removeAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Spliterator<java.lang.String> strSpliterator60 = strList28.spliterator();
        java.util.Set<java.lang.String> strSet61 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month62 = java.time.Month.OCTOBER;
        java.time.Month month64 = month62.plus(0L);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        int int70 = localDateTime65.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime66);
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime74 = localDateTime71.atOffset(zoneOffset73);
        int int75 = localDateTime66.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime71);
        java.time.temporal.Temporal temporal76 = month64.adjustInto((java.time.temporal.Temporal) localDateTime66);
        boolean boolean77 = strSet61.equals((java.lang.Object) month64);
        boolean boolean78 = strList28.containsAll((java.util.Collection<java.lang.String>) strSet61);
        java.lang.String str79 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList28);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneIdSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSpliterator60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + month62 + "' != '" + java.time.Month.OCTOBER + "'", month62.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month64 + "' != '" + java.time.Month.OCTOBER + "'", month64.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(temporal76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (byte) -1);
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.util.Locale locale2 = new java.util.Locale("", "Minute");
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.lang.Object obj5 = null;
        boolean boolean6 = locale3.equals(obj5);
        org.junit.Assert.assertEquals(locale2.toString(), "_MINUTE");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MINUTE" + "'", str4, "MINUTE");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.OptionalDouble optionalDouble7 = doubleStream6.min();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream9 = doubleStream6.map(doubleUnaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("java.nio.HeapFloatBuffer[pos=0 lim=2 cap=2]", "\\u0020", 829000000, "MinuteOfHour");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: java.nio.heapfloatbuffer[pos=0 lim=2 cap=2]");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        java.security.PermissionCollection permissionCollection3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.security.Principal principal5 = null;
        java.security.Principal[] principalArray6 = new java.security.Principal[] { principal5 };
        java.security.ProtectionDomain protectionDomain7 = new java.security.ProtectionDomain(codeSource2, permissionCollection3, classLoader4, principalArray6);
        java.security.Principal[] principalArray8 = protectionDomain7.getPrincipals();
        java.net.URL uRL9 = null;
        java.security.CodeSigner[] codeSignerArray10 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource11 = new java.security.CodeSource(uRL9, codeSignerArray10);
        java.security.PermissionCollection permissionCollection12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.security.Principal principal14 = null;
        java.security.Principal[] principalArray15 = new java.security.Principal[] { principal14 };
        java.security.ProtectionDomain protectionDomain16 = new java.security.ProtectionDomain(codeSource11, permissionCollection12, classLoader13, principalArray15);
        java.security.Principal[] principalArray17 = protectionDomain16.getPrincipals();
        java.net.URL uRL18 = null;
        java.security.CodeSigner[] codeSignerArray19 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource20 = new java.security.CodeSource(uRL18, codeSignerArray19);
        java.security.PermissionCollection permissionCollection21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.security.Principal principal23 = null;
        java.security.Principal[] principalArray24 = new java.security.Principal[] { principal23 };
        java.security.ProtectionDomain protectionDomain25 = new java.security.ProtectionDomain(codeSource20, permissionCollection21, classLoader22, principalArray24);
        java.security.ProtectionDomain[] protectionDomainArray26 = new java.security.ProtectionDomain[] { protectionDomain7, protectionDomain16, protectionDomain25 };
        java.security.AccessControlContext accessControlContext27 = new java.security.AccessControlContext(protectionDomainArray26);
        java.security.DomainCombiner domainCombiner28 = null;
        java.security.AccessControlContext accessControlContext29 = new java.security.AccessControlContext(accessControlContext27, domainCombiner28);
        javax.security.auth.Subject subject30 = javax.security.auth.Subject.getSubject(accessControlContext27);
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertNotNull(principalArray6);
        org.junit.Assert.assertNotNull(principalArray8);
        org.junit.Assert.assertNotNull(codeSignerArray10);
        org.junit.Assert.assertNotNull(principalArray15);
        org.junit.Assert.assertNotNull(principalArray17);
        org.junit.Assert.assertNotNull(codeSignerArray19);
        org.junit.Assert.assertNotNull(principalArray24);
        org.junit.Assert.assertNotNull(protectionDomainArray26);
        org.junit.Assert.assertNull(subject30);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap5);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("zh_CN", 277998031, 878000000);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.io.InvalidObjectException invalidObjectException1 = new java.io.InvalidObjectException("x-windows-iso2022jp");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        java.time.Duration duration45 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList46 = duration45.getUnits();
        java.time.Duration duration48 = duration45.plusDays((-1L));
        java.time.Duration duration50 = duration45.withSeconds(0L);
        java.time.Duration duration51 = duration50.abs();
        java.time.OffsetTime offsetTime52 = offsetTime42.plus((java.time.temporal.TemporalAmount) duration51);
        java.time.OffsetTime offsetTime54 = offsetTime42.minusHours((long) 33237);
        java.time.OffsetTime offsetTime56 = offsetTime42.plusNanos(0L);
        java.time.format.FormatStyle formatStyle57 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter58 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle57);
        java.time.format.FormatStyle formatStyle59 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter60 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle59);
        java.time.format.DateTimeFormatter dateTimeFormatter61 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle57, formatStyle59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = offsetTime42.format(dateTimeFormatter61);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: YearOfEra");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(temporalUnitList46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(offsetTime54);
        org.junit.Assert.assertNotNull(offsetTime56);
        org.junit.Assert.assertTrue("'" + formatStyle57 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle57.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + formatStyle59 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle59.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.time.Clock clock0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.now(clock0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: clock");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.nio.file.AccessMode accessMode0 = java.nio.file.AccessMode.WRITE;
        org.junit.Assert.assertTrue("'" + accessMode0 + "' != '" + java.nio.file.AccessMode.WRITE + "'", accessMode0.equals(java.nio.file.AccessMode.WRITE));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer12 = byteBuffer1.position((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetTime offsetTime6 = offsetDateTime5.toOffsetTime();
        java.time.OffsetTime offsetTime8 = offsetTime6.minusNanos((long) '4');
        java.time.LocalDate localDate10 = java.time.LocalDate.now();
        java.time.LocalDate localDate11 = java.time.LocalDate.MIN;
        boolean boolean12 = localDate10.isEqual((java.time.chrono.ChronoLocalDate) localDate11);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime17.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset27);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField31.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime33 = localDateTime29.minus((long) (-999999999), temporalUnit32);
        java.lang.String str34 = temporalUnit32.toString();
        java.time.OffsetDateTime offsetDateTime35 = offsetDateTime21.plus((long) (byte) 100, temporalUnit32);
        java.time.LocalDate localDate36 = localDate10.minus((long) (-1), temporalUnit32);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime37 = offsetTime6.plus(68618241259163000L, temporalUnit32);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField31.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Weeks" + "'", str34, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap9 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.zone.ZoneRules zoneRules15 = zoneOffset13.getRules();
        java.time.zone.ZoneRules zoneRules16 = zoneIdMap9.getOrDefault((java.lang.Object) 1.0d, zoneRules15);
        java.lang.String str17 = zoneRules15.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = zoneRules15.getTransitions();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime19.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        boolean boolean41 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str43 = localDateTime36.format(dateTimeFormatter42);
        java.time.ZoneOffset zoneOffset44 = zoneRules15.getOffset(localDateTime36);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime7.withOffsetSameLocal(zoneOffset44);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.plusMinutes((long) ' ');
        int int48 = offsetDateTime45.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(zoneRules15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str17, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str43, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        // The following exception was thrown during execution in test generation
        try {
            long long19 = fileChannel11.read(byteBufferArray16, (int) ' ', 495000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.plusNanos((long) (-7));
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        boolean boolean17 = instant9.isSupported(temporalUnit16);
        java.time.Instant instant19 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant21 = instant19.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset24);
        java.time.ZoneId zoneId28 = zonedDateTime27.getZone();
        java.time.Clock clock29 = java.time.Clock.fixed(instant9, zoneId28);
        java.time.ZonedDateTime zonedDateTime30 = offsetDateTime5.atZoneSimilarLocal(zoneId28);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime5.minusMinutes((long) 399000000);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime34 = offsetDateTime5.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = longStream2.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.Instant instant44 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.Clock clock49 = java.time.Clock.fixed(instant44, (java.time.ZoneId) zoneOffset47);
        java.time.LocalTime localTime50 = java.time.LocalTime.now(clock49);
        java.time.LocalTime localTime52 = localTime50.plusHours((long) 16384);
        java.time.LocalTime localTime54 = localTime50.minusNanos(0L);
        java.time.LocalDate localDate55 = java.time.LocalDate.now();
        java.time.LocalDate localDate56 = java.time.LocalDate.MIN;
        boolean boolean57 = localDate55.isEqual((java.time.chrono.ChronoLocalDate) localDate56);
        int int58 = localDate56.getYear();
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.temporal.Temporal temporal63 = localDate56.adjustInto((java.time.temporal.Temporal) localDateTime59);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.Clock clock68 = java.time.Clock.systemUTC();
        java.time.Instant instant69 = clock68.instant();
        java.time.ZoneId zoneId70 = clock68.getZone();
        java.time.ZonedDateTime zonedDateTime71 = java.time.ZonedDateTime.ofInstant(localDateTime59, zoneOffset66, zoneId70);
        java.time.OffsetDateTime offsetDateTime72 = java.time.OffsetDateTime.of(localDate37, localTime54, zoneOffset66);
        java.time.Duration duration75 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration78 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList79 = duration78.getUnits();
        java.time.Duration duration80 = duration75.minus(duration78);
        java.time.Duration duration82 = duration75.plusNanos((long) 722000000);
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit85 = chronoField84.getBaseUnit();
        java.time.Duration duration86 = duration82.minus((long) (byte) 100, temporalUnit85);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate87 = localDate37.plus((long) 284000000, temporalUnit85);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Micros");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(clock49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-999999999) + "'", int58 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(temporal63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(clock68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(temporalUnitList79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField84.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit85 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit85.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(duration86);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDate localDate4 = java.time.LocalDate.now();
        java.time.LocalDate localDate5 = java.time.LocalDate.MIN;
        boolean boolean6 = localDate4.isEqual((java.time.chrono.ChronoLocalDate) localDate5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.withSecond((int) (byte) 0);
        java.time.LocalDate localDate13 = offsetDateTime10.toLocalDate();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean15 = offsetDateTime10.isSupported((java.time.temporal.TemporalField) chronoField14);
        boolean boolean16 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField14);
        java.time.Period period17 = java.time.Period.between(localDate1, localDate4);
        java.time.chrono.Era era18 = localDate4.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField14.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + era18 + "' != '" + java.time.chrono.IsoEra.CE + "'", era18.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.util.Locale.setDefault(locale13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset20);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset20.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap1.getOrDefault((java.lang.Object) locale13, zoneRules23);
        float[] floatArray27 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer28 = java.nio.FloatBuffer.wrap(floatArray27);
        java.nio.FloatBuffer floatBuffer29 = floatBuffer28.compact();
        boolean boolean30 = zoneRules24.equals((java.lang.Object) floatBuffer28);
        float[] floatArray36 = new float[] { 781000000, 413000000, 68618241259163000L, 12, 999999999 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer39 = floatBuffer28.put(floatArray36, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GBR" + "'", str12, "GBR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertNotNull(floatBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[7.81E8, 4.13E8, 6.861824E16, 12.0, 1.0E9]");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        java.lang.String str8 = uRI7.getAuthority();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        java.util.stream.IntStream intStream11 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt12 = intStream11.spliterator();
        java.util.stream.IntStream.Builder builder13 = java.util.stream.IntStream.builder();
        boolean boolean14 = ofInt12.tryAdvance((java.util.function.IntConsumer) builder13);
        ofInt7.forEachRemaining((java.util.function.IntConsumer) builder13);
        java.util.stream.IntStream intStream17 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt18 = intStream17.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = ofInt18.trySplit();
        java.util.stream.IntStream.Builder builder20 = java.util.stream.IntStream.builder();
        ofInt18.forEachRemaining((java.util.function.IntConsumer) builder20);
        java.util.function.IntConsumer intConsumer22 = builder13.andThen((java.util.function.IntConsumer) builder20);
        java.util.stream.IntStream.Builder builder23 = java.util.stream.IntStream.builder();
        java.util.stream.IntStream intStream25 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt26 = intStream25.spliterator();
        java.util.stream.IntStream.Builder builder27 = java.util.stream.IntStream.builder();
        boolean boolean28 = ofInt26.tryAdvance((java.util.function.IntConsumer) builder27);
        java.util.stream.IntStream.Builder builder29 = java.util.stream.IntStream.builder();
        java.util.stream.IntStream.Builder[] builderArray30 = new java.util.stream.IntStream.Builder[] { builder3, builder20, builder23, builder27, builder29 };
        java.util.stream.Stream<java.util.stream.IntStream.Builder> builderStream31 = java.util.stream.Stream.of(builderArray30);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intStream11);
        org.junit.Assert.assertNotNull(ofInt12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(ofInt18);
        org.junit.Assert.assertNull(intSpliterator19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(intConsumer22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(ofInt26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builderArray30);
        org.junit.Assert.assertNotNull(builderStream31);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CodingErrorAction codingErrorAction8 = charsetEncoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder9 = charsetEncoder7.reset();
        boolean boolean11 = charsetEncoder7.canEncode('a');
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        java.net.InetAddress inetAddress13 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str14 = inetAddress13.getHostName();
        byte[] byteArray15 = inetAddress13.getAddress();
        java.net.InetAddress inetAddress16 = java.net.InetAddress.getByAddress("zh_CN", byteArray15);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.get(byteArray15);
        java.nio.ByteOrder byteOrder18 = byteBuffer10.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(inetAddress13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "localhost" + "'", str14, "localhost");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteOrder18);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.LocalTime localTime11 = localTime9.plusHours((long) 4096);
        java.time.ZoneOffset zoneOffset12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime13 = localTime11.atOffset(zoneOffset12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: offset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusHours((long) '\n');
        java.time.ZoneId zoneId16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime17 = zonedDateTime11.withZoneSameLocal(zoneId16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: zone");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        char char6 = byteBuffer1.getChar(0);
        char char7 = byteBuffer1.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\000' + "'", char7 == '\000');
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]", 999999999);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str2, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        java.lang.String str21 = org.apache.commons.lang3.StringUtils.stripAccents((java.lang.CharSequence) charBuffer20);
        int int22 = charBuffer20.length();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.ofHours((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 32 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        int int2 = org.apache.commons.lang3.StringUtils.countMatches("DoubleSummaryStatistics{count=1, sum=385000000.000000, min=385000000.000000, average=385000000.000000, max=385000000.000000}", "zonerules[currentstandardoffset=z]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("English (United Kingdom)", "localhost", 4, (int) (short) 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "localhostish (United Kingdom)" + "'", str4, "localhostish (United Kingdom)");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) ' ');
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int4 = zoneOffset3.getTotalSeconds();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset3);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        java.time.Instant instant17 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant19 = instant17.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.ofInstant(instant17, (java.time.ZoneId) zoneOffset22);
        java.time.ZoneId zoneId26 = zonedDateTime25.getZone();
        java.time.Clock clock27 = java.time.Clock.fixed(instant7, zoneId26);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset32);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset32.getRules();
        java.time.OffsetDateTime offsetDateTime36 = instant7.atOffset(zoneOffset32);
        int int37 = zoneOffset3.compareTo(zoneOffset32);
        java.lang.String str38 = zoneOffset3.toString();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Z" + "'", str38, "Z");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap15 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.zone.ZoneRules zoneRules22 = zoneIdMap15.getOrDefault((java.lang.Object) 1.0d, zoneRules21);
        java.time.zone.ZoneRules zoneRules23 = zoneIdMap11.put((java.time.ZoneId) zoneOffset13, zoneRules21);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime9.withZoneSameLocal((java.time.ZoneId) zoneOffset13);
        java.time.LocalTime localTime25 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset13);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.MINUTE_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = zoneOffset13.get((java.time.temporal.TemporalField) chronoField26);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MinuteOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.MINUTE_OF_DAY));
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.net.URI uRI1 = new java.net.URI("eng");
        java.lang.String str2 = uRI1.getSchemeSpecificPart();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.ShortBuffer shortBuffer11 = byteBuffer7.asShortBuffer();
        byte byte12 = byteBuffer7.get();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer15 = byteBuffer14.asLongBuffer();
        int int16 = byteBuffer7.compareTo(byteBuffer14);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer19 = byteBuffer14.putInt(676000000, 533000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int6 = zoneOffset5.getTotalSeconds();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset5);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 23, (int) (short) 1, zoneOffset5);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        int int21 = zonedDateTime20.getDayOfMonth();
        int int22 = zonedDateTime20.getMinute();
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime20.minusHours((long) '\n');
        java.time.temporal.Temporal temporal25 = zoneOffset5.adjustInto((java.time.temporal.Temporal) zonedDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(temporal25);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException("MINUTE");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        java.lang.String str5 = file1.getCanonicalPath();
        boolean boolean8 = file1.setReadable(true, true);
        boolean boolean9 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/GBR" + "'", str5, "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        int[] intArray18 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer19 = intBuffer11.get(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = intBuffer11.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer19);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = zoneRules7.getTransitions();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str35 = localDateTime28.format(dateTimeFormatter34);
        java.time.ZoneOffset zoneOffset36 = zoneRules7.getOffset(localDateTime28);
        java.time.LocalDateTime localDateTime38 = localDateTime28.minusMinutes(13L);
        java.time.Instant instant40 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.Clock clock45 = java.time.Clock.fixed(instant40, (java.time.ZoneId) zoneOffset43);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset50);
        java.time.Clock clock53 = clock45.withZone((java.time.ZoneId) zoneOffset50);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime54 = localDateTime28.atZone((java.time.ZoneId) zoneOffset50);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime56 = localDateTime28.withMinute(316000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 316000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(clock45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(clock53);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime54);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.chrono.ChronoLocalDate chronoLocalDate43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = localDate37.compareTo(chronoLocalDate43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset6);
        java.time.zone.ZoneRules zoneRules9 = zoneOffset6.getRules();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset14);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition17 = zoneRules9.getTransition(localDateTime16);
        int int18 = localDateTime16.getSecond();
        java.time.Duration duration21 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int22 = duration21.getNano();
        java.time.Duration duration23 = duration21.abs();
        java.time.LocalDateTime localDateTime24 = localDateTime16.minus((java.time.temporal.TemporalAmount) duration23);
        java.time.LocalDate localDate25 = java.time.LocalDate.now();
        java.time.LocalDate localDate26 = java.time.LocalDate.MIN;
        boolean boolean27 = localDate25.isEqual((java.time.chrono.ChronoLocalDate) localDate26);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime32.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime48 = localDateTime44.minus((long) (-999999999), temporalUnit47);
        java.lang.String str49 = temporalUnit47.toString();
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime36.plus((long) (byte) 100, temporalUnit47);
        java.time.LocalDate localDate51 = localDate25.minus((long) (-1), temporalUnit47);
        long long52 = localDateTime0.until((java.time.temporal.Temporal) localDateTime16, temporalUnit47);
        java.time.temporal.TemporalField temporalField53 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long54 = localDateTime0.getLong(temporalField53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNull(zoneOffsetTransition17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Weeks" + "'", str49, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-52177397210L) + "'", long52 == (-52177397210L));
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        java.time.Duration duration8 = duration1.plusHours((long) 17488);
        int int9 = duration8.getNano();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray15);
        printWriter1.println(charArray15);
        java.nio.CharBuffer charBuffer24 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer25 = charBuffer24.flip();
        java.nio.CharBuffer charBuffer26 = charBuffer24.duplicate();
        char[] charArray34 = new char[] { 'a', '#', '4', '#' };
        boolean boolean35 = org.apache.commons.lang3.StringUtils.containsAny("", charArray34);
        boolean boolean36 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray34);
        boolean boolean37 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray34);
        int int38 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer26, charArray34);
        java.nio.CharBuffer charBuffer39 = java.nio.CharBuffer.wrap(charArray34);
        java.nio.CharBuffer charBuffer40 = java.nio.CharBuffer.wrap(charArray34);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray34, (int) 'x', 653000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(charBuffer40);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        boolean boolean3 = charset0.canEncode();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.util.concurrent.TimeoutException timeoutException1 = new java.util.concurrent.TimeoutException("{}");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.net.NetworkInterface networkInterface1 = java.net.NetworkInterface.getByName("java.nio.ByteBufferAsLongBufferRB[pos=1 lim=4 cap=4]");
        org.junit.Assert.assertNull(networkInterface1);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.util.Set<java.time.chrono.Chronology> chronologySet0 = java.time.chrono.Chronology.getAvailableChronologies();
        org.junit.Assert.assertNotNull(chronologySet0);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        int int5 = charBuffer1.arrayOffset();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime7.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean28 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime29.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        boolean boolean39 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean40 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDate localDate41 = localDateTime23.toLocalDate();
        java.time.LocalDate localDate42 = java.time.LocalDate.now();
        java.time.LocalDate localDate43 = java.time.LocalDate.MIN;
        boolean boolean44 = localDate42.isEqual((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean46 = localDate43.isSupported((java.time.temporal.TemporalField) chronoField45);
        int int47 = localDate43.getDayOfYear();
        int int48 = localDate41.compareTo((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.Clock clock55 = java.time.Clock.fixed(instant50, (java.time.ZoneId) zoneOffset53);
        java.time.LocalTime localTime56 = java.time.LocalTime.now(clock55);
        java.time.LocalTime localTime58 = localTime56.plusHours((long) 16384);
        java.time.LocalTime localTime60 = localTime56.minusNanos(0L);
        java.time.LocalDate localDate61 = java.time.LocalDate.now();
        java.time.LocalDate localDate62 = java.time.LocalDate.MIN;
        boolean boolean63 = localDate61.isEqual((java.time.chrono.ChronoLocalDate) localDate62);
        int int64 = localDate62.getYear();
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        java.time.temporal.Temporal temporal69 = localDate62.adjustInto((java.time.temporal.Temporal) localDateTime65);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.Clock clock74 = java.time.Clock.systemUTC();
        java.time.Instant instant75 = clock74.instant();
        java.time.ZoneId zoneId76 = clock74.getZone();
        java.time.ZonedDateTime zonedDateTime77 = java.time.ZonedDateTime.ofInstant(localDateTime65, zoneOffset72, zoneId76);
        java.time.OffsetDateTime offsetDateTime78 = java.time.OffsetDateTime.of(localDate43, localTime60, zoneOffset72);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.ofLocal(localDateTime0, (java.time.ZoneId) zoneOffset72, zoneOffset80);
        java.time.Clock clock82 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset80);
        java.time.ZoneId zoneId83 = clock82.getZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField45.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1999999998 + "'", int48 == 1999999998);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-999999999) + "'", int64 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(temporal69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(clock74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(zoneId76);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(clock82);
        org.junit.Assert.assertNotNull(zoneId83);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.time.Month month0 = java.time.Month.AUGUST;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.AUGUST + "'", month0.equals(java.time.Month.AUGUST));
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics8 = new java.util.DoubleSummaryStatistics();
        boolean boolean9 = uRI7.equals((java.lang.Object) doubleSummaryStatistics8);
        java.net.URI uRI11 = uRI7.resolve("Z");
        boolean boolean12 = uRI11.isOpaque();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertEquals(doubleSummaryStatistics8.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.function.LongPredicate longPredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = longStream1.filter(longPredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("5", "zh_TW");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh_TW");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            float float5 = byteBuffer3.getFloat(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        int int18 = instant15.getNano();
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime13.with((java.time.temporal.TemporalAdjuster) instant15);
        java.time.Duration duration20 = zoneRules7.getDaylightSavings(instant15);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap22 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.zone.ZoneRules zoneRules29 = zoneIdMap22.getOrDefault((java.lang.Object) 1.0d, zoneRules28);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset34);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap38 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.zone.ZoneRules zoneRules45 = zoneIdMap38.getOrDefault((java.lang.Object) 1.0d, zoneRules44);
        java.lang.String str46 = zoneRules44.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = zoneRules44.getTransitions();
        java.time.zone.ZoneRules zoneRules48 = zoneIdMap22.putIfAbsent((java.time.ZoneId) zoneOffset34, zoneRules44);
        java.lang.String str49 = zoneOffset34.toString();
        java.time.Clock clock50 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset34);
        java.time.ZonedDateTime zonedDateTime51 = instant15.atZone((java.time.ZoneId) zoneOffset34);
        java.time.zone.ZoneRules zoneRules52 = zoneOffset34.getRules();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str46, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList47);
        org.junit.Assert.assertNull(zoneRules48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Z" + "'", str49, "Z");
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(zoneRules52);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap24.put((java.time.ZoneId) zoneOffset26, zoneRules34);
        java.time.ZoneId[] zoneIdArray37 = new java.time.ZoneId[] { zoneOffset6, zoneId22, zoneOffset26 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet38 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet38, zoneIdArray37);
        java.lang.String[] strArray43 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray45 = org.apache.commons.lang3.StringUtils.stripAll(strArray43, "GBR");
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray45);
        boolean boolean47 = zoneIdSet38.remove((java.lang.Object) strArray45);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        strList54.add((int) (short) 0, "eng");
        boolean boolean59 = zoneIdSet38.removeAll((java.util.Collection<java.lang.String>) strList54);
        boolean boolean60 = strList54.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator61 = strList54.spliterator();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneIdArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Minute(null <no signer certificates>)" + "'", str46, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSpliterator61);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        java.net.NetworkInterface networkInterface1 = null;
        boolean boolean4 = inetAddress0.isReachable(networkInterface1, 676000000, (int) 'u');
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        doubleStream1.close();
        java.lang.Runnable runnable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = doubleStream1.onClose(runnable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.io.File file45 = new java.io.File("GBR");
        boolean boolean47 = file45.setWritable(true);
        boolean boolean49 = file45.setWritable(true);
        java.net.URI uRI50 = file45.toURI();
        java.io.File file52 = new java.io.File("GBR");
        boolean boolean54 = file52.setWritable(true);
        java.nio.file.Path path55 = file52.toPath();
        java.nio.file.Path path57 = path55.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI58 = path55.toUri();
        java.net.URI uRI59 = uRI50.relativize(uRI58);
        boolean boolean60 = strList13.equals((java.lang.Object) uRI50);
        java.lang.String str61 = uRI50.getFragment();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull("file45.getParent() == null", file45.getParent());
        org.junit.Assert.assertEquals(file45.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(uRI50);
        org.junit.Assert.assertNull("file52.getParent() == null", file52.getParent());
        org.junit.Assert.assertEquals(file52.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(path55);
        org.junit.Assert.assertNotNull(path57);
        org.junit.Assert.assertNotNull(uRI58);
        org.junit.Assert.assertNotNull(uRI59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean10 = localDate7.isSupported((java.time.temporal.TemporalField) chronoField9);
        int int11 = localDate7.getDayOfYear();
        java.time.LocalDate localDate12 = java.time.LocalDate.now();
        java.time.LocalDate localDate13 = java.time.LocalDate.MIN;
        boolean boolean14 = localDate12.isEqual((java.time.chrono.ChronoLocalDate) localDate13);
        int int15 = localDate13.getYear();
        java.lang.String str16 = localDate13.toString();
        java.time.chrono.ChronoPeriod chronoPeriod17 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate7, (java.time.chrono.ChronoLocalDate) localDate13);
        java.time.Period period18 = java.time.Period.from((java.time.temporal.TemporalAmount) chronoPeriod17);
        java.time.LocalDateTime localDateTime19 = localDateTime1.minus((java.time.temporal.TemporalAmount) chronoPeriod17);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit21 = chronoField20.getBaseUnit();
        java.time.Duration duration22 = temporalUnit21.getDuration();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronoPeriod17.get(temporalUnit21);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-999999999) + "'", int15 == (-999999999));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-999999999-01-01" + "'", str16, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField20.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit21 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit21.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(duration22);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.net.NetworkInterface networkInterface1 = java.net.NetworkInterface.getByName("MinuteG(null <no signer certificates>)G");
        org.junit.Assert.assertNull(networkInterface1);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.io.IOException iOException1 = new java.io.IOException("Minute");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.ShortBuffer shortBuffer11 = byteBuffer7.asShortBuffer();
        byte byte12 = byteBuffer7.get();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer15 = byteBuffer14.asLongBuffer();
        int int16 = byteBuffer7.compareTo(byteBuffer14);
        boolean boolean17 = byteBuffer7.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId13 = zonedDateTime11.getZone();
        int int14 = zonedDateTime11.getHour();
        int int15 = zonedDateTime11.getDayOfYear();
        int int16 = zonedDateTime11.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 365 + "'", int15 == 365);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer2.compact();
        java.nio.ShortBuffer shortBuffer5 = shortBuffer2.put((short) -1);
        short[] shortArray11 = new short[] { (byte) 100, (byte) 0, (short) 1, (short) 10, (byte) 10 };
        java.nio.ShortBuffer shortBuffer12 = java.nio.ShortBuffer.wrap(shortArray11);
        java.nio.ShortBuffer shortBuffer13 = java.nio.ShortBuffer.wrap(shortArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer16 = shortBuffer2.get(shortArray11, (int) '#', 437000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[100, 0, 1, 10, 10]");
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(shortBuffer13);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.Instant instant10 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant12 = instant10.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime13 = java.nio.file.attribute.FileTime.from(instant10);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery14 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period15 = instant10.query(periodTemporalQuery14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = instant10.isSupported(temporalUnit17);
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.ofInstant(instant20, (java.time.ZoneId) zoneOffset25);
        java.time.ZoneId zoneId29 = zonedDateTime28.getZone();
        java.time.Clock clock30 = java.time.Clock.fixed(instant10, zoneId29);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField31.getBaseUnit();
        java.time.Instant instant33 = instant10.truncatedTo(temporalUnit32);
        java.time.Duration duration34 = zoneRules7.getDaylightSavings(instant33);
        java.time.Duration duration35 = duration34.abs();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(periodTemporalQuery14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField31.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        int int6 = charBuffer1.compareTo(charBuffer4);
        int int7 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        long long5 = instant1.toEpochMilli();
        long long6 = instant1.toEpochMilli();
        java.time.Instant instant8 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant10 = instant8.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime11 = java.nio.file.attribute.FileTime.from(instant8);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery12 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period13 = instant8.query(periodTemporalQuery12);
        java.time.Period period14 = instant1.query(periodTemporalQuery12);
        java.time.Instant instant16 = java.time.Instant.ofEpochMilli((long) 834000000);
        int int17 = instant1.compareTo(instant16);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32000L + "'", long5 == 32000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32000L + "'", long6 == 32000L);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNotNull(periodTemporalQuery12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        int int6 = offsetDateTime5.getMinute();
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime5.plusNanos((long) 227000000);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.withSecond((int) (byte) 0);
        java.time.LocalDate localDate15 = offsetDateTime12.toLocalDate();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = offsetDateTime12.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.temporal.ValueRange valueRange19 = offsetDateTime8.range((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime20 = offsetDateTime8.toLocalTime();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        int int33 = zonedDateTime32.getDayOfMonth();
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.ZonedDateTime zonedDateTime45 = offsetDateTime37.atZoneSameInstant((java.time.ZoneId) zoneOffset42);
        java.time.ZonedDateTime zonedDateTime46 = zonedDateTime45.withLaterOffsetAtOverlap();
        boolean boolean47 = zonedDateTime32.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime46);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.UTC;
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime49 = zonedDateTime46.withZoneSameInstant((java.time.ZoneId) zoneOffset48);
        java.time.Clock clock50 = java.time.Clock.system((java.time.ZoneId) zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime8.withOffsetSameInstant(zoneOffset48);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.OffsetDateTime offsetDateTime57 = offsetDateTime55.withSecond((int) (byte) 0);
        java.time.LocalDate localDate58 = offsetDateTime55.toLocalDate();
        java.time.Month month59 = localDate58.getMonth();
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime63 = localDateTime60.atOffset(zoneOffset62);
        java.time.OffsetDateTime offsetDateTime65 = offsetDateTime63.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        java.time.zone.ZoneRules zoneRules70 = zoneOffset68.getRules();
        java.time.ZonedDateTime zonedDateTime71 = offsetDateTime63.atZoneSameInstant((java.time.ZoneId) zoneOffset68);
        int int72 = zonedDateTime71.getDayOfMonth();
        int int73 = zonedDateTime71.getHour();
        java.time.ZonedDateTime zonedDateTime75 = zonedDateTime71.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime79 = localDateTime76.atOffset(zoneOffset78);
        java.time.OffsetDateTime offsetDateTime81 = offsetDateTime79.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime85 = localDateTime82.atOffset(zoneOffset84);
        java.time.zone.ZoneRules zoneRules86 = zoneOffset84.getRules();
        java.time.ZonedDateTime zonedDateTime87 = offsetDateTime79.atZoneSameInstant((java.time.ZoneId) zoneOffset84);
        java.time.ZonedDateTime zonedDateTime88 = zonedDateTime87.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField89 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long90 = zonedDateTime87.getLong((java.time.temporal.TemporalField) chronoField89);
        long long91 = zonedDateTime75.getLong((java.time.temporal.TemporalField) chronoField89);
        boolean boolean92 = month59.isSupported((java.time.temporal.TemporalField) chronoField89);
        java.time.temporal.ValueRange valueRange93 = offsetDateTime8.range((java.time.temporal.TemporalField) chronoField89);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime49);
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + month59 + "' != '" + java.time.Month.DECEMBER + "'", month59.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(zoneRules70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 31 + "'", int72 == 31);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 23 + "'", int73 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(zoneRules86);
        org.junit.Assert.assertNotNull(zonedDateTime87);
        org.junit.Assert.assertNotNull(zonedDateTime88);
        org.junit.Assert.assertTrue("'" + chronoField89 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField89.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 999999999L + "'", long90 == 999999999L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 999999999L + "'", long91 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(valueRange93);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt6 = intStream5.spliterator();
        java.util.stream.IntStream.Builder builder7 = java.util.stream.IntStream.builder();
        boolean boolean8 = ofInt6.tryAdvance((java.util.function.IntConsumer) builder7);
        java.util.stream.IntStream intStream10 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt11 = intStream10.spliterator();
        java.util.stream.IntStream.Builder builder12 = java.util.stream.IntStream.builder();
        boolean boolean13 = ofInt11.tryAdvance((java.util.function.IntConsumer) builder12);
        ofInt6.forEachRemaining((java.util.function.IntConsumer) builder12);
        boolean boolean15 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder12);
        java.util.Spliterator.OfInt ofInt16 = ofInt2.trySplit();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(ofInt6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(ofInt11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(ofInt16);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.time.Period period3 = java.time.Period.of(653000000, 0, 1024);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.io.File file1 = new java.io.File("ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "ZoneRules[currentStandardOffset=Z]");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.util.Date date5 = java.util.Date.from(instant1);
        int int6 = date5.getDay();
        java.time.Instant instant7 = date5.toInstant();
        date5.setSeconds((-793999999));
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Nov 03 04:26:41 UTC 1944");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.split("1 - 53", "localhost");
        boolean boolean5 = org.apache.commons.lang3.StringUtils.startsWithAny("Eng", strArray4);
        boolean boolean6 = org.apache.commons.lang3.StringUtils.endsWithAny("java.security.cert.CertificateException: GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        boolean boolean12 = file8.setWritable(true);
        java.net.URI uRI13 = file8.toURI();
        java.net.URI uRI14 = uRI6.relativize(uRI13);
        int int15 = uRI14.getPort();
        java.lang.String str16 = uRI14.getPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.format.TextStyle textStyle2 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getISO3Language();
        java.time.format.DecimalStyle decimalStyle5 = java.time.format.DecimalStyle.of(locale3);
        java.lang.String str6 = chronology1.getDisplayName(textStyle2, locale3);
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology8 = dateTimeFormatter7.getChronology();
        java.time.format.TextStyle textStyle9 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getISO3Language();
        java.time.format.DecimalStyle decimalStyle12 = java.time.format.DecimalStyle.of(locale10);
        java.lang.String str13 = chronology8.getDisplayName(textStyle9, locale10);
        java.time.OffsetTime offsetTime14 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime16 = offsetTime14.withSecond(16);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int18 = offsetTime16.get((java.time.temporal.TemporalField) chronoField17);
        java.time.temporal.ValueRange valueRange19 = chronology8.range(chronoField17);
        java.time.Instant instant21 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.Clock clock26 = java.time.Clock.fixed(instant21, (java.time.ZoneId) zoneOffset24);
        java.time.chrono.ChronoLocalDate chronoLocalDate27 = chronology8.dateNow(clock26);
        int int28 = chronology1.compareTo(chronology8);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        int int41 = zonedDateTime40.getDayOfMonth();
        int int42 = zonedDateTime40.getHour();
        java.time.ZonedDateTime zonedDateTime44 = zonedDateTime40.minusDays((long) 385000000);
        java.time.chrono.Chronology chronology45 = zonedDateTime40.getChronology();
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime46 = chronology1.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + textStyle2 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle2.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + textStyle9 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle9.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(decimalStyle12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISO" + "'", str13, "ISO");
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField17.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(chronoLocalDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 23 + "'", int42 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime46);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.time.Instant instant0 = java.time.Instant.MAX;
        org.junit.Assert.assertNotNull(instant0);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.time.Month month1 = java.time.Month.OCTOBER;
        java.time.Month month3 = month1.plus(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.of(277998031, month3, (-1000002021), 70, (int) 'M');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): -1000002021");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.OCTOBER + "'", month3.equals(java.time.Month.OCTOBER));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.plusDays((long) 31);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.Clock clock30 = java.time.Clock.fixed(instant25, (java.time.ZoneId) zoneOffset28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset35);
        java.time.Clock clock38 = clock30.withZone((java.time.ZoneId) zoneOffset35);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime21.withOffsetSameInstant(zoneOffset35);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        java.time.temporal.ValueRange valueRange42 = offsetDateTime39.range((java.time.temporal.TemporalField) chronoField40);
        boolean boolean44 = valueRange42.isValidValue((long) '4');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.net.SocketException socketException1 = new java.net.SocketException("\\u0023");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        strItor5.add("");
        strItor5.add("x-windows-iso2022jp");
        boolean boolean10 = strItor5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            strItor5.set("United Kingdom");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.nio.charset.CoderResult coderResult1 = java.nio.charset.CoderResult.malformedForLength(3);
        org.junit.Assert.assertNotNull(coderResult1);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.from((java.time.temporal.TemporalAccessor) zonedDateTime11);
        java.time.Instant instant17 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant19 = instant17.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime20 = java.nio.file.attribute.FileTime.from(instant17);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery21 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period22 = instant17.query(periodTemporalQuery21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit24 = chronoField23.getBaseUnit();
        boolean boolean25 = instant17.isSupported(temporalUnit24);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime26 = zonedDateTime11.plus((long) 399000000, temporalUnit24);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1007646974");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(fileTime20);
        org.junit.Assert.assertNotNull(periodTemporalQuery21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField23.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit24 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit24.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.LongBuffer longBuffer5 = longBuffer2.asReadOnlyBuffer();
        java.nio.LongBuffer longBuffer6 = longBuffer5.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = longBuffer6.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        boolean boolean1 = coderResult0.isMalformed();
        java.lang.String str2 = coderResult0.toString();
        boolean boolean3 = coderResult0.isMalformed();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OVERFLOW" + "'", str2, "OVERFLOW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer18.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer25 = byteBuffer24.asDoubleBuffer();
        int int26 = doubleBuffer19.compareTo(doubleBuffer25);
        int int27 = doubleBuffer25.remaining();
        java.nio.DoubleBuffer doubleBuffer28 = doubleBuffer11.put(doubleBuffer25);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = doubleBuffer25.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(doubleBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer28);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.ZonedDateTime zonedDateTime13 = offsetDateTime5.atZoneSameInstant((java.time.ZoneId) zoneOffset10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime13.withLaterOffsetAtOverlap();
        java.time.Period period16 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period17 = java.time.Period.from((java.time.temporal.TemporalAmount) period16);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str19 = dateTimeFormatter18.toString();
        boolean boolean20 = period17.equals((java.lang.Object) dateTimeFormatter18);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime21 = zonedDateTime14.plus((java.time.temporal.TemporalAmount) period17);
        boolean boolean22 = duration1.equals((java.lang.Object) period17);
        java.time.Duration duration24 = duration1.minusDays((long) 0);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = temporalUnit27.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration29 = duration24.plus((long) '#', temporalUnit27);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str19, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime46.withSecond((int) (byte) 0);
        java.time.LocalDate localDate49 = offsetDateTime46.toLocalDate();
        boolean boolean50 = localDate37.isBefore((java.time.chrono.ChronoLocalDate) localDate49);
        boolean boolean51 = localDate49.isLeapYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant7 = instant5.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime8 = java.nio.file.attribute.FileTime.from(instant5);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = instant5.query(periodTemporalQuery9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit12 = chronoField11.getBaseUnit();
        boolean boolean13 = instant5.isSupported(temporalUnit12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusNanos((long) (short) 100);
        boolean boolean22 = temporalUnit12.isSupportedBy((java.time.temporal.Temporal) localDateTime15);
        boolean boolean23 = temporalUnit12.isTimeBased();
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = localDate1.plus((long) 495000000, temporalUnit12);
        java.time.LocalDate localDate25 = java.time.LocalDate.now();
        java.time.LocalDate localDate26 = java.time.LocalDate.MIN;
        boolean boolean27 = localDate25.isEqual((java.time.chrono.ChronoLocalDate) localDate26);
        int int28 = localDate26.getYear();
        java.time.LocalDate localDate29 = java.time.LocalDate.now();
        java.time.LocalDate localDate30 = java.time.LocalDate.MIN;
        boolean boolean31 = localDate29.isEqual((java.time.chrono.ChronoLocalDate) localDate30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.withSecond((int) (byte) 0);
        java.time.LocalDate localDate38 = offsetDateTime35.toLocalDate();
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean40 = offsetDateTime35.isSupported((java.time.temporal.TemporalField) chronoField39);
        boolean boolean41 = localDate29.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.Period period42 = java.time.Period.between(localDate26, localDate29);
        int int43 = localDate1.compareTo((java.time.chrono.ChronoLocalDate) localDate29);
        java.time.temporal.TemporalAdjuster temporalAdjuster44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate45 = localDate29.with(temporalAdjuster44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField11.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit12 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit12.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-999999999) + "'", int28 == (-999999999));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField39.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1000002021) + "'", int43 == (-1000002021));
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.ZonedDateTime zonedDateTime11 = zonedDateTime9.plusHours((long) 43200);
        int int12 = zonedDateTime11.getSecond();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.lang.String str35 = localDateTime6.toString();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate37 = localDateTime36.toLocalDate();
        java.time.LocalDateTime localDateTime39 = localDateTime36.plusWeeks(0L);
        int int40 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime42 = localDateTime39.minusHours((long) 999999999);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.Period period45 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period46 = period45.normalized();
        long long47 = period45.toTotalMonths();
        java.time.Period period49 = period45.minusMonths((long) 256);
        java.time.LocalDateTime localDateTime50 = localDateTime43.plus((java.time.temporal.TemporalAmount) period45);
        java.time.Duration duration51 = java.time.Duration.between((java.time.temporal.Temporal) localDateTime42, (java.time.temporal.Temporal) localDateTime50);
        java.time.Duration duration53 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration56 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList57 = duration56.getUnits();
        java.time.Duration duration58 = duration53.minus(duration56);
        boolean boolean59 = duration53.isNegative();
        java.time.Duration duration61 = duration53.minusMinutes((long) (byte) 100);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime62 = localDateTime50.plus((java.time.temporal.TemporalAmount) duration61);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(temporalUnitList57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime62);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = doubleStream2.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics4 = new java.util.DoubleSummaryStatistics();
        double double5 = doubleSummaryStatistics4.getSum();
        double double6 = doubleSummaryStatistics4.getMin();
        // The following exception was thrown during execution in test generation
        try {
            doubleStream1.forEach((java.util.function.DoubleConsumer) doubleSummaryStatistics4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertEquals(doubleSummaryStatistics4.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", "Minute(null <no signer certificates>)", "MicroOfSecond");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str3, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        short[] shortArray5 = new short[] { (byte) 100, (byte) 0, (short) 1, (short) 10, (byte) 10 };
        java.nio.ShortBuffer shortBuffer6 = java.nio.ShortBuffer.wrap(shortArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer9 = java.nio.ShortBuffer.wrap(shortArray5, 316000000, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[100, 0, 1, 10, 10]");
        org.junit.Assert.assertNotNull(shortBuffer6);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.MAX;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime2 = offsetDateTime0.withMinute(812000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 812000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetTime offsetTime6 = offsetDateTime5.toOffsetTime();
        java.time.OffsetTime offsetTime8 = offsetTime6.minusNanos((long) '4');
        java.time.OffsetTime offsetTime9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = offsetTime8.isEqual(offsetTime9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(offsetTime8);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange4 = java.time.temporal.ValueRange.of((long) 495000000, 0L, (long) (-7), (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Smallest minimum value must be less than largest minimum value");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("lo", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        int int6 = charBuffer1.compareTo(charBuffer4);
        int int7 = charBuffer4.length();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer9 = charBuffer4.append('a');
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileLock fileLock17 = fileChannel11.lock((-7981810L), (long) 'x', false);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        java.util.stream.Stream<java.lang.Integer> intStream4 = intStream2.skip(10L);
        long long5 = intStream4.count();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Integer> intStream7 = intStream4.skip(364740218880L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.lang.String str11 = uRL7.toString();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom2786365200371196127aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom2786365200371196127aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str11, "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        int int32 = zonedDateTime31.getMinute();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.zone.ZoneRules zoneRules43 = zoneOffset41.getRules();
        java.time.ZonedDateTime zonedDateTime44 = offsetDateTime36.atZoneSameInstant((java.time.ZoneId) zoneOffset41);
        java.time.ZoneId zoneId45 = zonedDateTime44.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime46 = zonedDateTime44.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime50.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.zone.ZoneRules zoneRules57 = zoneOffset55.getRules();
        java.time.ZonedDateTime zonedDateTime58 = offsetDateTime50.atZoneSameInstant((java.time.ZoneId) zoneOffset55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime58.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long61 = zonedDateTime58.getLong((java.time.temporal.TemporalField) chronoField60);
        long long62 = zonedDateTime44.getLong((java.time.temporal.TemporalField) chronoField60);
        java.time.ZonedDateTime zonedDateTime64 = zonedDateTime44.minusSeconds((long) 999999999);
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime64.plusHours((-1L));
        boolean boolean67 = zonedDateTime31.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime66);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 13 + "'", int32 == 13);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 999999999L + "'", long61 == 999999999L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 999999999L + "'", long62 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalTime localTime8 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime10 = localTime8.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime11 = localDate1.atTime(localTime8);
        java.time.LocalTime localTime13 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int14 = localTime8.compareTo(localTime13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.Duration duration17 = duration15.minusDays((long) (-1));
        java.time.LocalTime localTime18 = localTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime20 = localTime18.plusMinutes(100L);
        java.time.Duration duration23 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int24 = duration23.getNano();
        java.time.Duration duration26 = duration23.minusNanos((-1L));
        java.time.Duration duration28 = duration26.minusMillis(11L);
        java.time.LocalTime localTime29 = localTime20.minus((java.time.temporal.TemporalAmount) duration28);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.skip((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.concat(doubleStream0, doubleStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.time.Clock clock0 = java.time.Clock.systemDefaultZone();
        org.junit.Assert.assertNotNull(clock0);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        long long3 = doubleStream2.count();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = doubleStream2.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str1 = inetAddress0.getHostName();
        java.net.NetworkInterface networkInterface2 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.lang.String str3 = inetAddress0.getHostAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "localhost" + "'", str1, "localhost");
        org.junit.Assert.assertNotNull(networkInterface2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "127.0.0.1" + "'", str3, "127.0.0.1");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.security.KeyException keyException1 = new java.security.KeyException();
        java.security.SignatureException signatureException2 = new java.security.SignatureException((java.lang.Throwable) keyException1);
        java.util.concurrent.ExecutionException executionException3 = new java.util.concurrent.ExecutionException((java.lang.Throwable) keyException1);
        java.security.GeneralSecurityException generalSecurityException4 = new java.security.GeneralSecurityException("java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]", (java.lang.Throwable) keyException1);
        java.security.cert.CertificateEncodingException certificateEncodingException5 = new java.security.cert.CertificateEncodingException((java.lang.Throwable) keyException1);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfLong ofLong5 = longStream0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        boolean boolean13 = fileChannel11.isOpen();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer17 = charBuffer16.flip();
        int int18 = charBuffer16.capacity();
        boolean boolean19 = charBuffer16.hasArray();
        java.nio.ByteBuffer byteBuffer20 = charset14.encode(charBuffer16);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = fileChannel11.read(byteBuffer20);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteBuffer20);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.ZonedDateTime zonedDateTime18 = offsetDateTime10.atZoneSameInstant((java.time.ZoneId) zoneOffset15);
        java.time.ZoneId zoneId19 = zonedDateTime18.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime20 = zonedDateTime18.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime32.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long35 = zonedDateTime32.getLong((java.time.temporal.TemporalField) chronoField34);
        long long36 = zonedDateTime18.getLong((java.time.temporal.TemporalField) chronoField34);
        java.time.Duration duration38 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration41 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList42 = duration41.getUnits();
        java.time.Duration duration43 = duration38.minus(duration41);
        int int44 = duration38.getNano();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime45 = zonedDateTime18.minus((java.time.temporal.TemporalAmount) duration38);
        java.time.temporal.Temporal temporal46 = zoneOffset4.adjustInto((java.time.temporal.Temporal) zonedDateTime18);
        java.security.ProtectionDomain[] protectionDomainArray47 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext48 = new java.security.AccessControlContext(protectionDomainArray47);
        java.time.LocalDate localDate49 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery50 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period51 = localDate49.query(periodTemporalQuery50);
        boolean boolean52 = accessControlContext48.equals((java.lang.Object) periodTemporalQuery50);
        java.time.Period period53 = zonedDateTime18.query(periodTemporalQuery50);
        java.lang.String str54 = period53.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField34.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 999999999L + "'", long35 == 999999999L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 999999999L + "'", long36 == 999999999L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(temporalUnitList42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime45);
        org.junit.Assert.assertNotNull(temporal46);
        org.junit.Assert.assertNotNull(protectionDomainArray47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(periodTemporalQuery50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "P0D" + "'", str54, "P0D");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        long long16 = zonedDateTime15.toEpochSecond();
        java.time.Duration duration18 = java.time.Duration.ofSeconds((long) (short) 1);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime19 = zonedDateTime15.minus((java.time.temporal.TemporalAmount) duration18);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 31556889832175999L + "'", long16 == 31556889832175999L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime19);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        char char20 = byteBuffer15.getChar(0);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = fileChannel11.read(byteBuffer15);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\000' + "'", char20 == '\000');
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        int int6 = strItor5.previousIndex();
        // The following exception was thrown during execution in test generation
        try {
            strItor5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        int int9 = localDate7.getYear();
        java.lang.String str10 = localDate7.toString();
        java.time.chrono.ChronoPeriod chronoPeriod11 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        java.time.Period period12 = java.time.Period.from((java.time.temporal.TemporalAmount) chronoPeriod11);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        int int25 = zonedDateTime24.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime24.withDayOfYear(10);
        int int28 = zonedDateTime27.getNano();
        java.time.temporal.Temporal temporal29 = period12.subtractFrom((java.time.temporal.Temporal) zonedDateTime27);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer32 = byteBuffer31.asLongBuffer();
        java.nio.LongBuffer longBuffer34 = longBuffer32.put(0L);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer37 = byteBuffer36.asLongBuffer();
        float float39 = byteBuffer36.getFloat(4);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer36.putChar('\r');
        java.nio.LongBuffer longBuffer42 = byteBuffer41.asLongBuffer();
        java.nio.LongBuffer longBuffer43 = longBuffer32.put(longBuffer42);
        boolean boolean44 = zonedDateTime27.equals((java.lang.Object) longBuffer32);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-999999999) + "'", int9 == (-999999999));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-999999999-01-01" + "'", str10, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999999999 + "'", int28 == 999999999);
        org.junit.Assert.assertNotNull(temporal29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(longBuffer32);
        org.junit.Assert.assertNotNull(longBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(longBuffer37);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(longBuffer42);
        org.junit.Assert.assertNotNull(longBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList41.replaceAll(strUnaryOperator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.ZoneId zoneId10 = zonedDateTime9.getZone();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime11 = zonedDateTime9.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime13 = zonedDateTime9.withMinute((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime11);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble2 = doubleStream1.min();
        boolean boolean3 = optionalDouble2.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder4 = optionalDoubleBuilder0.add(optionalDouble2);
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.distinct();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.parallel();
        java.util.OptionalDouble optionalDouble8 = doubleStream7.average();
        optionalDoubleBuilder0.accept(optionalDouble8);
        java.util.stream.Stream<java.util.OptionalDouble> optionalDoubleStream10 = optionalDoubleBuilder0.build();
        java.util.stream.DoubleStream doubleStream11 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream12 = doubleStream11.distinct();
        java.util.stream.DoubleStream doubleStream13 = doubleStream12.parallel();
        java.util.OptionalDouble optionalDouble14 = doubleStream12.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            optionalDoubleBuilder0.accept(optionalDouble14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(optionalDoubleBuilder0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder4);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble8);
        org.junit.Assert.assertNotNull(optionalDoubleStream10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(optionalDouble14);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        java.lang.String str12 = intBuffer11.toString();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = intBuffer11.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]" + "'", str12, "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]");
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        java.util.Spliterator.OfDouble ofDouble4 = ofDouble3.trySplit();
        long long5 = ofDouble3.getExactSizeIfKnown();
        int int6 = ofDouble3.characteristics();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertNull(ofDouble4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        java.lang.Object obj14 = null;
        boolean boolean15 = zoneIdMap1.equals(obj14);
        int int16 = zoneIdMap1.size();
        java.lang.Object obj17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = zoneIdMap1.containsValue(obj17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        int int2 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer4 = byteBuffer3.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.compact();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(doubleBuffer4);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        java.time.Duration duration45 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList46 = duration45.getUnits();
        java.time.Duration duration48 = duration45.plusDays((-1L));
        java.time.Duration duration50 = duration45.withSeconds(0L);
        java.time.Duration duration51 = duration50.abs();
        java.time.OffsetTime offsetTime52 = offsetTime42.plus((java.time.temporal.TemporalAmount) duration51);
        java.time.Duration duration54 = java.time.Duration.ofMillis((long) 399000000);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.OffsetDateTime offsetDateTime60 = offsetDateTime58.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.zone.ZoneRules zoneRules65 = zoneOffset63.getRules();
        java.time.ZonedDateTime zonedDateTime66 = offsetDateTime58.atZoneSameInstant((java.time.ZoneId) zoneOffset63);
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime66.withLaterOffsetAtOverlap();
        java.time.Period period69 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period70 = java.time.Period.from((java.time.temporal.TemporalAmount) period69);
        java.time.format.DateTimeFormatter dateTimeFormatter71 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str72 = dateTimeFormatter71.toString();
        boolean boolean73 = period70.equals((java.lang.Object) dateTimeFormatter71);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime74 = zonedDateTime67.plus((java.time.temporal.TemporalAmount) period70);
        boolean boolean75 = duration54.equals((java.lang.Object) period70);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime76 = offsetTime52.minus((java.time.temporal.TemporalAmount) period70);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Days");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(temporalUnitList46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(zoneRules65);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str72, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.time.Instant instant6 = date5.toInstant();
        java.time.Month month7 = java.time.Month.JANUARY;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant8 = instant6.with((java.time.temporal.TemporalAdjuster) month7);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MonthOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.JANUARY + "'", month7.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration4 = duration2.abs();
        java.time.Duration duration5 = duration4.abs();
        java.time.Duration duration7 = duration5.dividedBy((long) 533000000);
        long long8 = duration5.toMinutes();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        int int36 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        boolean boolean42 = localDateTime21.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.temporal.Temporal temporal43 = localDateTime15.adjustInto((java.time.temporal.Temporal) localDateTime21);
        java.lang.String str44 = localDateTime15.toString();
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate46 = localDateTime45.toLocalDate();
        java.time.LocalDateTime localDateTime48 = localDateTime45.plusWeeks(0L);
        int int49 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.temporal.Temporal temporal50 = duration5.subtractFrom((java.time.temporal.Temporal) localDateTime15);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(temporal43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str44, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(temporal50);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = zoneRules7.getTransitions();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str35 = localDateTime28.format(dateTimeFormatter34);
        java.time.ZoneOffset zoneOffset36 = zoneRules7.getOffset(localDateTime28);
        java.time.LocalDateTime localDateTime38 = localDateTime28.minusMinutes(13L);
        java.time.Instant instant40 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.Clock clock45 = java.time.Clock.fixed(instant40, (java.time.ZoneId) zoneOffset43);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset50);
        java.time.Clock clock53 = clock45.withZone((java.time.ZoneId) zoneOffset50);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime54 = localDateTime28.atZone((java.time.ZoneId) zoneOffset50);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.from((java.time.temporal.TemporalAccessor) localDateTime28);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZoneOffset from TemporalAccessor: +999999999-12-31T23:59:59.999999999 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(clock45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(clock53);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime54);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        java.util.stream.IntStream intStream10 = charBuffer9.chars();
        boolean boolean11 = charBuffer9.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer14 = charBuffer9.put(997000000, 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean10 = localDate7.isSupported((java.time.temporal.TemporalField) chronoField9);
        int int11 = localDate7.getDayOfYear();
        java.time.LocalDate localDate12 = java.time.LocalDate.now();
        java.time.LocalDate localDate13 = java.time.LocalDate.MIN;
        boolean boolean14 = localDate12.isEqual((java.time.chrono.ChronoLocalDate) localDate13);
        int int15 = localDate13.getYear();
        java.lang.String str16 = localDate13.toString();
        java.time.chrono.ChronoPeriod chronoPeriod17 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate7, (java.time.chrono.ChronoLocalDate) localDate13);
        java.time.Period period18 = java.time.Period.from((java.time.temporal.TemporalAmount) chronoPeriod17);
        java.time.LocalDateTime localDateTime19 = localDateTime1.minus((java.time.temporal.TemporalAmount) chronoPeriod17);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes((long) 812000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000001543");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-999999999) + "'", int15 == (-999999999));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-999999999-01-01" + "'", str16, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("23:59:59.999999999");
        java.lang.String[] strArray6 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray8 = org.apache.commons.lang3.StringUtils.stripAll(strArray6, "GBR");
        java.lang.String str12 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray6, 'a', 31, 31);
        java.lang.String str13 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = org.apache.commons.lang3.StringUtils.replaceEach("US-ASCII", strArray2, strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Search and Replace array lengths don't match: 7 vs 3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Minute(null <no signer certificates>)" + "'", str13, "Minute(null <no signer certificates>)");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        boolean boolean50 = valueRange48.isValidValue((long) 1);
        boolean boolean51 = valueRange48.isIntValue();
        java.lang.String str52 = valueRange48.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1 - 53" + "'", str52, "1 - 53");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.parse((java.lang.CharSequence) "Chinese");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Chinese' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("java.security.cert.CertificateException: GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("/experiment/GBR/", "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset4);
        java.time.Month month8 = java.time.Month.OCTOBER;
        java.time.Month month10 = month8.plus(0L);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.temporal.Temporal temporal22 = month10.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDate localDate23 = localDateTime12.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal24 = zoneOffset4.adjustInto((java.time.temporal.Temporal) localDate23);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.OCTOBER + "'", month8.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month10 + "' != '" + java.time.Month.OCTOBER + "'", month10.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(temporal22);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.allocate((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny("lo", "+999999999-12-31");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month1 = java.time.Month.OCTOBER;
        java.time.Month month3 = month1.plus(0L);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        int int9 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.temporal.Temporal temporal15 = month3.adjustInto((java.time.temporal.Temporal) localDateTime5);
        boolean boolean16 = strSet0.equals((java.lang.Object) month3);
        int int17 = month3.getValue();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime18 = java.time.chrono.ChronoLocalDateTime.from((java.time.temporal.TemporalAccessor) month3);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: OCTOBER of type java.time.Month");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.OCTOBER + "'", month3.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(temporal15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        boolean boolean8 = duration6.equals((java.lang.Object) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime5.plus((java.time.temporal.TemporalAmount) duration6);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.zone.ZoneRules zoneRules18 = zoneIdMap11.getOrDefault((java.lang.Object) 1.0d, zoneRules17);
        java.lang.String str19 = zoneRules17.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = zoneRules17.getTransitions();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        int int42 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime22.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str45 = localDateTime38.format(dateTimeFormatter44);
        java.time.ZoneOffset zoneOffset46 = zoneRules17.getOffset(localDateTime38);
        java.time.LocalDateTime localDateTime48 = localDateTime38.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit51 = chronoField50.getBaseUnit();
        boolean boolean52 = temporalUnit51.isTimeBased();
        java.time.LocalDateTime localDateTime53 = localDateTime38.minus((long) 829000000, temporalUnit51);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = duration6.get(temporalUnit51);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str19, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str45, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField50.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit51 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit51.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        boolean boolean1 = coderResult0.isMalformed();
        boolean boolean2 = coderResult0.isUnmappable();
        boolean boolean3 = coderResult0.isUnderflow();
        boolean boolean4 = coderResult0.isOverflow();
        boolean boolean5 = coderResult0.isUnderflow();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        int int2 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer4 = byteBuffer3.asDoubleBuffer();
        int int5 = byteBuffer3.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = fileChannel13.read(byteBuffer18);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Integer> wildcardComparator4 = intSpliterator3.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.net.URI uRI0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file1 = new java.io.File(uRI0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.io.File file1 = new java.io.File("GBR");
        java.io.File file3 = new java.io.File(file1, "5");
        boolean boolean4 = file1.mkdirs();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertEquals(file3.getParent(), "GBR");
        org.junit.Assert.assertEquals(file3.toString(), "GBR/5");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.ShortBuffer shortBuffer11 = byteBuffer7.asShortBuffer();
        byte byte12 = byteBuffer7.get();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer15 = byteBuffer14.asLongBuffer();
        float float17 = byteBuffer14.getFloat(4);
        double double19 = byteBuffer14.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder20 = null;
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.order(byteOrder20);
        java.nio.ByteOrder byteOrder22 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer23 = byteBuffer14.order(byteOrder22);
        java.nio.IntBuffer intBuffer24 = byteBuffer23.asIntBuffer();
        java.net.InetAddress inetAddress26 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str27 = inetAddress26.getHostName();
        byte[] byteArray28 = inetAddress26.getAddress();
        java.net.InetAddress inetAddress29 = java.net.InetAddress.getByAddress("zh_CN", byteArray28);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer23.get(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer7.put(byteArray28, 5, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertNotNull(inetAddress26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "localhost" + "'", str27, "localhost");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress29);
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        float float6 = floatBuffer3.get();
        float[] floatArray9 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.ByteOrder byteOrder11 = floatBuffer10.order();
        int int12 = floatBuffer3.compareTo(floatBuffer10);
        java.nio.FloatBuffer floatBuffer13 = floatBuffer3.compact();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[21.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 16.0f + "'", float6 == 16.0f);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(byteOrder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(floatBuffer13);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        java.util.stream.LongStream longStream5 = longStream4.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream7 = longStream5.skip((long) 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.util.Comparator<java.time.chrono.ChronoLocalDateTime<?>> wildcardChronoLocalDateTimeComparator0 = java.time.chrono.ChronoLocalDateTime.timeLineOrder();
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTimeComparator0);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.String[] strArray3 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray5 = org.apache.commons.lang3.StringUtils.stripAll(strArray3, "GBR");
        java.lang.String[] strArray7 = org.apache.commons.lang3.StringUtils.stripAll(strArray5, "hi!");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        java.util.function.LongUnaryOperator longUnaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream2.map(longUnaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit9 = chronoField8.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime6.minus((long) (-999999999), temporalUnit9);
        java.time.DayOfWeek dayOfWeek11 = localDateTime6.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField8.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit9 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit9.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertTrue("'" + dayOfWeek11 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek11.equals(java.time.DayOfWeek.THURSDAY));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.Month month7 = localDate6.getMonth();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = offsetDateTime11.atZoneSameInstant((java.time.ZoneId) zoneOffset16);
        int int20 = zonedDateTime19.getDayOfMonth();
        int int21 = zonedDateTime19.getHour();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime19.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.ZonedDateTime zonedDateTime35 = offsetDateTime27.atZoneSameInstant((java.time.ZoneId) zoneOffset32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime35.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long38 = zonedDateTime35.getLong((java.time.temporal.TemporalField) chronoField37);
        long long39 = zonedDateTime23.getLong((java.time.temporal.TemporalField) chronoField37);
        boolean boolean40 = month7.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = chronoField37.getDisplayName(locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: locale");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.DECEMBER + "'", month7.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField37.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 999999999L + "'", long38 == 999999999L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 999999999L + "'", long39 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        int int6 = offsetDateTime5.getMinute();
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime5.plusNanos((long) 227000000);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.withSecond((int) (byte) 0);
        java.time.LocalDate localDate15 = offsetDateTime12.toLocalDate();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = offsetDateTime12.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.temporal.ValueRange valueRange19 = offsetDateTime8.range((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime20 = offsetDateTime8.toLocalTime();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        int int33 = zonedDateTime32.getDayOfMonth();
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.ZonedDateTime zonedDateTime45 = offsetDateTime37.atZoneSameInstant((java.time.ZoneId) zoneOffset42);
        java.time.ZonedDateTime zonedDateTime46 = zonedDateTime45.withLaterOffsetAtOverlap();
        boolean boolean47 = zonedDateTime32.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime46);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.UTC;
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime49 = zonedDateTime46.withZoneSameInstant((java.time.ZoneId) zoneOffset48);
        java.time.Clock clock50 = java.time.Clock.system((java.time.ZoneId) zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime8.withOffsetSameInstant(zoneOffset48);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime53 = offsetDateTime51.plusHours(43200000000000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 5928232612");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime49);
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        boolean boolean8 = file1.setReadable(false);
        java.net.InetAddress inetAddress9 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str10 = inetAddress9.getHostName();
        java.net.NetworkInterface networkInterface11 = java.net.NetworkInterface.getByInetAddress(inetAddress9);
        boolean boolean12 = inetAddress9.isSiteLocalAddress();
        boolean boolean13 = file1.equals((java.lang.Object) boolean12);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(inetAddress9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "localhost" + "'", str10, "localhost");
        org.junit.Assert.assertNotNull(networkInterface11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.io.InputStream inputStream11 = uRL7.openStream();
        boolean boolean12 = inputStream11.markSupported();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.wrap(byteArray14);
        int int16 = inputStream11.read(byteArray14);
        int int17 = inputStream11.available();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom4342739798316721820aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom4342739798316721820aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom470591027155160712aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom470591027155160712aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.plusHours((long) 16384);
        java.time.LocalTime localTime3 = java.time.LocalTime.now();
        int int4 = localTime3.getNano();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long6 = localTime3.getLong((java.time.temporal.TemporalField) chronoField5);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal8 = localTime2.with((java.time.temporal.TemporalField) chronoField5, (long) 829000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 829000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 154000000 + "'", int4 == 154000000);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField5.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 15L + "'", long6 == 15L);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1, (byte) 1, (byte) 10 };
        java.nio.ByteBuffer byteBuffer14 = byteBuffer6.put(byteArray13);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.wrap(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = byteBuffer15.getLong();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.security.AccessControlException accessControlException3 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException4 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException3);
        java.util.concurrent.ExecutionException executionException5 = new java.util.concurrent.ExecutionException("", (java.lang.Throwable) signatureException4);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.OptionalLong optionalLong1 = longStream0.max();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream3 = longStream0.skip((long) 413000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(optionalLong1);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.min();
        java.util.function.LongSupplier longSupplier4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = optionalLong3.orElseGet(longSupplier4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.rangeClosed((int) '4', 997000000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = java.util.stream.IntStream.concat(intStream1, intStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.lang.String str3 = optionalInt2.toString();
        int int4 = optionalInt2.getAsInt();
        int int5 = optionalInt2.getAsInt();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalInt[10]" + "'", str3, "OptionalInt[10]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.range((int) (byte) 0, 10000);
        java.util.stream.IntStream intStream4 = intStream2.skip(6603384152749567654L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfInt ofInt5 = intStream2.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("United Kingdom", (double) 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=29.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.UTC;
        java.time.ZoneId[] zoneIdArray9 = new java.time.ZoneId[] { zoneOffset4, zoneOffset8 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet10 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet10, zoneIdArray9);
        java.util.Spliterator<java.time.ZoneId> zoneIdSpliterator12 = zoneIdSet10.spliterator();
        java.util.Spliterator<java.time.ZoneId> zoneIdSpliterator13 = zoneIdSet10.spliterator();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneIdArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(zoneIdSpliterator12);
        org.junit.Assert.assertNotNull(zoneIdSpliterator13);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.minusWeeks((long) 0);
        java.time.chrono.Chronology chronology8 = localDateTime1.getChronology();
        java.time.OffsetTime offsetTime9 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime11 = offsetTime9.withSecond(16);
        java.time.OffsetTime offsetTime12 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime14 = offsetTime12.withSecond(16);
        java.time.Instant instant16 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant18 = instant16.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime19 = java.nio.file.attribute.FileTime.from(instant16);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery20 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period21 = instant16.query(periodTemporalQuery20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField22.getBaseUnit();
        boolean boolean24 = instant16.isSupported(temporalUnit23);
        boolean boolean25 = offsetTime12.isSupported(temporalUnit23);
        java.time.Instant instant27 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant29 = instant27.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime30 = java.nio.file.attribute.FileTime.from(instant27);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = instant27.query(periodTemporalQuery31);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit34 = chronoField33.getBaseUnit();
        boolean boolean35 = instant27.isSupported(temporalUnit34);
        java.time.Instant instant37 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant39 = instant37.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.ZonedDateTime zonedDateTime45 = java.time.ZonedDateTime.ofInstant(instant37, (java.time.ZoneId) zoneOffset42);
        java.time.ZoneId zoneId46 = zonedDateTime45.getZone();
        java.time.Clock clock47 = java.time.Clock.fixed(instant27, zoneId46);
        boolean boolean48 = offsetTime12.equals((java.lang.Object) zoneId46);
        int int49 = offsetTime9.compareTo(offsetTime12);
        java.time.OffsetTime offsetTime51 = offsetTime9.plusNanos((long) '\n');
        java.time.Duration duration54 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList55 = duration54.getUnits();
        java.time.Duration duration57 = duration54.plusDays((-1L));
        java.time.Duration duration59 = duration54.withSeconds(0L);
        java.time.Duration duration60 = duration59.abs();
        java.time.OffsetTime offsetTime61 = offsetTime51.plus((java.time.temporal.TemporalAmount) duration60);
        java.time.OffsetTime offsetTime63 = offsetTime51.minusHours((long) 33237);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoLocalDateTime64 = chronology8.localDateTime((java.time.temporal.TemporalAccessor) offsetTime63);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 12:15:12.376000010Z of type java.time.OffsetTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(offsetTime12);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(periodTemporalQuery20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField22.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(fileTime30);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField33.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit34 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit34.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(zoneId46);
        org.junit.Assert.assertNotNull(clock47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(offsetTime51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(temporalUnitList55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(offsetTime61);
        org.junit.Assert.assertNotNull(offsetTime63);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet1 = strMap0.entrySet();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strEntrySet1);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        boolean boolean1 = java.nio.charset.Charset.isSupported("zho");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        int int2 = charBuffer1.length();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray15);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "23:59:59.999999999", charArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer25 = charBuffer1.get(charArray15, (int) (short) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        boolean boolean1 = coderResult0.isMalformed();
        boolean boolean2 = coderResult0.isUnmappable();
        boolean boolean3 = coderResult0.isUnderflow();
        boolean boolean4 = coderResult0.isOverflow();
        boolean boolean5 = coderResult0.isUnmappable();
        boolean boolean6 = coderResult0.isOverflow();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiAlpha('G');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("09:14:52.125Z", "127.0.0.1", (int) '0');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        long long19 = fileChannel18.position();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate(33237);
        java.nio.ByteOrder byteOrder22 = byteBuffer21.order();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = fileChannel18.write(byteBuffer21);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteOrder22);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        char[] charArray21 = new char[] { 'a', '#', '4', '#' };
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsAny("", charArray21);
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray21);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray21);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap26 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap26.getOrDefault((java.lang.Object) 1.0d, zoneRules32);
        java.lang.String str34 = zoneRules32.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = zoneRules32.getTransitions();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap1.getOrDefault((java.lang.Object) charArray21, zoneRules32);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond(0L, (int) '\r', zoneOffset40);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition42 = zoneRules36.getTransition(localDateTime41);
        java.time.temporal.TemporalField temporalField43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange44 = localDateTime41.range(temporalField43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str34, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNull(zoneOffsetTransition42);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        long long3 = doubleStream2.count();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = doubleStream2.limit((long) 125000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("file", "", "zonerules[currentstandardoffset=z]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "file" + "'", str3, "file");
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("java.security.cert.CertificateEncodingException", "ZoneRules[currentStandardOffset=Z]", "java.security.cert.CertificateException: GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", (int) '\uffff');
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.security.cert.CertificateEncodingException" + "'", str4, "java.security.cert.CertificateEncodingException");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        boolean boolean8 = file1.setWritable(false, false);
        boolean boolean10 = file1.setWritable(false);
        boolean boolean11 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Long> longStream4 = longStream2.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        boolean boolean5 = path4.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.Duration duration31 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration34 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList35 = duration34.getUnits();
        java.time.Duration duration36 = duration31.minus(duration34);
        int int37 = duration31.getNano();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime38 = zonedDateTime11.minus((java.time.temporal.TemporalAmount) duration31);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.zone.ZoneRules zoneRules49 = zoneOffset47.getRules();
        java.time.ZonedDateTime zonedDateTime50 = offsetDateTime42.atZoneSameInstant((java.time.ZoneId) zoneOffset47);
        int int51 = zonedDateTime50.getDayOfMonth();
        int int52 = zonedDateTime50.getHour();
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime50.minusDays((long) 385000000);
        boolean boolean55 = localDateChronoZonedDateTime38.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime50);
        java.time.ZoneOffset zoneOffset56 = zonedDateTime50.getOffset();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(temporalUnitList35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(zoneOffset56);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        boolean boolean6 = doubleBuffer5.isDirect();
        java.nio.DoubleBuffer doubleBuffer7 = doubleBuffer5.compact();
        double[] doubleArray8 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer11 = doubleBuffer5.put(doubleArray8, 32, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime11.withFixedOffsetZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime30);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = charBuffer1.hasArray();
        int int5 = charBuffer1.position();
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean10 = localDate7.isSupported((java.time.temporal.TemporalField) chronoField9);
        int int11 = localDate7.getDayOfYear();
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str13 = localDate7.format(dateTimeFormatter12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate14 = java.time.LocalDate.parse((java.lang.CharSequence) charBuffer1, dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-999999999-01-01" + "'", str13, "-999999999-01-01");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str24 = localDateTime17.format(dateTimeFormatter23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.time.chrono.Chronology chronology27 = java.time.chrono.Chronology.ofLocale(locale25);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime31.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.zone.ZoneRules zoneRules38 = zoneOffset36.getRules();
        java.time.ZonedDateTime zonedDateTime39 = offsetDateTime31.atZoneSameInstant((java.time.ZoneId) zoneOffset36);
        java.time.ZoneId zoneId40 = zonedDateTime39.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime41 = zonedDateTime39.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.zone.ZoneRules zoneRules52 = zoneOffset50.getRules();
        java.time.ZonedDateTime zonedDateTime53 = offsetDateTime45.atZoneSameInstant((java.time.ZoneId) zoneOffset50);
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime53.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long56 = zonedDateTime53.getLong((java.time.temporal.TemporalField) chronoField55);
        long long57 = zonedDateTime39.getLong((java.time.temporal.TemporalField) chronoField55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime39.minusSeconds((long) 999999999);
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime60 = chronology27.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime59);
        boolean boolean62 = chronology27.isLeapYear((long) 'G');
        java.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter23.withChronology(chronology27);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.OffsetDateTime offsetDateTime69 = offsetDateTime67.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.zone.ZoneRules zoneRules74 = zoneOffset72.getRules();
        java.time.ZonedDateTime zonedDateTime75 = offsetDateTime67.atZoneSameInstant((java.time.ZoneId) zoneOffset72);
        int int76 = zonedDateTime75.getDayOfMonth();
        int int77 = zonedDateTime75.getHour();
        java.time.ZonedDateTime zonedDateTime79 = zonedDateTime75.minusDays((long) 385000000);
        java.time.chrono.Chronology chronology80 = zonedDateTime75.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter23.withChronology(chronology80);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str24, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(zoneRules38);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(zoneRules52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 999999999L + "'", long56 == 999999999L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 999999999L + "'", long57 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(zoneRules74);
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 23 + "'", int77 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.wrap(charArray11);
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.wrap(charArray11);
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period19 = java.time.Period.parse((java.lang.CharSequence) charBuffer18);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text cannot be parsed to a Period");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        java.lang.String str6 = localDateTime5.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+999999998-12-31T23:59:59.999999999" + "'", str6, "+999999998-12-31T23:59:59.999999999");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetTime offsetTime6 = offsetDateTime5.toOffsetTime();
        java.time.OffsetTime offsetTime8 = offsetTime6.minusNanos((long) '4');
        java.time.OffsetTime offsetTime9 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime11 = offsetTime9.withSecond(16);
        java.time.OffsetTime offsetTime13 = offsetTime11.plusNanos(1434414441700000L);
        boolean boolean14 = offsetTime6.isEqual(offsetTime11);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap2 = strMap0.tailMap("/experiment/GBR");
        java.lang.String str3 = strMap2.lastKey();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap6 = strMap2.subMap("Z", "/experiment/GBR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "x-windows-iso2022jp" + "'", str3, "x-windows-iso2022jp");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Iterator<java.lang.String> strItor14 = strList11.iterator();
        boolean boolean15 = strItor14.hasNext();
        java.lang.String str16 = strItor14.next();
        java.lang.String str18 = org.apache.commons.lang3.StringUtils.join(strItor14, 'x');
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!x(null <no signer certificates>)x(null <no signer certificates>)xMinutexMinutex(null <no signer certificates>)" + "'", str18, "hi!x(null <no signer certificates>)x(null <no signer certificates>)xMinutexMinutex(null <no signer certificates>)");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.function.LongConsumer longConsumer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream0.peek(longConsumer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.lang.String[] strArray1 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray8 = org.apache.commons.lang3.StringUtils.stripAll(strArray6, "GBR");
        boolean boolean9 = org.apache.commons.lang3.StringUtils.startsWithAny("\u7f8e\u56fd", strArray8);
        java.lang.String str10 = org.apache.commons.lang3.StringUtils.replaceEach("", strArray1, strArray8);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        int int9 = localDate7.getYear();
        java.lang.String str10 = localDate7.toString();
        java.time.chrono.ChronoPeriod chronoPeriod11 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        int int12 = localDate7.getYear();
        java.time.chrono.Era era13 = localDate7.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-999999999) + "'", int9 == (-999999999));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-999999999-01-01" + "'", str10, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-999999999) + "'", int12 == (-999999999));
        org.junit.Assert.assertTrue("'" + era13 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era13.equals(java.time.chrono.IsoEra.BCE));
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer14 = byteBuffer13.asLongBuffer();
        float float16 = byteBuffer13.getFloat(4);
        double double18 = byteBuffer13.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder19 = null;
        java.nio.ByteBuffer byteBuffer20 = byteBuffer13.order(byteOrder19);
        java.nio.ByteOrder byteOrder21 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer22 = byteBuffer13.order(byteOrder21);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int[] intArray30 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer31 = intBuffer23.get(intArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer34 = intBuffer11.put(intArray30, 32, 16384);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteOrder21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer31);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CodingErrorAction codingErrorAction8 = charsetEncoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder9 = charsetEncoder7.reset();
        float float10 = charsetEncoder9.maxBytesPerChar();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 1.0f + "'", float10 == 1.0f);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) 15, (long) 999999998);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        boolean boolean3 = intStream1.isParallel();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant52 = instant50.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime53 = java.nio.file.attribute.FileTime.from(instant50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = instant50.query(periodTemporalQuery54);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        boolean boolean58 = instant50.isSupported(temporalUnit57);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant62 = instant60.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.zone.ZoneRules zoneRules67 = zoneOffset65.getRules();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(instant60, (java.time.ZoneId) zoneOffset65);
        java.time.ZoneId zoneId69 = zonedDateTime68.getZone();
        java.time.Clock clock70 = java.time.Clock.fixed(instant50, zoneId69);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime14.with((java.time.temporal.TemporalAdjuster) instant50);
        java.time.chrono.Chronology chronology72 = zonedDateTime14.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.Period period14 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period15 = java.time.Period.from((java.time.temporal.TemporalAmount) period14);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str17 = dateTimeFormatter16.toString();
        boolean boolean18 = period15.equals((java.lang.Object) dateTimeFormatter16);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime19 = zonedDateTime12.plus((java.time.temporal.TemporalAmount) period15);
        java.lang.String str20 = period15.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str17, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "P-7D" + "'", str20, "P-7D");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.Clock clock13 = java.time.Clock.systemUTC();
        java.time.Instant instant14 = clock13.instant();
        java.time.ZoneId zoneId15 = clock13.getZone();
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.ofInstant(localDateTime4, zoneOffset11, zoneId15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.Month month21 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime34 = localDateTime28.withHour(4);
        int int35 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDate localDate36 = localDateTime17.toLocalDate();
        java.time.format.FormatStyle formatStyle37 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle37);
        java.lang.String str39 = localDateTime17.format(dateTimeFormatter38);
        java.time.LocalDate localDate40 = java.time.LocalDate.now();
        java.time.LocalDate localDate41 = java.time.LocalDate.MIN;
        boolean boolean42 = localDate40.isEqual((java.time.chrono.ChronoLocalDate) localDate41);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.OffsetDateTime offsetDateTime49 = offsetDateTime47.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime47.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset57);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit62 = chronoField61.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime63 = localDateTime59.minus((long) (-999999999), temporalUnit62);
        java.lang.String str64 = temporalUnit62.toString();
        java.time.OffsetDateTime offsetDateTime65 = offsetDateTime51.plus((long) (byte) 100, temporalUnit62);
        java.time.LocalDate localDate66 = localDate40.minus((long) (-1), temporalUnit62);
        java.time.LocalDate localDate67 = java.time.LocalDate.now();
        java.time.LocalDate localDate68 = java.time.LocalDate.MIN;
        boolean boolean69 = localDate67.isEqual((java.time.chrono.ChronoLocalDate) localDate68);
        java.time.chrono.ChronoPeriod chronoPeriod70 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate66, (java.time.chrono.ChronoLocalDate) localDate67);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime71 = localDateTime17.with((java.time.temporal.TemporalAdjuster) localDate66);
        java.time.Instant instant73 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant75 = instant73.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime79 = localDateTime76.atOffset(zoneOffset78);
        java.time.zone.ZoneRules zoneRules80 = zoneOffset78.getRules();
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.ofInstant(instant73, (java.time.ZoneId) zoneOffset78);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap83 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap87 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime89 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset91 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime92 = localDateTime89.atOffset(zoneOffset91);
        java.time.zone.ZoneRules zoneRules93 = zoneOffset91.getRules();
        java.time.zone.ZoneRules zoneRules94 = zoneIdMap87.getOrDefault((java.lang.Object) 1.0d, zoneRules93);
        java.time.zone.ZoneRules zoneRules95 = zoneIdMap83.put((java.time.ZoneId) zoneOffset85, zoneRules93);
        java.time.ZonedDateTime zonedDateTime96 = zonedDateTime81.withZoneSameLocal((java.time.ZoneId) zoneOffset85);
        long long97 = localDateTime17.toEpochSecond(zoneOffset85);
        int int98 = zoneOffset11.compareTo(zoneOffset85);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + month21 + "' != '" + java.time.Month.DECEMBER + "'", month21.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + formatStyle37 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle37.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e0b\u5348\u65f6\u5206\u79d2" + "'", str39, "\u4e0b\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField61.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit62 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit62.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Weeks" + "'", str64, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronoPeriod70);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(zoneOffset91);
        org.junit.Assert.assertNotNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(zoneRules93);
        org.junit.Assert.assertNotNull(zoneRules94);
        org.junit.Assert.assertNull(zoneRules95);
        org.junit.Assert.assertNotNull(zonedDateTime96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 31556889832780799L + "'", long97 == 31556889832780799L);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("PT10S");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT10S" + "'", str1, "PT10S");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.min();
        java.util.function.LongPredicate longPredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = longStream2.noneMatch(longPredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((long) (-7));
        java.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(364740218880L);
        int int5 = localDateTime2.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 13 + "'", int5 == 13);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.util.OptionalInt optionalInt1 = java.util.OptionalInt.of(10000);
        org.junit.Assert.assertNotNull(optionalInt1);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList41.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList47 = strList41.subList(33237, 316000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 316000000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSpliterator44);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.plusYears((long) 33237);
        java.io.File file7 = new java.io.File("GBR");
        boolean boolean9 = file7.setWritable(true);
        boolean boolean11 = file7.setWritable(true);
        java.lang.String str12 = file7.getPath();
        long long13 = file7.length();
        java.io.File file14 = file7.getAbsoluteFile();
        boolean boolean15 = period5.equals((java.lang.Object) file14);
        boolean boolean18 = file14.setWritable(false, false);
        java.nio.file.Path path19 = file14.toPath();
        java.util.Spliterator<java.nio.file.Path> pathSpliterator20 = path19.spliterator();
        java.lang.String str21 = path19.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GBR" + "'", str12, "GBR");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4096L + "'", long13 == 4096L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(path19);
        org.junit.Assert.assertNotNull(pathSpliterator20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/experiment/GBR" + "'", str21, "/experiment/GBR");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        java.nio.file.Path path7 = file1.toPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertNotNull(path7);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.util.stream.IntStream intStream0 = java.util.stream.IntStream.empty();
        org.junit.Assert.assertNotNull(intStream0);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.println(false);
        java.time.LocalDate localDate4 = java.time.LocalDate.now();
        java.time.LocalDate localDate5 = java.time.LocalDate.MIN;
        boolean boolean6 = localDate4.isEqual((java.time.chrono.ChronoLocalDate) localDate5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.withSecond((int) (byte) 0);
        java.time.LocalDate localDate13 = offsetDateTime10.toLocalDate();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean15 = offsetDateTime10.isSupported((java.time.temporal.TemporalField) chronoField14);
        boolean boolean16 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalDate localDate18 = localDate4.minusMonths(32L);
        printWriter1.println((java.lang.Object) localDate4);
        printWriter1.print(false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField14.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        boolean boolean9 = byteBuffer8.isDirect();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.asReadOnlyBuffer();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap12 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.zone.ZoneRules zoneRules19 = zoneIdMap12.getOrDefault((java.lang.Object) 1.0d, zoneRules18);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration20 = zoneIdMap12.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration21 = zoneIdMap12.keys();
        java.time.Instant instant23 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant25 = instant23.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.zone.ZoneRules zoneRules30 = zoneOffset28.getRules();
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.ofInstant(instant23, (java.time.ZoneId) zoneOffset28);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.ZonedDateTime zonedDateTime43 = offsetDateTime35.atZoneSameInstant((java.time.ZoneId) zoneOffset40);
        java.time.ZoneId zoneId44 = zonedDateTime43.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap46 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap50 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.zone.ZoneRules zoneRules57 = zoneIdMap50.getOrDefault((java.lang.Object) 1.0d, zoneRules56);
        java.time.zone.ZoneRules zoneRules58 = zoneIdMap46.put((java.time.ZoneId) zoneOffset48, zoneRules56);
        java.time.ZoneId[] zoneIdArray59 = new java.time.ZoneId[] { zoneOffset28, zoneId44, zoneOffset48 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet60 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet60, zoneIdArray59);
        java.lang.String[] strArray65 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray67 = org.apache.commons.lang3.StringUtils.stripAll(strArray65, "GBR");
        java.lang.String str68 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray67);
        boolean boolean69 = zoneIdSet60.remove((java.lang.Object) strArray67);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        strList76.add((int) (short) 0, "eng");
        boolean boolean81 = zoneIdSet60.removeAll((java.util.Collection<java.lang.String>) strList76);
        boolean boolean82 = strList76.isEmpty();
        java.net.InetAddress inetAddress83 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean84 = inetAddress83.isMCLinkLocal();
        byte[] byteArray85 = inetAddress83.getAddress();
        boolean boolean86 = zoneIdMap12.remove((java.lang.Object) boolean82, (java.lang.Object) inetAddress83);
        java.net.NetworkInterface networkInterface87 = java.net.NetworkInterface.getByInetAddress(inetAddress83);
        boolean boolean88 = inetAddress83.isMulticastAddress();
        boolean boolean89 = inetAddress83.isLinkLocalAddress();
        byte[] byteArray90 = inetAddress83.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer93 = byteBuffer8.get(byteArray90, 43200, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zoneIdEnumeration20);
        org.junit.Assert.assertNotNull(zoneIdEnumeration21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertNull(zoneRules58);
        org.junit.Assert.assertNotNull(zoneIdArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Minute(null <no signer certificates>)" + "'", str68, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(inetAddress83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(networkInterface87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[127, 0, 0, 1]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.OffsetTime offsetTime1 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime3 = offsetTime1.withSecond(16);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int5 = offsetTime3.get((java.time.temporal.TemporalField) chronoField4);
        java.time.temporal.ValueRange valueRange6 = isoChronology0.range(chronoField4);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate9 = isoChronology0.dateYearDay((int) '\uffff', (int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 65535");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(offsetTime1);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
        org.junit.Assert.assertNotNull(valueRange6);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.plusHours((long) 21);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime11 = offsetDateTime7.withMonth(4096);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 4096");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("1 - 53", "OptionalDouble.empty");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1 - 53" + "'", str2, "1 - 53");
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.LocalTime localTime11 = localTime7.minusNanos(0L);
        java.time.LocalTime localTime13 = localTime11.withNano(4096);
        java.time.OffsetTime offsetTime14 = java.time.OffsetTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long29 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField28);
        int int30 = offsetTime14.get((java.time.temporal.TemporalField) chronoField28);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime32 = localTime11.with((java.time.temporal.TemporalField) chronoField28, (-1439L));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for NanoOfSecond (valid values 0 - 999999999): -1439");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField28.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 999999999 + "'", int30 == 999999999);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        float float9 = byteBuffer6.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer6.putChar('\r');
        java.nio.LongBuffer longBuffer12 = byteBuffer11.asLongBuffer();
        java.nio.LongBuffer longBuffer13 = longBuffer2.put(longBuffer12);
        java.lang.String str14 = longBuffer2.toString();
        long[] longArray20 = new long[] { 10000, 11L, 413000000, 781000000, 533000000 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer21 = longBuffer2.put(longArray20);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str14, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[10000, 11, 413000000, 781000000, 533000000]");
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 'a');
        java.time.Duration duration3 = duration1.minusMinutes((long) (short) 100);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.net.URL uRL11 = null;
        java.security.CodeSigner[] codeSignerArray12 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource13 = new java.security.CodeSource(uRL11, codeSignerArray12);
        boolean boolean15 = codeSource13.equals((java.lang.Object) 4);
        java.lang.String str16 = codeSource13.toString();
        java.lang.String str17 = codeSource13.toString();
        java.net.URL uRL18 = null;
        java.security.CodeSigner[] codeSignerArray19 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource20 = new java.security.CodeSource(uRL18, codeSignerArray19);
        boolean boolean22 = codeSource20.equals((java.lang.Object) 4);
        java.lang.String str23 = codeSource20.toString();
        java.lang.String str24 = codeSource20.toString();
        boolean boolean25 = codeSource13.implies(codeSource20);
        java.security.CodeSigner[] codeSignerArray26 = codeSource13.getCodeSigners();
        java.security.CodeSource codeSource27 = new java.security.CodeSource(uRL7, codeSignerArray26);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom8725519028580097971aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom8725519028580097971aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom843218603156105631aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom843218603156105631aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(codeSignerArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(null <no signer certificates>)" + "'", str16, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(null <no signer certificates>)" + "'", str17, "(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(codeSignerArray19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(null <no signer certificates>)" + "'", str23, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(null <no signer certificates>)" + "'", str24, "(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(codeSignerArray26);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.lang.String[] strArray4 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray6 = org.apache.commons.lang3.StringUtils.stripAll(strArray4, "GBR");
        boolean boolean7 = org.apache.commons.lang3.StringUtils.startsWithAny("\u7f8e\u56fd", strArray6);
        java.lang.String[] strArray8 = org.apache.commons.lang3.StringUtils.stripAll(strArray6);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.OffsetDateTime offsetDateTime8 = localDate1.atTime(offsetTime7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        boolean boolean31 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        boolean boolean42 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDate localDate44 = localDateTime26.toLocalDate();
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean49 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField48);
        int int50 = localDate46.getDayOfYear();
        int int51 = localDate44.compareTo((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.Period period52 = localDate1.until((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime56.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.OffsetDateTime offsetDateTime64 = offsetDateTime62.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        java.time.zone.ZoneRules zoneRules69 = zoneOffset67.getRules();
        java.time.ZonedDateTime zonedDateTime70 = offsetDateTime62.atZoneSameInstant((java.time.ZoneId) zoneOffset67);
        int int71 = zonedDateTime70.getDayOfMonth();
        int int72 = zonedDateTime70.getHour();
        java.time.ZonedDateTime zonedDateTime74 = zonedDateTime70.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime78 = localDateTime75.atOffset(zoneOffset77);
        java.time.OffsetDateTime offsetDateTime80 = offsetDateTime78.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime84 = localDateTime81.atOffset(zoneOffset83);
        java.time.zone.ZoneRules zoneRules85 = zoneOffset83.getRules();
        java.time.ZonedDateTime zonedDateTime86 = offsetDateTime78.atZoneSameInstant((java.time.ZoneId) zoneOffset83);
        java.time.ZonedDateTime zonedDateTime87 = zonedDateTime86.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField88 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long89 = zonedDateTime86.getLong((java.time.temporal.TemporalField) chronoField88);
        long long90 = zonedDateTime74.getLong((java.time.temporal.TemporalField) chronoField88);
        boolean boolean91 = offsetDateTime56.isSupported((java.time.temporal.TemporalField) chronoField88);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime56.minusYears((long) 41);
        java.time.temporal.Temporal temporal94 = localDate1.adjustInto((java.time.temporal.Temporal) offsetDateTime56);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1999999998 + "'", int51 == 1999999998);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(zoneRules69);
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 31 + "'", int71 == 31);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 23 + "'", int72 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(zonedDateTime87);
        org.junit.Assert.assertTrue("'" + chronoField88 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField88.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 999999999L + "'", long89 == 999999999L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 999999999L + "'", long90 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(temporal94);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = strItor5.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble3 = doubleStream2.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI7 = new java.net.URI("\\u0061", "Chinese", "127.0.0.1", (-793999999), "JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(INPUT_METHOD_SEGMENT)", "/", "");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: \\u0061://Chinese@127.0.0.1:-793999999JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(INPUT_METHOD_SEGMENT)?/#");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        java.lang.String str12 = intBuffer11.toString();
        java.nio.IntBuffer intBuffer14 = intBuffer11.put(722000000);
        java.nio.ByteOrder byteOrder15 = intBuffer14.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]" + "'", str12, "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]");
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertNotNull(byteOrder15);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfDouble ofDouble5 = doubleStream2.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 15);
        java.time.Duration duration3 = duration1.minusHours((long) 'u');
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale locale2 = java.util.Locale.US;
        java.util.Locale.Builder builder3 = builder1.setLocale(locale2);
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.lowerCase("x-windows-iso2022jp", locale2);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-windows-iso2022jp" + "'", str4, "x-windows-iso2022jp");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        boolean boolean13 = fileChannel11.isOpen();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = fileChannel11.size();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.stream.LongStream longStream4 = longStream3.sorted();
        java.util.function.LongUnaryOperator longUnaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = longStream4.map(longUnaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        boolean boolean13 = fileChannel11.isOpen();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = fileChannel11.size();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        boolean boolean8 = file1.setWritable(false, false);
        boolean boolean10 = file1.setWritable(false);
        java.lang.String str11 = file1.getPath();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        char[] charArray19 = new char[] { 'a', '#', '4', '#' };
        boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny("", charArray19);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray19);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray19);
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer11, charArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer26 = byteBuffer25.asLongBuffer();
        java.nio.charset.CoderResult coderResult28 = charsetEncoder7.encode(charBuffer11, byteBuffer25, false);
        boolean boolean29 = coderResult28.isUnmappable();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertNotNull(coderResult28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            builder0.accept((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt13 = intStream12.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = ofInt13.trySplit();
        java.util.stream.IntStream.Builder builder15 = java.util.stream.IntStream.builder();
        ofInt13.forEachRemaining((java.util.function.IntConsumer) builder15);
        java.util.function.IntConsumer intConsumer17 = builder8.andThen((java.util.function.IntConsumer) builder15);
        builder8.accept(29);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(ofInt13);
        org.junit.Assert.assertNull(intSpliterator14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(intConsumer17);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.io.File file45 = new java.io.File("GBR");
        boolean boolean47 = file45.setWritable(true);
        boolean boolean49 = file45.setWritable(true);
        java.net.URI uRI50 = file45.toURI();
        java.io.File file52 = new java.io.File("GBR");
        boolean boolean54 = file52.setWritable(true);
        java.nio.file.Path path55 = file52.toPath();
        java.nio.file.Path path57 = path55.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI58 = path55.toUri();
        java.net.URI uRI59 = uRI50.relativize(uRI58);
        boolean boolean60 = strList13.equals((java.lang.Object) uRI50);
        strList13.clear();
        strList13.clear();
        java.lang.Object[] objArray63 = strList13.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull("file45.getParent() == null", file45.getParent());
        org.junit.Assert.assertEquals(file45.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(uRI50);
        org.junit.Assert.assertNull("file52.getParent() == null", file52.getParent());
        org.junit.Assert.assertEquals(file52.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(path55);
        org.junit.Assert.assertNotNull(path57);
        org.junit.Assert.assertNotNull(uRI58);
        org.junit.Assert.assertNotNull(uRI59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDateTime localDateTime36 = localDateTime6.withYear((-999999999));
        java.time.LocalDateTime localDateTime38 = localDateTime6.minusDays((long) 2);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime41 = localDateTime39.plusDays((long) (-7));
        java.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(364740218880L);
        boolean boolean44 = localDateTime38.equals((java.lang.Object) 364740218880L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(33237);
        java.nio.ByteOrder byteOrder2 = byteBuffer1.order();
        float float4 = byteBuffer1.getFloat(64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteOrder2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.util.stream.Collector.Characteristics characteristics0 = java.util.stream.Collector.Characteristics.UNORDERED;
        java.util.function.UnaryOperator<java.util.stream.Collector.Characteristics> characteristicsUnaryOperator1 = java.util.function.UnaryOperator.identity();
        java.util.stream.Stream<java.util.stream.Collector.Characteristics> characteristicsStream2 = java.util.stream.Stream.iterate(characteristics0, characteristicsUnaryOperator1);
        org.junit.Assert.assertTrue("'" + characteristics0 + "' != '" + java.util.stream.Collector.Characteristics.UNORDERED + "'", characteristics0.equals(java.util.stream.Collector.Characteristics.UNORDERED));
        org.junit.Assert.assertNotNull(characteristicsUnaryOperator1);
        org.junit.Assert.assertNotNull(characteristicsStream2);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("+999999999-12-31T00:00:00.000031Z", "Minute(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+999999999-12-31T00:00:00.000031Z" + "'", str2, "+999999999-12-31T00:00:00.000031Z");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        java.time.Duration duration8 = duration6.minusDays((long) 'a');
        java.time.Duration duration10 = duration6.plusMillis(0L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        java.nio.channels.FileChannel fileChannel20 = fileChannel18.position((long) '\uffff');
        byte[] byteArray22 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.wrap(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = fileChannel18.read(byteBuffer23);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertNotNull(fileChannel20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer23);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.lang.CharSequence charSequence0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = java.time.LocalDate.parse(charSequence0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: text");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalTime localTime36 = localDateTime17.toLocalTime();
        java.time.LocalTime localTime37 = localDateTime17.toLocalTime();
        java.time.LocalTime localTime39 = localTime37.plusHours((long) (-793999999));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.OptionalDouble optionalDouble3 = doubleStream1.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream4 = doubleStream1.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.time.LocalDate localDate0 = java.time.LocalDate.MAX;
        java.time.chrono.ChronoLocalDate chronoLocalDate1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoPeriod chronoPeriod2 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate0, chronoLocalDate1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: endDateExclusive");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.lang.Object[] objArray14 = strList13.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.LongBuffer longBuffer5 = longBuffer2.asReadOnlyBuffer();
        java.nio.LongBuffer longBuffer6 = longBuffer5.asReadOnlyBuffer();
        java.lang.String str7 = longBuffer6.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer8 = longBuffer6.compact();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.nio.ByteBufferAsLongBufferRB[pos=1 lim=4 cap=4]" + "'", str7, "java.nio.ByteBufferAsLongBufferRB[pos=1 lim=4 cap=4]");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getSum();
        double double2 = doubleSummaryStatistics0.getMin();
        double double3 = doubleSummaryStatistics0.getMax();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics4 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics4.accept((double) 0);
        doubleSummaryStatistics0.combine(doubleSummaryStatistics4);
        doubleSummaryStatistics0.accept((double) 68618241259163000L);
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=2, sum=68618241259163000.000000, min=0.000000, average=34309120629581500.000000, max=68618241259163000.000000}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.NEGATIVE_INFINITY + "'", double3 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertEquals(doubleSummaryStatistics4.toString(), "DoubleSummaryStatistics{count=1, sum=0.000000, min=0.000000, average=0.000000, max=0.000000}");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("ZoneRules[currentStandardOffset=Z]", "", "OptionalInt[10]", (int) '-');
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str4, "ZoneRules[currentStandardOffset=Z]");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = java.time.Period.from((java.time.temporal.TemporalAmount) period1);
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str4 = dateTimeFormatter3.toString();
        boolean boolean5 = period2.equals((java.lang.Object) dateTimeFormatter3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.plusNanos((long) (-7));
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime18 = java.nio.file.attribute.FileTime.from(instant15);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = instant15.query(periodTemporalQuery19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        boolean boolean23 = instant15.isSupported(temporalUnit22);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant27 = instant25.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.ofInstant(instant25, (java.time.ZoneId) zoneOffset30);
        java.time.ZoneId zoneId34 = zonedDateTime33.getZone();
        java.time.Clock clock35 = java.time.Clock.fixed(instant15, zoneId34);
        java.time.ZonedDateTime zonedDateTime36 = offsetDateTime11.atZoneSimilarLocal(zoneId34);
        java.time.temporal.Temporal temporal37 = period2.addTo((java.time.temporal.Temporal) zonedDateTime36);
        java.time.Period period39 = java.time.Period.ofMonths(10);
        java.time.chrono.ChronoPeriod chronoPeriod40 = period2.minus((java.time.temporal.TemporalAmount) period39);
        java.time.chrono.ChronoPeriod chronoPeriod41 = chronoPeriod40.normalized();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str4, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(fileTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(clock35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(chronoPeriod40);
        org.junit.Assert.assertNotNull(chronoPeriod41);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.io.InputStream inputStream11 = uRL7.openStream();
        java.lang.String str12 = uRL7.toString();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom7569197347332971933aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom7569197347332971933aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str12, "file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int4 = zoneOffset3.getTotalSeconds();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = offsetDateTime9.atZoneSameInstant((java.time.ZoneId) zoneOffset14);
        int int18 = zonedDateTime17.getDayOfMonth();
        int int19 = zonedDateTime17.getHour();
        java.time.Instant instant20 = zonedDateTime17.toInstant();
        java.time.temporal.Temporal temporal21 = zoneOffset3.adjustInto((java.time.temporal.Temporal) zonedDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime23 = zonedDateTime17.plusMinutes((long) 33237);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(temporal21);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        java.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange5 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap12 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.zone.ZoneRules zoneRules19 = zoneIdMap12.getOrDefault((java.lang.Object) 1.0d, zoneRules18);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset24);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.lang.String str36 = zoneRules34.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = zoneRules34.getTransitions();
        java.time.zone.ZoneRules zoneRules38 = zoneIdMap12.putIfAbsent((java.time.ZoneId) zoneOffset24, zoneRules34);
        java.lang.String str39 = zoneOffset24.toString();
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.ofInstant(localDateTime1, zoneOffset8, (java.time.ZoneId) zoneOffset24);
        java.time.ZoneId zoneId41 = zonedDateTime40.getZone();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime42 = zonedDateTime40.toLocalDateTime();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str36, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList37);
        org.junit.Assert.assertNull(zoneRules38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Z" + "'", str39, "Z");
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zoneId41);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime42);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime44.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime49 = offsetDateTime44.with((java.time.temporal.TemporalField) chronoField47, (long) 31);
        int int50 = offsetDateTime49.getMinute();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset55);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit60 = chronoField59.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime61 = localDateTime57.minus((long) (-999999999), temporalUnit60);
        java.lang.String str62 = temporalUnit60.toString();
        boolean boolean63 = offsetDateTime49.isSupported(temporalUnit60);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime64 = offsetTime3.truncatedTo(temporalUnit60);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField59.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit60 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit60.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Weeks" + "'", str62, "Weeks");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer9 = java.nio.DoubleBuffer.wrap(doubleArray5, 653000000, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, (-999999999), (int) 'a', 0, 31, 4);
        date6.setSeconds((int) '\r');
        org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 05 00:31:13 UTC 83331334");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = chronoField0.getDisplayName(locale1);
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) (short) 10, (long) (byte) 0);
        boolean boolean7 = chronoField0.isSupportedBy((java.time.temporal.TemporalAccessor) instant6);
        java.time.LocalTime localTime8 = java.time.LocalTime.NOON;
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate11 = localDateTime10.toLocalDate();
        java.time.LocalDateTime localDateTime13 = localDateTime10.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange14 = chronoField9.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime10);
        int int15 = localTime8.get((java.time.temporal.TemporalField) chronoField9);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = instant6.get((java.time.temporal.TemporalField) chronoField9);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfAmPm");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField0.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GBR" + "'", str2, "GBR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Minute" + "'", str3, "Minute");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField9.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(valueRange14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.chrono.Chronology chronology20 = localDateTime0.getChronology();
        java.time.LocalDateTime localDateTime22 = localDateTime0.minusNanos((long) 29);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("23:59:59.999999999", 5, '+');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "23:59:59.999999999" + "'", str3, "23:59:59.999999999");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.net.FileNameMap fileNameMap0 = java.net.URLConnection.getFileNameMap();
        java.lang.String str2 = fileNameMap0.getContentTypeFor("java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(fileNameMap0);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.time.Instant instant0 = java.time.Instant.MIN;
        org.junit.Assert.assertNotNull(instant0);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        boolean boolean9 = path4.startsWith("/experiment/GBR/");
        java.io.File file11 = new java.io.File("GBR");
        boolean boolean13 = file11.setWritable(true);
        java.nio.file.Path path14 = file11.toPath();
        java.nio.file.Path path16 = path14.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption17 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption18 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray19 = new java.nio.file.LinkOption[] { linkOption17, linkOption18 };
        java.nio.file.Path path20 = path14.toRealPath(linkOptionArray19);
        java.nio.file.Path path21 = path4.resolveSibling(path14);
        java.io.File file23 = new java.io.File("GBR");
        boolean boolean25 = file23.setWritable(true);
        java.nio.file.Path path26 = file23.toPath();
        java.nio.file.Path path28 = path26.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI29 = path26.toUri();
        boolean boolean31 = path26.startsWith("/experiment/GBR/");
        java.nio.file.Path path32 = path4.resolveSibling(path26);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder33 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream34 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble35 = doubleStream34.min();
        boolean boolean36 = optionalDouble35.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder37 = optionalDoubleBuilder33.add(optionalDouble35);
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder38 = java.util.stream.Stream.builder();
        java.util.stream.DoubleStream doubleStream39 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble40 = doubleStream39.min();
        boolean boolean41 = optionalDouble40.isPresent();
        java.util.stream.Stream.Builder<java.util.OptionalDouble> optionalDoubleBuilder42 = optionalDoubleBuilder38.add(optionalDouble40);
        java.util.function.Consumer<java.util.OptionalDouble> optionalDoubleConsumer43 = optionalDoubleBuilder33.andThen((java.util.function.Consumer<java.util.OptionalDouble>) optionalDoubleBuilder38);
        boolean boolean44 = path26.equals((java.lang.Object) optionalDoubleConsumer43);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertTrue("'" + linkOption17 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption17.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption18 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption18.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertNotNull(uRI29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder33);
        org.junit.Assert.assertNotNull(doubleStream34);
        org.junit.Assert.assertNotNull(optionalDouble35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder37);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder38);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertNotNull(optionalDouble40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(optionalDoubleBuilder42);
        org.junit.Assert.assertNotNull(optionalDoubleConsumer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray4 = longStream3.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.LocalTime localTime11 = localTime9.minusHours((long) 234000000);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant4 = instant2.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime5 = java.nio.file.attribute.FileTime.from(instant2);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery6 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period7 = instant2.query(periodTemporalQuery6);
        java.time.Period period8 = isoEra0.query(periodTemporalQuery6);
        int int9 = period8.getDays();
        java.time.chrono.ChronoPeriod chronoPeriod11 = period8.multipliedBy(744000000);
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(fileTime5);
        org.junit.Assert.assertNotNull(periodTemporalQuery6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronoPeriod11);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator(" ", "PT10S", 0);
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("5", '/');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "5" + "'", str2, "5");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration4 = duration2.abs();
        java.time.Duration duration5 = duration4.abs();
        java.time.Duration duration6 = java.time.Duration.from((java.time.temporal.TemporalAmount) duration4);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("OptionalDouble.empty", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR G...");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit13 = null;
        boolean boolean14 = zonedDateTime12.isSupported(temporalUnit13);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.withMonth((int) (short) 1);
        java.time.Instant instant17 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime16);
        java.time.Instant instant19 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant21 = instant19.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset24);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap29 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap33 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.zone.ZoneRules zoneRules40 = zoneIdMap33.getOrDefault((java.lang.Object) 1.0d, zoneRules39);
        java.time.zone.ZoneRules zoneRules41 = zoneIdMap29.put((java.time.ZoneId) zoneOffset31, zoneRules39);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime27.withZoneSameLocal((java.time.ZoneId) zoneOffset31);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime43 = zonedDateTime16.withZoneSameInstant((java.time.ZoneId) zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zoneRules40);
        org.junit.Assert.assertNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime43);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.function.IntToLongFunction intToLongFunction4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = intStream1.mapToLong(intToLongFunction4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology3);
        java.text.Format format10 = dateTimeFormatter1.toFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = format10.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Text '' could not be parsed at index 0");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(format10);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.time.chrono.Chronology chronology2 = java.time.chrono.Chronology.ofLocale(locale0);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.ZonedDateTime zonedDateTime14 = offsetDateTime6.atZoneSameInstant((java.time.ZoneId) zoneOffset11);
        java.time.ZoneId zoneId15 = zonedDateTime14.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime16 = zonedDateTime14.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = offsetDateTime20.atZoneSameInstant((java.time.ZoneId) zoneOffset25);
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime28.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long31 = zonedDateTime28.getLong((java.time.temporal.TemporalField) chronoField30);
        long long32 = zonedDateTime14.getLong((java.time.temporal.TemporalField) chronoField30);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime14.minusSeconds((long) 999999999);
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime35 = chronology2.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime34);
        boolean boolean37 = chronology2.isLeapYear((long) 'G');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.OffsetDateTime offsetDateTime43 = offsetDateTime41.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.zone.ZoneRules zoneRules48 = zoneOffset46.getRules();
        java.time.ZonedDateTime zonedDateTime49 = offsetDateTime41.atZoneSameInstant((java.time.ZoneId) zoneOffset46);
        int int50 = zonedDateTime49.getDayOfMonth();
        int int51 = zonedDateTime49.getHour();
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime49.minusDays((long) 385000000);
        java.time.chrono.Chronology chronology54 = zonedDateTime49.getChronology();
        int int55 = chronology2.compareTo(chronology54);
        java.time.LocalDate localDate56 = java.time.LocalDate.now();
        java.time.LocalDate localDate57 = java.time.LocalDate.MIN;
        boolean boolean58 = localDate56.isEqual((java.time.chrono.ChronoLocalDate) localDate57);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean60 = localDate57.isSupported((java.time.temporal.TemporalField) chronoField59);
        int int61 = localDate57.getDayOfYear();
        java.time.temporal.TemporalUnit temporalUnit62 = null;
        boolean boolean63 = localDate57.isSupported(temporalUnit62);
        long long64 = localDate57.toEpochDay();
        int int65 = localDate57.getDayOfMonth();
        int int66 = localDate57.getYear();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime67 = chronology2.zonedDateTime((java.time.temporal.TemporalAccessor) localDate57);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: -999999999-01-01 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 999999999L + "'", long31 == 999999999L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 999999999L + "'", long32 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 31 + "'", int50 == 31);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 23 + "'", int51 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField59.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-365243219162L) + "'", long64 == (-365243219162L));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-999999999) + "'", int66 == (-999999999));
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = charBuffer1.compareTo(charBuffer3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(charSet1);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        int int2 = org.apache.commons.lang3.CharUtils.toIntValue((java.lang.Character) 'u', 861000000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 861000000 + "'", int2 == 861000000);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.Permission permission3 = accessControlException2.getPermission();
        java.security.PrivilegedActionException privilegedActionException4 = new java.security.PrivilegedActionException((java.lang.Exception) accessControlException2);
        java.security.GeneralSecurityException generalSecurityException5 = new java.security.GeneralSecurityException("Minute(null <no signer certificates>)", (java.lang.Throwable) accessControlException2);
        java.security.NoSuchAlgorithmException noSuchAlgorithmException6 = new java.security.NoSuchAlgorithmException((java.lang.Throwable) generalSecurityException5);
        org.junit.Assert.assertNull(permission3);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        boolean boolean5 = runtimeExceptionOptional4.isPresent();
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean10 = localDate7.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.OffsetTime offsetTime11 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime13 = offsetTime11.withSecond(16);
        java.time.OffsetDateTime offsetDateTime14 = localDate7.atTime(offsetTime13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        int int20 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        int int36 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        boolean boolean37 = localDateTime16.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime38.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        boolean boolean48 = localDateTime38.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        boolean boolean49 = localDateTime32.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.LocalDate localDate50 = localDateTime32.toLocalDate();
        java.time.LocalDate localDate51 = java.time.LocalDate.now();
        java.time.LocalDate localDate52 = java.time.LocalDate.MIN;
        boolean boolean53 = localDate51.isEqual((java.time.chrono.ChronoLocalDate) localDate52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean55 = localDate52.isSupported((java.time.temporal.TemporalField) chronoField54);
        int int56 = localDate52.getDayOfYear();
        int int57 = localDate50.compareTo((java.time.chrono.ChronoLocalDate) localDate52);
        java.time.Period period58 = localDate7.until((java.time.chrono.ChronoLocalDate) localDate52);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit61 = chronoField60.getBaseUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate62 = localDate7.plus(999999999L, temporalUnit61);
        boolean boolean63 = runtimeExceptionOptional4.equals((java.lang.Object) chronoLocalDate62);
        java.security.AccessControlException accessControlException65 = new java.security.AccessControlException("");
        java.lang.RuntimeException runtimeException66 = runtimeExceptionOptional4.orElse((java.lang.RuntimeException) accessControlException65);
        java.io.File file68 = new java.io.File("GBR");
        boolean boolean70 = file68.setWritable(true);
        java.nio.file.Path path71 = file68.toPath();
        java.nio.file.Path path73 = path71.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI74 = path71.toUri();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics75 = new java.util.DoubleSummaryStatistics();
        boolean boolean76 = uRI74.equals((java.lang.Object) doubleSummaryStatistics75);
        java.net.URI uRI78 = uRI74.resolve("Z");
        boolean boolean79 = runtimeExceptionOptional4.equals((java.lang.Object) uRI78);
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField54.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1999999998 + "'", int57 == 1999999998);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField60.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit61 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit61.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(chronoLocalDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(runtimeException66);
        org.junit.Assert.assertNull("file68.getParent() == null", file68.getParent());
        org.junit.Assert.assertEquals(file68.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(path71);
        org.junit.Assert.assertNotNull(path73);
        org.junit.Assert.assertNotNull(uRI74);
        org.junit.Assert.assertEquals(doubleSummaryStatistics75.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(uRI78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of(539000000, 15, 999999, 999999998, 495000000, 10000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 15");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.lang.String str1 = org.apache.commons.lang3.CharUtils.toString('/');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "/" + "'", str1, "/");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.parse((java.lang.CharSequence) "S-ASCII");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'S-ASCII' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long30 = zonedDateTime27.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = zonedDateTime27.query(periodTemporalQuery31);
        boolean boolean33 = zonedDateTime11.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime27);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit36 = chronoField35.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime37 = zonedDateTime11.plus((long) 70, temporalUnit36);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000001");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999999999L + "'", long30 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField35.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit36 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit36.equals(java.time.temporal.ChronoUnit.WEEKS));
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime12 = localDateTime6.withHour(4);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime14 = localDateTime6.withHour(100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.plusNanos((long) (-7));
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        boolean boolean17 = instant9.isSupported(temporalUnit16);
        java.time.Instant instant19 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant21 = instant19.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset24);
        java.time.ZoneId zoneId28 = zonedDateTime27.getZone();
        java.time.Clock clock29 = java.time.Clock.fixed(instant9, zoneId28);
        java.time.ZonedDateTime zonedDateTime30 = offsetDateTime5.atZoneSimilarLocal(zoneId28);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime30.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.DayOfWeek dayOfWeek23 = localDateTime17.getDayOfWeek();
        java.time.format.TextStyle textStyle24 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.lang.String str29 = dayOfWeek23.getDisplayName(textStyle24, locale25);
        java.lang.String str30 = locale25.getDisplayScript();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle24 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle24.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GBR" + "'", str26, "GBR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5" + "'", str29, "5");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str7 = localDate1.format(dateTimeFormatter6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.text.Format format15 = dateTimeFormatter6.toFormat(periodTemporalQuery13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = format15.parseObject("java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Text 'java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]' could not be parsed at index 0");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-999999999-01-01" + "'", str7, "-999999999-01-01");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(format15);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Collection<java.time.zone.ZoneRules> zoneRulesCollection9 = zoneIdMap1.values();
        java.util.stream.DoubleStream doubleStream10 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream11 = doubleStream10.distinct();
        java.util.OptionalDouble optionalDouble12 = doubleStream11.findAny();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.get((java.lang.Object) optionalDouble12);
        java.time.Month month14 = java.time.Month.MARCH;
        java.time.Month month15 = month14.firstMonthOfQuarter();
        java.time.zone.ZoneRules zoneRules16 = zoneIdMap1.remove((java.lang.Object) month14);
        java.lang.String str17 = zoneIdMap1.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneRulesCollection9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(optionalDouble12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.MARCH + "'", month14.equals(java.time.Month.MARCH));
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.JANUARY + "'", month15.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNull(zoneRules16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology3);
        java.text.Format format10 = dateTimeFormatter1.toFormat();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.Clock clock17 = java.time.Clock.fixed(instant12, (java.time.ZoneId) zoneOffset15);
        java.time.LocalTime localTime18 = java.time.LocalTime.now(clock17);
        java.time.OffsetDateTime offsetDateTime19 = java.time.OffsetDateTime.now(clock17);
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.now(clock17);
        java.time.Instant instant22 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.Clock clock27 = java.time.Clock.fixed(instant22, (java.time.ZoneId) zoneOffset25);
        java.time.LocalTime localTime28 = java.time.LocalTime.now(clock27);
        java.time.LocalTime localTime30 = localTime28.plusHours((long) 16384);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime31 = zonedDateTime20.with((java.time.temporal.TemporalAdjuster) localTime30);
        java.lang.StringBuffer stringBuffer32 = null;
        java.text.Format.Field field33 = null;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition(field33, (int) (short) 100);
        fieldPosition35.setBeginIndex(64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer38 = format10.format((java.lang.Object) localTime30, stringBuffer32, fieldPosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: toAppendTo");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(format10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(clock17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime31);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.time.Duration duration1 = java.time.Duration.ofDays((long) (-1));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.LocalDate localDate32 = zonedDateTime31.toLocalDate();
        java.time.DayOfWeek dayOfWeek33 = localDate32.getDayOfWeek();
        int int34 = dayOfWeek33.getValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + dayOfWeek33 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek33.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime7.withMinute((int) '\000');
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime25 = offsetDateTime7.withHour(17488);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 17488");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "zh_CN", 4096, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.Instant instant21 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.Clock clock26 = java.time.Clock.fixed(instant21, (java.time.ZoneId) zoneOffset24);
        java.time.LocalTime localTime27 = java.time.LocalTime.now(clock26);
        java.time.LocalTime localTime29 = localTime27.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.of(localDate19, localTime29);
        java.time.LocalTime localTime32 = localTime29.plusNanos(13L);
        int int33 = localTime32.getHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI5 = new java.net.URI("", "x-windows-iso2022jp", "             +999999999-12-31", "eng", "zho");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: ://x-windows-iso2022jp%20%20%20%20%20%20%20%20%20%20%20%20%20+999999999-12-31?eng#zho");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.withSecond((int) (byte) 0);
        int int13 = offsetDateTime12.getMinute();
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime12.plusNanos((long) 227000000);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.withSecond((int) (byte) 0);
        java.time.LocalDate localDate22 = offsetDateTime19.toLocalDate();
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit24 = chronoField23.getBaseUnit();
        boolean boolean25 = offsetDateTime19.isSupported((java.time.temporal.TemporalField) chronoField23);
        java.time.temporal.ValueRange valueRange26 = offsetDateTime15.range((java.time.temporal.TemporalField) chronoField23);
        java.time.LocalTime localTime27 = offsetDateTime15.toLocalTime();
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime31.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.zone.ZoneRules zoneRules38 = zoneOffset36.getRules();
        java.time.ZonedDateTime zonedDateTime39 = offsetDateTime31.atZoneSameInstant((java.time.ZoneId) zoneOffset36);
        int int40 = zonedDateTime39.getDayOfMonth();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime44.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.zone.ZoneRules zoneRules51 = zoneOffset49.getRules();
        java.time.ZonedDateTime zonedDateTime52 = offsetDateTime44.atZoneSameInstant((java.time.ZoneId) zoneOffset49);
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime52.withLaterOffsetAtOverlap();
        boolean boolean54 = zonedDateTime39.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime53);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.UTC;
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime56 = zonedDateTime53.withZoneSameInstant((java.time.ZoneId) zoneOffset55);
        java.time.Clock clock57 = java.time.Clock.system((java.time.ZoneId) zoneOffset55);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime15.withOffsetSameInstant(zoneOffset55);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime59 = java.time.OffsetDateTime.of((-1), 999999999, 17488, 399000000, 256, 274, 829000000, zoneOffset55);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 999999999");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField23.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit24 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit24.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(valueRange26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(zoneRules38);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 31 + "'", int40 == 31);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime56);
        org.junit.Assert.assertNotNull(clock57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        java.nio.IntBuffer intBuffer12 = intBuffer11.asReadOnlyBuffer();
        int[] intArray19 = new int[] { 1024, (byte) 1, 125000000, 17488, '4', 829000000 };
        java.nio.IntBuffer intBuffer20 = java.nio.IntBuffer.wrap(intArray19);
        java.util.stream.IntStream intStream21 = java.util.stream.IntStream.of(intArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer24 = intBuffer11.put(intArray19, (-1000002021), (int) 'G');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1024, 1, 125000000, 17488, 52, 829000000]");
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertNotNull(intStream21);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        float[] floatArray5 = floatBuffer3.array();
        float[] floatArray8 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer9 = java.nio.FloatBuffer.wrap(floatArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer12 = floatBuffer3.get(floatArray8, (int) 'a', 284000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer9);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        int[] intArray18 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer19 = intBuffer11.get(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer22 = java.nio.IntBuffer.wrap(intArray18, 834000000, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer19);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.Instant instant5 = instant3.minusMillis((long) 399000000);
        java.util.Set<java.lang.String> strSet6 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month7 = java.time.Month.OCTOBER;
        java.time.Month month9 = month7.plus(0L);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        int int20 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.temporal.Temporal temporal21 = month9.adjustInto((java.time.temporal.Temporal) localDateTime11);
        boolean boolean22 = strSet6.equals((java.lang.Object) month9);
        java.security.ProtectionDomain[] protectionDomainArray23 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext24 = new java.security.AccessControlContext(protectionDomainArray23);
        java.time.LocalDate localDate25 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = localDate25.query(periodTemporalQuery26);
        boolean boolean28 = accessControlContext24.equals((java.lang.Object) periodTemporalQuery26);
        java.time.Period period29 = month9.query(periodTemporalQuery26);
        java.time.Period period30 = instant5.query(periodTemporalQuery26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate32 = localDateTime31.toLocalDate();
        java.time.temporal.Temporal temporal33 = period30.subtractFrom((java.time.temporal.Temporal) localDateTime31);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int38 = zoneOffset37.getTotalSeconds();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset37);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.zone.ZoneRules zoneRules50 = zoneOffset48.getRules();
        java.time.ZonedDateTime zonedDateTime51 = offsetDateTime43.atZoneSameInstant((java.time.ZoneId) zoneOffset48);
        int int52 = zonedDateTime51.getDayOfMonth();
        int int53 = zonedDateTime51.getHour();
        java.time.Instant instant54 = zonedDateTime51.toInstant();
        java.time.temporal.Temporal temporal55 = zoneOffset37.adjustInto((java.time.temporal.Temporal) zonedDateTime51);
        java.time.OffsetDateTime offsetDateTime56 = java.time.OffsetDateTime.of(localDateTime31, zoneOffset37);
        java.time.temporal.TemporalField temporalField57 = null;
        boolean boolean58 = offsetDateTime56.isSupported(temporalField57);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.OCTOBER + "'", month7.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.OCTOBER + "'", month9.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(temporal21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(zoneRules50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 31 + "'", int52 == 31);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 23 + "'", int53 == 23);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(temporal55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        java.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange5 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime1);
        java.time.LocalTime localTime6 = localDateTime1.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime8 = localDateTime1.plusWeeks((long) 4096);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000078");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("\\u0023");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\u0023" + "'", str1, "\\u0023");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        int int2 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            char char5 = byteBuffer3.getChar(829000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        fileChannel11.force(true);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileChannel fileChannel19 = fileChannel11.truncate(6603384152749567654L);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        java.util.function.LongConsumer longConsumer4 = null;
        optionalLong3.ifPresent(longConsumer4);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        boolean boolean8 = duration6.equals((java.lang.Object) (short) 0);
        java.time.Duration duration9 = duration6.abs();
        java.time.Duration duration11 = duration9.plusMinutes((long) 'G');
        java.time.Duration duration13 = duration9.plusMinutes(1434414441700000L);
        boolean boolean14 = optionalLong3.equals((java.lang.Object) duration9);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = optionalLong3.getAsLong();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI5 = new java.net.URI("\u7f8e\u56fd", "etuniM", "java.security.cert.CertificateException
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: ??://etuniMjava.security.cert.CertificateException
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        int int41 = offsetTime0.getSecond();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 15 + "'", int41 == 15);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        java.nio.CharBuffer charBuffer4 = charBuffer2.duplicate();
        int int5 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "PT10S", (java.lang.CharSequence) charBuffer4);
        java.util.stream.IntStream intStream6 = charBuffer4.chars();
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) (short) 10, (long) (byte) 0);
        boolean boolean19 = zoneRules7.isDaylightSavings(instant18);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.zone.ZoneRules zoneRules30 = zoneOffset28.getRules();
        java.time.ZonedDateTime zonedDateTime31 = offsetDateTime23.atZoneSameInstant((java.time.ZoneId) zoneOffset28);
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime31.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long34 = zonedDateTime31.getLong((java.time.temporal.TemporalField) chronoField33);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = zonedDateTime31.query(periodTemporalQuery35);
        java.time.ZoneId zoneId37 = zonedDateTime31.getZone();
        java.time.Instant instant38 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime31);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition39 = zoneRules7.nextTransition(instant38);
        java.time.Instant instant41 = instant38.plusSeconds(32L);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        int int47 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        int int52 = localDateTime43.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        int int58 = localDateTime53.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        int int63 = localDateTime54.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime59);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        int int69 = localDateTime64.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        int int74 = localDateTime65.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime70);
        boolean boolean75 = localDateTime54.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime70);
        java.time.temporal.Temporal temporal76 = localDateTime48.adjustInto((java.time.temporal.Temporal) localDateTime54);
        java.time.LocalDateTime localDateTime78 = localDateTime48.minusWeeks((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant79 = instant38.with((java.time.temporal.TemporalAdjuster) localDateTime78);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField33.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 999999999L + "'", long34 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNull(zoneOffsetTransition39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(temporal76);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.lang.String str7 = uRI6.getSchemeSpecificPart();
        java.net.URI uRI9 = new java.net.URI("eng");
        java.net.URI uRI10 = uRI6.resolve(uRI9);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/GBR/" + "'", str7, "/experiment/GBR/");
        org.junit.Assert.assertNotNull(uRI10);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.time.Period period1 = java.time.Period.ofYears((int) (short) 1);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Set<java.time.ZoneId> zoneIdSet2 = zoneIdMap1.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strList28.removeAll((java.util.Collection<java.lang.String>) strList44);
        boolean boolean46 = strList16.retainAll((java.util.Collection<java.lang.String>) strList44);
        java.io.File file48 = new java.io.File("GBR");
        boolean boolean50 = file48.setWritable(true);
        boolean boolean52 = file48.setWritable(true);
        java.net.URI uRI53 = file48.toURI();
        java.io.File file55 = new java.io.File("GBR");
        boolean boolean57 = file55.setWritable(true);
        java.nio.file.Path path58 = file55.toPath();
        java.nio.file.Path path60 = path58.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI61 = path58.toUri();
        java.net.URI uRI62 = uRI53.relativize(uRI61);
        boolean boolean63 = strList16.equals((java.lang.Object) uRI53);
        boolean boolean64 = zoneIdSet2.retainAll((java.util.Collection<java.lang.String>) strList16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = strList16.remove(437000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 437000000, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneIdSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(uRI53);
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(path58);
        org.junit.Assert.assertNotNull(path60);
        org.junit.Assert.assertNotNull(uRI61);
        org.junit.Assert.assertNotNull(uRI62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        double double13 = doubleBuffer5.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        java.lang.String str5 = file1.getCanonicalPath();
        boolean boolean8 = file1.setReadable(true, true);
        boolean boolean9 = file1.setReadOnly();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/GBR" + "'", str5, "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("", (int) '\r', (-3));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        boolean boolean43 = localDate35.isLeapYear();
        java.time.LocalDate localDate44 = java.time.LocalDate.now();
        java.time.LocalDate localDate45 = java.time.LocalDate.MIN;
        boolean boolean46 = localDate44.isEqual((java.time.chrono.ChronoLocalDate) localDate45);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean48 = localDate45.isSupported((java.time.temporal.TemporalField) chronoField47);
        int int49 = localDate45.getDayOfYear();
        java.time.LocalDate localDate51 = localDate45.withYear((int) '4');
        java.time.LocalTime localTime52 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime54 = localTime52.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime55 = localDate45.atTime(localTime52);
        java.time.LocalTime localTime57 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int58 = localTime52.compareTo(localTime57);
        java.time.Duration duration59 = java.time.Duration.ZERO;
        java.time.Duration duration61 = duration59.minusDays((long) (-1));
        java.time.LocalTime localTime62 = localTime57.minus((java.time.temporal.TemporalAmount) duration61);
        java.time.LocalTime localTime64 = localTime62.plusMinutes(100L);
        java.time.Instant instant66 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant68 = instant66.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime69 = java.nio.file.attribute.FileTime.from(instant66);
        java.time.Instant instant71 = instant66.plusMillis((long) 10);
        java.time.Instant instant73 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant75 = instant73.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime76 = java.nio.file.attribute.FileTime.from(instant73);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery77 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period78 = instant73.query(periodTemporalQuery77);
        java.time.Period period79 = instant71.query(periodTemporalQuery77);
        java.time.Period period80 = localTime64.query(periodTemporalQuery77);
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.of(localDate35, localTime64);
        java.lang.String str82 = localDate35.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField47.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(fileTime69);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(fileTime76);
        org.junit.Assert.assertNotNull(periodTemporalQuery77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+999999999-12-31" + "'", str82, "+999999999-12-31");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = charBuffer3.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer18 = charBuffer3.append('G');
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        boolean boolean38 = zoneIdMap36.equals((java.lang.Object) 0);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration39 = zoneIdMap36.keys();
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet40 = zoneIdMap36.entrySet();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime44.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.zone.ZoneRules zoneRules51 = zoneOffset49.getRules();
        java.time.ZonedDateTime zonedDateTime52 = offsetDateTime44.atZoneSameInstant((java.time.ZoneId) zoneOffset49);
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime52.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId54 = zonedDateTime52.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap56 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.zone.ZoneRules zoneRules62 = zoneOffset60.getRules();
        java.time.zone.ZoneRules zoneRules63 = zoneIdMap56.getOrDefault((java.lang.Object) 1.0d, zoneRules62);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset68);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap72 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        java.time.zone.ZoneRules zoneRules78 = zoneOffset76.getRules();
        java.time.zone.ZoneRules zoneRules79 = zoneIdMap72.getOrDefault((java.lang.Object) 1.0d, zoneRules78);
        java.lang.String str80 = zoneRules78.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList81 = zoneRules78.getTransitions();
        java.time.zone.ZoneRules zoneRules82 = zoneIdMap56.putIfAbsent((java.time.ZoneId) zoneOffset68, zoneRules78);
        java.time.zone.ZoneRules zoneRules83 = zoneIdMap36.put(zoneId54, zoneRules78);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.ZonedDateTime zonedDateTime86 = java.time.ZonedDateTime.ofLocal(localDateTime6, zoneId54, zoneOffset85);
        java.time.Duration duration88 = java.time.Duration.ofDays(2L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime89 = zonedDateTime86.plus((java.time.temporal.TemporalAmount) duration88);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneIdEnumeration39);
        org.junit.Assert.assertNotNull(zoneIdEntrySet40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(zoneRules78);
        org.junit.Assert.assertNotNull(zoneRules79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str80, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList81);
        org.junit.Assert.assertNull(zoneRules82);
        org.junit.Assert.assertNull(zoneRules83);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(duration88);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap24.put((java.time.ZoneId) zoneOffset26, zoneRules34);
        java.time.ZoneId[] zoneIdArray37 = new java.time.ZoneId[] { zoneOffset6, zoneId22, zoneOffset26 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet38 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet38, zoneIdArray37);
        java.lang.String[] strArray43 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray45 = org.apache.commons.lang3.StringUtils.stripAll(strArray43, "GBR");
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray45);
        boolean boolean47 = zoneIdSet38.remove((java.lang.Object) strArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList59);
        boolean boolean62 = zoneIdSet38.removeAll((java.util.Collection<java.lang.String>) strList61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = strList61.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneIdArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Minute(null <no signer certificates>)" + "'", str46, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit2 = chronoField1.getBaseUnit();
        boolean boolean3 = temporalUnit2.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration4 = java.time.Duration.of(2L, temporalUnit2);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField1.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit2 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit2.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange4 = java.time.temporal.ValueRange.of((long) 1999999998, (long) 277998031, (long) (byte) 1, (long) 125000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Smallest minimum value must be less than largest minimum value");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        boolean boolean26 = zonedDateTime11.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime25);
        java.time.LocalDate localDate27 = java.time.LocalDate.now();
        java.time.LocalDate localDate28 = java.time.LocalDate.MIN;
        boolean boolean29 = localDate27.isEqual((java.time.chrono.ChronoLocalDate) localDate28);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.OffsetDateTime offsetDateTime35 = offsetDateTime33.withSecond((int) (byte) 0);
        java.time.LocalDate localDate36 = offsetDateTime33.toLocalDate();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean38 = offsetDateTime33.isSupported((java.time.temporal.TemporalField) chronoField37);
        boolean boolean39 = localDate27.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.lang.String str40 = chronoField37.toString();
        int int41 = zonedDateTime11.get((java.time.temporal.TemporalField) chronoField37);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime44 = zonedDateTime11.with((java.time.temporal.TemporalField) chronoField42, (long) 17488);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 17488");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField37.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "MicroOfSecond" + "'", str40, "MicroOfSecond");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999999 + "'", int41 == 999999);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField42.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        java.lang.Object obj14 = null;
        boolean boolean15 = zoneIdMap1.equals(obj14);
        int int16 = zoneIdMap1.size();
        java.time.OffsetTime offsetTime17 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime19 = offsetTime17.withSecond(16);
        java.time.Instant instant21 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant23 = instant21.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime24 = java.nio.file.attribute.FileTime.from(instant21);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery25 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period26 = instant21.query(periodTemporalQuery25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        boolean boolean29 = instant21.isSupported(temporalUnit28);
        boolean boolean30 = offsetTime17.isSupported(temporalUnit28);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = instant32.query(periodTemporalQuery36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        boolean boolean40 = instant32.isSupported(temporalUnit39);
        java.time.Instant instant42 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant44 = instant42.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.zone.ZoneRules zoneRules49 = zoneOffset47.getRules();
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.ofInstant(instant42, (java.time.ZoneId) zoneOffset47);
        java.time.ZoneId zoneId51 = zonedDateTime50.getZone();
        java.time.Clock clock52 = java.time.Clock.fixed(instant32, zoneId51);
        boolean boolean53 = offsetTime17.equals((java.lang.Object) zoneId51);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap55 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.zone.ZoneRules zoneRules61 = zoneOffset59.getRules();
        java.time.zone.ZoneRules zoneRules62 = zoneIdMap55.getOrDefault((java.lang.Object) 1.0d, zoneRules61);
        java.time.Instant instant64 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant66 = instant64.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime67 = java.nio.file.attribute.FileTime.from(instant64);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery68 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period69 = instant64.query(periodTemporalQuery68);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit71 = chronoField70.getBaseUnit();
        boolean boolean72 = instant64.isSupported(temporalUnit71);
        java.time.Instant instant74 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant76 = instant74.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime80 = localDateTime77.atOffset(zoneOffset79);
        java.time.zone.ZoneRules zoneRules81 = zoneOffset79.getRules();
        java.time.ZonedDateTime zonedDateTime82 = java.time.ZonedDateTime.ofInstant(instant74, (java.time.ZoneId) zoneOffset79);
        java.time.ZoneId zoneId83 = zonedDateTime82.getZone();
        java.time.Clock clock84 = java.time.Clock.fixed(instant64, zoneId83);
        java.time.temporal.ChronoField chronoField85 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit86 = chronoField85.getBaseUnit();
        java.time.Instant instant87 = instant64.truncatedTo(temporalUnit86);
        java.time.Duration duration88 = zoneRules61.getDaylightSavings(instant87);
        java.time.zone.ZoneRules zoneRules89 = zoneIdMap1.replace(zoneId51, zoneRules61);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(fileTime24);
        org.junit.Assert.assertNotNull(periodTemporalQuery25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField27.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertNotNull(clock52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(zoneRules61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(fileTime67);
        org.junit.Assert.assertNotNull(periodTemporalQuery68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField70.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit71 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit71.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(zoneRules81);
        org.junit.Assert.assertNotNull(zonedDateTime82);
        org.junit.Assert.assertNotNull(zoneId83);
        org.junit.Assert.assertNotNull(clock84);
        org.junit.Assert.assertTrue("'" + chronoField85 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField85.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit86 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit86.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(zoneRules89);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("\u4e0b\u5348\u65f6\u5206\u79d2", "{}");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.util.OptionalLong optionalLong0 = java.util.OptionalLong.empty();
        org.junit.Assert.assertNotNull(optionalLong0);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        int[] intArray18 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer19 = intBuffer11.get(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = intBuffer11.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer19);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.security.cert.CertificateException certificateException1 = new java.security.cert.CertificateException("-692477-03-10T13:58:00Z");
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getHour();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZoneId zoneId26 = zonedDateTime25.getZone();
        boolean boolean27 = zonedDateTime11.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime25);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime29 = zonedDateTime25.withSecond(781000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 781000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble1 = doubleStream0.min();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = doubleStream0.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.lang.String str7 = uRI6.getPath();
        java.net.URI uRI8 = uRI6.normalize();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/GBR/" + "'", str7, "/experiment/GBR/");
        org.junit.Assert.assertNotNull(uRI8);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.time.Instant instant7 = instant1.plusSeconds((long) 722000000);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange9 = instant7.range((java.time.temporal.TemporalField) chronoField8);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: DayOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField8.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "KOR");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean1 = coderResult0.isUnmappable();
        boolean boolean2 = coderResult0.isUnmappable();
        boolean boolean3 = coderResult0.isMalformed();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("java.nio.HeapShortBuffer[pos=64 lim=64 cap=64]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.nio.HeapShortBuffer[pos=64lim=64cap=64]" + "'", str1, "java.nio.HeapShortBuffer[pos=64lim=64cap=64]");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((-1), 794000000);
        java.util.function.IntPredicate intPredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = intStream2.anyMatch(intPredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("zho", "hi!x(null <no signer certificates>)x(null <no signer certificates>)xMinutexMinutex(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        boolean boolean9 = path4.startsWith("/experiment/GBR/");
        java.io.File file11 = new java.io.File("GBR");
        boolean boolean13 = file11.setWritable(true);
        java.nio.file.Path path14 = file11.toPath();
        java.nio.file.Path path16 = path14.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption17 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption18 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray19 = new java.nio.file.LinkOption[] { linkOption17, linkOption18 };
        java.nio.file.Path path20 = path14.toRealPath(linkOptionArray19);
        java.nio.file.Path path21 = path4.resolveSibling(path14);
        java.io.File file23 = new java.io.File("GBR");
        boolean boolean25 = file23.setWritable(true);
        java.nio.file.Path path26 = file23.toPath();
        java.nio.file.Path path28 = path26.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI29 = path26.toUri();
        boolean boolean31 = path26.startsWith("/experiment/GBR/");
        java.nio.file.Path path32 = path4.resolveSibling(path26);
        java.nio.file.Path path34 = path4.resolveSibling("GBR");
        java.nio.file.Path path35 = path34.normalize();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertTrue("'" + linkOption17 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption17.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption18 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption18.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertNotNull(uRI29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(path34);
        org.junit.Assert.assertNotNull(path35);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.time.temporal.TemporalAccessor temporalAccessor0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.from(temporalAccessor0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        fileChannel11.force(true);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer20 = byteBuffer19.asLongBuffer();
        float float22 = byteBuffer19.getFloat(4);
        double double24 = byteBuffer19.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder25 = null;
        java.nio.ByteBuffer byteBuffer26 = byteBuffer19.order(byteOrder25);
        boolean boolean27 = byteBuffer26.isDirect();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer30 = byteBuffer29.asLongBuffer();
        float float32 = byteBuffer29.getFloat(4);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer29.putChar('\r');
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1, (byte) 1, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer34.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocate((int) ' ');
        int int45 = byteBuffer44.position();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.asReadOnlyBuffer();
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] { byteBuffer26, byteBuffer34, byteBuffer46 };
        // The following exception was thrown during execution in test generation
        try {
            long long50 = fileChannel11.write(byteBufferArray47, (int) 'u', (-7));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(longBuffer30);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("/tmp/United Kingdom6608063242857218135aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) (short) 10, (long) (byte) 0);
        boolean boolean19 = zoneRules7.isDaylightSavings(instant18);
        java.time.LocalDate localDate21 = java.time.LocalDate.now();
        java.time.LocalDate localDate22 = java.time.LocalDate.MIN;
        boolean boolean23 = localDate21.isEqual((java.time.chrono.ChronoLocalDate) localDate22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean25 = localDate22.isSupported((java.time.temporal.TemporalField) chronoField24);
        int int26 = localDate22.getDayOfYear();
        java.time.LocalDate localDate28 = localDate22.withYear((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset34);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime40 = localDateTime36.minus((long) (-999999999), temporalUnit39);
        java.lang.String str41 = temporalUnit39.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate42 = localDate28.plus((long) 125000000, temporalUnit39);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant43 = instant18.plus((-7981810L), temporalUnit39);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField24.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Weeks" + "'", str41, "Weeks");
        org.junit.Assert.assertNotNull(chronoLocalDate42);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.println(false);
        java.io.PrintWriter printWriter5 = printWriter1.append((java.lang.CharSequence) "\u82f1\u6587");
        printWriter1.println((double) (byte) 1);
        org.junit.Assert.assertNotNull(printWriter5);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((long) (-7));
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        int int8 = localDateTime3.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        int int13 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        boolean boolean36 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.temporal.Temporal temporal37 = localDateTime9.adjustInto((java.time.temporal.Temporal) localDateTime15);
        java.time.LocalDateTime localDateTime39 = localDateTime9.withYear((-999999999));
        java.time.temporal.Temporal temporal40 = localDateTime2.adjustInto((java.time.temporal.Temporal) localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(temporal40);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer18.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer25 = byteBuffer24.asDoubleBuffer();
        int int26 = doubleBuffer19.compareTo(doubleBuffer25);
        int int27 = doubleBuffer25.remaining();
        java.nio.DoubleBuffer doubleBuffer28 = doubleBuffer11.put(doubleBuffer25);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocate((int) ' ');
        int int31 = byteBuffer30.position();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer33 = byteBuffer32.asDoubleBuffer();
        java.nio.DoubleBuffer doubleBuffer34 = doubleBuffer33.asReadOnlyBuffer();
        int int35 = doubleBuffer11.compareTo(doubleBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(doubleBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(doubleBuffer33);
        org.junit.Assert.assertNotNull(doubleBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-4) + "'", int35 == (-4));
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.time.temporal.ValueRange valueRange3 = java.time.temporal.ValueRange.of((long) (byte) 1, (long) 0, (long) 1);
        boolean boolean4 = valueRange3.isIntValue();
        org.junit.Assert.assertNotNull(valueRange3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        int int4 = charBuffer2.capacity();
        boolean boolean5 = charBuffer2.hasArray();
        java.nio.ByteBuffer byteBuffer6 = charset0.encode(charBuffer2);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 1, (byte) 1, (byte) 100, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer15 = byteBuffer6.put(byteArray12, (int) ' ', 781000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 1, 1, 100, 1]");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        boolean boolean38 = zoneIdMap36.equals((java.lang.Object) 0);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration39 = zoneIdMap36.keys();
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet40 = zoneIdMap36.entrySet();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime44.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.zone.ZoneRules zoneRules51 = zoneOffset49.getRules();
        java.time.ZonedDateTime zonedDateTime52 = offsetDateTime44.atZoneSameInstant((java.time.ZoneId) zoneOffset49);
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime52.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId54 = zonedDateTime52.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap56 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.zone.ZoneRules zoneRules62 = zoneOffset60.getRules();
        java.time.zone.ZoneRules zoneRules63 = zoneIdMap56.getOrDefault((java.lang.Object) 1.0d, zoneRules62);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset68);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap72 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        java.time.zone.ZoneRules zoneRules78 = zoneOffset76.getRules();
        java.time.zone.ZoneRules zoneRules79 = zoneIdMap72.getOrDefault((java.lang.Object) 1.0d, zoneRules78);
        java.lang.String str80 = zoneRules78.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList81 = zoneRules78.getTransitions();
        java.time.zone.ZoneRules zoneRules82 = zoneIdMap56.putIfAbsent((java.time.ZoneId) zoneOffset68, zoneRules78);
        java.time.zone.ZoneRules zoneRules83 = zoneIdMap36.put(zoneId54, zoneRules78);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.ZonedDateTime zonedDateTime86 = java.time.ZonedDateTime.ofLocal(localDateTime6, zoneId54, zoneOffset85);
        java.time.LocalDateTime localDateTime87 = java.time.LocalDateTime.now((java.time.ZoneId) zoneOffset85);
        java.time.ZonedDateTime zonedDateTime88 = java.time.ZonedDateTime.now((java.time.ZoneId) zoneOffset85);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneIdEnumeration39);
        org.junit.Assert.assertNotNull(zoneIdEntrySet40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(zoneRules78);
        org.junit.Assert.assertNotNull(zoneRules79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str80, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList81);
        org.junit.Assert.assertNull(zoneRules82);
        org.junit.Assert.assertNull(zoneRules83);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(zonedDateTime88);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = zoneRules7.getTransitions();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str35 = localDateTime28.format(dateTimeFormatter34);
        java.time.ZoneOffset zoneOffset36 = zoneRules7.getOffset(localDateTime28);
        java.time.LocalDateTime localDateTime38 = localDateTime28.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        boolean boolean42 = temporalUnit41.isTimeBased();
        java.time.LocalDateTime localDateTime43 = localDateTime28.minus((long) 829000000, temporalUnit41);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate45 = localDateTime44.toLocalDate();
        java.time.LocalDateTime localDateTime47 = localDateTime44.plusWeeks(0L);
        java.time.Instant instant49 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant51 = instant49.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime52 = java.nio.file.attribute.FileTime.from(instant49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery53 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period54 = instant49.query(periodTemporalQuery53);
        java.time.Period period55 = localDateTime44.query(periodTemporalQuery53);
        java.time.Period period56 = localDateTime28.query(periodTemporalQuery53);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<?> wildcardChronoZonedDateTime57 = java.time.chrono.ChronoZonedDateTime.from((java.time.temporal.TemporalAccessor) localDateTime28);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: +999999999-12-31T23:59:59.999999999 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(fileTime52);
        org.junit.Assert.assertNotNull(periodTemporalQuery53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress1 = java.net.InetAddress.getByName("+999999998-12-31T23:59:59.999999999");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: +999999998-12-31T23:59:59.999999999: Name or service not known");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) charBuffer3);
        java.util.stream.IntStream intStream17 = charBuffer3.codePoints();
        java.util.stream.IntStream intStream19 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt20 = intStream19.spliterator();
        java.util.stream.IntStream.Builder builder21 = java.util.stream.IntStream.builder();
        boolean boolean22 = ofInt20.tryAdvance((java.util.function.IntConsumer) builder21);
        java.util.stream.IntStream intStream24 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt25 = intStream24.spliterator();
        java.util.stream.IntStream.Builder builder26 = java.util.stream.IntStream.builder();
        boolean boolean27 = ofInt25.tryAdvance((java.util.function.IntConsumer) builder26);
        ofInt20.forEachRemaining((java.util.function.IntConsumer) builder26);
        java.util.stream.IntStream intStream30 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt31 = intStream30.min();
        java.lang.String str32 = optionalInt31.toString();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate34 = localDateTime33.toLocalDate();
        boolean boolean35 = optionalInt31.equals((java.lang.Object) localDate34);
        int int37 = optionalInt31.orElse(59);
        java.util.stream.IntStream intStream39 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt40 = intStream39.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator41 = ofInt40.trySplit();
        java.util.stream.IntStream.Builder builder42 = java.util.stream.IntStream.builder();
        ofInt40.forEachRemaining((java.util.function.IntConsumer) builder42);
        optionalInt31.ifPresent((java.util.function.IntConsumer) builder42);
        boolean boolean45 = ofInt20.tryAdvance((java.util.function.IntConsumer) builder42);
        intStream17.forEach((java.util.function.IntConsumer) builder42);
        java.util.function.IntPredicate intPredicate47 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = intStream17.anyMatch(intPredicate47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertNotNull(ofInt20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intStream24);
        org.junit.Assert.assertNotNull(ofInt25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(intStream30);
        org.junit.Assert.assertNotNull(optionalInt31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OptionalInt[10]" + "'", str32, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intStream39);
        org.junit.Assert.assertNotNull(ofInt40);
        org.junit.Assert.assertNull(intSpliterator41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        int[] intArray18 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer19 = intBuffer11.get(intArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        short short23 = byteBuffer21.getShort();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putChar('G');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer28 = byteBuffer27.asLongBuffer();
        short short29 = byteBuffer27.getShort();
        boolean boolean30 = byteBuffer21.equals((java.lang.Object) byteBuffer27);
        java.nio.IntBuffer intBuffer31 = byteBuffer21.asIntBuffer();
        java.lang.String str32 = intBuffer31.toString();
        java.nio.IntBuffer intBuffer34 = intBuffer31.put(722000000);
        int int35 = intBuffer19.compareTo(intBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(longBuffer28);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 0 + "'", short29 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intBuffer31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]" + "'", str32, "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]");
        org.junit.Assert.assertNotNull(intBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-4) + "'", int35 == (-4));
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator2 = intStream1.spliterator();
        java.util.function.IntPredicate intPredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = intStream1.noneMatch(intPredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intSpliterator2);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant7 = instant5.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime8 = java.nio.file.attribute.FileTime.from(instant5);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = instant5.query(periodTemporalQuery9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit12 = chronoField11.getBaseUnit();
        boolean boolean13 = instant5.isSupported(temporalUnit12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusNanos((long) (short) 100);
        boolean boolean22 = temporalUnit12.isSupportedBy((java.time.temporal.Temporal) localDateTime15);
        boolean boolean23 = temporalUnit12.isTimeBased();
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = localDate1.plus((long) 495000000, temporalUnit12);
        java.time.LocalDate localDate25 = java.time.LocalDate.now();
        java.time.LocalDate localDate26 = java.time.LocalDate.MIN;
        boolean boolean27 = localDate25.isEqual((java.time.chrono.ChronoLocalDate) localDate26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime31.withSecond((int) (byte) 0);
        java.time.LocalDate localDate34 = offsetDateTime31.toLocalDate();
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean36 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField35);
        boolean boolean37 = localDate25.isSupported((java.time.temporal.TemporalField) chronoField35);
        java.time.LocalDate localDate39 = localDate25.minusMonths(32L);
        java.time.chrono.ChronoPeriod chronoPeriod40 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate39);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField42.getBaseUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate44 = localDate1.plus((long) 413000000, temporalUnit43);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField11.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit12 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit12.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField35.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronoPeriod40);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(chronoLocalDate44);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("United Kingdom", "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "United Kingdom" + "'", str2, "United Kingdom");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiAlphaLower('4');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        int[] intArray18 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer19 = intBuffer11.get(intArray18);
        java.nio.IntBuffer intBuffer20 = intBuffer19.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = intBuffer19.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer19);
        org.junit.Assert.assertNotNull(intBuffer20);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("x-windows-iso2022jp", "Minute");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "x-windows-iso2022jp" + "'", str2, "x-windows-iso2022jp");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        boolean boolean4 = charBuffer1.hasArray();
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate6 = java.time.LocalDate.parse((java.lang.CharSequence) charBuffer1, dateTimeFormatter5);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap7 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.zone.ZoneRules zoneRules14 = zoneIdMap7.getOrDefault((java.lang.Object) 1.0d, zoneRules13);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration15 = zoneIdMap7.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration16 = zoneIdMap7.keys();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.lang.String str20 = locale17.getDisplayScript(locale19);
        java.util.Locale.setDefault(locale19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.zone.ZoneRules zoneRules30 = zoneIdMap7.getOrDefault((java.lang.Object) locale19, zoneRules29);
        float[] floatArray33 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer34 = java.nio.FloatBuffer.wrap(floatArray33);
        java.nio.FloatBuffer floatBuffer35 = floatBuffer34.compact();
        boolean boolean36 = zoneRules30.equals((java.lang.Object) floatBuffer34);
        java.nio.FloatBuffer floatBuffer37 = floatBuffer3.put(floatBuffer34);
        float[] floatArray38 = floatBuffer37.array();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertNotNull(zoneIdEnumeration15);
        org.junit.Assert.assertNotNull(zoneIdEnumeration16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GBR" + "'", str18, "GBR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatBuffer37);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[16.0, 21.0]");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.function.LongBinaryOperator longBinaryOperator3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong4 = longStream2.reduce(longBinaryOperator3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime49.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.ZonedDateTime zonedDateTime57 = offsetDateTime49.atZoneSameInstant((java.time.ZoneId) zoneOffset54);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime57.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime59 = zonedDateTime57.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime60 = zonedDateTime57.withEarlierOffsetAtOverlap();
        int int61 = zonedDateTime26.compareTo(localDateChronoZonedDateTime60);
        java.time.ZoneId zoneId62 = zonedDateTime26.getZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(zoneId62);
    }
}
